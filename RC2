script.Parent = nil
task.wait(0.5)
local load = coroutine.wrap(function()
	local compile = coroutine.wrap(function()
		local luaZ = {}
		local luaY = {}
		local luaX = {}
		local luaP = {}
		local luaU = {}
		local luaK = {}
		local size_size_t = 8
		
		local function lua_assert(test)
			if not test then error("assertion failed!") end
		end

		function luaZ:make_getS(buff)
			local b = buff
			return function()
				if not b then return nil end
				local data = b
				b = nil
				return data
			end
		end

		function luaZ:make_getF(source)
			local LUAL_BUFFERSIZE = 512
			local pos = 1

			return function() -- chunk reader anonymous function here
				local buff = source:sub(pos, pos + LUAL_BUFFERSIZE - 1)
				pos = math.min(#source + 1, pos + LUAL_BUFFERSIZE)
				return buff
			end
		end

		function luaZ:init(reader, data)
			if not reader then return end
			local z = {}
			z.reader = reader
			z.data = data or ""
			z.name = name
			if not data or data == "" then z.n = 0 else z.n = #data end
			z.p = 0
			return z
		end
		
		function luaZ:fill(z)
			local buff = z.reader()
			z.data = buff
			if not buff or buff == "" then return "EOZ" end
			z.n, z.p = #buff - 1, 1
			return string.sub(buff, 1, 1)
		end

		function luaZ:zgetc(z)
			local n, p = z.n, z.p + 1
			if n > 0 then
				z.n, z.p = n - 1, p
				return string.sub(z.data, p, p)
			else
				return self:fill(z)
			end
		end

		luaX.RESERVED = [[
TK_AND and
TK_BREAK break
TK_DO do
TK_ELSE else
TK_ELSEIF elseif
TK_END end
TK_FALSE false
TK_FOR for
TK_FUNCTION function
TK_IF if
TK_IN in
TK_LOCAL local
TK_NIL nil
TK_NOT not
TK_OR or
TK_REPEAT repeat
TK_RETURN return
TK_THEN then
TK_TRUE true
TK_UNTIL until
TK_WHILE while
TK_CONCAT ..
TK_DOTS ...
TK_EQ ==
TK_GE >=
TK_LE <=
TK_NE ~=
TK_NAME <name>
TK_NUMBER <number>
TK_STRING <string>
TK_EOS <eof>]]

		luaX.MAXSRC = 80
		luaX.MAX_INT = 2147483645
		luaX.LUA_QS = "'%s'"
		luaX.LUA_COMPAT_LSTR = 1

		function luaX:init()
			local tokens, enums = {}, {}
			for v in string.gmatch(self.RESERVED, "[^\n]+") do
				local _, _, tok, str = string.find(v, "(%S+)%s+(%S+)")
				tokens[tok] = str
				enums[str] = tok
			end
			self.tokens = tokens
			self.enums = enums
		end

		function luaX:chunkid(source, bufflen)
			local out
			local first = string.sub(source, 1, 1)
			if first == "=" then
				out = string.sub(source, 2, bufflen)
			else
				if first == "@" then
					source = string.sub(source, 2)
					bufflen = bufflen - #" '...' "
					local l = #source
					out = ""
					if l > bufflen then
						source = string.sub(source, 1 + l - bufflen) 
						out = out.."..."
					end
					out = out..source
				else 
					local len = string.find(source, "[\n\r]") 
					len = len and (len - 1) or #source
					bufflen = bufflen - #(" [string \"...\"] ")
					if len > bufflen then len = bufflen end
					out = "[string \""
					if len < #source then
						out = out..string.sub(source, 1, len).."..."
					else
						out = out..source
					end
					out = out.."\"]"
				end
			end
			return out
		end

		function luaX:token2str(ls, token)
			if string.sub(token, 1, 3) ~= "TK_" then
				if string.find(token, "%c") then
					return string.format("char(%d)", string.byte(token))
				end
				return token
			else
				return self.tokens[token]
			end
		end

		function luaX:lexerror(ls, msg, token)
			local function txtToken(ls, token)
				if token == "TK_NAME" or
					token == "TK_STRING" or
					token == "TK_NUMBER" then
					return ls.buff
				else
					return self:token2str(ls, token)
				end
			end
			local buff = self:chunkid(ls.source, self.MAXSRC)
			local msg = string.format("%s:%d: %s", buff, ls.linenumber, msg)
			if token then
				msg = string.format("%s near "..self.LUA_QS, msg, txtToken(ls, token))
			end
			error(msg)
		end

		function luaX:syntaxerror(ls, msg)
			self:lexerror(ls, msg, ls.t.token)
		end

		function luaX:currIsNewline(ls)
			return ls.current == "\n" or ls.current == "\r"
		end

		function luaX:inclinenumber(ls)
			local old = ls.current
			self:nextc(ls)
			if self:currIsNewline(ls) and ls.current ~= old then
				self:nextc(ls)
			end
			ls.linenumber = ls.linenumber + 1
			if ls.linenumber >= self.MAX_INT then
				self:syntaxerror(ls, "chunk has too many lines")
			end
		end

		function luaX:setinput(L, ls, z, source)
			if not ls then ls = {} end
			if not ls.lookahead then ls.lookahead = {} end
			if not ls.t then ls.t = {} end
			ls.decpoint = "."
			ls.L = L
			ls.lookahead.token = "TK_EOS" 
			ls.z = z
			ls.fs = nil
			ls.linenumber = 1
			ls.lastline = 1
			ls.source = source
			self:nextc(ls)
		end

		function luaX:check_next(ls, set)
			if not string.find(set, ls.current, 1, 1) then
				return false
			end
			self:save_and_next(ls)
			return true
		end

		function luaX:next(ls)
			ls.lastline = ls.linenumber
			if ls.lookahead.token ~= "TK_EOS" then
				-- this must be copy-by-value
				ls.t.seminfo = ls.lookahead.seminfo 
				ls.t.token = ls.lookahead.token
				ls.lookahead.token = "TK_EOS" 
			else
				ls.t.token = self:llex(ls, ls.t) 
			end
		end

		function luaX:lookahead(ls)

			ls.lookahead.token = self:llex(ls, ls.lookahead)
		end

		function luaX:nextc(ls)
			local c = luaZ:zgetc(ls.z)
			ls.current = c
			return c
		end

		function luaX:save(ls, c)
			local buff = ls.buff
			ls.buff = buff..c
		end

		function luaX:save_and_next(ls)
			self:save(ls, ls.current)
			return self:nextc(ls)
		end

		function luaX:str2d(s)
			local result = tonumber(s)
			if result then return result end
			if string.lower(string.sub(s, 1, 2)) == "0x" then
				result = tonumber(s, 16)
				if result then return result end
			end
			return nil
		end

		function luaX:buffreplace(ls, from, to)
			local result, buff = "", ls.buff
			for p = 1, #buff do
				local c = string.sub(buff, p, p)
				if c == from then c = to end
				result = result..c
			end
			ls.buff = result
		end

		function luaX:trydecpoint(ls, Token)
			local old = ls.decpoint
			self:buffreplace(ls, old, ls.decpoint)
			local seminfo = self:str2d(ls.buff)
			Token.seminfo = seminfo
			if not seminfo then
				self:buffreplace(ls, ls.decpoint, ".")
				self:lexerror(ls, "malformed number", "TK_NUMBER")
			end
		end

		function luaX:read_numeral(ls, Token)
			repeat
				self:save_and_next(ls)
			until string.find(ls.current, "%D") and ls.current ~= "."
			if self:check_next(ls, "Ee") then
				self:check_next(ls, "+-")
			end
			while string.find(ls.current, "^%w$") or ls.current == "_" do
				self:save_and_next(ls)
			end
			self:buffreplace(ls, ".", ls.decpoint)
			local seminfo = self:str2d(ls.buff)
			Token.seminfo = seminfo
			if not seminfo then
				self:trydecpoint(ls, Token) 
			end
		end
		
		function luaX:skip_sep(ls)
			local count = 0
			local s = ls.current
			self:save_and_next(ls)
			while ls.current == "=" do
				self:save_and_next(ls)
				count = count + 1
			end
			return (ls.current == s) and count or (-count) - 1
		end

		function luaX:read_long_string(ls, Token, sep)
			local cont = 0
			self:save_and_next(ls)
			if self:currIsNewline(ls) then
				self:inclinenumber(ls)
			end
			while true do
				local c = ls.current
				if c == "EOZ" then
					self:lexerror(ls, Token and "unfinished long string" or
						"unfinished long comment", "TK_EOS")
				elseif c == "[" then
					if self.LUA_COMPAT_LSTR then
						if self:skip_sep(ls) == sep then
							self:save_and_next(ls)
							cont = cont + 1
							if self.LUA_COMPAT_LSTR == 1 then
								if sep == 0 then
									self:lexerror(ls, "nesting of [[...]] is deprecated", "[")
								end
							end
						end
					end
				elseif c == "]" then
					if self:skip_sep(ls) == sep then
						self:save_and_next(ls)
						if self.LUA_COMPAT_LSTR and self.LUA_COMPAT_LSTR == 2 then
							cont = cont - 1
							if sep == 0 and cont >= 0 then break end
						end
						break
					end
				elseif self:currIsNewline(ls) then
					self:save(ls, "\n")
					self:inclinenumber(ls)
					if not Token then ls.buff = "" end
				else
					if Token then
						self:save_and_next(ls)
					else
						self:nextc(ls)
					end
				end
			end
			if Token then
				local p = 3 + sep
				Token.seminfo = string.sub(ls.buff, p, -p)
			end
		end

		function luaX:read_string(ls, del, Token)
			self:save_and_next(ls)
			while ls.current ~= del do
				local c = ls.current
				if c == "EOZ" then
					self:lexerror(ls, "unfinished string", "TK_EOS")
				elseif self:currIsNewline(ls) then
					self:lexerror(ls, "unfinished string", "TK_STRING")
				elseif c == "\\" then
					c = self:nextc(ls)
					if self:currIsNewline(ls) then 
						self:save(ls, "\n")
						self:inclinenumber(ls)
					elseif c ~= "EOZ" then
						local i = string.find("abfnrtv", c, 1, 1)
						if i then
							self:save(ls, string.sub("\a\b\f\n\r\t\v", i, i))
							self:nextc(ls)
						elseif not string.find(c, "%d") then
							self:save_and_next(ls)
						else
							c, i = 0, 0
							repeat
								c = 10 * c + ls.current
								self:nextc(ls)
								i = i + 1
							until i >= 3 or not string.find(ls.current, "%d")
							if c > 255 then
								self:lexerror(ls, "escape sequence too large", "TK_STRING")
							end
							self:save(ls, string.char(c))
						end
					end
				else
					self:save_and_next(ls)
				end
			end
			self:save_and_next(ls)
			Token.seminfo = string.sub(ls.buff, 2, -2)
		end

		function luaX:llex(ls, Token)
			ls.buff = ""
			while true do
				local c = ls.current
				if self:currIsNewline(ls) then
					self:inclinenumber(ls)
				elseif c == "-" then
					c = self:nextc(ls)
					if c ~= "-" then return "-" end
					local sep = -1
					if self:nextc(ls) == '[' then
						sep = self:skip_sep(ls)
						ls.buff = ""
					end
					if sep >= 0 then
						self:read_long_string(ls, nil, sep)
						ls.buff = ""
					else
						while not self:currIsNewline(ls) and ls.current ~= "EOZ" do
							self:nextc(ls)
						end
					end
				elseif c == "[" then
					local sep = self:skip_sep(ls)
					if sep >= 0 then
						self:read_long_string(ls, Token, sep)
						return "TK_STRING"
					elseif sep == -1 then
						return "["
					else
						self:lexerror(ls, "invalid long string delimiter", "TK_STRING")
					end
				elseif c == "=" then
					c = self:nextc(ls)
					if c ~= "=" then return "="
					else self:nextc(ls); return "TK_EQ" end
				elseif c == "<" then
					c = self:nextc(ls)
					if c ~= "=" then return "<"
					else self:nextc(ls); return "TK_LE" end
				elseif c == ">" then
					c = self:nextc(ls)
					if c ~= "=" then return ">"
					else self:nextc(ls); return "TK_GE" end
				elseif c == "~" then
					c = self:nextc(ls)
					if c ~= "=" then return "~"
					else self:nextc(ls); return "TK_NE" end
				elseif c == "\"" or c == "'" then
					self:read_string(ls, c, Token)
					return "TK_STRING"
				elseif c == "." then
					c = self:save_and_next(ls)
					if self:check_next(ls, ".") then
						if self:check_next(ls, ".") then
							return "TK_DOTS"
						else return "TK_CONCAT"
						end
					elseif not string.find(c, "%d") then
						return "."
					else
						self:read_numeral(ls, Token)
						return "TK_NUMBER"
					end
				elseif c == "EOZ" then
					return "TK_EOS"
				else
					if string.find(c, "%s") then
						self:nextc(ls)
					elseif string.find(c, "%d") then
						self:read_numeral(ls, Token)
						return "TK_NUMBER"
					elseif string.find(c, "[_%a]") then
						repeat
							c = self:save_and_next(ls)
						until c == "EOZ" or not string.find(c, "[_%w]")
						local ts = ls.buff
						local tok = self.enums[ts]
						if tok then return tok end
						Token.seminfo = ts
						return "TK_NAME"
					else
						self:nextc(ls)
						return c
					end
				end
			end
		end

		luaP.OpMode = { iABC = 0, iABx = 1, iAsBx = 2 }

		luaP.SIZE_C  = 9
		luaP.SIZE_B  = 9
		luaP.SIZE_Bx = luaP.SIZE_C + luaP.SIZE_B
		luaP.SIZE_A  = 8

		luaP.SIZE_OP = 6

		luaP.POS_OP = 0
		luaP.POS_A  = luaP.POS_OP + luaP.SIZE_OP
		luaP.POS_C  = luaP.POS_A + luaP.SIZE_A
		luaP.POS_B  = luaP.POS_C + luaP.SIZE_C
		luaP.POS_Bx = luaP.POS_C

		luaP.MAXARG_Bx  = math.ldexp(1, luaP.SIZE_Bx) - 1
		luaP.MAXARG_sBx = math.floor(luaP.MAXARG_Bx / 2)

		luaP.MAXARG_A = math.ldexp(1, luaP.SIZE_A) - 1
		luaP.MAXARG_B = math.ldexp(1, luaP.SIZE_B) - 1
		luaP.MAXARG_C = math.ldexp(1, luaP.SIZE_C) - 1

		function luaP:GET_OPCODE(i) return self.ROpCode[i.OP] end
		function luaP:SET_OPCODE(i, o) i.OP = self.OpCode[o] end

		function luaP:GETARG_A(i) return i.A end
		function luaP:SETARG_A(i, u) i.A = u end

		function luaP:GETARG_B(i) return i.B end
		function luaP:SETARG_B(i, b) i.B = b end

		function luaP:GETARG_C(i) return i.C end
		function luaP:SETARG_C(i, b) i.C = b end

		function luaP:GETARG_Bx(i) return i.Bx end
		function luaP:SETARG_Bx(i, b) i.Bx = b end

		function luaP:GETARG_sBx(i) return i.Bx - self.MAXARG_sBx end
		function luaP:SETARG_sBx(i, b) i.Bx = b + self.MAXARG_sBx end

		function luaP:CREATE_ABC(o,a,b,c)
			return {OP = self.OpCode[o], A = a, B = b, C = c}
		end

		function luaP:CREATE_ABx(o,a,bc)
			return {OP = self.OpCode[o], A = a, Bx = bc}
		end

		function luaP:CREATE_Inst(c)
			local o = c % 64
			c = (c - o) / 64
			local a = c % 256
			c = (c - a) / 256
			return self:CREATE_ABx(o, a, c)
		end

		function luaP:Instruction(i)
			if i.Bx then
				i.C = i.Bx % 512
				i.B = (i.Bx - i.C) / 512
			end
			local I = i.A * 64 + i.OP
			local c0 = I % 256
			I = i.C * 64 + (I - c0) / 256
			local c1 = I % 256
			I = i.B * 128 + (I - c1) / 256
			local c2 = I % 256
			local c3 = (I - c2) / 256
			return string.char(c0, c1, c2, c3)
		end

		function luaP:DecodeInst(x)
			local byte = string.byte
			local i = {}
			local I = byte(x, 1)
			local op = I % 64
			i.OP = op
			I = byte(x, 2) * 4 + (I - op) / 64
			local a = I % 256
			i.A = a
			I = byte(x, 3) * 4 + (I - a) / 256
			local c = I % 512
			i.C = c
			i.B = byte(x, 4) * 2 + (I - c) / 512
			local opmode = self.OpMode[tonumber(string.sub(self.opmodes[op + 1], 7, 7))]
			if opmode ~= "iABC" then
				i.Bx = i.B * 512 + i.C
			end
			return i
		end

		luaP.BITRK = math.ldexp(1, luaP.SIZE_B - 1)

		function luaP:ISK(x) return x >= self.BITRK end

		function luaP:INDEXK(r) return x - self.BITRK end

		luaP.MAXINDEXRK = luaP.BITRK - 1

		function luaP:RKASK(x) return x + self.BITRK end

		luaP.NO_REG = luaP.MAXARG_A

		luaP.opnames = {} 
		luaP.OpCode = {} 
		luaP.ROpCode = {} 
		
		local i = 0
		for v in string.gmatch([[
MOVE LOADK LOADBOOL LOADNIL GETUPVAL
GETGLOBAL GETTABLE SETGLOBAL SETUPVAL SETTABLE
NEWTABLE SELF ADD SUB MUL
DIV MOD POW UNM NOT
LEN CONCAT JMP EQ LT
LE TEST TESTSET CALL TAILCALL
RETURN FORLOOP FORPREP TFORLOOP SETLIST
CLOSE CLOSURE VARARG
]], "%S+") do
			local n = "OP_"..v
			luaP.opnames[i] = v
			luaP.OpCode[n] = i
			luaP.ROpCode[i] = n
			i = i + 1
		end
		luaP.NUM_OPCODES = i
		luaP.OpArgMask = { OpArgN = 0, OpArgU = 1, OpArgR = 2, OpArgK = 3 }

		function luaP:getOpMode(m)
			return self.opmodes[self.OpCode[m]] % 4
		end

		function luaP:getBMode(m)
			return math.floor(self.opmodes[self.OpCode[m]] / 16) % 4
		end

		function luaP:getCMode(m)
			return math.floor(self.opmodes[self.OpCode[m]] / 4) % 4
		end

		function luaP:testAMode(m)
			return math.floor(self.opmodes[self.OpCode[m]] / 64) % 2
		end

		function luaP:testTMode(m)
			return math.floor(self.opmodes[self.OpCode[m]] / 128)
		end

		luaP.LFIELDS_PER_FLUSH = 50

		local function opmode(t, a, b, c, m)
			local luaP = luaP
			return t * 128 + a * 64 +
				luaP.OpArgMask[b] * 16 + luaP.OpArgMask[c] * 4 + luaP.OpMode[m]
		end

		
		luaP.opmodes = {
			opmode(0, 1, "OpArgK", "OpArgN", "iABx"), 
			opmode(0, 1, "OpArgU", "OpArgU", "iABC"),  
			opmode(0, 1, "OpArgR", "OpArgN", "iABC"),    
			opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     
			opmode(0, 1, "OpArgK", "OpArgN", "iABx"),   
			opmode(0, 1, "OpArgR", "OpArgK", "iABC"),     
			opmode(0, 0, "OpArgK", "OpArgN", "iABx"),    
			opmode(0, 0, "OpArgU", "OpArgN", "iABC"),    
			opmode(0, 0, "OpArgK", "OpArgK", "iABC"),     
			opmode(0, 1, "OpArgU", "OpArgU", "iABC"),  
			opmode(0, 1, "OpArgR", "OpArgK", "iABC"),  
			opmode(0, 1, "OpArgK", "OpArgK", "iABC"),   
			opmode(0, 1, "OpArgK", "OpArgK", "iABC"),    
			opmode(0, 1, "OpArgK", "OpArgK", "iABC"),    
			opmode(0, 1, "OpArgK", "OpArgK", "iABC"),   
			opmode(0, 1, "OpArgK", "OpArgK", "iABC"),    
			opmode(0, 1, "OpArgK", "OpArgK", "iABC"),     
			opmode(0, 1, "OpArgR", "OpArgN", "iABC"),    
			opmode(0, 1, "OpArgR", "OpArgN", "iABC"),     
			opmode(0, 1, "OpArgR", "OpArgN", "iABC"),   
			opmode(0, 1, "OpArgR", "OpArgR", "iABC"),
			opmode(0, 0, "OpArgR", "OpArgN", "iAsBx"), 
			opmode(1, 0, "OpArgK", "OpArgK", "iABC"), 
			opmode(1, 0, "OpArgK", "OpArgK", "iABC"), 
			opmode(1, 0, "OpArgK", "OpArgK", "iABC"), 
			opmode(1, 1, "OpArgR", "OpArgU", "iABC"),   
			opmode(1, 1, "OpArgR", "OpArgU", "iABC"),   
			opmode(0, 1, "OpArgU", "OpArgU", "iABC"),  
			opmode(0, 1, "OpArgU", "OpArgU", "iABC"),  
			opmode(0, 0, "OpArgU", "OpArgN", "iABC"),   
			opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),  
			opmode(0, 1, "OpArgR", "OpArgN", "iAsBx"),   
			opmode(1, 0, "OpArgN", "OpArgU", "iABC"),    
			opmode(0, 0, "OpArgU", "OpArgU", "iABC"),   
			opmode(0, 0, "OpArgN", "OpArgN", "iABC"),     
			opmode(0, 1, "OpArgU", "OpArgN", "iABx"),  
			opmode(0, 1, "OpArgU", "OpArgN", "iABC"),     
		}

		luaP.opmodes[0] =
			opmode(0, 1, "OpArgR", "OpArgN", "iABC")

		luaU.LUA_SIGNATURE = "\27Lua"

		luaU.LUA_TNUMBER  = 3
		luaU.LUA_TSTRING  = 4
		luaU.LUA_TNIL     = 0
		luaU.LUA_TBOOLEAN = 1
		luaU.LUA_TNONE    = -1

		luaU.LUAC_VERSION    = 0x51    
		luaU.LUAC_FORMAT     = 0     
		luaU.LUAC_HEADERSIZE = 12   

		function luaU:make_setS()
			local buff = {}
			buff.data = ""
			local writer =
				function(s, buff)
					if not s then return 0 end
					buff.data = buff.data..s
					return 0
				end
			return writer, buff
		end

		function luaU:make_setF(filename)
			local buff = {}
			buff.h = io.open(filename, "wb")
			if not buff.h then return nil end
			local writer =
				function(s, buff)  
					if not buff.h then return 0 end
					if not s then
					if buff.h:close() then return 0 end
				else
					if buff.h:write(s) then return 0 end
				end
					return 1
				end
			return writer, buff
		end

		function luaU:ttype(o)
			local tt = type(o.value)
			if tt == "number" then return self.LUA_TNUMBER
			elseif tt == "string" then return self.LUA_TSTRING
			elseif tt == "nil" then return self.LUA_TNIL
			elseif tt == "boolean" then return self.LUA_TBOOLEAN
			else
				return self.LUA_TNONE
			end
		end

		function luaU:from_double(x)
			local function grab_byte(v)
				local c = v % 256
				return (v - c) / 256, string.char(c)
			end
			local sign = 0
			if x < 0 then sign = 1; x = -x end
			local mantissa, exponent = math.frexp(x)
			if x == 0 then 
				mantissa, exponent = 0, 0
			elseif x == 1/0 then
				mantissa, exponent = 0, 2047
			else
				mantissa = (mantissa * 2 - 1) * math.ldexp(0.5, 53)
				exponent = exponent + 1022
			end
			local v, byte = ""
			x = math.floor(mantissa)
			for i = 1,6 do
				x, byte = grab_byte(x); v = v..byte 
			end
			x, byte = grab_byte(exponent * 16 + x); v = v..byte
			x, byte = grab_byte(sign * 128 + x); v = v..byte 
			return v
		end

		function luaU:from_int(x)
			local v = ""
			x = math.floor(x)
			if x < 0 then x = 4294967296 + x end  
			for i = 1, 4 do
				local c = x % 256
				v = v..string.char(c); x = math.floor(x / 256)
			end
			return v
		end

		function luaU:DumpBlock(b, D)
			if D.status == 0 then
				D.status = D.write(b, D.data)
			end
		end

		function luaU:DumpChar(y, D)
			self:DumpBlock(string.char(y), D)
		end

		function luaU:DumpInt(x, D)
			self:DumpBlock(self:from_int(x), D)
		end

		function luaU:DumpSizeT(x, D)
			self:DumpBlock(self:from_int(x), D)
			if size_size_t == 8 then
				self:DumpBlock(self:from_int(0), D)
			end
		end

		function luaU:DumpNumber(x, D)
			self:DumpBlock(self:from_double(x), D)
		end

		function luaU:DumpString(s, D)
			if s == nil then
				self:DumpSizeT(0, D)
			else
				s = s.."\0"
				self:DumpSizeT(#s, D)
				self:DumpBlock(s, D)
			end
		end

		function luaU:DumpCode(f, D)
			local n = f.sizecode
			self:DumpInt(n, D)
			for i = 0, n - 1 do
				self:DumpBlock(luaP:Instruction(f.code[i]), D)
			end
		end

		function luaU:DumpConstants(f, D)
			local n = f.sizek
			self:DumpInt(n, D)
			for i = 0, n - 1 do
				local o = f.k[i] 
				local tt = self:ttype(o)
				self:DumpChar(tt, D)
				if tt == self.LUA_TNIL then
				elseif tt == self.LUA_TBOOLEAN then
					self:DumpChar(o.value and 1 or 0, D)
				elseif tt == self.LUA_TNUMBER then
					self:DumpNumber(o.value, D)
				elseif tt == self.LUA_TSTRING then
					self:DumpString(o.value, D)
				else

				end
			end
			n = f.sizep
			self:DumpInt(n, D)
			for i = 0, n - 1 do
				self:DumpFunction(f.p[i], f.source, D)
			end
		end

		function luaU:DumpDebug(f, D)
			local n
			n = D.strip and 0 or f.sizelineinfo        
			--was DumpVector
			self:DumpInt(n, D)
			for i = 0, n - 1 do
				self:DumpInt(f.lineinfo[i], D)
			end
			n = D.strip and 0 or f.sizelocvars      
			self:DumpInt(n, D)
			for i = 0, n - 1 do
				self:DumpString(f.locvars[i].varname, D)
				self:DumpInt(f.locvars[i].startpc, D)
				self:DumpInt(f.locvars[i].endpc, D)
			end
			n = D.strip and 0 or f.sizeupvalues     
			self:DumpInt(n, D)
			for i = 0, n - 1 do
				self:DumpString(f.upvalues[i], D)
			end
		end

		function luaU:DumpFunction(f, p, D)
			local source = f.source
			if source == p or D.strip then source = nil end
			self:DumpString(source, D)
			self:DumpInt(f.lineDefined, D)
			self:DumpInt(f.lastlinedefined, D)
			self:DumpChar(f.nups, D)
			self:DumpChar(f.numparams, D)
			self:DumpChar(f.is_vararg, D)
			self:DumpChar(f.maxstacksize, D)
			self:DumpCode(f, D)
			self:DumpConstants(f, D)
			self:DumpDebug(f, D)
		end

		function luaU:DumpHeader(D)
			local h = self:header()
			assert(#h == self.LUAC_HEADERSIZE)
			self:DumpBlock(h, D)
		end

		function luaU:header()
			local x = 1
			return self.LUA_SIGNATURE..
				string.char(
					self.LUAC_VERSION,
					self.LUAC_FORMAT,
					x,                  
					4,                    
					size_size_t,                
					4,                  
					8,                  
					0)                  
		end

		function luaU:dump(L, f, w, data, strip)
			local D = {} 
			D.L = L
			D.write = w
			D.data = data
			D.strip = strip
			D.status = 0
			self:DumpHeader(D)
			self:DumpFunction(f, nil, D)
			D.write(nil, D.data)
			return D.status
		end
		luaK.MAXSTACK = 250
		
		function luaK:ttisnumber(o)
			if o then return type(o.value) == "number" else return false end
		end
		function luaK:nvalue(o) return o.value end
		function luaK:setnilvalue(o) o.value = nil end
		function luaK:setsvalue(o, x) o.value = x end
		luaK.setnvalue = luaK.setsvalue
		luaK.sethvalue = luaK.setsvalue
		luaK.setbvalue = luaK.setsvalue

		function luaK:numadd(a, b) return a + b end
		function luaK:numsub(a, b) return a - b end
		function luaK:nummul(a, b) return a * b end
		function luaK:numdiv(a, b) return a / b end
		function luaK:nummod(a, b) return a % b end
		function luaK:numpow(a, b) return a ^ b end
		function luaK:numunm(a) return -a end
		function luaK:numisnan(a) return not a == a end

		luaK.NO_JUMP = -1

		luaK.BinOpr = {
			OPR_ADD = 0, OPR_SUB = 1, OPR_MUL = 2, OPR_DIV = 3, OPR_MOD = 4, OPR_POW = 5,
			OPR_CONCAT = 6,
			OPR_NE = 7, OPR_EQ = 8,
			OPR_LT = 9, OPR_LE = 10, OPR_GT = 11, OPR_GE = 12,
			OPR_AND = 13, OPR_OR = 14,
			OPR_NOBINOPR = 15,
		}

		luaK.UnOpr = {
			OPR_MINUS = 0, OPR_NOT = 1, OPR_LEN = 2, OPR_NOUNOPR = 3
		}

		function luaK:getcode(fs, e)
			return fs.f.code[e.info]
		end

		function luaK:codeAsBx(fs, o, A, sBx)
			return self:codeABx(fs, o, A, sBx + luaP.MAXARG_sBx)
		end

		------------------------------------------------------------------------
		-- set the expdesc e instruction for multiple returns, was a macro
		------------------------------------------------------------------------
		function luaK:setmultret(fs, e)
			self:setreturns(fs, e, luaY.LUA_MULTRET)
		end

		------------------------------------------------------------------------
		-- there is a jump if patch lists are not identical, was a macro
		-- * used in luaK:exp2reg(), luaK:exp2anyreg(), luaK:exp2val()
		------------------------------------------------------------------------
		function luaK:hasjumps(e)
			return e.t ~= e.f
		end

		------------------------------------------------------------------------
		-- true if the expression is a constant number (for constant folding)
		-- * used in constfolding(), infix()
		------------------------------------------------------------------------
		function luaK:isnumeral(e)
			return e.k == "VKNUM" and e.t == self.NO_JUMP and e.f == self.NO_JUMP
		end

		------------------------------------------------------------------------
		-- codes loading of nil, optimization done if consecutive locations
		-- * used in luaK:discharge2reg(), (lparser) luaY:adjust_assign()
		------------------------------------------------------------------------
		function luaK:_nil(fs, from, n)
			if fs.pc > fs.lasttarget then  -- no jumps to current position?
				if fs.pc == 0 then  -- function start?
					if from >= fs.nactvar then
						return  -- positions are already clean
					end
				else
					local previous = fs.f.code[fs.pc - 1]
					if luaP:GET_OPCODE(previous) == "OP_LOADNIL" then
						local pfrom = luaP:GETARG_A(previous)
						local pto = luaP:GETARG_B(previous)
						if pfrom <= from and from <= pto + 1 then  -- can connect both?
							if from + n - 1 > pto then
								luaP:SETARG_B(previous, from + n - 1)
							end
							return
						end
					end
				end
			end
			self:codeABC(fs, "OP_LOADNIL", from, from + n - 1, 0)  -- else no optimization
		end

		------------------------------------------------------------------------
		--
		-- * used in multiple locations
		------------------------------------------------------------------------
		function luaK:jump(fs)
			local jpc = fs.jpc  -- save list of jumps to here
			fs.jpc = self.NO_JUMP
			local j = self:codeAsBx(fs, "OP_JMP", 0, self.NO_JUMP)
			j = self:concat(fs, j, jpc)  -- keep them on hold
			return j
		end

		------------------------------------------------------------------------
		-- codes a RETURN instruction
		-- * used in luaY:close_func(), luaY:retstat()
		------------------------------------------------------------------------
		function luaK:ret(fs, first, nret)
			self:codeABC(fs, "OP_RETURN", first, nret + 1, 0)
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:jumponcond(), luaK:codecomp()
		------------------------------------------------------------------------
		function luaK:condjump(fs, op, A, B, C)
			self:codeABC(fs, op, A, B, C)
			return self:jump(fs)
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:patchlistaux(), luaK:concat()
		------------------------------------------------------------------------
		function luaK:fixjump(fs, pc, dest)
			local jmp = fs.f.code[pc]
			local offset = dest - (pc + 1)
			lua_assert(dest ~= self.NO_JUMP)
			if math.abs(offset) > luaP.MAXARG_sBx then
				luaX:syntaxerror(fs.ls, "control structure too long")
			end
			luaP:SETARG_sBx(jmp, offset)
		end

		------------------------------------------------------------------------
		-- returns current 'pc' and marks it as a jump target (to avoid wrong
		-- optimizations with consecutive instructions not in the same basic block).
		-- * used in multiple locations
		-- * fs.lasttarget tested only by luaK:_nil() when optimizing OP_LOADNIL
		------------------------------------------------------------------------
		function luaK:getlabel(fs)
			fs.lasttarget = fs.pc
			return fs.pc
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:need_value(), luaK:removevalues(), luaK:patchlistaux(),
		--   luaK:concat()
		------------------------------------------------------------------------
		function luaK:getjump(fs, pc)
			local offset = luaP:GETARG_sBx(fs.f.code[pc])
			if offset == self.NO_JUMP then  -- point to itself represents end of list
				return self.NO_JUMP  -- end of list
			else
				return (pc + 1) + offset  -- turn offset into absolute position
			end
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:need_value(), luaK:patchtestreg(), luaK:invertjump()
		------------------------------------------------------------------------
		function luaK:getjumpcontrol(fs, pc)
			local pi = fs.f.code[pc]
			local ppi = fs.f.code[pc - 1]
			if pc >= 1 and luaP:testTMode(luaP:GET_OPCODE(ppi)) ~= 0 then
				return ppi
			else
				return pi
			end
		end

		------------------------------------------------------------------------
		-- check whether list has any jump that do not produce a value
		-- (or produce an inverted value)
		-- * return value changed to boolean
		-- * used only in luaK:exp2reg()
		------------------------------------------------------------------------
		function luaK:need_value(fs, list)
			while list ~= self.NO_JUMP do
				local i = self:getjumpcontrol(fs, list)
				if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then return true end
				list = self:getjump(fs, list)
			end
			return false  -- not found
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:removevalues(), luaK:patchlistaux()
		------------------------------------------------------------------------
		function luaK:patchtestreg(fs, node, reg)
			local i = self:getjumpcontrol(fs, node)
			if luaP:GET_OPCODE(i) ~= "OP_TESTSET" then
				return false  -- cannot patch other instructions
			end
			if reg ~= luaP.NO_REG and reg ~= luaP:GETARG_B(i) then
				luaP:SETARG_A(i, reg)
			else  -- no register to put value or register already has the value
				-- due to use of a table as i, i cannot be replaced by another table
				-- so the following is required; there is no change to ARG_C
				luaP:SET_OPCODE(i, "OP_TEST")
				local b = luaP:GETARG_B(i)
				luaP:SETARG_A(i, b)
				luaP:SETARG_B(i, 0)
				-- *i = CREATE_ABC(OP_TEST, GETARG_B(*i), 0, GETARG_C(*i)); /* C */
			end
			return true
		end

		------------------------------------------------------------------------
		--
		-- * used only in luaK:codenot()
		------------------------------------------------------------------------
		function luaK:removevalues(fs, list)
			while list ~= self.NO_JUMP do
				self:patchtestreg(fs, list, luaP.NO_REG)
				list = self:getjump(fs, list)
			end
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:dischargejpc(), luaK:patchlist(), luaK:exp2reg()
		------------------------------------------------------------------------
		function luaK:patchlistaux(fs, list, vtarget, reg, dtarget)
			while list ~= self.NO_JUMP do
				local _next = self:getjump(fs, list)
				if self:patchtestreg(fs, list, reg) then
					self:fixjump(fs, list, vtarget)
				else
					self:fixjump(fs, list, dtarget)  -- jump to default target
				end
				list = _next
			end
		end

		------------------------------------------------------------------------
		--
		-- * used only in luaK:code()
		------------------------------------------------------------------------
		function luaK:dischargejpc(fs)
			self:patchlistaux(fs, fs.jpc, fs.pc, luaP.NO_REG, fs.pc)
			fs.jpc = self.NO_JUMP
		end

		------------------------------------------------------------------------
		--
		-- * used in (lparser) luaY:whilestat(), luaY:repeatstat(), luaY:forbody()
		------------------------------------------------------------------------
		function luaK:patchlist(fs, list, target)
			if target == fs.pc then
				self:patchtohere(fs, list)
			else
				lua_assert(target < fs.pc)
				self:patchlistaux(fs, list, target, luaP.NO_REG, target)
			end
		end

		------------------------------------------------------------------------
		--
		-- * used in multiple locations
		------------------------------------------------------------------------
		function luaK:patchtohere(fs, list)
			self:getlabel(fs)
			fs.jpc = self:concat(fs, fs.jpc, list)
		end

		------------------------------------------------------------------------
		-- * l1 was a pointer, now l1 is returned and callee assigns the value
		-- * used in multiple locations
		------------------------------------------------------------------------
		function luaK:concat(fs, l1, l2)
			if l2 == self.NO_JUMP then return l1
			elseif l1 == self.NO_JUMP then
				return l2
			else
				local list = l1
				local _next = self:getjump(fs, list)
				while _next ~= self.NO_JUMP do  -- find last element
					list = _next
					_next = self:getjump(fs, list)
				end
				self:fixjump(fs, list, l2)
			end
			return l1
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:reserveregs(), (lparser) luaY:forlist()
		------------------------------------------------------------------------
		function luaK:checkstack(fs, n)
			local newstack = fs.freereg + n
			if newstack > fs.f.maxstacksize then
				if newstack >= self.MAXSTACK then
					luaX:syntaxerror(fs.ls, "function or expression too complex")
				end
				fs.f.maxstacksize = newstack
			end
		end

		------------------------------------------------------------------------
		--
		-- * used in multiple locations
		------------------------------------------------------------------------
		function luaK:reserveregs(fs, n)
			self:checkstack(fs, n)
			fs.freereg = fs.freereg + n
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:freeexp(), luaK:dischargevars()
		------------------------------------------------------------------------
		function luaK:freereg(fs, reg)
			if not luaP:ISK(reg) and reg >= fs.nactvar then
				fs.freereg = fs.freereg - 1
				lua_assert(reg == fs.freereg)
			end
		end

		------------------------------------------------------------------------
		--
		-- * used in multiple locations
		------------------------------------------------------------------------
		function luaK:freeexp(fs, e)
			if e.k == "VNONRELOC" then
				self:freereg(fs, e.info)
			end
		end

		------------------------------------------------------------------------
		-- * TODO NOTE implementation is not 100% correct, since the assert fails
		-- * luaH_set, setobj deleted; direct table access used instead
		-- * used in luaK:stringK(), luaK:numberK(), luaK:boolK(), luaK:nilK()
		------------------------------------------------------------------------
		function luaK:addk(fs, k, v)
			local L = fs.L
			local idx = fs.h[k.value]
			--TValue *idx = luaH_set(L, fs->h, k); /* C */
			local f = fs.f
			if self:ttisnumber(idx) then
				--TODO this assert currently FAILS (last tested for 5.0.2)
				--lua_assert(fs.f.k[self:nvalue(idx)] == v)
				--lua_assert(luaO_rawequalObj(&fs->f->k[cast_int(nvalue(idx))], v)); /* C */
				return self:nvalue(idx)
			else -- constant not found; create a new entry
				idx = {}
				self:setnvalue(idx, fs.nk)
				fs.h[k.value] = idx
				-- setnvalue(idx, cast_num(fs->nk)); /* C */
				luaY:growvector(L, f.k, fs.nk, f.sizek, nil,
					luaP.MAXARG_Bx, "constant table overflow")
				-- loop to initialize empty f.k positions not required
				f.k[fs.nk] = v
				-- setobj(L, &f->k[fs->nk], v); /* C */
				-- luaC_barrier(L, f, v); /* GC */
				local nk = fs.nk
				fs.nk = fs.nk + 1
				return nk
			end

		end

		------------------------------------------------------------------------
		-- creates and sets a string object
		-- * used in (lparser) luaY:codestring(), luaY:singlevar()
		------------------------------------------------------------------------
		function luaK:stringK(fs, s)
			local o = {}  -- TValue
			self:setsvalue(o, s)
			return self:addk(fs, o, o)
		end

		------------------------------------------------------------------------
		-- creates and sets a number object
		-- * used in luaK:prefix() for negative (or negation of) numbers
		-- * used in (lparser) luaY:simpleexp(), luaY:fornum()
		------------------------------------------------------------------------
		function luaK:numberK(fs, r)
			local o = {}  -- TValue
			self:setnvalue(o, r)
			return self:addk(fs, o, o)
		end

		------------------------------------------------------------------------
		-- creates and sets a boolean object
		-- * used only in luaK:exp2RK()
		------------------------------------------------------------------------
		function luaK:boolK(fs, b)
			local o = {}  -- TValue
			self:setbvalue(o, b)
			return self:addk(fs, o, o)
		end

		------------------------------------------------------------------------
		-- creates and sets a nil object
		-- * used only in luaK:exp2RK()
		------------------------------------------------------------------------
		function luaK:nilK(fs)
			local k, v = {}, {}  -- TValue
			self:setnilvalue(v)
			-- cannot use nil as key; instead use table itself to represent nil
			self:sethvalue(k, fs.h)
			return self:addk(fs, k, v)
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:setmultret(), (lparser) luaY:adjust_assign()
		------------------------------------------------------------------------
		function luaK:setreturns(fs, e, nresults)
			if e.k == "VCALL" then  -- expression is an open function call?
				luaP:SETARG_C(self:getcode(fs, e), nresults + 1)
			elseif e.k == "VVARARG" then
				luaP:SETARG_B(self:getcode(fs, e), nresults + 1);
				luaP:SETARG_A(self:getcode(fs, e), fs.freereg);
				luaK:reserveregs(fs, 1)
			end
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:dischargevars(), (lparser) luaY:assignment()
		------------------------------------------------------------------------
		function luaK:setoneret(fs, e)
			if e.k == "VCALL" then  -- expression is an open function call?
				e.k = "VNONRELOC"
				e.info = luaP:GETARG_A(self:getcode(fs, e))
			elseif e.k == "VVARARG" then
				luaP:SETARG_B(self:getcode(fs, e), 2)
				e.k = "VRELOCABLE"  -- can relocate its simple result
			end
		end

		------------------------------------------------------------------------
		--
		-- * used in multiple locations
		------------------------------------------------------------------------
		function luaK:dischargevars(fs, e)
			local k = e.k
			if k == "VLOCAL" then
				e.k = "VNONRELOC"
			elseif k == "VUPVAL" then
				e.info = self:codeABC(fs, "OP_GETUPVAL", 0, e.info, 0)
				e.k = "VRELOCABLE"
			elseif k == "VGLOBAL" then
				e.info = self:codeABx(fs, "OP_GETGLOBAL", 0, e.info)
				e.k = "VRELOCABLE"
			elseif k == "VINDEXED" then
				self:freereg(fs, e.aux)
				self:freereg(fs, e.info)
				e.info = self:codeABC(fs, "OP_GETTABLE", 0, e.info, e.aux)
				e.k = "VRELOCABLE"
			elseif k == "VVARARG" or k == "VCALL" then
				self:setoneret(fs, e)
			else
				-- there is one value available (somewhere)
			end
		end

		------------------------------------------------------------------------
		--
		-- * used only in luaK:exp2reg()
		------------------------------------------------------------------------
		function luaK:code_label(fs, A, b, jump)
			self:getlabel(fs)  -- those instructions may be jump targets
			return self:codeABC(fs, "OP_LOADBOOL", A, b, jump)
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:discharge2anyreg(), luaK:exp2reg()
		------------------------------------------------------------------------
		function luaK:discharge2reg(fs, e, reg)
			self:dischargevars(fs, e)
			local k = e.k
			if k == "VNIL" then
				self:_nil(fs, reg, 1)
			elseif k == "VFALSE" or k == "VTRUE" then
				self:codeABC(fs, "OP_LOADBOOL", reg, (e.k == "VTRUE") and 1 or 0, 0)
			elseif k == "VK" then
				self:codeABx(fs, "OP_LOADK", reg, e.info)
			elseif k == "VKNUM" then
				self:codeABx(fs, "OP_LOADK", reg, self:numberK(fs, e.nval))
			elseif k == "VRELOCABLE" then
				local pc = self:getcode(fs, e)
				luaP:SETARG_A(pc, reg)
			elseif k == "VNONRELOC" then
				if reg ~= e.info then
					self:codeABC(fs, "OP_MOVE", reg, e.info, 0)
				end
			else
				lua_assert(e.k == "VVOID" or e.k == "VJMP")
				return  -- nothing to do...
			end
			e.info = reg
			e.k = "VNONRELOC"
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:jumponcond(), luaK:codenot()
		------------------------------------------------------------------------
		function luaK:discharge2anyreg(fs, e)
			if e.k ~= "VNONRELOC" then
				self:reserveregs(fs, 1)
				self:discharge2reg(fs, e, fs.freereg - 1)
			end
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:exp2nextreg(), luaK:exp2anyreg(), luaK:storevar()
		------------------------------------------------------------------------
		function luaK:exp2reg(fs, e, reg)
			self:discharge2reg(fs, e, reg)
			if e.k == "VJMP" then
				e.t = self:concat(fs, e.t, e.info)  -- put this jump in 't' list
			end
			if self:hasjumps(e) then
				local final  -- position after whole expression
				local p_f = self.NO_JUMP  -- position of an eventual LOAD false
				local p_t = self.NO_JUMP  -- position of an eventual LOAD true
				if self:need_value(fs, e.t) or self:need_value(fs, e.f) then
					local fj = (e.k == "VJMP") and self.NO_JUMP or self:jump(fs)
					p_f = self:code_label(fs, reg, 0, 1)
					p_t = self:code_label(fs, reg, 1, 0)
					self:patchtohere(fs, fj)
				end
				final = self:getlabel(fs)
				self:patchlistaux(fs, e.f, final, reg, p_f)
				self:patchlistaux(fs, e.t, final, reg, p_t)
			end
			e.f, e.t = self.NO_JUMP, self.NO_JUMP
			e.info = reg
			e.k = "VNONRELOC"
		end

		------------------------------------------------------------------------
		--
		-- * used in multiple locations
		------------------------------------------------------------------------
		function luaK:exp2nextreg(fs, e)
			self:dischargevars(fs, e)
			self:freeexp(fs, e)
			self:reserveregs(fs, 1)
			self:exp2reg(fs, e, fs.freereg - 1)
		end

		------------------------------------------------------------------------
		--
		-- * used in multiple locations
		------------------------------------------------------------------------
		function luaK:exp2anyreg(fs, e)
			self:dischargevars(fs, e)
			if e.k == "VNONRELOC" then
				if not self:hasjumps(e) then  -- exp is already in a register
					return e.info
				end
				if e.info >= fs.nactvar then  -- reg. is not a local?
					self:exp2reg(fs, e, e.info)  -- put value on it
					return e.info
				end
			end
			self:exp2nextreg(fs, e)  -- default
			return e.info
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:exp2RK(), luaK:prefix(), luaK:posfix()
		-- * used in (lparser) luaY:yindex()
		------------------------------------------------------------------------
		function luaK:exp2val(fs, e)
			if self:hasjumps(e) then
				self:exp2anyreg(fs, e)
			else
				self:dischargevars(fs, e)
			end
		end

		------------------------------------------------------------------------
		--
		-- * used in multiple locations
		------------------------------------------------------------------------
		function luaK:exp2RK(fs, e)
			self:exp2val(fs, e)
			local k = e.k
			if k == "VKNUM" or k == "VTRUE" or k == "VFALSE" or k == "VNIL" then
				if fs.nk <= luaP.MAXINDEXRK then  -- constant fit in RK operand?
					-- converted from a 2-deep ternary operator expression
					if e.k == "VNIL" then
						e.info = self:nilK(fs)
					else
						e.info = (e.k == "VKNUM") and self:numberK(fs, e.nval)
							or self:boolK(fs, e.k == "VTRUE")
					end
					e.k = "VK"
					return luaP:RKASK(e.info)
				end
			elseif k == "VK" then
				if e.info <= luaP.MAXINDEXRK then  -- constant fit in argC?
					return luaP:RKASK(e.info)
				end
			else
				-- default
			end
			-- not a constant in the right range: put it in a register
			return self:exp2anyreg(fs, e)
		end

		------------------------------------------------------------------------
		--
		-- * used in (lparser) luaY:assignment(), luaY:localfunc(), luaY:funcstat()
		------------------------------------------------------------------------
		function luaK:storevar(fs, var, ex)
			local k = var.k
			if k == "VLOCAL" then
				self:freeexp(fs, ex)
				self:exp2reg(fs, ex, var.info)
				return
			elseif k == "VUPVAL" then
				local e = self:exp2anyreg(fs, ex)
				self:codeABC(fs, "OP_SETUPVAL", e, var.info, 0)
			elseif k == "VGLOBAL" then
				local e = self:exp2anyreg(fs, ex)
				self:codeABx(fs, "OP_SETGLOBAL", e, var.info)
			elseif k == "VINDEXED" then
				local e = self:exp2RK(fs, ex)
				self:codeABC(fs, "OP_SETTABLE", var.info, var.aux, e)
			else
				lua_assert(0)  -- invalid var kind to store
			end
			self:freeexp(fs, ex)
		end

		------------------------------------------------------------------------
		--
		-- * used only in (lparser) luaY:primaryexp()
		------------------------------------------------------------------------
		function luaK:_self(fs, e, key)
			self:exp2anyreg(fs, e)
			self:freeexp(fs, e)
			local func = fs.freereg
			self:reserveregs(fs, 2)
			self:codeABC(fs, "OP_SELF", func, e.info, self:exp2RK(fs, key))
			self:freeexp(fs, key)
			e.info = func
			e.k = "VNONRELOC"
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:goiftrue(), luaK:codenot()
		------------------------------------------------------------------------
		function luaK:invertjump(fs, e)
			local pc = self:getjumpcontrol(fs, e.info)
			lua_assert(luaP:testTMode(luaP:GET_OPCODE(pc)) ~= 0 and
				luaP:GET_OPCODE(pc) ~= "OP_TESTSET" and
				luaP:GET_OPCODE(pc) ~= "OP_TEST")
			luaP:SETARG_A(pc, (luaP:GETARG_A(pc) == 0) and 1 or 0)
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:goiftrue(), luaK:goiffalse()
		------------------------------------------------------------------------
		function luaK:jumponcond(fs, e, cond)
			if e.k == "VRELOCABLE" then
				local ie = self:getcode(fs, e)
				if luaP:GET_OPCODE(ie) == "OP_NOT" then
					fs.pc = fs.pc - 1  -- remove previous OP_NOT
					return self:condjump(fs, "OP_TEST", luaP:GETARG_B(ie), 0, cond and 0 or 1)
				end
				-- else go through
			end
			self:discharge2anyreg(fs, e)
			self:freeexp(fs, e)
			return self:condjump(fs, "OP_TESTSET", luaP.NO_REG, e.info, cond and 1 or 0)
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:infix(), (lparser) luaY:cond()
		------------------------------------------------------------------------
		function luaK:goiftrue(fs, e)
			local pc  -- pc of last jump
			self:dischargevars(fs, e)
			local k = e.k
			if k == "VK" or k == "VKNUM" or k == "VTRUE" then
				pc = self.NO_JUMP  -- always true; do nothing
			elseif k == "VFALSE" then
				pc = self:jump(fs)  -- always jump
			elseif k == "VJMP" then
				self:invertjump(fs, e)
				pc = e.info
			else
				pc = self:jumponcond(fs, e, false)
			end
			e.f = self:concat(fs, e.f, pc)  -- insert last jump in `f' list
			self:patchtohere(fs, e.t)
			e.t = self.NO_JUMP
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:infix()
		------------------------------------------------------------------------
		function luaK:goiffalse(fs, e)
			local pc  -- pc of last jump
			self:dischargevars(fs, e)
			local k = e.k
			if k == "VNIL" or k == "VFALSE"then
				pc = self.NO_JUMP  -- always false; do nothing
			elseif k == "VTRUE" then
				pc = self:jump(fs)  -- always jump
			elseif k == "VJMP" then
				pc = e.info
			else
				pc = self:jumponcond(fs, e, true)
			end
			e.t = self:concat(fs, e.t, pc)  -- insert last jump in `t' list
			self:patchtohere(fs, e.f)
			e.f = self.NO_JUMP
		end

		------------------------------------------------------------------------
		--
		-- * used only in luaK:prefix()
		------------------------------------------------------------------------
		function luaK:codenot(fs, e)
			self:dischargevars(fs, e)
			local k = e.k
			if k == "VNIL" or k == "VFALSE" then
				e.k = "VTRUE"
			elseif k == "VK" or k == "VKNUM" or k == "VTRUE" then
				e.k = "VFALSE"
			elseif k == "VJMP" then
				self:invertjump(fs, e)
			elseif k == "VRELOCABLE" or k == "VNONRELOC" then
				self:discharge2anyreg(fs, e)
				self:freeexp(fs, e)
				e.info = self:codeABC(fs, "OP_NOT", 0, e.info, 0)
				e.k = "VRELOCABLE"
			else
				lua_assert(0)  -- cannot happen
			end
			-- interchange true and false lists
			e.f, e.t = e.t, e.f
			self:removevalues(fs, e.f)
			self:removevalues(fs, e.t)
		end

		------------------------------------------------------------------------
		--
		-- * used in (lparser) luaY:field(), luaY:primaryexp()
		------------------------------------------------------------------------
		function luaK:indexed(fs, t, k)
			t.aux = self:exp2RK(fs, k)
			t.k = "VINDEXED"
		end

		------------------------------------------------------------------------
		--
		-- * used only in luaK:codearith()
		------------------------------------------------------------------------
		function luaK:constfolding(op, e1, e2)
			local r
			if not self:isnumeral(e1) or not self:isnumeral(e2) then return false end
			local v1 = e1.nval
			local v2 = e2.nval
			if op == "OP_ADD" then
				r = self:numadd(v1, v2)
			elseif op == "OP_SUB" then
				r = self:numsub(v1, v2)
			elseif op == "OP_MUL" then
				r = self:nummul(v1, v2)
			elseif op == "OP_DIV" then
				if v2 == 0 then return false end  -- do not attempt to divide by 0
				r = self:numdiv(v1, v2)
			elseif op == "OP_MOD" then
				if v2 == 0 then return false end  -- do not attempt to divide by 0
				r = self:nummod(v1, v2)
			elseif op == "OP_POW" then
				r = self:numpow(v1, v2)
			elseif op == "OP_UNM" then
				r = self:numunm(v1)
			elseif op == "OP_LEN" then
				return false  -- no constant folding for 'len'
			else
				lua_assert(0)
				r = 0
			end
			if self:numisnan(r) then return false end  -- do not attempt to produce NaN
			e1.nval = r
			return true
		end

		------------------------------------------------------------------------
		--
		-- * used in luaK:prefix(), luaK:posfix()
		------------------------------------------------------------------------
		function luaK:codearith(fs, op, e1, e2)
			if self:constfolding(op, e1, e2) then
				return
			else
				local o2 = (op ~= "OP_UNM" and op ~= "OP_LEN") and self:exp2RK(fs, e2) or 0
				local o1 = self:exp2RK(fs, e1)
				if o1 > o2 then
					self:freeexp(fs, e1)
					self:freeexp(fs, e2)
				else
					self:freeexp(fs, e2)
					self:freeexp(fs, e1)
				end
				e1.info = self:codeABC(fs, op, 0, o1, o2)
				e1.k = "VRELOCABLE"
			end
		end

		------------------------------------------------------------------------
		--
		-- * used only in luaK:posfix()
		------------------------------------------------------------------------
		function luaK:codecomp(fs, op, cond, e1, e2)
			local o1 = self:exp2RK(fs, e1)
			local o2 = self:exp2RK(fs, e2)
			self:freeexp(fs, e2)
			self:freeexp(fs, e1)
			if cond == 0 and op ~= "OP_EQ" then
				-- exchange args to replace by `<' or `<='
				o1, o2 = o2, o1  -- o1 <==> o2
				cond = 1
			end
			e1.info = self:condjump(fs, op, cond, o1, o2)
			e1.k = "VJMP"
		end

		------------------------------------------------------------------------
		--
		-- * used only in (lparser) luaY:subexpr()
		------------------------------------------------------------------------
		function luaK:prefix(fs, op, e)
			local e2 = {}  -- expdesc
			e2.t, e2.f = self.NO_JUMP, self.NO_JUMP
			e2.k = "VKNUM"
			e2.nval = 0
			if op == "OPR_MINUS" then
				if not self:isnumeral(e) then
					self:exp2anyreg(fs, e)  -- cannot operate on non-numeric constants
				end
				self:codearith(fs, "OP_UNM", e, e2)
			elseif op == "OPR_NOT" then
				self:codenot(fs, e)
			elseif op == "OPR_LEN" then
				self:exp2anyreg(fs, e)  -- cannot operate on constants
				self:codearith(fs, "OP_LEN", e, e2)
			else
				lua_assert(0)
			end
		end

		------------------------------------------------------------------------
		--
		-- * used only in (lparser) luaY:subexpr()
		------------------------------------------------------------------------
		function luaK:infix(fs, op, v)
			if op == "OPR_AND" then
				self:goiftrue(fs, v)
			elseif op == "OPR_OR" then
				self:goiffalse(fs, v)
			elseif op == "OPR_CONCAT" then
				self:exp2nextreg(fs, v)  -- operand must be on the 'stack'
			elseif op == "OPR_ADD" or op == "OPR_SUB" or
				op == "OPR_MUL" or op == "OPR_DIV" or
				op == "OPR_MOD" or op == "OPR_POW" then
				if not self:isnumeral(v) then self:exp2RK(fs, v) end
			else
				self:exp2RK(fs, v)
			end
		end

		------------------------------------------------------------------------
		--
		-- * used only in (lparser) luaY:subexpr()
		------------------------------------------------------------------------
		-- table lookups to simplify testing
		luaK.arith_op = {
			OPR_ADD = "OP_ADD", OPR_SUB = "OP_SUB", OPR_MUL = "OP_MUL",
			OPR_DIV = "OP_DIV", OPR_MOD = "OP_MOD", OPR_POW = "OP_POW",
		}
		luaK.comp_op = {
			OPR_EQ = "OP_EQ", OPR_NE = "OP_EQ", OPR_LT = "OP_LT",
			OPR_LE = "OP_LE", OPR_GT = "OP_LT", OPR_GE = "OP_LE",
		}
		luaK.comp_cond = {
			OPR_EQ = 1, OPR_NE = 0, OPR_LT = 1,
			OPR_LE = 1, OPR_GT = 0, OPR_GE = 0,
		}
		function luaK:posfix(fs, op, e1, e2)
			-- needed because e1 = e2 doesn't copy values...
			-- * in 5.0.x, only k/info/aux/t/f copied, t for AND, f for OR
			--   but here, all elements are copied for completeness' sake
			local function copyexp(e1, e2)
				e1.k = e2.k
				e1.info = e2.info; e1.aux = e2.aux
				e1.nval = e2.nval
				e1.t = e2.t; e1.f = e2.f
			end
			if op == "OPR_AND" then
				lua_assert(e1.t == self.NO_JUMP)  -- list must be closed
				self:dischargevars(fs, e2)
				e2.f = self:concat(fs, e2.f, e1.f)
				copyexp(e1, e2)
			elseif op == "OPR_OR" then
				lua_assert(e1.f == self.NO_JUMP)  -- list must be closed
				self:dischargevars(fs, e2)
				e2.t = self:concat(fs, e2.t, e1.t)
				copyexp(e1, e2)
			elseif op == "OPR_CONCAT" then
				self:exp2val(fs, e2)
				if e2.k == "VRELOCABLE" and luaP:GET_OPCODE(self:getcode(fs, e2)) == "OP_CONCAT" then
					lua_assert(e1.info == luaP:GETARG_B(self:getcode(fs, e2)) - 1)
					self:freeexp(fs, e1)
					luaP:SETARG_B(self:getcode(fs, e2), e1.info)
					e1.k = "VRELOCABLE"
					e1.info = e2.info
				else
					self:exp2nextreg(fs, e2)  -- operand must be on the 'stack'
					self:codearith(fs, "OP_CONCAT", e1, e2)
				end
			else
				-- the following uses a table lookup in place of conditionals
				local arith = self.arith_op[op]
				if arith then
					self:codearith(fs, arith, e1, e2)
				else
					local comp = self.comp_op[op]
					if comp then
						self:codecomp(fs, comp, self.comp_cond[op], e1, e2)
					else
						lua_assert(0)
					end
				end--if arith
			end--if op
		end

		------------------------------------------------------------------------
		-- adjusts debug information for last instruction written, in order to
		-- change the line where item comes into existence
		-- * used in (lparser) luaY:funcargs(), luaY:forbody(), luaY:funcstat()
		------------------------------------------------------------------------
		function luaK:fixline(fs, line)
			fs.f.lineinfo[fs.pc - 1] = line
		end

		------------------------------------------------------------------------
		-- general function to write an instruction into the instruction buffer,
		-- sets debug information too
		-- * used in luaK:codeABC(), luaK:codeABx()
		-- * called directly by (lparser) luaY:whilestat()
		------------------------------------------------------------------------
		function luaK:code(fs, i, line)
			local f = fs.f
			self:dischargejpc(fs)  -- 'pc' will change
			-- put new instruction in code array
			luaY:growvector(fs.L, f.code, fs.pc, f.sizecode, nil,
				luaY.MAX_INT, "code size overflow")
			f.code[fs.pc] = i
			-- save corresponding line information
			luaY:growvector(fs.L, f.lineinfo, fs.pc, f.sizelineinfo, nil,
				luaY.MAX_INT, "code size overflow")
			f.lineinfo[fs.pc] = line
			local pc = fs.pc
			fs.pc = fs.pc + 1
			return pc
		end

		------------------------------------------------------------------------
		-- writes an instruction of type ABC
		-- * calls luaK:code()
		------------------------------------------------------------------------
		function luaK:codeABC(fs, o, a, b, c)
			lua_assert(luaP:getOpMode(o) == luaP.OpMode.iABC)
			lua_assert(luaP:getBMode(o) ~= luaP.OpArgMask.OpArgN or b == 0)
			lua_assert(luaP:getCMode(o) ~= luaP.OpArgMask.OpArgN or c == 0)
			return self:code(fs, luaP:CREATE_ABC(o, a, b, c), fs.ls.lastline)
		end

		------------------------------------------------------------------------
		-- writes an instruction of type ABx
		-- * calls luaK:code(), called by luaK:codeAsBx()
		------------------------------------------------------------------------
		function luaK:codeABx(fs, o, a, bc)
			lua_assert(luaP:getOpMode(o) == luaP.OpMode.iABx or
				luaP:getOpMode(o) == luaP.OpMode.iAsBx)
			lua_assert(luaP:getCMode(o) == luaP.OpArgMask.OpArgN)
			return self:code(fs, luaP:CREATE_ABx(o, a, bc), fs.ls.lastline)
		end

		------------------------------------------------------------------------
		--
		-- * used in (lparser) luaY:closelistfield(), luaY:lastlistfield()
		------------------------------------------------------------------------
		function luaK:setlist(fs, base, nelems, tostore)
			local c = math.floor((nelems - 1)/luaP.LFIELDS_PER_FLUSH) + 1
			local b = (tostore == luaY.LUA_MULTRET) and 0 or tostore
			lua_assert(tostore ~= 0)
			if c <= luaP.MAXARG_C then
				self:codeABC(fs, "OP_SETLIST", base, b, c)
			else
				self:codeABC(fs, "OP_SETLIST", base, b, 0)
				self:code(fs, luaP:CREATE_Inst(c), fs.ls.lastline)
			end
			fs.freereg = base + 1  -- free registers with list values
		end




		--dofile("lparser.lua")

--[[--------------------------------------------------------------------
-- Expression descriptor
-- * expkind changed to string constants; luaY:assignment was the only
--   function to use a relational operator with this enumeration
-- VVOID       -- no value
-- VNIL        -- no value
-- VTRUE       -- no value
-- VFALSE      -- no value
-- VK          -- info = index of constant in 'k'
-- VKNUM       -- nval = numerical value
-- VLOCAL      -- info = local register
-- VUPVAL,     -- info = index of upvalue in 'upvalues'
-- VGLOBAL     -- info = index of table; aux = index of global name in 'k'
-- VINDEXED    -- info = table register; aux = index register (or 'k')
-- VJMP        -- info = instruction pc
-- VRELOCABLE  -- info = instruction pc
-- VNONRELOC   -- info = result register
-- VCALL       -- info = instruction pc
-- VVARARG     -- info = instruction pc
} ----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- * expdesc in Lua 5.1.x has a union u and another struct s; this Lua
--   implementation ignores all instances of u and s usage
-- struct expdesc:
--   k  -- (enum: expkind)
--   info, aux -- (int, int)
--   nval -- (lua_Number)
--   t  -- patch list of 'exit when true'
--   f  -- patch list of 'exit when false'
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct upvaldesc:
--   k  -- (lu_byte)
--   info -- (lu_byte)
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- state needed to generate code for a given function
-- struct FuncState:
--   f  -- current function header (table: Proto)
--   h  -- table to find (and reuse) elements in 'k' (table: Table)
--   prev  -- enclosing function (table: FuncState)
--   ls  -- lexical state (table: LexState)
--   L  -- copy of the Lua state (table: lua_State)
--   bl  -- chain of current blocks (table: BlockCnt)
--   pc  -- next position to code (equivalent to 'ncode')
--   lasttarget   -- 'pc' of last 'jump target'
--   jpc  -- list of pending jumps to 'pc'
--   freereg  -- first free register
--   nk  -- number of elements in 'k'
--   np  -- number of elements in 'p'
--   nlocvars  -- number of elements in 'locvars'
--   nactvar  -- number of active local variables
--   upvalues[LUAI_MAXUPVALUES]  -- upvalues (table: upvaldesc)
--   actvar[LUAI_MAXVARS]  -- declared-variable stack
----------------------------------------------------------------------]]

		------------------------------------------------------------------------
		-- constants used by parser
		-- * picks up duplicate values from luaX if required
		------------------------------------------------------------------------
		luaY.LUA_QS = luaX.LUA_QS or "'%s'"  -- (from luaconf.h)

		luaY.SHRT_MAX = 32767 -- (from <limits.h>)
		luaY.LUAI_MAXVARS = 200  -- (luaconf.h)
		luaY.LUAI_MAXUPVALUES = 60  -- (luaconf.h)
		luaY.MAX_INT = luaX.MAX_INT or 2147483645  -- (from llimits.h)
		-- * INT_MAX-2 for 32-bit systems
		luaY.LUAI_MAXCCALLS = 200  -- (from luaconf.h)

		luaY.VARARG_HASARG = 1  -- (from lobject.h)
		-- NOTE: HASARG_MASK is value-specific
		luaY.HASARG_MASK = 2 -- this was added for a bitop in parlist()
		luaY.VARARG_ISVARARG = 2
		-- NOTE: there is some value-specific code that involves VARARG_NEEDSARG
		luaY.VARARG_NEEDSARG = 4

		luaY.LUA_MULTRET = -1  -- (lua.h)

--[[--------------------------------------------------------------------
-- other functions
----------------------------------------------------------------------]]

		------------------------------------------------------------------------
		-- LUA_QL describes how error messages quote program elements.
		-- CHANGE it if you want a different appearance. (from luaconf.h)
		------------------------------------------------------------------------
		function luaY:LUA_QL(x)
			return "'"..x.."'"
		end

		------------------------------------------------------------------------
		-- this is a stripped-down luaM_growvector (from lmem.h) which is a
		-- macro based on luaM_growaux (in lmem.c); all the following does is
		-- reproduce the size limit checking logic of the original function
		-- so that error behaviour is identical; all arguments preserved for
		-- convenience, even those which are unused
		-- * set the t field to nil, since this originally does a sizeof(t)
		-- * size (originally a pointer) is never updated, their final values
		--   are set by luaY:close_func(), so overall things should still work
		------------------------------------------------------------------------
		function luaY:growvector(L, v, nelems, size, t, limit, e)
			if nelems >= limit then
				error(e)  -- was luaG_runerror
			end
		end

		------------------------------------------------------------------------
		-- initialize a new function prototype structure (from lfunc.c)
		-- * used only in open_func()
		------------------------------------------------------------------------
		function luaY:newproto(L)
			local f = {} -- Proto
			-- luaC_link(L, obj2gco(f), LUA_TPROTO); /* GC */
			f.k = {}
			f.sizek = 0
			f.p = {}
			f.sizep = 0
			f.code = {}
			f.sizecode = 0
			f.sizelineinfo = 0
			f.sizeupvalues = 0
			f.nups = 0
			f.upvalues = {}
			f.numparams = 0
			f.is_vararg = 0
			f.maxstacksize = 0
			f.lineinfo = {}
			f.sizelocvars = 0
			f.locvars = {}
			f.lineDefined = 0
			f.lastlinedefined = 0
			f.source = nil
			return f
		end

		------------------------------------------------------------------------
		-- converts an integer to a "floating point byte", represented as
		-- (eeeeexxx), where the real value is (1xxx) * 2^(eeeee - 1) if
		-- eeeee != 0 and (xxx) otherwise.
		------------------------------------------------------------------------
		function luaY:int2fb(x)
			local e = 0  -- exponent
			while x >= 16 do
				x = math.floor((x + 1) / 2)
				e = e + 1
			end
			if x < 8 then
				return x
			else
				return ((e + 1) * 8) + (x - 8)
			end
		end

--[[--------------------------------------------------------------------
-- parser functions
----------------------------------------------------------------------]]

		------------------------------------------------------------------------
		-- true of the kind of expression produces multiple return values
		------------------------------------------------------------------------
		function luaY:hasmultret(k)
			return k == "VCALL" or k == "VVARARG"
		end

		------------------------------------------------------------------------
		-- convenience function to access active local i, returns entry
		------------------------------------------------------------------------
		function luaY:getlocvar(fs, i)
			return fs.f.locvars[ fs.actvar[i] ]
		end

		------------------------------------------------------------------------
		-- check a limit, string m provided as an error message
		------------------------------------------------------------------------
		function luaY:checklimit(fs, v, l, m)
			if v > l then self:errorlimit(fs, l, m) end
		end

--[[--------------------------------------------------------------------
-- nodes for block list (list of active blocks)
-- struct BlockCnt:
--   previous  -- chain (table: BlockCnt)
--   breaklist  -- list of jumps out of this loop
--   nactvar  -- # active local variables outside the breakable structure
--   upval  -- true if some variable in the block is an upvalue (boolean)
--   isbreakable  -- true if 'block' is a loop (boolean)
----------------------------------------------------------------------]]

		------------------------------------------------------------------------
		-- prototypes for recursive non-terminal functions
		------------------------------------------------------------------------
		-- prototypes deleted; not required in Lua

		------------------------------------------------------------------------
		-- reanchor if last token is has a constant string, see close_func()
		-- * used only in close_func()
		------------------------------------------------------------------------
		function luaY:anchor_token(ls)
			if ls.t.token == "TK_NAME" or ls.t.token == "TK_STRING" then
				-- not relevant to Lua implementation of parser
				-- local ts = ls.t.seminfo
				-- luaX_newstring(ls, getstr(ts), ts->tsv.len); /* C */
			end
		end

		------------------------------------------------------------------------
		-- throws a syntax error if token expected is not there
		------------------------------------------------------------------------
		function luaY:error_expected(ls, token)
			luaX:syntaxerror(ls,
				string.format(self.LUA_QS.." expected", luaX:token2str(ls, token)))
		end

		------------------------------------------------------------------------
		-- prepares error message for display, for limits exceeded
		-- * used only in checklimit()
		------------------------------------------------------------------------
		function luaY:errorlimit(fs, limit, what)
			local msg = (fs.f.linedefined == 0) and
				string.format("main function has more than %d %s", limit, what) or
				string.format("function at line %d has more than %d %s",
					fs.f.linedefined, limit, what)
			luaX:lexerror(fs.ls, msg, 0)
		end

		------------------------------------------------------------------------
		-- tests for a token, returns outcome
		-- * return value changed to boolean
		------------------------------------------------------------------------
		function luaY:testnext(ls, c)
			if ls.t.token == c then
				luaX:next(ls)
				return true
			else
				return false
			end
		end

		------------------------------------------------------------------------
		-- check for existence of a token, throws error if not found
		------------------------------------------------------------------------
		function luaY:check(ls, c)
			if ls.t.token ~= c then
				self:error_expected(ls, c)
			end
		end

		------------------------------------------------------------------------
		-- verify existence of a token, then skip it
		------------------------------------------------------------------------
		function luaY:checknext(ls, c)
			self:check(ls, c)
			luaX:next(ls)
		end

		------------------------------------------------------------------------
		-- throws error if condition not matched
		------------------------------------------------------------------------
		function luaY:check_condition(ls, c, msg)
			if not c then luaX:syntaxerror(ls, msg) end
		end

		------------------------------------------------------------------------
		-- verifies token conditions are met or else throw error
		------------------------------------------------------------------------
		function luaY:check_match(ls, what, who, where)
			if not self:testnext(ls, what) then
				if where == ls.linenumber then
					self:error_expected(ls, what)
				else
					luaX:syntaxerror(ls, string.format(
						self.LUA_QS.." expected (to close "..self.LUA_QS.." at line %d)",
						luaX:token2str(ls, what), luaX:token2str(ls, who), where))
				end
			end
		end

		------------------------------------------------------------------------
		-- expect that token is a name, return the name
		------------------------------------------------------------------------
		function luaY:str_checkname(ls)
			self:check(ls, "TK_NAME")
			local ts = ls.t.seminfo
			luaX:next(ls)
			return ts
		end

		------------------------------------------------------------------------
		-- initialize a struct expdesc, expression description data structure
		------------------------------------------------------------------------
		function luaY:init_exp(e, k, i)
			e.f, e.t = luaK.NO_JUMP, luaK.NO_JUMP
			e.k = k
			e.info = i
		end

		------------------------------------------------------------------------
		-- adds given string s in string pool, sets e as VK
		------------------------------------------------------------------------
		function luaY:codestring(ls, e, s)
			self:init_exp(e, "VK", luaK:stringK(ls.fs, s))
		end

		------------------------------------------------------------------------
		-- consume a name token, adds it to string pool, sets e as VK
		------------------------------------------------------------------------
		function luaY:checkname(ls, e)
			self:codestring(ls, e, self:str_checkname(ls))
		end

		------------------------------------------------------------------------
		-- creates struct entry for a local variable
		-- * used only in new_localvar()
		------------------------------------------------------------------------
		function luaY:registerlocalvar(ls, varname)
			local fs = ls.fs
			local f = fs.f
			self:growvector(ls.L, f.locvars, fs.nlocvars, f.sizelocvars,
				nil, self.SHRT_MAX, "too many local variables")
			-- loop to initialize empty f.locvar positions not required
			f.locvars[fs.nlocvars] = {} -- LocVar
			f.locvars[fs.nlocvars].varname = varname
			-- luaC_objbarrier(ls.L, f, varname) /* GC */
			local nlocvars = fs.nlocvars
			fs.nlocvars = fs.nlocvars + 1
			return nlocvars
		end

		------------------------------------------------------------------------
		-- creates a new local variable given a name and an offset from nactvar
		-- * used in fornum(), forlist(), parlist(), body()
		------------------------------------------------------------------------
		function luaY:new_localvarliteral(ls, v, n)
			self:new_localvar(ls, v, n)
		end

		------------------------------------------------------------------------
		-- register a local variable, set in active variable list
		------------------------------------------------------------------------
		function luaY:new_localvar(ls, name, n)
			local fs = ls.fs
			self:checklimit(fs, fs.nactvar + n + 1, self.LUAI_MAXVARS, "local variables")
			fs.actvar[fs.nactvar + n] = self:registerlocalvar(ls, name)
		end

		------------------------------------------------------------------------
		-- adds nvars number of new local variables, set debug information
		------------------------------------------------------------------------
		function luaY:adjustlocalvars(ls, nvars)
			local fs = ls.fs
			fs.nactvar = fs.nactvar + nvars
			for i = nvars, 1, -1 do
				self:getlocvar(fs, fs.nactvar - i).startpc = fs.pc
			end
		end

		------------------------------------------------------------------------
		-- removes a number of locals, set debug information
		------------------------------------------------------------------------
		function luaY:removevars(ls, tolevel)
			local fs = ls.fs
			while fs.nactvar > tolevel do
				fs.nactvar = fs.nactvar - 1
				self:getlocvar(fs, fs.nactvar).endpc = fs.pc
			end
		end

		------------------------------------------------------------------------
		-- returns an existing upvalue index based on the given name, or
		-- creates a new upvalue struct entry and returns the new index
		-- * used only in singlevaraux()
		------------------------------------------------------------------------
		function luaY:indexupvalue(fs, name, v)
			local f = fs.f
			for i = 0, f.nups - 1 do
				if fs.upvalues[i].k == v.k and fs.upvalues[i].info == v.info then
					lua_assert(f.upvalues[i] == name)
					return i
				end
			end
			-- new one
			self:checklimit(fs, f.nups + 1, self.LUAI_MAXUPVALUES, "upvalues")
			self:growvector(fs.L, f.upvalues, f.nups, f.sizeupvalues,
				nil, self.MAX_INT, "")
			-- loop to initialize empty f.upvalues positions not required
			f.upvalues[f.nups] = name
			-- luaC_objbarrier(fs->L, f, name); /* GC */
			lua_assert(v.k == "VLOCAL" or v.k == "VUPVAL")
			-- this is a partial copy; only k & info fields used
			fs.upvalues[f.nups] = { k = v.k, info = v.info }
			local nups = f.nups
			f.nups = f.nups + 1
			return nups
		end

		------------------------------------------------------------------------
		-- search the local variable namespace of the given fs for a match
		-- * used only in singlevaraux()
		------------------------------------------------------------------------
		function luaY:searchvar(fs, n)
			for i = fs.nactvar - 1, 0, -1 do
				if n == self:getlocvar(fs, i).varname then
					return i
				end
			end
			return -1  -- not found
		end

		------------------------------------------------------------------------
		-- * mark upvalue flags in function states up to a given level
		-- * used only in singlevaraux()
		------------------------------------------------------------------------
		function luaY:markupval(fs, level)
			local bl = fs.bl
			while bl and bl.nactvar > level do bl = bl.previous end
			if bl then bl.upval = true end
		end

		------------------------------------------------------------------------
		-- handle locals, globals and upvalues and related processing
		-- * search mechanism is recursive, calls itself to search parents
		-- * used only in singlevar()
		------------------------------------------------------------------------
		function luaY:singlevaraux(fs, n, var, base)
			if fs == nil then  -- no more levels?
				self:init_exp(var, "VGLOBAL", luaP.NO_REG)  -- default is global variable
				return "VGLOBAL"
			else
				local v = self:searchvar(fs, n)  -- look up at current level
				if v >= 0 then
					self:init_exp(var, "VLOCAL", v)
					if base == 0 then
						self:markupval(fs, v)  -- local will be used as an upval
					end
					return "VLOCAL"
				else  -- not found at current level; try upper one
					if self:singlevaraux(fs.prev, n, var, 0) == "VGLOBAL" then
						return "VGLOBAL"
					end
					var.info = self:indexupvalue(fs, n, var)  -- else was LOCAL or UPVAL
					var.k = "VUPVAL"  -- upvalue in this level
					return "VUPVAL"
				end--if v
			end--if fs
		end

		------------------------------------------------------------------------
		-- consume a name token, creates a variable (global|local|upvalue)
		-- * used in prefixexp(), funcname()
		------------------------------------------------------------------------
		function luaY:singlevar(ls, var)
			local varname = self:str_checkname(ls)
			local fs = ls.fs
			if self:singlevaraux(fs, varname, var, 1) == "VGLOBAL" then
				var.info = luaK:stringK(fs, varname)  -- info points to global name
			end
		end

		------------------------------------------------------------------------
		-- adjust RHS to match LHS in an assignment
		-- * used in assignment(), forlist(), localstat()
		------------------------------------------------------------------------
		function luaY:adjust_assign(ls, nvars, nexps, e)
			local fs = ls.fs
			local extra = nvars - nexps
			if self:hasmultret(e.k) then
				extra = extra + 1  -- includes call itself
				if extra <= 0 then extra = 0 end
				luaK:setreturns(fs, e, extra)  -- last exp. provides the difference
				if extra > 1 then luaK:reserveregs(fs, extra - 1) end
			else
				if e.k ~= "VVOID" then luaK:exp2nextreg(fs, e) end  -- close last expression
				if extra > 0 then
					local reg = fs.freereg
					luaK:reserveregs(fs, extra)
					luaK:_nil(fs, reg, extra)
				end
			end
		end

		------------------------------------------------------------------------
		-- tracks and limits parsing depth, assert check at end of parsing
		------------------------------------------------------------------------
		function luaY:enterlevel(ls)
			ls.L.nCcalls = ls.L.nCcalls + 1
			if ls.L.nCcalls > self.LUAI_MAXCCALLS then
				luaX:lexerror(ls, "chunk has too many syntax levels", 0)
			end
		end

		------------------------------------------------------------------------
		-- tracks parsing depth, a pair with luaY:enterlevel()
		------------------------------------------------------------------------
		function luaY:leavelevel(ls)
			ls.L.nCcalls = ls.L.nCcalls - 1
		end

		------------------------------------------------------------------------
		-- enters a code unit, initializes elements
		------------------------------------------------------------------------
		function luaY:enterblock(fs, bl, isbreakable)
			bl.breaklist = luaK.NO_JUMP
			bl.isbreakable = isbreakable
			bl.nactvar = fs.nactvar
			bl.upval = false
			bl.previous = fs.bl
			fs.bl = bl
			lua_assert(fs.freereg == fs.nactvar)
		end

		------------------------------------------------------------------------
		-- leaves a code unit, close any upvalues
		------------------------------------------------------------------------
		function luaY:leaveblock(fs)
			local bl = fs.bl
			fs.bl = bl.previous
			self:removevars(fs.ls, bl.nactvar)
			if bl.upval then
				luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
			end
			-- a block either controls scope or breaks (never both)
			lua_assert(not bl.isbreakable or not bl.upval)
			lua_assert(bl.nactvar == fs.nactvar)
			fs.freereg = fs.nactvar  -- free registers
			luaK:patchtohere(fs, bl.breaklist)
		end

		------------------------------------------------------------------------
		-- implement the instantiation of a function prototype, append list of
		-- upvalues after the instantiation instruction
		-- * used only in body()
		------------------------------------------------------------------------
		function luaY:pushclosure(ls, func, v)
			local fs = ls.fs
			local f = fs.f
			self:growvector(ls.L, f.p, fs.np, f.sizep, nil,
				luaP.MAXARG_Bx, "constant table overflow")
			-- loop to initialize empty f.p positions not required
			f.p[fs.np] = func.f
			fs.np = fs.np + 1
			-- luaC_objbarrier(ls->L, f, func->f); /* C */
			self:init_exp(v, "VRELOCABLE", luaK:codeABx(fs, "OP_CLOSURE", 0, fs.np - 1))
			for i = 0, func.f.nups - 1 do
				local o = (func.upvalues[i].k == "VLOCAL") and "OP_MOVE" or "OP_GETUPVAL"
				luaK:codeABC(fs, o, 0, func.upvalues[i].info, 0)
			end
		end

		------------------------------------------------------------------------
		-- opening of a function
		------------------------------------------------------------------------
		function luaY:open_func(ls, fs)
			local L = ls.L
			local f = self:newproto(ls.L)
			fs.f = f
			fs.prev = ls.fs  -- linked list of funcstates
			fs.ls = ls
			fs.L = L
			ls.fs = fs
			fs.pc = 0
			fs.lasttarget = -1
			fs.jpc = luaK.NO_JUMP
			fs.freereg = 0
			fs.nk = 0
			fs.np = 0
			fs.nlocvars = 0
			fs.nactvar = 0
			fs.bl = nil
			f.source = ls.source
			f.maxstacksize = 2  -- registers 0/1 are always valid
			fs.h = {}  -- constant table; was luaH_new call
			-- anchor table of constants and prototype (to avoid being collected)
			-- sethvalue2s(L, L->top, fs->h); incr_top(L); /* C */
			-- setptvalue2s(L, L->top, f); incr_top(L);
		end

		------------------------------------------------------------------------
		-- closing of a function
		------------------------------------------------------------------------
		function luaY:close_func(ls)
			local L = ls.L
			local fs = ls.fs
			local f = fs.f
			self:removevars(ls, 0)
			luaK:ret(fs, 0, 0)  -- final return
			-- luaM_reallocvector deleted for f->code, f->lineinfo, f->k, f->p,
			-- f->locvars, f->upvalues; not required for Lua table arrays
			f.sizecode = fs.pc
			f.sizelineinfo = fs.pc
			f.sizek = fs.nk
			f.sizep = fs.np
			f.sizelocvars = fs.nlocvars
			f.sizeupvalues = f.nups
			--lua_assert(luaG_checkcode(f))  -- currently not implemented
			lua_assert(fs.bl == nil)
			ls.fs = fs.prev
			-- the following is not required for this implementation; kept here
			-- for completeness
			-- L->top -= 2;  /* remove table and prototype from the stack */
			-- last token read was anchored in defunct function; must reanchor it
			if fs then self:anchor_token(ls) end
		end

		------------------------------------------------------------------------
		-- parser initialization function
		-- * note additional sub-tables needed for LexState, FuncState
		------------------------------------------------------------------------
		function luaY:parser(L, z, buff, name)
			local lexstate = {}  -- LexState
			lexstate.t = {}
			lexstate.lookahead = {}
			local funcstate = {}  -- FuncState
			funcstate.upvalues = {}
			funcstate.actvar = {}
			-- the following nCcalls initialization added for convenience
			L.nCcalls = 0
			lexstate.buff = buff
			luaX:setinput(L, lexstate, z, name)
			self:open_func(lexstate, funcstate)
			funcstate.f.is_vararg = self.VARARG_ISVARARG  -- main func. is always vararg
			luaX:next(lexstate)  -- read first token
			self:chunk(lexstate)
			self:check(lexstate, "TK_EOS")
			self:close_func(lexstate)
			lua_assert(funcstate.prev == nil)
			lua_assert(funcstate.f.nups == 0)
			lua_assert(lexstate.fs == nil)
			return funcstate.f
		end

--[[--------------------------------------------------------------------
-- GRAMMAR RULES
----------------------------------------------------------------------]]

		------------------------------------------------------------------------
		-- parse a function name suffix, for function call specifications
		-- * used in primaryexp(), funcname()
		------------------------------------------------------------------------
		function luaY:field(ls, v)
			-- field -> ['.' | ':'] NAME
			local fs = ls.fs
			local key = {}  -- expdesc
			luaK:exp2anyreg(fs, v)
			luaX:next(ls)  -- skip the dot or colon
			self:checkname(ls, key)
			luaK:indexed(fs, v, key)
		end

		------------------------------------------------------------------------
		-- parse a table indexing suffix, for constructors, expressions
		-- * used in recfield(), primaryexp()
		------------------------------------------------------------------------
		function luaY:yindex(ls, v)
			-- index -> '[' expr ']'
			luaX:next(ls)  -- skip the '['
			self:expr(ls, v)
			luaK:exp2val(ls.fs, v)
			self:checknext(ls, "]")
		end

--[[--------------------------------------------------------------------
-- Rules for Constructors
----------------------------------------------------------------------]]

--[[--------------------------------------------------------------------
-- struct ConsControl:
--   v  -- last list item read (table: struct expdesc)
--   t  -- table descriptor (table: struct expdesc)
--   nh  -- total number of 'record' elements
--   na  -- total number of array elements
--   tostore  -- number of array elements pending to be stored
----------------------------------------------------------------------]]

		------------------------------------------------------------------------
		-- parse a table record (hash) field
		-- * used in constructor()
		------------------------------------------------------------------------
		function luaY:recfield(ls, cc)
			-- recfield -> (NAME | '['exp1']') = exp1
			local fs = ls.fs
			local reg = ls.fs.freereg
			local key, val = {}, {}  -- expdesc
			if ls.t.token == "TK_NAME" then
				self:checklimit(fs, cc.nh, self.MAX_INT, "items in a constructor")
				self:checkname(ls, key)
			else  -- ls->t.token == '['
				self:yindex(ls, key)
			end
			cc.nh = cc.nh + 1
			self:checknext(ls, "=")
			local rkkey = luaK:exp2RK(fs, key)
			self:expr(ls, val)
			luaK:codeABC(fs, "OP_SETTABLE", cc.t.info, rkkey, luaK:exp2RK(fs, val))
			fs.freereg = reg  -- free registers
		end

		------------------------------------------------------------------------
		-- emit a set list instruction if enough elements (LFIELDS_PER_FLUSH)
		-- * used in constructor()
		------------------------------------------------------------------------
		function luaY:closelistfield(fs, cc)
			if cc.v.k == "VVOID" then return end  -- there is no list item
			luaK:exp2nextreg(fs, cc.v)
			cc.v.k = "VVOID"
			if cc.tostore == luaP.LFIELDS_PER_FLUSH then
				luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)  -- flush
				cc.tostore = 0  -- no more items pending
			end
		end

		------------------------------------------------------------------------
		-- emit a set list instruction at the end of parsing list constructor
		-- * used in constructor()
		------------------------------------------------------------------------
		function luaY:lastlistfield(fs, cc)
			if cc.tostore == 0 then return end
			if self:hasmultret(cc.v.k) then
				luaK:setmultret(fs, cc.v)
				luaK:setlist(fs, cc.t.info, cc.na, self.LUA_MULTRET)
				cc.na = cc.na - 1  -- do not count last expression (unknown number of elements)
			else
				if cc.v.k ~= "VVOID" then
					luaK:exp2nextreg(fs, cc.v)
				end
				luaK:setlist(fs, cc.t.info, cc.na, cc.tostore)
			end
		end

		------------------------------------------------------------------------
		-- parse a table list (array) field
		-- * used in constructor()
		------------------------------------------------------------------------
		function luaY:listfield(ls, cc)
			self:expr(ls, cc.v)
			self:checklimit(ls.fs, cc.na, self.MAX_INT, "items in a constructor")
			cc.na = cc.na + 1
			cc.tostore = cc.tostore + 1
		end

		------------------------------------------------------------------------
		-- parse a table constructor
		-- * used in funcargs(), simpleexp()
		------------------------------------------------------------------------
		function luaY:constructor(ls, t)
			-- constructor -> '{' [ field { fieldsep field } [ fieldsep ] ] '}'
			-- field -> recfield | listfield
			-- fieldsep -> ',' | ';'
			local fs = ls.fs
			local line = ls.linenumber
			local pc = luaK:codeABC(fs, "OP_NEWTABLE", 0, 0, 0)
			local cc = {}  -- ConsControl
			cc.v = {}
			cc.na, cc.nh, cc.tostore = 0, 0, 0
			cc.t = t
			self:init_exp(t, "VRELOCABLE", pc)
			self:init_exp(cc.v, "VVOID", 0)  -- no value (yet)
			luaK:exp2nextreg(ls.fs, t)  -- fix it at stack top (for gc)
			self:checknext(ls, "{")
			repeat
				lua_assert(cc.v.k == "VVOID" or cc.tostore > 0)
				if ls.t.token == "}" then break end
				self:closelistfield(fs, cc)
				local c = ls.t.token

				if c == "TK_NAME" then  -- may be listfields or recfields
					luaX:lookahead(ls)
					if ls.lookahead.token ~= "=" then  -- expression?
						self:listfield(ls, cc)
					else
						self:recfield(ls, cc)
					end
				elseif c == "[" then  -- constructor_item -> recfield
					self:recfield(ls, cc)
				else  -- constructor_part -> listfield
					self:listfield(ls, cc)
				end
			until not self:testnext(ls, ",") and not self:testnext(ls, ";")
			self:check_match(ls, "}", "{", line)
			self:lastlistfield(fs, cc)
			luaP:SETARG_B(fs.f.code[pc], self:int2fb(cc.na)) -- set initial array size
			luaP:SETARG_C(fs.f.code[pc], self:int2fb(cc.nh)) -- set initial table size
		end

		-- }======================================================================

		------------------------------------------------------------------------
		-- parse the arguments (parameters) of a function declaration
		-- * used in body()
		------------------------------------------------------------------------
		function luaY:parlist(ls)
			-- parlist -> [ param { ',' param } ]
			local fs = ls.fs
			local f = fs.f
			local nparams = 0
			f.is_vararg = 0
			if ls.t.token ~= ")" then  -- is 'parlist' not empty?
				repeat
					local c = ls.t.token
					if c == "TK_NAME" then  -- param -> NAME
						self:new_localvar(ls, self:str_checkname(ls), nparams)
						nparams = nparams + 1
					elseif c == "TK_DOTS" then  -- param -> `...'
						luaX:next(ls)
						-- [[
						-- #if defined(LUA_COMPAT_VARARG)
						-- use `arg' as default name
						self:new_localvarliteral(ls, "arg", nparams)
						nparams = nparams + 1
						f.is_vararg = self.VARARG_HASARG + self.VARARG_NEEDSARG
						-- #endif
						--]]
						f.is_vararg = f.is_vararg + self.VARARG_ISVARARG
					else
						luaX:syntaxerror(ls, "<name> or "..self:LUA_QL("...").." expected")
					end
				until f.is_vararg ~= 0 or not self:testnext(ls, ",")
			end--if
			self:adjustlocalvars(ls, nparams)
			-- NOTE: the following works only when HASARG_MASK is 2!
			f.numparams = fs.nactvar - (f.is_vararg % self.HASARG_MASK)
			luaK:reserveregs(fs, fs.nactvar)  -- reserve register for parameters
		end

		------------------------------------------------------------------------
		-- parse function declaration body
		-- * used in simpleexp(), localfunc(), funcstat()
		------------------------------------------------------------------------
		function luaY:body(ls, e, needself, line)
			-- body ->  '(' parlist ')' chunk END
			local new_fs = {}  -- FuncState
			new_fs.upvalues = {}
			new_fs.actvar = {}
			self:open_func(ls, new_fs)
			new_fs.f.lineDefined = line
			self:checknext(ls, "(")
			if needself then
				self:new_localvarliteral(ls, "self", 0)
				self:adjustlocalvars(ls, 1)
			end
			self:parlist(ls)
			self:checknext(ls, ")")
			self:chunk(ls)
			new_fs.f.lastlinedefined = ls.linenumber
			self:check_match(ls, "TK_END", "TK_FUNCTION", line)
			self:close_func(ls)
			self:pushclosure(ls, new_fs, e)
		end

		------------------------------------------------------------------------
		-- parse a list of comma-separated expressions
		-- * used is multiple locations
		------------------------------------------------------------------------
		function luaY:explist1(ls, v)
			-- explist1 -> expr { ',' expr }
			local n = 1  -- at least one expression
			self:expr(ls, v)
			while self:testnext(ls, ",") do
				luaK:exp2nextreg(ls.fs, v)
				self:expr(ls, v)
				n = n + 1
			end
			return n
		end

		------------------------------------------------------------------------
		-- parse the parameters of a function call
		-- * contrast with parlist(), used in function declarations
		-- * used in primaryexp()
		------------------------------------------------------------------------
		function luaY:funcargs(ls, f)
			local fs = ls.fs
			local args = {}  -- expdesc
			local nparams
			local line = ls.linenumber
			local c = ls.t.token
			if c == "(" then  -- funcargs -> '(' [ explist1 ] ')'
				if line ~= ls.lastline then
					luaX:syntaxerror(ls, "ambiguous syntax (function call x new statement)")
				end
				luaX:next(ls)
				if ls.t.token == ")" then  -- arg list is empty?
					args.k = "VVOID"
				else
					self:explist1(ls, args)
					luaK:setmultret(fs, args)
				end
				self:check_match(ls, ")", "(", line)
			elseif c == "{" then  -- funcargs -> constructor
				self:constructor(ls, args)
			elseif c == "TK_STRING" then  -- funcargs -> STRING
				self:codestring(ls, args, ls.t.seminfo)
				luaX:next(ls)  -- must use 'seminfo' before 'next'
			else
				luaX:syntaxerror(ls, "function arguments expected")
				return
			end
			lua_assert(f.k == "VNONRELOC")
			local base = f.info  -- base register for call
			if self:hasmultret(args.k) then
				nparams = self.LUA_MULTRET  -- open call
			else
				if args.k ~= "VVOID" then
					luaK:exp2nextreg(fs, args)  -- close last argument
				end
				nparams = fs.freereg - (base + 1)
			end
			self:init_exp(f, "VCALL", luaK:codeABC(fs, "OP_CALL", base, nparams + 1, 2))
			luaK:fixline(fs, line)
			fs.freereg = base + 1  -- call remove function and arguments and leaves
			-- (unless changed) one result
		end

--[[--------------------------------------------------------------------
-- Expression parsing
----------------------------------------------------------------------]]

		------------------------------------------------------------------------
		-- parses an expression in parentheses or a single variable
		-- * used in primaryexp()
		------------------------------------------------------------------------
		function luaY:prefixexp(ls, v)
			-- prefixexp -> NAME | '(' expr ')'
			local c = ls.t.token
			if c == "(" then
				local line = ls.linenumber
				luaX:next(ls)
				self:expr(ls, v)
				self:check_match(ls, ")", "(", line)
				luaK:dischargevars(ls.fs, v)
			elseif c == "TK_NAME" then
				self:singlevar(ls, v)
			else
				luaX:syntaxerror(ls, "unexpected symbol")
			end--if c
			return
		end

		------------------------------------------------------------------------
		-- parses a prefixexp (an expression in parentheses or a single variable)
		-- or a function call specification
		-- * used in simpleexp(), assignment(), exprstat()
		------------------------------------------------------------------------
		function luaY:primaryexp(ls, v)
			-- primaryexp ->
			--    prefixexp { '.' NAME | '[' exp ']' | ':' NAME funcargs | funcargs }
			local fs = ls.fs
			self:prefixexp(ls, v)
			while true do
				local c = ls.t.token
				if c == "." then  -- field
					self:field(ls, v)
				elseif c == "[" then  -- '[' exp1 ']'
					local key = {}  -- expdesc
					luaK:exp2anyreg(fs, v)
					self:yindex(ls, key)
					luaK:indexed(fs, v, key)
				elseif c == ":" then  -- ':' NAME funcargs
					local key = {}  -- expdesc
					luaX:next(ls)
					self:checkname(ls, key)
					luaK:_self(fs, v, key)
					self:funcargs(ls, v)
				elseif c == "(" or c == "TK_STRING" or c == "{" then  -- funcargs
					luaK:exp2nextreg(fs, v)
					self:funcargs(ls, v)
				else
					return
				end--if c
			end--while
		end

		------------------------------------------------------------------------
		-- parses general expression types, constants handled here
		-- * used in subexpr()
		------------------------------------------------------------------------
		function luaY:simpleexp(ls, v)
			-- simpleexp -> NUMBER | STRING | NIL | TRUE | FALSE | ... |
			--              constructor | FUNCTION body | primaryexp
			local c = ls.t.token
			if c == "TK_NUMBER" then
				self:init_exp(v, "VKNUM", 0)
				v.nval = ls.t.seminfo
			elseif c == "TK_STRING" then
				self:codestring(ls, v, ls.t.seminfo)
			elseif c == "TK_NIL" then
				self:init_exp(v, "VNIL", 0)
			elseif c == "TK_TRUE" then
				self:init_exp(v, "VTRUE", 0)
			elseif c == "TK_FALSE" then
				self:init_exp(v, "VFALSE", 0)
			elseif c == "TK_DOTS" then  -- vararg
				local fs = ls.fs
				self:check_condition(ls, fs.f.is_vararg ~= 0,
					"cannot use "..self:LUA_QL("...").." outside a vararg function");
				-- NOTE: the following substitutes for a bitop, but is value-specific
				local is_vararg = fs.f.is_vararg
				if is_vararg >= self.VARARG_NEEDSARG then
					fs.f.is_vararg = is_vararg - self.VARARG_NEEDSARG  -- don't need 'arg'
				end
				self:init_exp(v, "VVARARG", luaK:codeABC(fs, "OP_VARARG", 0, 1, 0))
			elseif c == "{" then  -- constructor
				self:constructor(ls, v)
				return
			elseif c == "TK_FUNCTION" then
				luaX:next(ls)
				self:body(ls, v, false, ls.linenumber)
				return
			else
				self:primaryexp(ls, v)
				return
			end--if c
			luaX:next(ls)
		end

		------------------------------------------------------------------------
		-- Translates unary operators tokens if found, otherwise returns
		-- OPR_NOUNOPR. getunopr() and getbinopr() are used in subexpr().
		-- * used in subexpr()
		------------------------------------------------------------------------
		function luaY:getunopr(op)
			if op == "TK_NOT" then
				return "OPR_NOT"
			elseif op == "-" then
				return "OPR_MINUS"
			elseif op == "#" then
				return "OPR_LEN"
			else
				return "OPR_NOUNOPR"
			end
		end

		------------------------------------------------------------------------
		-- Translates binary operator tokens if found, otherwise returns
		-- OPR_NOBINOPR. Code generation uses OPR_* style tokens.
		-- * used in subexpr()
		------------------------------------------------------------------------
		luaY.getbinopr_table = {
			["+"] = "OPR_ADD",
			["-"] = "OPR_SUB",
			["*"] = "OPR_MUL",
			["/"] = "OPR_DIV",
			["%"] = "OPR_MOD",
			["^"] = "OPR_POW",
			["TK_CONCAT"] = "OPR_CONCAT",
			["TK_NE"] = "OPR_NE",
			["TK_EQ"] = "OPR_EQ",
			["<"] = "OPR_LT",
			["TK_LE"] = "OPR_LE",
			[">"] = "OPR_GT",
			["TK_GE"] = "OPR_GE",
			["TK_AND"] = "OPR_AND",
			["TK_OR"] = "OPR_OR",
		}
		function luaY:getbinopr(op)
			local opr = self.getbinopr_table[op]
			if opr then return opr else return "OPR_NOBINOPR" end
		end

		------------------------------------------------------------------------
		-- the following priority table consists of pairs of left/right values
		-- for binary operators (was a static const struct); grep for ORDER OPR
		-- * the following struct is replaced:
		--   static const struct {
		--     lu_byte left;  /* left priority for each binary operator */
		--     lu_byte right; /* right priority */
		--   } priority[] = {  /* ORDER OPR */
		------------------------------------------------------------------------
		luaY.priority = {
			{6, 6}, {6, 6}, {7, 7}, {7, 7}, {7, 7}, -- `+' `-' `/' `%'
			{10, 9}, {5, 4},                 -- power and concat (right associative)
			{3, 3}, {3, 3},                  -- equality
			{3, 3}, {3, 3}, {3, 3}, {3, 3},  -- order
			{2, 2}, {1, 1}                   -- logical (and/or)
		}

		luaY.UNARY_PRIORITY = 8  -- priority for unary operators

		------------------------------------------------------------------------
		-- Parse subexpressions. Includes handling of unary operators and binary
		-- operators. A subexpr is given the rhs priority level of the operator
		-- immediately left of it, if any (limit is -1 if none,) and if a binop
		-- is found, limit is compared with the lhs priority level of the binop
		-- in order to determine which executes first.
		------------------------------------------------------------------------

		------------------------------------------------------------------------
		-- subexpr -> (simpleexp | unop subexpr) { binop subexpr }
		-- where 'binop' is any binary operator with a priority higher than 'limit'
		-- * for priority lookups with self.priority[], 1=left and 2=right
		-- * recursively called
		-- * used in expr()
		------------------------------------------------------------------------
		function luaY:subexpr(ls, v, limit)
			self:enterlevel(ls)
			local uop = self:getunopr(ls.t.token)
			if uop ~= "OPR_NOUNOPR" then
				luaX:next(ls)
				self:subexpr(ls, v, self.UNARY_PRIORITY)
				luaK:prefix(ls.fs, uop, v)
			else
				self:simpleexp(ls, v)
			end
			-- expand while operators have priorities higher than 'limit'
			local op = self:getbinopr(ls.t.token)
			while op ~= "OPR_NOBINOPR" and self.priority[luaK.BinOpr[op] + 1][1] > limit do
				local v2 = {}  -- expdesc
				luaX:next(ls)
				luaK:infix(ls.fs, op, v)
				-- read sub-expression with higher priority
				local nextop = self:subexpr(ls, v2, self.priority[luaK.BinOpr[op] + 1][2])
				luaK:posfix(ls.fs, op, v, v2)
				op = nextop
			end
			self:leavelevel(ls)
			return op  -- return first untreated operator
		end

		------------------------------------------------------------------------
		-- Expression parsing starts here. Function subexpr is entered with the
		-- left operator (which is non-existent) priority of -1, which is lower
		-- than all actual operators. Expr information is returned in parm v.
		-- * used in multiple locations
		------------------------------------------------------------------------
		function luaY:expr(ls, v)
			self:subexpr(ls, v, 0)
		end

		-- }====================================================================

--[[--------------------------------------------------------------------
-- Rules for Statements
----------------------------------------------------------------------]]

		------------------------------------------------------------------------
		-- checks next token, used as a look-ahead
		-- * returns boolean instead of 0|1
		-- * used in retstat(), chunk()
		------------------------------------------------------------------------
		function luaY:block_follow(token)
			if token == "TK_ELSE" or token == "TK_ELSEIF" or token == "TK_END"
				or token == "TK_UNTIL" or token == "TK_EOS" then
				return true
			else
				return false
			end
		end

		------------------------------------------------------------------------
		-- parse a code block or unit
		-- * used in multiple functions
		------------------------------------------------------------------------
		function luaY:block(ls)
			-- block -> chunk
			local fs = ls.fs
			local bl = {}  -- BlockCnt
			self:enterblock(fs, bl, false)
			self:chunk(ls)
			lua_assert(bl.breaklist == luaK.NO_JUMP)
			self:leaveblock(fs)
		end

		------------------------------------------------------------------------
		-- structure to chain all variables in the left-hand side of an
		-- assignment
		-- struct LHS_assign:
		--   prev  -- (table: struct LHS_assign)
		--   v  -- variable (global, local, upvalue, or indexed) (table: expdesc)
		------------------------------------------------------------------------

		------------------------------------------------------------------------
		-- check whether, in an assignment to a local variable, the local variable
		-- is needed in a previous assignment (to a table). If so, save original
		-- local value in a safe place and use this safe copy in the previous
		-- assignment.
		-- * used in assignment()
		------------------------------------------------------------------------
		function luaY:check_conflict(ls, lh, v)
			local fs = ls.fs
			local extra = fs.freereg  -- eventual position to save local variable
			local conflict = false
			while lh do
				if lh.v.k == "VINDEXED" then
					if lh.v.info == v.info then  -- conflict?
						conflict = true
						lh.v.info = extra  -- previous assignment will use safe copy
					end
					if lh.v.aux == v.info then  -- conflict?
						conflict = true
						lh.v.aux = extra  -- previous assignment will use safe copy
					end
				end
				lh = lh.prev
			end
			if conflict then
				luaK:codeABC(fs, "OP_MOVE", fs.freereg, v.info, 0)  -- make copy
				luaK:reserveregs(fs, 1)
			end
		end

		------------------------------------------------------------------------
		-- parse a variable assignment sequence
		-- * recursively called
		-- * used in exprstat()
		------------------------------------------------------------------------
		function luaY:assignment(ls, lh, nvars)
			local e = {}  -- expdesc
			-- test was: VLOCAL <= lh->v.k && lh->v.k <= VINDEXED
			local c = lh.v.k
			self:check_condition(ls, c == "VLOCAL" or c == "VUPVAL" or c == "VGLOBAL"
				or c == "VINDEXED", "syntax error")
			if self:testnext(ls, ",") then  -- assignment -> ',' primaryexp assignment
				local nv = {}  -- LHS_assign
				nv.v = {}
				nv.prev = lh
				self:primaryexp(ls, nv.v)
				if nv.v.k == "VLOCAL" then
					self:check_conflict(ls, lh, nv.v)
				end
				self:checklimit(ls.fs, nvars, self.LUAI_MAXCCALLS - ls.L.nCcalls,
					"variables in assignment")
				self:assignment(ls, nv, nvars + 1)
			else  -- assignment -> '=' explist1
				self:checknext(ls, "=")
				local nexps = self:explist1(ls, e)
				if nexps ~= nvars then
					self:adjust_assign(ls, nvars, nexps, e)
					if nexps > nvars then
						ls.fs.freereg = ls.fs.freereg - (nexps - nvars)  -- remove extra values
					end
				else
					luaK:setoneret(ls.fs, e)  -- close last expression
					luaK:storevar(ls.fs, lh.v, e)
					return  -- avoid default
				end
			end
			self:init_exp(e, "VNONRELOC", ls.fs.freereg - 1)  -- default assignment
			luaK:storevar(ls.fs, lh.v, e)
		end

		------------------------------------------------------------------------
		-- parse condition in a repeat statement or an if control structure
		-- * used in repeatstat(), test_then_block()
		------------------------------------------------------------------------
		function luaY:cond(ls)
			-- cond -> exp
			local v = {}  -- expdesc
			self:expr(ls, v)  -- read condition
			if v.k == "VNIL" then v.k = "VFALSE" end  -- 'falses' are all equal here
			luaK:goiftrue(ls.fs, v)
			return v.f
		end

		------------------------------------------------------------------------
		-- parse a break statement
		-- * used in statements()
		------------------------------------------------------------------------
		function luaY:breakstat(ls)
			-- stat -> BREAK
			local fs = ls.fs
			local bl = fs.bl
			local upval = false
			while bl and not bl.isbreakable do
				if bl.upval then upval = true end
				bl = bl.previous
			end
			if not bl then
				luaX:syntaxerror(ls, "no loop to break")
			end
			if upval then
				luaK:codeABC(fs, "OP_CLOSE", bl.nactvar, 0, 0)
			end
			bl.breaklist = luaK:concat(fs, bl.breaklist, luaK:jump(fs))
		end

		------------------------------------------------------------------------
		-- parse a while-do control structure, body processed by block()
		-- * with dynamic array sizes, MAXEXPWHILE + EXTRAEXP limits imposed by
		--   the function's implementation can be removed
		-- * used in statements()
		------------------------------------------------------------------------
		function luaY:whilestat(ls, line)
			-- whilestat -> WHILE cond DO block END
			local fs = ls.fs
			local bl = {}  -- BlockCnt
			luaX:next(ls)  -- skip WHILE
			local whileinit = luaK:getlabel(fs)
			local condexit = self:cond(ls)
			self:enterblock(fs, bl, true)
			self:checknext(ls, "TK_DO")
			self:block(ls)
			luaK:patchlist(fs, luaK:jump(fs), whileinit)
			self:check_match(ls, "TK_END", "TK_WHILE", line)
			self:leaveblock(fs)
			luaK:patchtohere(fs, condexit)  -- false conditions finish the loop
		end

		------------------------------------------------------------------------
		-- parse a repeat-until control structure, body parsed by chunk()
		-- * used in statements()
		------------------------------------------------------------------------
		function luaY:repeatstat(ls, line)
			-- repeatstat -> REPEAT block UNTIL cond
			local fs = ls.fs
			local repeat_init = luaK:getlabel(fs)
			local bl1, bl2 = {}, {}  -- BlockCnt
			self:enterblock(fs, bl1, true)  -- loop block
			self:enterblock(fs, bl2, false)  -- scope block
			luaX:next(ls)  -- skip REPEAT
			self:chunk(ls)
			self:check_match(ls, "TK_UNTIL", "TK_REPEAT", line)
			local condexit = self:cond(ls)  -- read condition (inside scope block)
			if not bl2.upval then  -- no upvalues?
				self:leaveblock(fs)  -- finish scope
				luaK:patchlist(ls.fs, condexit, repeat_init)  -- close the loop
			else  -- complete semantics when there are upvalues
				self:breakstat(ls)  -- if condition then break
				luaK:patchtohere(ls.fs, condexit)  -- else...
				self:leaveblock(fs)  -- finish scope...
				luaK:patchlist(ls.fs, luaK:jump(fs), repeat_init)  -- and repeat
			end
			self:leaveblock(fs)  -- finish loop
		end

		------------------------------------------------------------------------
		-- parse the single expressions needed in numerical for loops
		-- * used in fornum()
		------------------------------------------------------------------------
		function luaY:exp1(ls)
			local e = {}  -- expdesc
			self:expr(ls, e)
			local k = e.k
			luaK:exp2nextreg(ls.fs, e)
			return k
		end

		------------------------------------------------------------------------
		-- parse a for loop body for both versions of the for loop
		-- * used in fornum(), forlist()
		------------------------------------------------------------------------
		function luaY:forbody(ls, base, line, nvars, isnum)
			-- forbody -> DO block
			local bl = {}  -- BlockCnt
			local fs = ls.fs
			self:adjustlocalvars(ls, 3)  -- control variables
			self:checknext(ls, "TK_DO")
			local prep = isnum and luaK:codeAsBx(fs, "OP_FORPREP", base, luaK.NO_JUMP)
				or luaK:jump(fs)
			self:enterblock(fs, bl, false)  -- scope for declared variables
			self:adjustlocalvars(ls, nvars)
			luaK:reserveregs(fs, nvars)
			self:block(ls)
			self:leaveblock(fs)  -- end of scope for declared variables
			luaK:patchtohere(fs, prep)
			local endfor = isnum and luaK:codeAsBx(fs, "OP_FORLOOP", base, luaK.NO_JUMP)
				or luaK:codeABC(fs, "OP_TFORLOOP", base, 0, nvars)
			luaK:fixline(fs, line)  -- pretend that `OP_FOR' starts the loop
			luaK:patchlist(fs, isnum and endfor or luaK:jump(fs), prep + 1)
		end

		------------------------------------------------------------------------
		-- parse a numerical for loop, calls forbody()
		-- * used in forstat()
		------------------------------------------------------------------------
		function luaY:fornum(ls, varname, line)
			-- fornum -> NAME = exp1,exp1[,exp1] forbody
			local fs = ls.fs
			local base = fs.freereg
			self:new_localvarliteral(ls, "(for index)", 0)
			self:new_localvarliteral(ls, "(for limit)", 1)
			self:new_localvarliteral(ls, "(for step)", 2)
			self:new_localvar(ls, varname, 3)
			self:checknext(ls, '=')
			self:exp1(ls)  -- initial value
			self:checknext(ls, ",")
			self:exp1(ls)  -- limit
			if self:testnext(ls, ",") then
				self:exp1(ls)  -- optional step
			else  -- default step = 1
				luaK:codeABx(fs, "OP_LOADK", fs.freereg, luaK:numberK(fs, 1))
				luaK:reserveregs(fs, 1)
			end
			self:forbody(ls, base, line, 1, true)
		end

		------------------------------------------------------------------------
		-- parse a generic for loop, calls forbody()
		-- * used in forstat()
		------------------------------------------------------------------------
		function luaY:forlist(ls, indexname)
			-- forlist -> NAME {,NAME} IN explist1 forbody
			local fs = ls.fs
			local e = {}  -- expdesc
			local nvars = 0
			local base = fs.freereg
			-- create control variables
			self:new_localvarliteral(ls, "(for generator)", nvars)
			nvars = nvars + 1
			self:new_localvarliteral(ls, "(for state)", nvars)
			nvars = nvars + 1
			self:new_localvarliteral(ls, "(for control)", nvars)
			nvars = nvars + 1
			-- create declared variables
			self:new_localvar(ls, indexname, nvars)
			nvars = nvars + 1
			while self:testnext(ls, ",") do
				self:new_localvar(ls, self:str_checkname(ls), nvars)
				nvars = nvars + 1
			end
			self:checknext(ls, "TK_IN")
			local line = ls.linenumber
			self:adjust_assign(ls, 3, self:explist1(ls, e), e)
			luaK:checkstack(fs, 3)  -- extra space to call generator
			self:forbody(ls, base, line, nvars - 3, false)
		end

		------------------------------------------------------------------------
		-- initial parsing for a for loop, calls fornum() or forlist()
		-- * used in statements()
		------------------------------------------------------------------------
		function luaY:forstat(ls, line)
			-- forstat -> FOR (fornum | forlist) END
			local fs = ls.fs
			local bl = {}  -- BlockCnt
			self:enterblock(fs, bl, true)  -- scope for loop and control variables
			luaX:next(ls)  -- skip `for'
			local varname = self:str_checkname(ls)  -- first variable name
			local c = ls.t.token
			if c == "=" then
				self:fornum(ls, varname, line)
			elseif c == "," or c == "TK_IN" then
				self:forlist(ls, varname)
			else
				luaX:syntaxerror(ls, self:LUA_QL("=").." or "..self:LUA_QL("in").." expected")
			end
			self:check_match(ls, "TK_END", "TK_FOR", line)
			self:leaveblock(fs)  -- loop scope (`break' jumps to this point)
		end

		------------------------------------------------------------------------
		-- parse part of an if control structure, including the condition
		-- * used in ifstat()
		------------------------------------------------------------------------
		function luaY:test_then_block(ls)
			-- test_then_block -> [IF | ELSEIF] cond THEN block
			luaX:next(ls)  -- skip IF or ELSEIF
			local condexit = self:cond(ls)
			self:checknext(ls, "TK_THEN")
			self:block(ls)  -- `then' part
			return condexit
		end

		------------------------------------------------------------------------
		-- parse an if control structure
		-- * used in statements()
		------------------------------------------------------------------------
		function luaY:ifstat(ls, line)
			-- ifstat -> IF cond THEN block {ELSEIF cond THEN block} [ELSE block] END
			local fs = ls.fs
			local escapelist = luaK.NO_JUMP
			local flist = self:test_then_block(ls)  -- IF cond THEN block
			while ls.t.token == "TK_ELSEIF" do
				escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
				luaK:patchtohere(fs, flist)
				flist = self:test_then_block(ls)  -- ELSEIF cond THEN block
			end
			if ls.t.token == "TK_ELSE" then
				escapelist = luaK:concat(fs, escapelist, luaK:jump(fs))
				luaK:patchtohere(fs, flist)
				luaX:next(ls)  -- skip ELSE (after patch, for correct line info)
				self:block(ls)  -- 'else' part
			else
				escapelist = luaK:concat(fs, escapelist, flist)
			end
			luaK:patchtohere(fs, escapelist)
			self:check_match(ls, "TK_END", "TK_IF", line)
		end

		------------------------------------------------------------------------
		-- parse a local function statement
		-- * used in statements()
		------------------------------------------------------------------------
		function luaY:localfunc(ls)
			local v, b = {}, {}  -- expdesc
			local fs = ls.fs
			self:new_localvar(ls, self:str_checkname(ls), 0)
			self:init_exp(v, "VLOCAL", fs.freereg)
			luaK:reserveregs(fs, 1)
			self:adjustlocalvars(ls, 1)
			self:body(ls, b, false, ls.linenumber)
			luaK:storevar(fs, v, b)
			-- debug information will only see the variable after this point!
			self:getlocvar(fs, fs.nactvar - 1).startpc = fs.pc
		end

		------------------------------------------------------------------------
		-- parse a local variable declaration statement
		-- * used in statements()
		------------------------------------------------------------------------
		function luaY:localstat(ls)
			-- stat -> LOCAL NAME {',' NAME} ['=' explist1]
			local nvars = 0
			local nexps
			local e = {}  -- expdesc
			repeat
				self:new_localvar(ls, self:str_checkname(ls), nvars)
				nvars = nvars + 1
			until not self:testnext(ls, ",")
			if self:testnext(ls, "=") then
				nexps = self:explist1(ls, e)
			else
				e.k = "VVOID"
				nexps = 0
			end
			self:adjust_assign(ls, nvars, nexps, e)
			self:adjustlocalvars(ls, nvars)
		end

		------------------------------------------------------------------------
		-- parse a function name specification
		-- * used in funcstat()
		------------------------------------------------------------------------
		function luaY:funcname(ls, v)
			-- funcname -> NAME {field} [':' NAME]
			local needself = false
			self:singlevar(ls, v)
			while ls.t.token == "." do
				self:field(ls, v)
			end
			if ls.t.token == ":" then
				needself = true
				self:field(ls, v)
			end
			return needself
		end

		------------------------------------------------------------------------
		-- parse a function statement
		-- * used in statements()
		------------------------------------------------------------------------
		function luaY:funcstat(ls, line)
			-- funcstat -> FUNCTION funcname body
			local v, b = {}, {}  -- expdesc
			luaX:next(ls)  -- skip FUNCTION
			local needself = self:funcname(ls, v)
			self:body(ls, b, needself, line)
			luaK:storevar(ls.fs, v, b)
			luaK:fixline(ls.fs, line)  -- definition 'happens' in the first line
		end

		------------------------------------------------------------------------
		-- parse a function call with no returns or an assignment statement
		-- * used in statements()
		------------------------------------------------------------------------
		function luaY:exprstat(ls)
			-- stat -> func | assignment
			local fs = ls.fs
			local v = {}  -- LHS_assign
			v.v = {}
			self:primaryexp(ls, v.v)
			if v.v.k == "VCALL" then  -- stat -> func
				luaP:SETARG_C(luaK:getcode(fs, v.v), 1)  -- call statement uses no results
			else  -- stat -> assignment
				v.prev = nil
				self:assignment(ls, v, 1)
			end
		end

		------------------------------------------------------------------------
		-- parse a return statement
		-- * used in statements()
		------------------------------------------------------------------------
		function luaY:retstat(ls)
			-- stat -> RETURN explist
			local fs = ls.fs
			local e = {}  -- expdesc
			local first, nret  -- registers with returned values
			luaX:next(ls)  -- skip RETURN
			if self:block_follow(ls.t.token) or ls.t.token == ";" then
				first, nret = 0, 0  -- return no values
			else
				nret = self:explist1(ls, e)  -- optional return values
				if self:hasmultret(e.k) then
					luaK:setmultret(fs, e)
					if e.k == "VCALL" and nret == 1 then  -- tail call?
						luaP:SET_OPCODE(luaK:getcode(fs, e), "OP_TAILCALL")
						lua_assert(luaP:GETARG_A(luaK:getcode(fs, e)) == fs.nactvar)
					end
					first = fs.nactvar
					nret = self.LUA_MULTRET  -- return all values
				else
					if nret == 1 then  -- only one single value?
						first = luaK:exp2anyreg(fs, e)
					else
						luaK:exp2nextreg(fs, e)  -- values must go to the 'stack'
						first = fs.nactvar  -- return all 'active' values
						lua_assert(nret == fs.freereg - first)
					end
				end--if
			end--if
			luaK:ret(fs, first, nret)
		end

		------------------------------------------------------------------------
		-- initial parsing for statements, calls a lot of functions
		-- * returns boolean instead of 0|1
		-- * used in chunk()
		------------------------------------------------------------------------
		function luaY:statement(ls)
			local line = ls.linenumber  -- may be needed for error messages
			local c = ls.t.token
			if c == "TK_IF" then  -- stat -> ifstat
				self:ifstat(ls, line)
				return false
			elseif c == "TK_WHILE" then  -- stat -> whilestat
				self:whilestat(ls, line)
				return false
			elseif c == "TK_DO" then  -- stat -> DO block END
				luaX:next(ls)  -- skip DO
				self:block(ls)
				self:check_match(ls, "TK_END", "TK_DO", line)
				return false
			elseif c == "TK_FOR" then  -- stat -> forstat
				self:forstat(ls, line)
				return false
			elseif c == "TK_REPEAT" then  -- stat -> repeatstat
				self:repeatstat(ls, line)
				return false
			elseif c == "TK_FUNCTION" then  -- stat -> funcstat
				self:funcstat(ls, line)
				return false
			elseif c == "TK_LOCAL" then  -- stat -> localstat
				luaX:next(ls)  -- skip LOCAL
				if self:testnext(ls, "TK_FUNCTION") then  -- local function?
					self:localfunc(ls)
				else
					self:localstat(ls)
				end
				return false
			elseif c == "TK_RETURN" then  -- stat -> retstat
				self:retstat(ls)
				return true  -- must be last statement
			elseif c == "TK_BREAK" then  -- stat -> breakstat
				luaX:next(ls)  -- skip BREAK
				self:breakstat(ls)
				return true  -- must be last statement
			else
				self:exprstat(ls)
				return false  -- to avoid warnings
			end--if c
		end

		------------------------------------------------------------------------
		-- parse a chunk, which consists of a bunch of statements
		-- * used in parser(), body(), block(), repeatstat()
		------------------------------------------------------------------------
		function luaY:chunk(ls)
			-- chunk -> { stat [';'] }
			local islast = false
			self:enterlevel(ls)
			while not islast and not self:block_follow(ls.t.token) do
				islast = self:statement(ls)
				self:testnext(ls, ";")
				lua_assert(ls.fs.f.maxstacksize >= ls.fs.freereg and
					ls.fs.freereg >= ls.fs.nactvar)
				ls.fs.freereg = ls.fs.nactvar  -- free registers
			end
			self:leavelevel(ls)
		end

		-- }======================================================================





		luaX:init()  -- required by llex
		local LuaState = {}  -- dummy, not actually used, but retained since
		-- the intention is to complete a straight port

		------------------------------------------------------------------------
		-- interfacing to yueliang
		------------------------------------------------------------------------


		return function (source, name)
			name = name or 'compiled-lua'
			-- luaZ:make_getF returns a file chunk reader
			-- luaZ:init returns a zio input stream
			local zio = luaZ:init(luaZ:make_getF(source), nil)
			if not zio then return end
			-- luaY:parser parses the input stream
			-- func is the function prototype in tabular form; in C, func can
			-- now be used directly by the VM, this can't be done in Lua

			local func = luaY:parser(LuaState, zio, nil, "@"..name)
			-- luaU:make_setS returns a string chunk writer
			local writer, buff = luaU:make_setS()
			-- luaU:dump builds a binary chunk
			luaU:dump(LuaState, func, writer, buff)
			-- a string.dump equivalent in returned

			return buff.data
		end
	end)()

	local createExecutable = coroutine.wrap(function()
	--[[
FiOne
Copyright (C) 2021  Rerumu

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
]] --
		local bit = bit or bit32 or require('bit')

		if not table.create then function table.create(_) return {} end end

		if not table.unpack then table.unpack = unpack end

		if not table.pack then function table.pack(...) return {n = select('#', ...), ...} end end

		if not table.move then
			function table.move(src, first, last, offset, dst)
				for i = 0, last - first do dst[offset + i] = src[first + i] end
			end
		end

		local lua_bc_to_state
		local lua_wrap_state
		local stm_lua_func

		-- SETLIST config
		local FIELDS_PER_FLUSH = 50

		-- remap for better lookup
		local OPCODE_RM = {
			-- level 1
			[22] = 18, -- JMP
			[31] = 8, -- FORLOOP
			[33] = 28, -- TFORLOOP
			-- level 2
			[0] = 3, -- MOVE
			[1] = 13, -- LOADK
			[2] = 23, -- LOADBOOL
			[26] = 33, -- TEST
			-- level 3
			[12] = 1, -- ADD
			[13] = 6, -- SUB
			[14] = 10, -- MUL
			[15] = 16, -- DIV
			[16] = 20, -- MOD
			[17] = 26, -- POW
			[18] = 30, -- UNM
			[19] = 36, -- NOT
			-- level 4
			[3] = 0, -- LOADNIL
			[4] = 2, -- GETUPVAL
			[5] = 4, -- GETGLOBAL
			[6] = 7, -- GETTABLE
			[7] = 9, -- SETGLOBAL
			[8] = 12, -- SETUPVAL
			[9] = 14, -- SETTABLE
			[10] = 17, -- NEWTABLE
			[20] = 19, -- LEN
			[21] = 22, -- CONCAT
			[23] = 24, -- EQ
			[24] = 27, -- LT
			[25] = 29, -- LE
			[27] = 32, -- TESTSET
			[32] = 34, -- FORPREP
			[34] = 37, -- SETLIST
			-- level 5
			[11] = 5, -- SELF
			[28] = 11, -- CALL
			[29] = 15, -- TAILCALL
			[30] = 21, -- RETURN
			[35] = 25, -- CLOSE
			[36] = 31, -- CLOSURE
			[37] = 35, -- VARARG
		}

		-- opcode types for getting values
		local OPCODE_T = {
			[0] = 'ABC',
			'ABx',
			'ABC',
			'ABC',
			'ABC',
			'ABx',
			'ABC',
			'ABx',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'AsBx',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'ABC',
			'AsBx',
			'AsBx',
			'ABC',
			'ABC',
			'ABC',
			'ABx',
			'ABC',
		}

		local OPCODE_M = {
			[0] = {b = 'OpArgR', c = 'OpArgN'},
			{b = 'OpArgK', c = 'OpArgN'},
			{b = 'OpArgU', c = 'OpArgU'},
			{b = 'OpArgR', c = 'OpArgN'},
			{b = 'OpArgU', c = 'OpArgN'},
			{b = 'OpArgK', c = 'OpArgN'},
			{b = 'OpArgR', c = 'OpArgK'},
			{b = 'OpArgK', c = 'OpArgN'},
			{b = 'OpArgU', c = 'OpArgN'},
			{b = 'OpArgK', c = 'OpArgK'},
			{b = 'OpArgU', c = 'OpArgU'},
			{b = 'OpArgR', c = 'OpArgK'},
			{b = 'OpArgK', c = 'OpArgK'},
			{b = 'OpArgK', c = 'OpArgK'},
			{b = 'OpArgK', c = 'OpArgK'},
			{b = 'OpArgK', c = 'OpArgK'},
			{b = 'OpArgK', c = 'OpArgK'},
			{b = 'OpArgK', c = 'OpArgK'},
			{b = 'OpArgR', c = 'OpArgN'},
			{b = 'OpArgR', c = 'OpArgN'},
			{b = 'OpArgR', c = 'OpArgN'},
			{b = 'OpArgR', c = 'OpArgR'},
			{b = 'OpArgR', c = 'OpArgN'},
			{b = 'OpArgK', c = 'OpArgK'},
			{b = 'OpArgK', c = 'OpArgK'},
			{b = 'OpArgK', c = 'OpArgK'},
			{b = 'OpArgR', c = 'OpArgU'},
			{b = 'OpArgR', c = 'OpArgU'},
			{b = 'OpArgU', c = 'OpArgU'},
			{b = 'OpArgU', c = 'OpArgU'},
			{b = 'OpArgU', c = 'OpArgN'},
			{b = 'OpArgR', c = 'OpArgN'},
			{b = 'OpArgR', c = 'OpArgN'},
			{b = 'OpArgN', c = 'OpArgU'},
			{b = 'OpArgU', c = 'OpArgU'},
			{b = 'OpArgN', c = 'OpArgN'},
			{b = 'OpArgU', c = 'OpArgN'},
			{b = 'OpArgU', c = 'OpArgN'},
		}

		-- int rd_int_basic(string src, int s, int e, int d)
		-- @src - Source binary string
		-- @s - Start index of a little endian integer
		-- @e - End index of the integer
		-- @d - Direction of the loop
		local function rd_int_basic(src, s, e, d)
			local num = 0

			-- if bb[l] > 127 then -- signed negative
			-- 	num = num - 256 ^ l
			-- 	bb[l] = bb[l] - 128
			-- end

			for i = s, e, d do
				local mul = 256 ^ math.abs(i - s)

				num = num + mul * string.byte(src, i, i)
			end

			return num
		end

		-- float rd_flt_basic(byte f1..8)
		-- @f1..4 - The 4 bytes composing a little endian float
		local function rd_flt_basic(f1, f2, f3, f4)
			local sign = (-1) ^ bit.rshift(f4, 7)
			local exp = bit.rshift(f3, 7) + bit.lshift(bit.band(f4, 0x7F), 1)
			local frac = f1 + bit.lshift(f2, 8) + bit.lshift(bit.band(f3, 0x7F), 16)
			local normal = 1

			if exp == 0 then
				if frac == 0 then
					return sign * 0
				else
					normal = 0
					exp = 1
				end
			elseif exp == 0x7F then
				if frac == 0 then
					return sign * (1 / 0)
				else
					return sign * (0 / 0)
				end
			end

			return sign * 2 ^ (exp - 127) * (1 + normal / 2 ^ 23)
		end

		-- double rd_dbl_basic(byte f1..8)
		-- @f1..8 - The 8 bytes composing a little endian double
		local function rd_dbl_basic(f1, f2, f3, f4, f5, f6, f7, f8)
			local sign = (-1) ^ bit.rshift(f8, 7)
			local exp = bit.lshift(bit.band(f8, 0x7F), 4) + bit.rshift(f7, 4)
			local frac = bit.band(f7, 0x0F) * 2 ^ 48
			local normal = 1

			frac = frac + (f6 * 2 ^ 40) + (f5 * 2 ^ 32) + (f4 * 2 ^ 24) + (f3 * 2 ^ 16) + (f2 * 2 ^ 8) + f1 -- help

			if exp == 0 then
				if frac == 0 then
					return sign * 0
				else
					normal = 0
					exp = 1
				end
			elseif exp == 0x7FF then
				if frac == 0 then
					return sign * (1 / 0)
				else
					return sign * (0 / 0)
				end
			end

			return sign * 2 ^ (exp - 1023) * (normal + frac / 2 ^ 52)
		end

		-- int rd_int_le(string src, int s, int e)
		-- @src - Source binary string
		-- @s - Start index of a little endian integer
		-- @e - End index of the integer
		local function rd_int_le(src, s, e) return rd_int_basic(src, s, e - 1, 1) end

		-- int rd_int_be(string src, int s, int e)
		-- @src - Source binary string
		-- @s - Start index of a big endian integer
		-- @e - End index of the integer
		local function rd_int_be(src, s, e) return rd_int_basic(src, e - 1, s, -1) end

		-- float rd_flt_le(string src, int s)
		-- @src - Source binary string
		-- @s - Start index of little endian float
		local function rd_flt_le(src, s) return rd_flt_basic(string.byte(src, s, s + 3)) end

		-- float rd_flt_be(string src, int s)
		-- @src - Source binary string
		-- @s - Start index of big endian float
		local function rd_flt_be(src, s)
			local f1, f2, f3, f4 = string.byte(src, s, s + 3)
			return rd_flt_basic(f4, f3, f2, f1)
		end

		-- double rd_dbl_le(string src, int s)
		-- @src - Source binary string
		-- @s - Start index of little endian double
		local function rd_dbl_le(src, s) return rd_dbl_basic(string.byte(src, s, s + 7)) end

		-- double rd_dbl_be(string src, int s)
		-- @src - Source binary string
		-- @s - Start index of big endian double
		local function rd_dbl_be(src, s)
			local f1, f2, f3, f4, f5, f6, f7, f8 = string.byte(src, s, s + 7) -- same
			return rd_dbl_basic(f8, f7, f6, f5, f4, f3, f2, f1)
		end

		-- to avoid nested ifs in deserializing
		local float_types = {
			[4] = {little = rd_flt_le, big = rd_flt_be},
			[8] = {little = rd_dbl_le, big = rd_dbl_be},
		}

		-- byte stm_byte(Stream S)
		-- @S - Stream object to read from
		local function stm_byte(S)
			local idx = S.index
			local bt = string.byte(S.source, idx, idx)

			S.index = idx + 1
			return bt
		end

		-- string stm_string(Stream S, int len)
		-- @S - Stream object to read from
		-- @len - Length of string being read
		local function stm_string(S, len)
			local pos = S.index + len
			local str = string.sub(S.source, S.index, pos - 1)

			S.index = pos
			return str
		end

		-- string stm_lstring(Stream S)
		-- @S - Stream object to read from
		local function stm_lstring(S)
			local len = S:s_szt()
			local str

			if len ~= 0 then str = string.sub(stm_string(S, len), 1, -2) end

			return str
		end

		-- fn cst_int_rdr(string src, int len, fn func)
		-- @len - Length of type for reader
		-- @func - Reader callback
		local function cst_int_rdr(len, func)
			return function(S)
				local pos = S.index + len
				local int = func(S.source, S.index, pos)
				S.index = pos

				return int
			end
		end

		-- fn cst_flt_rdr(string src, int len, fn func)
		-- @len - Length of type for reader
		-- @func - Reader callback
		local function cst_flt_rdr(len, func)
			return function(S)
				local flt = func(S.source, S.index)
				S.index = S.index + len

				return flt
			end
		end

		local function stm_inst_list(S)
			local len = S:s_int()
			local list = table.create(len)

			for i = 1, len do
				local ins = S:s_ins()
				local op = bit.band(ins, 0x3F)
				local args = OPCODE_T[op]
				local mode = OPCODE_M[op]
				local data = {value = ins, op = OPCODE_RM[op], A = bit.band(bit.rshift(ins, 6), 0xFF)}

				if args == 'ABC' then
					data.B = bit.band(bit.rshift(ins, 23), 0x1FF)
					data.C = bit.band(bit.rshift(ins, 14), 0x1FF)
					data.is_KB = mode.b == 'OpArgK' and data.B > 0xFF -- post process optimization
					data.is_KC = mode.c == 'OpArgK' and data.C > 0xFF
				elseif args == 'ABx' then
					data.Bx = bit.band(bit.rshift(ins, 14), 0x3FFFF)
					data.is_K = mode.b == 'OpArgK'
				elseif args == 'AsBx' then
					data.sBx = bit.band(bit.rshift(ins, 14), 0x3FFFF) - 131071
				end

				list[i] = data
			end

			return list
		end

		local function stm_const_list(S)
			local len = S:s_int()
			local list = table.create(len)

			for i = 1, len do
				local tt = stm_byte(S)
				local k

				if tt == 1 then
					k = stm_byte(S) ~= 0
				elseif tt == 3 then
					k = S:s_num()
				elseif tt == 4 then
					k = stm_lstring(S)
				end

				list[i] = k -- offset +1 during instruction decode
			end

			return list
		end

		local function stm_sub_list(S, src)
			local len = S:s_int()
			local list = table.create(len)

			for i = 1, len do
				list[i] = stm_lua_func(S, src) -- offset +1 in CLOSURE
			end

			return list
		end

		local function stm_line_list(S)
			local len = S:s_int()
			local list = table.create(len)

			for i = 1, len do list[i] = S:s_int() end

			return list
		end

		local function stm_loc_list(S)
			local len = S:s_int()
			local list = table.create(len)

			for i = 1, len do list[i] = {varname = stm_lstring(S), startpc = S:s_int(), endpc = S:s_int()} end

			return list
		end

		local function stm_upval_list(S)
			local len = S:s_int()
			local list = table.create(len)

			for i = 1, len do list[i] = stm_lstring(S) end

			return list
		end

		function stm_lua_func(S, psrc)
			local proto = {}
			local src = stm_lstring(S) or psrc -- source is propagated

			proto.source = src -- source name

			S:s_int() -- line defined
			S:s_int() -- last line defined

			proto.num_upval = stm_byte(S) -- num upvalues
			proto.num_param = stm_byte(S) -- num params

			stm_byte(S) -- vararg flag
			proto.max_stack = stm_byte(S) -- max stack size

			proto.code = stm_inst_list(S)
			proto.const = stm_const_list(S)
			proto.subs = stm_sub_list(S, src)
			proto.lines = stm_line_list(S)

			stm_loc_list(S)
			stm_upval_list(S)

			-- post process optimization
			for _, v in ipairs(proto.code) do
				if v.is_K then
					v.const = proto.const[v.Bx + 1] -- offset for 1 based index
				else
					if v.is_KB then v.const_B = proto.const[v.B - 0xFF] end

					if v.is_KC then v.const_C = proto.const[v.C - 0xFF] end
				end
			end

			return proto
		end

		function lua_bc_to_state(src)
			-- func reader
			local rdr_func

			-- header flags
			local little
			local size_int
			local size_szt
			local size_ins
			local size_num
			local flag_int

			-- stream object
			local stream = {
				-- data
				index = 1,
				source = src,
			}

			assert(stm_string(stream, 4) == '\27Lua', 'invalid Lua signature')
			assert(stm_byte(stream) == 0x51, 'invalid Lua version')
			assert(stm_byte(stream) == 0, 'invalid Lua format')

			little = stm_byte(stream) ~= 0
			size_int = stm_byte(stream)
			size_szt = stm_byte(stream)
			size_ins = stm_byte(stream)
			size_num = stm_byte(stream)
			flag_int = stm_byte(stream) ~= 0

			rdr_func = little and rd_int_le or rd_int_be
			stream.s_int = cst_int_rdr(size_int, rdr_func)
			stream.s_szt = cst_int_rdr(size_szt, rdr_func)
			stream.s_ins = cst_int_rdr(size_ins, rdr_func)

			if flag_int then
				stream.s_num = cst_int_rdr(size_num, rdr_func)
			elseif float_types[size_num] then
				stream.s_num = cst_flt_rdr(size_num, float_types[size_num][little and 'little' or 'big'])
			else
				error('unsupported float size')
			end

			return stm_lua_func(stream, '@virtual')
		end

		local function close_lua_upvalues(list, index)
			for i, uv in pairs(list) do
				if uv.index >= index then
					uv.value = uv.store[uv.index] -- store value
					uv.store = uv
					uv.index = 'value' -- self reference
					list[i] = nil
				end
			end
		end

		local function open_lua_upvalue(list, index, memory)
			local prev = list[index]

			if not prev then
				prev = {index = index, store = memory}
				list[index] = prev
			end

			return prev
		end

		local function on_lua_error(failed, err)
			local src = failed.source
			local line = failed.lines[failed.pc - 1]

			error(string.format('%s:%i: %s', src, line, err), 0)
		end

		local function run_lua_func(state, env, upvals)
			local code = state.code
			local subs = state.subs
			local vararg = state.vararg

			local top_index = -1
			local open_list = {}
			local memory = state.memory
			local pc = state.pc

			while true do
				local inst = code[pc]
				local op = inst.op
				pc = pc + 1

				if op < 18 then
					if op < 8 then
						if op < 3 then
							if op < 1 then
								--[[LOADNIL]]
								for i = inst.A, inst.B do memory[i] = nil end
							elseif op > 1 then
								--[[GETUPVAL]]
								local uv = upvals[inst.B]

								memory[inst.A] = uv.store[uv.index]
							else
								--[[ADD]]
								local lhs, rhs

								if inst.is_KB then
									lhs = inst.const_B
								else
									lhs = memory[inst.B]
								end

								if inst.is_KC then
									rhs = inst.const_C
								else
									rhs = memory[inst.C]
								end

								memory[inst.A] = lhs + rhs
							end
						elseif op > 3 then
							if op < 6 then
								if op > 4 then
									--[[SELF]]
									local A = inst.A
									local B = inst.B
									local index

									if inst.is_KC then
										index = inst.const_C
									else
										index = memory[inst.C]
									end

									memory[A + 1] = memory[B]
									memory[A] = memory[B][index]
								else
									--[[GETGLOBAL]]
									memory[inst.A] = env[inst.const]
								end
							elseif op > 6 then
								--[[GETTABLE]]
								local index

								if inst.is_KC then
									index = inst.const_C
								else
									index = memory[inst.C]
								end

								memory[inst.A] = memory[inst.B][index]
							else
								--[[SUB]]
								local lhs, rhs

								if inst.is_KB then
									lhs = inst.const_B
								else
									lhs = memory[inst.B]
								end

								if inst.is_KC then
									rhs = inst.const_C
								else
									rhs = memory[inst.C]
								end

								memory[inst.A] = lhs - rhs
							end
						else --[[MOVE]]
							memory[inst.A] = memory[inst.B]
						end
					elseif op > 8 then
						if op < 13 then
							if op < 10 then
								--[[SETGLOBAL]]
								env[inst.const] = memory[inst.A]
							elseif op > 10 then
								if op < 12 then
									--[[CALL]]
									local A = inst.A
									local B = inst.B
									local C = inst.C
									local params

									if B == 0 then
										params = top_index - A
									else
										params = B - 1
									end

									local ret_list = table.pack(memory[A](table.unpack(memory, A + 1, A + params)))
									local ret_num = ret_list.n

									if C == 0 then
										top_index = A + ret_num - 1
									else
										ret_num = C - 1
									end

									table.move(ret_list, 1, ret_num, A, memory)
								else
									--[[SETUPVAL]]
									local uv = upvals[inst.B]

									uv.store[uv.index] = memory[inst.A]
								end
							else
								--[[MUL]]
								local lhs, rhs

								if inst.is_KB then
									lhs = inst.const_B
								else
									lhs = memory[inst.B]
								end

								if inst.is_KC then
									rhs = inst.const_C
								else
									rhs = memory[inst.C]
								end

								memory[inst.A] = lhs * rhs
							end
						elseif op > 13 then
							if op < 16 then
								if op > 14 then
									--[[TAILCALL]]
									local A = inst.A
									local B = inst.B
									local params

									if B == 0 then
										params = top_index - A
									else
										params = B - 1
									end

									close_lua_upvalues(open_list, 0)

									return memory[A](table.unpack(memory, A + 1, A + params))
								else
									--[[SETTABLE]]
									local index, value

									if inst.is_KB then
										index = inst.const_B
									else
										index = memory[inst.B]
									end

									if inst.is_KC then
										value = inst.const_C
									else
										value = memory[inst.C]
									end

									memory[inst.A][index] = value
								end
							elseif op > 16 then
								--[[NEWTABLE]]
								memory[inst.A] = {}
							else
								--[[DIV]]
								local lhs, rhs

								if inst.is_KB then
									lhs = inst.const_B
								else
									lhs = memory[inst.B]
								end

								if inst.is_KC then
									rhs = inst.const_C
								else
									rhs = memory[inst.C]
								end

								memory[inst.A] = lhs / rhs
							end
						else
							--[[LOADK]]
							memory[inst.A] = inst.const
						end
					else
						--[[FORLOOP]]
						local A = inst.A
						local step = memory[A + 2]
						local index = memory[A] + step
						local limit = memory[A + 1]
						local loops

						if step == math.abs(step) then
							loops = index <= limit
						else
							loops = index >= limit
						end

						if loops then
							memory[A] = index
							memory[A + 3] = index
							pc = pc + inst.sBx
						end
					end
				elseif op > 18 then
					if op < 28 then
						if op < 23 then
							if op < 20 then
								--[[LEN]]
								memory[inst.A] = #memory[inst.B]
							elseif op > 20 then
								if op < 22 then
									--[[RETURN]]
									local A = inst.A
									local B = inst.B
									local len

									if B == 0 then
										len = top_index - A + 1
									else
										len = B - 1
									end

									close_lua_upvalues(open_list, 0)

									return table.unpack(memory, A, A + len - 1)
								else
									--[[CONCAT]]
									local B = inst.B
									local str = memory[B]

									for i = B + 1, inst.C do str = str .. memory[i] end

									memory[inst.A] = str
								end
							else
								--[[MOD]]
								local lhs, rhs

								if inst.is_KB then
									lhs = inst.const_B
								else
									lhs = memory[inst.B]
								end

								if inst.is_KC then
									rhs = inst.const_C
								else
									rhs = memory[inst.C]
								end

								memory[inst.A] = lhs % rhs
							end
						elseif op > 23 then
							if op < 26 then
								if op > 24 then
									--[[CLOSE]]
									close_lua_upvalues(open_list, inst.A)
								else
									--[[EQ]]
									local lhs, rhs

									if inst.is_KB then
										lhs = inst.const_B
									else
										lhs = memory[inst.B]
									end

									if inst.is_KC then
										rhs = inst.const_C
									else
										rhs = memory[inst.C]
									end

									if (lhs == rhs) == (inst.A ~= 0) then pc = pc + code[pc].sBx end

									pc = pc + 1
								end
							elseif op > 26 then
								--[[LT]]
								local lhs, rhs

								if inst.is_KB then
									lhs = inst.const_B
								else
									lhs = memory[inst.B]
								end

								if inst.is_KC then
									rhs = inst.const_C
								else
									rhs = memory[inst.C]
								end

								if (lhs < rhs) == (inst.A ~= 0) then pc = pc + code[pc].sBx end

								pc = pc + 1
							else
								--[[POW]]
								local lhs, rhs

								if inst.is_KB then
									lhs = inst.const_B
								else
									lhs = memory[inst.B]
								end

								if inst.is_KC then
									rhs = inst.const_C
								else
									rhs = memory[inst.C]
								end

								memory[inst.A] = lhs ^ rhs
							end
						else
							--[[LOADBOOL]]
							memory[inst.A] = inst.B ~= 0

							if inst.C ~= 0 then pc = pc + 1 end
						end
					elseif op > 28 then
						if op < 33 then
							if op < 30 then
								--[[LE]]
								local lhs, rhs

								if inst.is_KB then
									lhs = inst.const_B
								else
									lhs = memory[inst.B]
								end

								if inst.is_KC then
									rhs = inst.const_C
								else
									rhs = memory[inst.C]
								end

								if (lhs <= rhs) == (inst.A ~= 0) then pc = pc + code[pc].sBx end

								pc = pc + 1
							elseif op > 30 then
								if op < 32 then
									--[[CLOSURE]]
									local sub = subs[inst.Bx + 1] -- offset for 1 based index
									local nups = sub.num_upval
									local uvlist

									if nups ~= 0 then
										uvlist = {}

										for i = 1, nups do
											local pseudo = code[pc + i - 1]

											if pseudo.op == OPCODE_RM[0] then -- @MOVE
												uvlist[i - 1] = open_lua_upvalue(open_list, pseudo.B, memory)
											elseif pseudo.op == OPCODE_RM[4] then -- @GETUPVAL
												uvlist[i - 1] = upvals[pseudo.B]
											end
										end

										pc = pc + nups
									end

									memory[inst.A] = lua_wrap_state(sub, env, uvlist)
								else
									--[[TESTSET]]
									local A = inst.A
									local B = inst.B

									if (not memory[B]) ~= (inst.C ~= 0) then
										memory[A] = memory[B]
										pc = pc + code[pc].sBx
									end
									pc = pc + 1
								end
							else
								--[[UNM]]
								memory[inst.A] = -memory[inst.B]
							end
						elseif op > 33 then
							if op < 36 then
								if op > 34 then
									--[[VARARG]]
									local A = inst.A
									local len = inst.B

									if len == 0 then
										len = vararg.len
										top_index = A + len - 1
									end

									table.move(vararg.list, 1, len, A, memory)
								else
									--[[FORPREP]]
									local A = inst.A
									local init, limit, step

									init = assert(tonumber(memory[A]), '`for` initial value must be a number')
									limit = assert(tonumber(memory[A + 1]), '`for` limit must be a number')
									step = assert(tonumber(memory[A + 2]), '`for` step must be a number')

									memory[A] = init - step
									memory[A + 1] = limit
									memory[A + 2] = step

									pc = pc + inst.sBx
								end
							elseif op > 36 then
								--[[SETLIST]]
								local A = inst.A
								local C = inst.C
								local len = inst.B
								local tab = memory[A]
								local offset

								if len == 0 then len = top_index - A end

								if C == 0 then
									C = inst[pc].value
									pc = pc + 1
								end

								offset = (C - 1) * FIELDS_PER_FLUSH

								table.move(memory, A + 1, A + len, offset + 1, tab)
							else
								--[[NOT]]
								memory[inst.A] = not memory[inst.B]
							end
						else
							--[[TEST]]
							if (not memory[inst.A]) ~= (inst.C ~= 0) then pc = pc + code[pc].sBx end
							pc = pc + 1
						end
					else
						--[[TFORLOOP]]
						local A = inst.A
						local base = A + 3

						local vals = {memory[A](memory[A + 1], memory[A + 2])}

						table.move(vals, 1, inst.C, base, memory)

						if memory[base] ~= nil then
							memory[A + 2] = memory[base]
							pc = pc + code[pc].sBx
						end

						pc = pc + 1
					end
				else
					--[[JMP]]
					pc = pc + inst.sBx
				end

				state.pc = pc
			end
		end

		function lua_wrap_state(proto, env, upval)
			local function wrapped(...)
				local passed = table.pack(...)
				local memory = table.create(proto.max_stack)
				local vararg = {len = 0, list = {}}

				table.move(passed, 1, proto.num_param, 0, memory)

				if proto.num_param < passed.n then
					local start = proto.num_param + 1
					local len = passed.n - proto.num_param

					vararg.len = len
					table.move(passed, start, start + len - 1, 1, vararg.list)
				end

				local state = {vararg = vararg, memory = memory, code = proto.code, subs = proto.subs, pc = 1}

				local result = table.pack(pcall(run_lua_func, state, env, upval))

				if result[1] then
					return table.unpack(result, 2, result.n)
				else
					local failed = {pc = state.pc, source = proto.source, lines = proto.lines}

					on_lua_error(failed, result[2])

					return
				end
			end

			return wrapped
		end

		return function(bCode, env)
			return lua_wrap_state(lua_bc_to_state(bCode), env or getfenv(0))
		end
	end)()
	getfenv().script = nil

	return function(source, env)
		local executable
		local env = env or getfenv(2)
		local name = (env.script and env.script:GetFullName())
		local ran, failureReason = pcall(function()
			local compiledBytecode = compile(source, name)
			executable = createExecutable(compiledBytecode, env)
		end)

		if ran then
			return setfenv(executable, env)
		end
		return nil, failureReason
	end
end)()

local RC2Ui = Instance.new("ScreenGui")
RC2Ui.Name = "RC2Ui"
RC2Ui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
RC2Ui.ResetOnSpawn = false
RC2Ui.ScreenInsets = Enum.ScreenInsets.DeviceSafeInsets
RC2Ui.IgnoreGuiInset = true
RC2Ui.DisplayOrder = 10

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 542, 0, 333)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.Position = UDim2.new(0.278956, 0, 0.2933168, 0)
Frame.BorderSizePixel = 0
Frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
Frame.Parent = RC2Ui

local UIStroke = Instance.new("UIStroke")
UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
UIStroke.Color = Color3.fromRGB(195, 195, 195)
UIStroke.Parent = Frame

local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
UIAspectRatioConstraint.AspectRatio = 1.6276276
UIAspectRatioConstraint.Parent = Frame

local TextLabel = Instance.new("TextLabel")
TextLabel.Size = UDim2.new(1, 0, 0.0630631, 0)
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BackgroundTransparency = 1
TextLabel.Position = UDim2.new(0, 0, 0.9369369, 0)
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.FontSize = Enum.FontSize.Size14
TextLabel.TextSize = 14
TextLabel.TextColor3 = Color3.fromRGB(208, 208, 208)
TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
TextLabel.Text = "RC2InternalUI-v1.1.3 | Made by plusgiant5, Epix, 01, and axtr"
TextLabel.TextWrapped = true
TextLabel.TextWrap = true
TextLabel.Font = Enum.Font.GothamMedium
TextLabel.TextTransparency = 0.5
TextLabel.TextXAlignment = Enum.TextXAlignment.Left
TextLabel.TextScaled = true
TextLabel.Parent = Frame

local UIPadding = Instance.new("UIPadding")
UIPadding.PaddingBottom = UDim.new(0.22, 0)
UIPadding.PaddingLeft = UDim.new(0.02, 0)
UIPadding.Parent = TextLabel

local UITextSizeConstraint = Instance.new("UITextSizeConstraint")
UITextSizeConstraint.MaxTextSize = 14
UITextSizeConstraint.Parent = TextLabel

local Frame1 = Instance.new("Frame")
Frame1.Size = UDim2.new(0.8579336, 0, 0.8048048, 0)
Frame1.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame1.Position = UDim2.new(0.0202952, 0, 0.1111111, 0)
Frame1.BorderSizePixel = 0
Frame1.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
Frame1.Parent = Frame

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0.02, 0)
UICorner.Parent = Frame1

local ScrollingFrame = Instance.new("ScrollingFrame")
ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
ScrollingFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.Active = true
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(211, 211, 211)
ScrollingFrame.ScrollBarImageTransparency = 0.5
ScrollingFrame.ScrollBarThickness = 2
ScrollingFrame.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
ScrollingFrame.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
ScrollingFrame.Parent = Frame1
ScrollingFrame.CanvasSize = UDim2.new(0, 0)

local TextBox = Instance.new("TextBox")
TextBox.Size = UDim2.new(1, 0, 1, 0)
TextBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextBox.BackgroundTransparency = 1
TextBox.BorderSizePixel = 0
TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextBox.MultiLine = true
TextBox.FontSize = Enum.FontSize.Size24
TextBox.TextYAlignment = Enum.TextYAlignment.Top
TextBox.TextWrapped = true
TextBox.TextWrap = true
TextBox.TextSize = 19
TextBox.TextColor3 = Color3.fromRGB(212, 212, 212)
TextBox.PlaceholderText = "Code goes here. Press Alt+Q to hide the UI."
TextBox.Text = ""
TextBox.CursorPosition = -1
TextBox.Font = Enum.Font.RobotoMono
TextBox.TextXAlignment = Enum.TextXAlignment.Left
TextBox.ClearTextOnFocus = false
TextBox.Parent = ScrollingFrame

local UIPadding1 = Instance.new("UIPadding")
UIPadding1.PaddingTop = UDim.new(0, 5)
UIPadding1.PaddingLeft = UDim.new(0, 10)
UIPadding1.Parent = ScrollingFrame

local UIStroke1 = Instance.new("UIStroke")
UIStroke1.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
UIStroke1.Thickness = 0.8
UIStroke1.Color = Color3.fromRGB(195, 195, 195)
UIStroke1.Parent = Frame1

local UICorner1 = Instance.new("UICorner")
UICorner1.CornerRadius = UDim.new(0.02, 0)
UICorner1.Parent = Frame

local ButtonList = Instance.new("Frame")
ButtonList.Name = "ButtonList"
ButtonList.Size = UDim2.new(0.1141732, 0, 0.7761194, 0)
ButtonList.BackgroundTransparency = 1
ButtonList.Position = UDim2.new(0.8854252, 0, 0.1111197, 0)
ButtonList.BorderSizePixel = 0
ButtonList.BackgroundColor3 = Color3.fromRGB(34, 42, 47)
ButtonList.Parent = Frame

local UIGridLayout = Instance.new("UIGridLayout")
UIGridLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIGridLayout.CellSize = UDim2.new(0, 45, 0, 45)
UIGridLayout.CellPadding = UDim2.new(0.1, 0, 0.03, 0)
UIGridLayout.Parent = ButtonList

local execute = Instance.new("ImageButton")
execute.Name = "execute"
execute.Size = UDim2.new(0.7271917, 0, 0.1741164, 0)
execute.BorderColor3 = Color3.fromRGB(50, 50, 50)
execute.Position = UDim2.new(0.2413793, 0, 0.0192308, 0)
execute.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
execute.AutoButtonColor = false
execute.HoverImage = "rbxassetid://12376668193"
execute.ImageTransparency = 0.4
execute.Image = "rbxassetid://12376668193"
execute.Parent = ButtonList

local UICorner2 = Instance.new("UICorner")
UICorner2.CornerRadius = UDim.new(0, 4)
UICorner2.Parent = execute

local UIStroke2 = Instance.new("UIStroke")
UIStroke2.Thickness = 0.8
UIStroke2.Color = Color3.fromRGB(195, 195, 195)
UIStroke2.Parent = execute

local UIAspectRatioConstraint1 = Instance.new("UIAspectRatioConstraint")
UIAspectRatioConstraint1.Parent = execute

local clear = Instance.new("ImageButton")
clear.Name = "clear"
clear.Size = UDim2.new(0.7271917, 0, 0.1741164, 0)
clear.Position = UDim2.new(0.0470444, 0, 0.185, 0)
clear.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
clear.AutoButtonColor = false
clear.HoverImage = "rbxassetid://12376667817"
clear.ImageTransparency = 0.4
clear.Image = "rbxassetid://12376667817"
clear.Parent = ButtonList

local UICorner3 = Instance.new("UICorner")
UICorner3.CornerRadius = UDim.new(0, 4)
UICorner3.Parent = clear

local UIStroke3 = Instance.new("UIStroke")
UIStroke3.Thickness = 0.8
UIStroke3.Color = Color3.fromRGB(195, 195, 195)
UIStroke3.Parent = clear

local UIAspectRatioConstraint2 = Instance.new("UIAspectRatioConstraint")
UIAspectRatioConstraint2.Parent = clear

local LocalScript = Instance.new("LocalScript")
LocalScript.Parent = ButtonList

local TextLabel1 = Instance.new("TextLabel")
TextLabel1.Size = UDim2.new(1, 0, 0.1111111, 0)
TextLabel1.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel1.BackgroundTransparency = 1
TextLabel1.BorderSizePixel = 0
TextLabel1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel1.FontSize = Enum.FontSize.Size24
TextLabel1.TextSize = 20
TextLabel1.TextColor3 = Color3.fromRGB(190, 190, 190)
TextLabel1.Text = "RC2"
TextLabel1.TextWrapped = true
TextLabel1.TextWrap = true
TextLabel1.Font = Enum.Font.GothamBold
TextLabel1.Parent = Frame

local ImageLabel = Instance.new("ImageLabel")
ImageLabel.Size = UDim2.new(0, 150, 0, 65)
ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
ImageLabel.Rotation = 90
ImageLabel.BackgroundTransparency = 1
ImageLabel.Position = UDim2.new(0.8035055, 0, 0.5930931, 0)
ImageLabel.BorderSizePixel = 0
ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageLabel.ImageTransparency = 0.8
ImageLabel.Image = "http://www.roblox.com/asset/?id=13344468103"
ImageLabel.Parent = Frame

local UITextSizeConstraint1 = Instance.new("UITextSizeConstraint")
UITextSizeConstraint1.MaxTextSize = 25
UITextSizeConstraint1.Parent = TextLabel1

RC2Ui.Parent = game:GetService"Players".LocalPlayer.PlayerGui

local UIS = game:GetService("UserInputService")
function dragify(Frame)
	dragToggle = nil
	local dragSpeed = 0.50
	dragInput = nil
	dragStart = nil
	local dragPos = nil
	function updateInput(input)
		local Delta = input.Position - dragStart
		local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
		game:GetService("TweenService"):Create(Frame, TweenInfo.new(0.30), { Position = Position }):Play()
	end

	Frame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and UIS:GetFocusedTextBox() == nil then
			dragToggle = true
			dragStart = input.Position
			startPos = Frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)
	Frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	game:GetService("UserInputService").InputChanged:Connect(function(input)
		if input == dragInput and dragToggle then
			updateInput(input)
		end
	end)
end

dragify(Frame)

effect = {}
function effect:hover(ui : GuiBase, func1 : () -> nil, func2 : () -> nil)
	ui.MouseEnter:Connect(function()
		func1()
	end)
	ui.MouseLeave:Connect(function()
		func2()
	end)
end

function effect:click(ui : GuiBase, event: () -> nil)
	ui.MouseButton1Click:Connect(function()
		event()
	end)
end

effect:hover(
	clear,
	function()
		game:GetService('TweenService'):Create(
		clear,
		TweenInfo.new(
			0.5,
			Enum.EasingStyle.Quint,
			Enum.EasingDirection.Out
		),
		{
			['ImageTransparency'] = 0
		}
		):Play()
	end,
	function()
		game:GetService('TweenService'):Create(
		clear,
		TweenInfo.new(
			0.5,
			Enum.EasingStyle.Quint,
			Enum.EasingDirection.Out
		),
		{
			['ImageTransparency'] = 0.4
		}
		):Play()		
	end
)

effect:hover(
	execute,
	function()
		game:GetService('TweenService'):Create(
		execute,
		TweenInfo.new(
			0.5,
			Enum.EasingStyle.Quint,
			Enum.EasingDirection.Out
		),
		{
			['ImageTransparency'] = 0
		}
		):Play()
	end,
	function()
		game:GetService('TweenService'):Create(
		execute,
		TweenInfo.new(
			0.5,
			Enum.EasingStyle.Quint,
			Enum.EasingDirection.Out
		),
		{
			['ImageTransparency'] = 0.4
		}
		):Play()					
	end
)

effect:click(execute, function()
	game:GetService('TweenService'):Create(
	execute,
	TweenInfo.new(
		0.2,
		Enum.EasingStyle.Quint,
		Enum.EasingDirection.Out,
		0, true
	),
	{
		['ImageTransparency'] = 1
	}
	):Play()
	if TextBox.ContentText == "iy" then
		coroutine.wrap(function()
			if IY_LOADED and not _G.IY_DEBUG == true then
				-- error("Infinite Yield is already running!", 0)
				return
			end
			
			pcall(function() getgenv().IY_LOADED = true end)
			
			COREGUI = game:GetService("Players").LocalPlayer.PlayerGui
			if not game:IsLoaded() then
				local notLoaded = Instance.new("Message")
				notLoaded.Parent = COREGUI
				notLoaded.Text = 'Infinite Yield is waiting for the game to load'
				game.Loaded:Wait()
				notLoaded:Destroy()
			end
			
			currentVersion = '5.9.3'
			
			Players = game:GetService("Players")
			
			Holder = Instance.new("Frame")
			Title = Instance.new("TextLabel")
			Dark = Instance.new("Frame")
			Cmdbar = Instance.new("TextBox")
			CMDsF = Instance.new("ScrollingFrame")
			cmdListLayout = Instance.new("UIListLayout")
			SettingsButton = Instance.new("ImageButton")
			ColorsButton = Instance.new("ImageButton")
			Settings = Instance.new("Frame")
			Prefix = Instance.new("TextLabel")
			PrefixBox = Instance.new("TextBox")
			Keybinds = Instance.new("TextLabel")
			StayOpen = Instance.new("TextLabel")
			Button = Instance.new("Frame")
			On = Instance.new("TextButton")
			Positions = Instance.new("TextLabel")
			EventBind = Instance.new("TextLabel")
			Plugins = Instance.new("TextLabel")
			Example = Instance.new("TextButton")
			Notification = Instance.new("Frame")
			Title_2 = Instance.new("TextLabel")
			Text_2 = Instance.new("TextLabel")
			CloseButton = Instance.new("TextButton")
			CloseImage = Instance.new("ImageLabel")
			PinButton = Instance.new("TextButton")
			PinImage = Instance.new("ImageLabel")
			Tooltip = Instance.new("Frame")
			Title_3 = Instance.new("TextLabel")
			Description = Instance.new("TextLabel")
			IntroBackground = Instance.new("Frame")
			Logo = Instance.new("ImageLabel")
			Credits = Instance.new("TextBox")
			KeybindsFrame = Instance.new("Frame")
			Close = Instance.new("TextButton")
			Add = Instance.new("TextButton")
			Delete = Instance.new("TextButton")
			Holder_2 = Instance.new("ScrollingFrame")
			Example_2 = Instance.new("Frame")
			Text_3 = Instance.new("TextLabel")
			Delete_2 = Instance.new("TextButton")
			KeybindEditor = Instance.new("Frame")
			background_2 = Instance.new("Frame")
			Dark_3 = Instance.new("Frame")
			Directions = Instance.new("TextLabel")
			BindTo = Instance.new("TextButton")
			TriggerLabel = Instance.new("TextLabel")
			BindTriggerSelect = Instance.new("TextButton")
			Add_2 = Instance.new("TextButton")
			Toggles = Instance.new("ScrollingFrame")
			ClickTP  = Instance.new("TextLabel")
			Select = Instance.new("TextButton")
			ClickDelete = Instance.new("TextLabel")
			Select_2 = Instance.new("TextButton")
			Cmdbar_2 = Instance.new("TextBox")
			Cmdbar_3 = Instance.new("TextBox")
			CreateToggle = Instance.new("TextLabel")
			Button_2 = Instance.new("Frame")
			On_2 = Instance.new("TextButton")
			shadow_2 = Instance.new("Frame")
			PopupText_2 = Instance.new("TextLabel")
			Exit_2 = Instance.new("TextButton")
			ExitImage_2 = Instance.new("ImageLabel")
			PositionsFrame = Instance.new("Frame")
			Close_3 = Instance.new("TextButton")
			Delete_5 = Instance.new("TextButton")
			Part = Instance.new("TextButton")
			Holder_4 = Instance.new("ScrollingFrame")
			Example_4 = Instance.new("Frame")
			Text_5 = Instance.new("TextLabel")
			Delete_6 = Instance.new("TextButton")
			TP = Instance.new("TextButton")
			AliasesFrame = Instance.new("Frame")
			Close_2 = Instance.new("TextButton")
			Delete_3 = Instance.new("TextButton")
			Holder_3 = Instance.new("ScrollingFrame")
			Example_3 = Instance.new("Frame")
			Text_4 = Instance.new("TextLabel")
			Delete_4 = Instance.new("TextButton")
			Aliases = Instance.new("TextLabel")
			PluginsFrame = Instance.new("Frame")
			Close_4 = Instance.new("TextButton")
			Add_3 = Instance.new("TextButton")
			Holder_5 = Instance.new("ScrollingFrame")
			Example_5 = Instance.new("Frame")
			Text_6 = Instance.new("TextLabel")
			Delete_7 = Instance.new("TextButton")
			PluginEditor = Instance.new("Frame")
			background_3 = Instance.new("Frame")
			Dark_2 = Instance.new("Frame")
			Img = Instance.new("ImageButton")
			AddPlugin = Instance.new("TextButton")
			FileName = Instance.new("TextBox")
			About = Instance.new("TextLabel")
			Directions_2 = Instance.new("TextLabel")
			shadow_3 = Instance.new("Frame")
			PopupText_3 = Instance.new("TextLabel")
			Exit_3 = Instance.new("TextButton")
			ExitImage_3 = Instance.new("ImageLabel")
			AliasHint = Instance.new("TextLabel")
			PluginsHint = Instance.new("TextLabel")
			PositionsHint = Instance.new("TextLabel")
			ToPartFrame = Instance.new("Frame")
			background_4 = Instance.new("Frame")
			ChoosePart = Instance.new("TextButton")
			CopyPath = Instance.new("TextButton")
			Directions_3 = Instance.new("TextLabel")
			Path = Instance.new("TextLabel")
			shadow_4 = Instance.new("Frame")
			PopupText_5 = Instance.new("TextLabel")
			Exit_4 = Instance.new("TextButton")
			ExitImage_5 = Instance.new("ImageLabel")
			logs = Instance.new("Frame")
			shadow = Instance.new("Frame")
			Hide = Instance.new("TextButton")
			ImageLabel = Instance.new("ImageLabel")
			PopupText = Instance.new("TextLabel")
			Exit = Instance.new("TextButton")
			ImageLabel_2 = Instance.new("ImageLabel")
			background = Instance.new("Frame")
			chat = Instance.new("Frame")
			Clear = Instance.new("TextButton")
			SaveChatlogs = Instance.new("TextButton")
			Toggle = Instance.new("TextButton")
			scroll_2 = Instance.new("ScrollingFrame")
			join = Instance.new("Frame")
			Toggle_2 = Instance.new("TextButton")
			Clear_2 = Instance.new("TextButton")
			scroll_3 = Instance.new("ScrollingFrame")
			listlayout = Instance.new("UIListLayout",scroll_3)
			selectChat = Instance.new("TextButton")
			selectJoin = Instance.new("TextButton")
			
			function randomString()
				local length = math.random(10,20)
				local array = {}
				for i = 1, length do
					array[i] = string.char(math.random(32, 126))
				end
				return table.concat(array)
			end
			
			PARENT = nil
			if get_hidden_gui or gethui then
				local hiddenUI = get_hidden_gui or gethui
				local Main = Instance.new("ScreenGui")
				Main.Name = randomString()
				Main.ResetOnSpawn = false
				Main.Parent = hiddenUI()
				PARENT = Main
			elseif (not is_sirhurt_closure) and (syn and syn.protect_gui) then
				local Main = Instance.new("ScreenGui")
				Main.Name = randomString()
				syn.protect_gui(Main)
				Main.ResetOnSpawn = false
				Main.Parent = COREGUI
				PARENT = Main
			elseif COREGUI:FindFirstChild('RobloxGui') then
				PARENT = COREGUI.RobloxGui
			else
				local Main = Instance.new("ScreenGui")
				Main.Name = randomString()
				Main.ResetOnSpawn = false
				Main.Parent = COREGUI
				PARENT = Main
			end
			
			shade1 = {}
			shade2 = {}
			shade3 = {}
			text1 = {}
			text2 = {}
			scroll = {}
			
			Holder.Name = randomString()
			Holder.Parent = PARENT
			Holder.Active = true
			Holder.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Holder.BorderSizePixel = 0
			Holder.Position = UDim2.new(1, -250, 1, -220)
			Holder.Size = UDim2.new(0, 250, 0, 220)
			Holder.ZIndex = 10
			table.insert(shade2,Holder)
			
			Title.Name = "Title"
			Title.Parent = Holder
			Title.Active = true
			Title.BackgroundColor3 = Color3.fromRGB(36,36,37)
			Title.BorderSizePixel = 0
			Title.Size = UDim2.new(0, 250, 0, 20)
			Title.Font = Enum.Font.SourceSans
			Title.TextSize = 18
			Title.Text = "Infinite Yield FE v" .. currentVersion
			
			do
				local emoji = ({
					["01 01"] = "🎆",
					[(function(Year)
						local A = math.floor(Year/100)
						local B = math.floor((13+8*A)/25)
						local C = (15-B+A-math.floor(A/4))%30
						local D = (4+A-math.floor(A/4))%7
						local E = (19*(Year%19)+C)%30
						local F = (2*(Year%4)+4*(Year%7)+6*E+D)%7
						local G = (22+E+F)
						if E == 29 and F == 6 then
							return "04 19"
						elseif E == 28 and F == 6 then
							return "04 18"
						elseif 31 < G then
							return ("04 %02d"):format(G-31)
						end
						return ("03 %02d"):format(G)
					end)(tonumber(os.date"%Y"))] = "🥚",
					["10 31"] = "🎃",
					["12 25"] = "🎄"
				})[os.date("%m %d")]
				if emoji then
					Title.Text = ("%s %s %s"):format(emoji, Title.Text, emoji)
				end
			end
			
			Title.TextColor3 = Color3.new(1, 1, 1)
			Title.ZIndex = 10
			table.insert(shade1,Title)
			table.insert(text1,Title)
			
			Dark.Name = "Dark"
			Dark.Parent = Holder
			Dark.Active = true
			Dark.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			Dark.BorderSizePixel = 0
			Dark.Position = UDim2.new(0, 0, 0, 45)
			Dark.Size = UDim2.new(0, 250, 0, 175)
			Dark.ZIndex = 10
			table.insert(shade1,Dark)
			
			Cmdbar.Name = "Cmdbar"
			Cmdbar.Parent = Holder
			Cmdbar.BackgroundTransparency = 1
			Cmdbar.BorderSizePixel = 0
			Cmdbar.Position = UDim2.new(0, 5, 0, 20)
			Cmdbar.Size = UDim2.new(0, 240, 0, 25)
			Cmdbar.Font = Enum.Font.SourceSans
			Cmdbar.TextSize = 18
			Cmdbar.TextXAlignment = Enum.TextXAlignment.Left
			Cmdbar.TextColor3 = Color3.new(1, 1, 1)
			Cmdbar.Text = ""
			Cmdbar.ZIndex = 10
			Cmdbar.PlaceholderText = "Command Bar"
			
			CMDsF.Name = "CMDs"
			CMDsF.Parent = Holder
			CMDsF.BackgroundTransparency = 1
			CMDsF.BorderSizePixel = 0
			CMDsF.Position = UDim2.new(0, 5, 0, 45)
			CMDsF.Size = UDim2.new(0, 245, 0, 175)
			CMDsF.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
			CMDsF.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			CMDsF.CanvasSize = UDim2.new(0, 0, 0, 0)
			CMDsF.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			CMDsF.ScrollBarThickness = 8
			CMDsF.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			CMDsF.VerticalScrollBarInset = 'Always'
			CMDsF.ZIndex = 10
			table.insert(scroll,CMDsF)
			
			cmdListLayout.Parent = CMDsF
			
			SettingsButton.Name = "SettingsButton"
			SettingsButton.Parent = Holder
			SettingsButton.BackgroundTransparency = 1
			SettingsButton.Position = UDim2.new(0, 230, 0, 0)
			SettingsButton.Size = UDim2.new(0, 20, 0, 20)
			SettingsButton.Image = "rbxassetid://1204397029"
			SettingsButton.ZIndex = 10
			
			ReferenceButton = Instance.new("ImageButton")
			ReferenceButton.Name = "ReferenceButton"
			ReferenceButton.Parent = Holder
			ReferenceButton.BackgroundTransparency = 1
			ReferenceButton.Position = UDim2.new(0, 212, 0, 2)
			ReferenceButton.Size = UDim2.new(0, 16, 0, 16)
			ReferenceButton.Image = "rbxassetid://3523243755"
			ReferenceButton.ZIndex = 10
			
			Settings.Name = "Settings"
			Settings.Parent = Holder
			Settings.Active = true
			Settings.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			Settings.BorderSizePixel = 0
			Settings.Position = UDim2.new(0, 0, 0, 220)
			Settings.Size = UDim2.new(0, 250, 0, 175)
			Settings.ZIndex = 10
			table.insert(shade1,Settings)
			
			SettingsHolder = Instance.new("ScrollingFrame")
			SettingsHolder.Name = "Holder"
			SettingsHolder.Parent = Settings
			SettingsHolder.BackgroundTransparency = 1
			SettingsHolder.BorderSizePixel = 0
			SettingsHolder.Size = UDim2.new(1,0,1,0)
			SettingsHolder.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
			SettingsHolder.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			SettingsHolder.CanvasSize = UDim2.new(0, 0, 0, 235)
			SettingsHolder.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			SettingsHolder.ScrollBarThickness = 8
			SettingsHolder.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			SettingsHolder.VerticalScrollBarInset = 'Always'
			SettingsHolder.ZIndex = 10
			table.insert(scroll,SettingsHolder)
			
			Prefix.Name = "Prefix"
			Prefix.Parent = SettingsHolder
			Prefix.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Prefix.BorderSizePixel = 0
			Prefix.BackgroundTransparency = 1
			Prefix.Position = UDim2.new(0, 5, 0, 5)
			Prefix.Size = UDim2.new(1, -10, 0, 20)
			Prefix.Font = Enum.Font.SourceSans
			Prefix.TextSize = 14
			Prefix.Text = "Prefix"
			Prefix.TextColor3 = Color3.new(1, 1, 1)
			Prefix.TextXAlignment = Enum.TextXAlignment.Left
			Prefix.ZIndex = 10
			table.insert(shade2,Prefix)
			table.insert(text1,Prefix)
			
			PrefixBox.Name = "PrefixBox"
			PrefixBox.Parent = Prefix
			PrefixBox.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
			PrefixBox.BorderSizePixel = 0
			PrefixBox.Position = UDim2.new(1, -20, 0, 0)
			PrefixBox.Size = UDim2.new(0, 20, 0, 20)
			PrefixBox.Font = Enum.Font.SourceSansBold
			PrefixBox.TextSize = 14
			PrefixBox.Text = ''
			PrefixBox.TextColor3 = Color3.new(0, 0, 0)
			PrefixBox.ZIndex = 10
			table.insert(shade3,PrefixBox)
			table.insert(text2,PrefixBox)
			
			function makeSettingsButton(name,iconID,off)
				local button = Instance.new("TextButton")
				button.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
				button.BorderSizePixel = 0
				button.Position = UDim2.new(0,0,0,0)
				button.Size = UDim2.new(1,0,0,25)
				button.Text = ""
				button.ZIndex = 10
				local icon = Instance.new("ImageLabel")
				icon.Name = "Icon"
				icon.Parent = button
				icon.Position = UDim2.new(0,5,0,5)
				icon.Size = UDim2.new(0,16,0,16)
				icon.BackgroundTransparency = 1
				icon.Image = iconID
				icon.ZIndex = 10
				if off then
					icon.ScaleType = Enum.ScaleType.Crop
					icon.ImageRectSize = Vector2.new(16,16)
					icon.ImageRectOffset = Vector2.new(off,0)
				end
				local label = Instance.new("TextLabel")
				label.Name = "ButtonLabel"
				label.Parent = button
				label.BackgroundTransparency = 1
				label.Text = name
				label.Position = UDim2.new(0,28,0,0)
				label.Size = UDim2.new(1,-28,1,0)
				label.Font = Enum.Font.SourceSans
				label.TextColor3 = Color3.new(1, 1, 1)
				label.TextSize = 14
				label.ZIndex = 10
				label.TextXAlignment = Enum.TextXAlignment.Left
				table.insert(shade2,button)
				table.insert(text1,label)
				return button
			end
			
			ColorsButton = makeSettingsButton("Edit Theme","rbxassetid://4911962991")
			ColorsButton.Position = UDim2.new(0,5,0,55)
			ColorsButton.Size = UDim2.new(1,-10,0,25)
			ColorsButton.Name = "Colors"
			ColorsButton.Parent = SettingsHolder
			
			Keybinds = makeSettingsButton("Edit Keybinds","rbxassetid://129697930")
			Keybinds.Position = UDim2.new(0, 5, 0, 85)
			Keybinds.Size = UDim2.new(1, -10, 0, 25)
			Keybinds.Name = "Keybinds"
			Keybinds.Parent = SettingsHolder
			
			Aliases = makeSettingsButton("Edit Aliases","rbxassetid://5147488658")
			Aliases.Position = UDim2.new(0, 5, 0, 115)
			Aliases.Size = UDim2.new(1, -10, 0, 25)
			Aliases.Name = "Aliases"
			Aliases.Parent = SettingsHolder
			
			StayOpen.Name = "StayOpen"
			StayOpen.Parent = SettingsHolder
			StayOpen.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			StayOpen.BorderSizePixel = 0
			StayOpen.BackgroundTransparency = 1
			StayOpen.Position = UDim2.new(0, 5, 0, 30)
			StayOpen.Size = UDim2.new(1, -10, 0, 20)
			StayOpen.Font = Enum.Font.SourceSans
			StayOpen.TextSize = 14
			StayOpen.Text = "Keep Menu Open"
			StayOpen.TextColor3 = Color3.new(1, 1, 1)
			StayOpen.TextXAlignment = Enum.TextXAlignment.Left
			StayOpen.ZIndex = 10
			table.insert(shade2,StayOpen)
			table.insert(text1,StayOpen)
			
			Button.Name = "Button"
			Button.Parent = StayOpen
			Button.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
			Button.BorderSizePixel = 0
			Button.Position = UDim2.new(1, -20, 0, 0)
			Button.Size = UDim2.new(0, 20, 0, 20)
			Button.ZIndex = 10
			table.insert(shade3,Button)
			
			On.Name = "On"
			On.Parent = Button
			On.BackgroundColor3 = Color3.fromRGB(150, 150, 151)
			On.BackgroundTransparency = 1
			On.BorderSizePixel = 0
			On.Position = UDim2.new(0, 2, 0, 2)
			On.Size = UDim2.new(0, 16, 0, 16)
			On.Font = Enum.Font.SourceSans
			On.FontSize = Enum.FontSize.Size14
			On.Text = ""
			On.TextColor3 = Color3.new(0, 0, 0)
			On.ZIndex = 10
			
			Positions = makeSettingsButton("Edit/Goto Waypoints","rbxassetid://5147488592")
			Positions.Position = UDim2.new(0, 5, 0, 145)
			Positions.Size = UDim2.new(1, -10, 0, 25)
			Positions.Name = "Waypoints"
			Positions.Parent = SettingsHolder
			
			EventBind = makeSettingsButton("Edit Event Binds","rbxassetid://5147695474",759)
			EventBind.Position = UDim2.new(0, 5, 0, 205)
			EventBind.Size = UDim2.new(1, -10, 0, 25)
			EventBind.Name = "EventBinds"
			EventBind.Parent = SettingsHolder
			
			Plugins = makeSettingsButton("Manage Plugins","rbxassetid://5147695474",743)
			Plugins.Position = UDim2.new(0, 5, 0, 175)
			Plugins.Size = UDim2.new(1, -10, 0, 25)
			Plugins.Name = "Plugins"
			Plugins.Parent = SettingsHolder
			
			Example.Name = "Example"
			Example.Parent = Holder
			Example.BackgroundTransparency = 1
			Example.BorderSizePixel = 0
			Example.Size = UDim2.new(0, 190, 0, 20)
			Example.Visible = false
			Example.Font = Enum.Font.SourceSans
			Example.TextSize = 18
			Example.Text = "Example"
			Example.TextColor3 = Color3.new(1, 1, 1)
			Example.TextXAlignment = Enum.TextXAlignment.Left
			Example.ZIndex = 10
			table.insert(text1,Example)
			
			Notification.Name = randomString()
			Notification.Parent = PARENT
			Notification.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			Notification.BorderSizePixel = 0
			Notification.Position = UDim2.new(1, -500, 1, 20)
			Notification.Size = UDim2.new(0, 250, 0, 100)
			Notification.ZIndex = 10
			table.insert(shade1,Notification)
			
			Title_2.Name = "Title"
			Title_2.Parent = Notification
			Title_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Title_2.BorderSizePixel = 0
			Title_2.Size = UDim2.new(0, 250, 0, 20)
			Title_2.Font = Enum.Font.SourceSans
			Title_2.TextSize = 14
			Title_2.Text = "Notification Title"
			Title_2.TextColor3 = Color3.new(1, 1, 1)
			Title_2.ZIndex = 10
			table.insert(shade2,Title_2)
			table.insert(text1,Title_2)
			
			Text_2.Name = "Text"
			Text_2.Parent = Notification
			Text_2.BackgroundTransparency = 1
			Text_2.BorderSizePixel = 0
			Text_2.Position = UDim2.new(0, 5, 0, 25)
			Text_2.Size = UDim2.new(0, 240, 0, 75)
			Text_2.Font = Enum.Font.SourceSans
			Text_2.TextSize = 16
			Text_2.Text = "Notification Text"
			Text_2.TextColor3 = Color3.new(1, 1, 1)
			Text_2.TextWrapped = true
			Text_2.ZIndex = 10
			table.insert(text1,Text_2)
			
			CloseButton.Name = "CloseButton"
			CloseButton.Parent = Notification
			CloseButton.BackgroundTransparency = 1
			CloseButton.Position = UDim2.new(1, -20, 0, 0)
			CloseButton.Size = UDim2.new(0, 20, 0, 20)
			CloseButton.Text = ""
			CloseButton.ZIndex = 10
			
			CloseImage.Parent = CloseButton
			CloseImage.BackgroundColor3 = Color3.new(1, 1, 1)
			CloseImage.BackgroundTransparency = 1
			CloseImage.Position = UDim2.new(0, 5, 0, 5)
			CloseImage.Size = UDim2.new(0, 10, 0, 10)
			CloseImage.Image = "rbxassetid://5054663650"
			CloseImage.ZIndex = 10
			
			PinButton.Name = "PinButton"
			PinButton.Parent = Notification
			PinButton.BackgroundTransparency = 1
			PinButton.Size = UDim2.new(0, 20, 0, 20)
			PinButton.ZIndex = 10
			PinButton.Text = ""
			
			PinImage.Parent = PinButton
			PinImage.BackgroundColor3 = Color3.new(1, 1, 1)
			PinImage.BackgroundTransparency = 1
			PinImage.Position = UDim2.new(0, 3, 0, 3)
			PinImage.Size = UDim2.new(0, 14, 0, 14)
			PinImage.ZIndex = 10
			PinImage.Image = "rbxassetid://6234691350"
			
			Tooltip.Name = randomString()
			Tooltip.Parent = PARENT
			Tooltip.Active = true
			Tooltip.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			Tooltip.BackgroundTransparency = 0.1
			Tooltip.BorderSizePixel = 0
			Tooltip.Size = UDim2.new(0, 200, 0, 96)
			Tooltip.Visible = false
			Tooltip.ZIndex = 10
			table.insert(shade1,Tooltip)
			
			Title_3.Name = "Title"
			Title_3.Parent = Tooltip
			Title_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Title_3.BackgroundTransparency = 0.1
			Title_3.BorderSizePixel = 0
			Title_3.Size = UDim2.new(0, 200, 0, 20)
			Title_3.Font = Enum.Font.SourceSans
			Title_3.TextSize = 14
			Title_3.Text = ""
			Title_3.TextColor3 = Color3.new(1, 1, 1)
			Title_3.TextTransparency = 0.1
			Title_3.ZIndex = 10
			table.insert(shade2,Title_3)
			table.insert(text1,Title_3)
			
			Description.Name = "Description"
			Description.Parent = Tooltip
			Description.BackgroundTransparency = 1
			Description.BorderSizePixel = 0
			Description.Size = UDim2.new(0,180,0,72)
			Description.Position = UDim2.new(0,10,0,18)
			Description.Font = Enum.Font.SourceSans
			Description.TextSize = 16
			Description.Text = ""
			Description.TextColor3 = Color3.new(1, 1, 1)
			Description.TextTransparency = 0.1
			Description.TextWrapped = true
			Description.ZIndex = 10
			table.insert(text1,Description)
			
			IntroBackground.Name = "IntroBackground"
			IntroBackground.Parent = Holder
			IntroBackground.Active = true
			IntroBackground.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			IntroBackground.BorderSizePixel = 0
			IntroBackground.Position = UDim2.new(0, 0, 0, 45)
			IntroBackground.Size = UDim2.new(0, 250, 0, 175)
			IntroBackground.ZIndex = 10
			
			Logo.Name = "Logo"
			Logo.Parent = Holder
			Logo.BackgroundTransparency = 1
			Logo.BorderSizePixel = 0
			Logo.Position = UDim2.new(0, 125, 0, 127)
			Logo.Size = UDim2.new(0, 10, 0, 10)
			Logo.Image = "rbxassetid://1352543873"
			Logo.ImageTransparency = 0
			Logo.ZIndex = 10
			
			Credits.Name = "Credits"
			Credits.Parent = Holder
			Credits.BackgroundTransparency = 1
			Credits.BorderSizePixel = 0
			Credits.Position = UDim2.new(0, 0, 0.9, 30)
			Credits.Size = UDim2.new(0, 250, 0, 20)
			Credits.Font = Enum.Font.SourceSansLight
			Credits.FontSize = Enum.FontSize.Size18
			Credits.Text = "Edge // Zwolf // Moon // Toon"
			Credits.TextColor3 = Color3.new(1, 1, 1)
			Credits.ZIndex = 10
			
			KeybindsFrame.Name = "KeybindsFrame"
			KeybindsFrame.Parent = Settings
			KeybindsFrame.Active = true
			KeybindsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			KeybindsFrame.BorderSizePixel = 0
			KeybindsFrame.Position = UDim2.new(0, 0, 0, 175)
			KeybindsFrame.Size = UDim2.new(0, 250, 0, 175)
			KeybindsFrame.ZIndex = 10
			table.insert(shade1,KeybindsFrame)
			
			Close.Name = "Close"
			Close.Parent = KeybindsFrame
			Close.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Close.BorderSizePixel = 0
			Close.Position = UDim2.new(0, 205, 0, 150)
			Close.Size = UDim2.new(0, 40, 0, 20)
			Close.Font = Enum.Font.SourceSans
			Close.TextSize = 14
			Close.Text = "Close"
			Close.TextColor3 = Color3.new(1, 1, 1)
			Close.ZIndex = 10
			table.insert(shade2,Close)
			table.insert(text1,Close)
			
			Add.Name = "Add"
			Add.Parent = KeybindsFrame
			Add.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Add.BorderSizePixel = 0
			Add.Position = UDim2.new(0, 5, 0, 150)
			Add.Size = UDim2.new(0, 40, 0, 20)
			Add.Font = Enum.Font.SourceSans
			Add.TextSize = 14
			Add.Text = "Add"
			Add.TextColor3 = Color3.new(1, 1, 1)
			Add.ZIndex = 10
			table.insert(shade2,Add)
			table.insert(text1,Add)
			
			Delete.Name = "Delete"
			Delete.Parent = KeybindsFrame
			Delete.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Delete.BorderSizePixel = 0
			Delete.Position = UDim2.new(0, 50, 0, 150)
			Delete.Size = UDim2.new(0, 40, 0, 20)
			Delete.Font = Enum.Font.SourceSans
			Delete.TextSize = 14
			Delete.Text = "Clear"
			Delete.TextColor3 = Color3.new(1, 1, 1)
			Delete.ZIndex = 10
			table.insert(shade2,Delete)
			table.insert(text1,Delete)
			
			Holder_2.Name = "Holder"
			Holder_2.Parent = KeybindsFrame
			Holder_2.BackgroundTransparency = 1
			Holder_2.BorderSizePixel = 0
			Holder_2.Position = UDim2.new(0, 0, 0, 0)
			Holder_2.Size = UDim2.new(0, 250, 0, 145)
			Holder_2.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
			Holder_2.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_2.CanvasSize = UDim2.new(0, 0, 0, 0)
			Holder_2.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_2.ScrollBarThickness = 0
			Holder_2.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_2.VerticalScrollBarInset = 'Always'
			Holder_2.ZIndex = 10
			
			Example_2.Name = "Example"
			Example_2.Parent = KeybindsFrame
			Example_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Example_2.BorderSizePixel = 0
			Example_2.Size = UDim2.new(0, 10, 0, 20)
			Example_2.Visible = false
			Example_2.ZIndex = 10
			table.insert(shade2,Example_2)
			
			Text_3.Name = "Text"
			Text_3.Parent = Example_2
			Text_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Text_3.BorderSizePixel = 0
			Text_3.Position = UDim2.new(0, 10, 0, 0)
			Text_3.Size = UDim2.new(0, 240, 0, 20)
			Text_3.Font = Enum.Font.SourceSans
			Text_3.TextSize = 14
			Text_3.Text = "nom"
			Text_3.TextColor3 = Color3.new(1, 1, 1)
			Text_3.TextXAlignment = Enum.TextXAlignment.Left
			Text_3.ZIndex = 10
			table.insert(shade2,Text_3)
			table.insert(text1,Text_3)
			
			Delete_2.Name = "Delete"
			Delete_2.Parent = Text_3
			Delete_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
			Delete_2.BorderSizePixel = 0
			Delete_2.Position = UDim2.new(0, 200, 0, 0)
			Delete_2.Size = UDim2.new(0, 40, 0, 20)
			Delete_2.Font = Enum.Font.SourceSans
			Delete_2.TextSize = 14
			Delete_2.Text = "Delete"
			Delete_2.TextColor3 = Color3.new(0, 0, 0)
			Delete_2.ZIndex = 10
			table.insert(shade3,Delete_2)
			table.insert(text2,Delete_2)
			
			KeybindEditor.Name = randomString()
			KeybindEditor.Parent = PARENT
			KeybindEditor.Active = true
			KeybindEditor.BackgroundTransparency = 1
			KeybindEditor.Position = UDim2.new(0.5, -180, 0, -500)
			KeybindEditor.Size = UDim2.new(0, 360, 0, 20)
			KeybindEditor.ZIndex = 10
			
			background_2.Name = "background"
			background_2.Parent = KeybindEditor
			background_2.Active = true
			background_2.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			background_2.BorderSizePixel = 0
			background_2.Position = UDim2.new(0, 0, 0, 20)
			background_2.Size = UDim2.new(0, 360, 0, 185)
			background_2.ZIndex = 10
			table.insert(shade1,background_2)
			
			Dark_3.Name = "Dark"
			Dark_3.Parent = background_2
			Dark_3.Active = true
			Dark_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Dark_3.BorderSizePixel = 0
			Dark_3.Position = UDim2.new(0, 135, 0, 0)
			Dark_3.Size = UDim2.new(0, 2, 0, 185)
			Dark_3.ZIndex = 10
			table.insert(shade2,Dark_3)
			
			Directions.Name = "Directions"
			Directions.Parent = background_2
			Directions.BackgroundTransparency = 1
			Directions.BorderSizePixel = 0
			Directions.Position = UDim2.new(0, 10, 0, 15)
			Directions.Size = UDim2.new(0, 115, 0, 90)
			Directions.ZIndex = 10
			Directions.Font = Enum.Font.SourceSans
			Directions.Text = "Click the button below and press a key/mouse button. Then select what you want to bind it to."
			Directions.TextColor3 = Color3.fromRGB(255, 255, 255)
			Directions.TextSize = 14.000
			Directions.TextWrapped = true
			Directions.TextYAlignment = Enum.TextYAlignment.Top
			table.insert(text1,Directions)
			
			BindTo.Name = "BindTo"
			BindTo.Parent = background_2
			BindTo.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			BindTo.BorderSizePixel = 0
			BindTo.Position = UDim2.new(0, 10, 0, 95)
			BindTo.Size = UDim2.new(0, 115, 0, 50)
			BindTo.ZIndex = 10
			BindTo.Font = Enum.Font.SourceSans
			BindTo.Text = "Click to bind"
			BindTo.TextColor3 = Color3.fromRGB(255, 255, 255)
			BindTo.TextSize = 16.000
			table.insert(shade2,BindTo)
			table.insert(text1,BindTo)
			
			TriggerLabel.Name = "TriggerLabel"
			TriggerLabel.Parent = background_2
			TriggerLabel.BackgroundTransparency = 1
			TriggerLabel.Position = UDim2.new(0, 10, 0, 155)
			TriggerLabel.Size = UDim2.new(0, 45, 0, 20)
			TriggerLabel.ZIndex = 10
			TriggerLabel.Font = Enum.Font.SourceSans
			TriggerLabel.Text = "Trigger:"
			TriggerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
			TriggerLabel.TextSize = 14.000
			TriggerLabel.TextXAlignment = Enum.TextXAlignment.Left
			table.insert(text1,TriggerLabel)
			
			BindTriggerSelect.Name = "BindTo"
			BindTriggerSelect.Parent = background_2
			BindTriggerSelect.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			BindTriggerSelect.BorderSizePixel = 0
			BindTriggerSelect.Position = UDim2.new(0, 60, 0, 155)
			BindTriggerSelect.Size = UDim2.new(0, 65, 0, 20)
			BindTriggerSelect.ZIndex = 10
			BindTriggerSelect.Font = Enum.Font.SourceSans
			BindTriggerSelect.Text = "KeyDown"
			BindTriggerSelect.TextColor3 = Color3.fromRGB(255, 255, 255)
			BindTriggerSelect.TextSize = 16.000
			table.insert(shade2,BindTriggerSelect)
			table.insert(text1,BindTriggerSelect)
			
			Add_2.Name = "Add"
			Add_2.Parent = background_2
			Add_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Add_2.BorderSizePixel = 0
			Add_2.Position = UDim2.new(0, 310, 0, 35)
			Add_2.Size = UDim2.new(0, 40, 0, 20)
			Add_2.ZIndex = 10
			Add_2.Font = Enum.Font.SourceSans
			Add_2.Text = "Add"
			Add_2.TextColor3 = Color3.fromRGB(255, 255, 255)
			Add_2.TextSize = 14.000
			table.insert(shade2,Add_2)
			table.insert(text1,Add_2)
			
			Toggles.Name = "Toggles"
			Toggles.Parent = background_2
			Toggles.BackgroundTransparency = 1
			Toggles.BorderSizePixel = 0
			Toggles.Position = UDim2.new(0, 150, 0, 125)
			Toggles.Size = UDim2.new(0, 200, 0, 50)
			Toggles.ZIndex = 10
			Toggles.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Toggles.CanvasSize = UDim2.new(0, 0, 0, 50)
			Toggles.ScrollBarThickness = 8
			Toggles.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Toggles.VerticalScrollBarInset = Enum.ScrollBarInset.Always
			table.insert(scroll,Toggles)
			
			ClickTP.Name = "Click TP (Hold Key & Click)"
			ClickTP.Parent = Toggles
			ClickTP.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			ClickTP.BorderSizePixel = 0
			ClickTP.Size = UDim2.new(0, 200, 0, 20)
			ClickTP.ZIndex = 10
			ClickTP.Font = Enum.Font.SourceSans
			ClickTP.Text = "    Click TP (Hold Key & Click)"
			ClickTP.TextColor3 = Color3.fromRGB(255, 255, 255)
			ClickTP.TextSize = 14.000
			ClickTP.TextXAlignment = Enum.TextXAlignment.Left
			table.insert(shade2,ClickTP)
			table.insert(text1,ClickTP)
			
			Select.Name = "Select"
			Select.Parent = ClickTP
			Select.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
			Select.BorderSizePixel = 0
			Select.Position = UDim2.new(0, 160, 0, 0)
			Select.Size = UDim2.new(0, 40, 0, 20)
			Select.ZIndex = 10
			Select.Font = Enum.Font.SourceSans
			Select.Text = "Add"
			Select.TextColor3 = Color3.fromRGB(0, 0, 0)
			Select.TextSize = 14.000
			table.insert(shade3,Select)
			table.insert(text2,Select)
			
			ClickDelete.Name = "Click Delete (Hold Key & Click)"
			ClickDelete.Parent = Toggles
			ClickDelete.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			ClickDelete.BorderSizePixel = 0
			ClickDelete.Position = UDim2.new(0, 0, 0, 25)
			ClickDelete.Size = UDim2.new(0, 200, 0, 20)
			ClickDelete.ZIndex = 10
			ClickDelete.Font = Enum.Font.SourceSans
			ClickDelete.Text = "    Click Delete (Hold Key & Click)"
			ClickDelete.TextColor3 = Color3.fromRGB(255, 255, 255)
			ClickDelete.TextSize = 14.000
			ClickDelete.TextXAlignment = Enum.TextXAlignment.Left
			table.insert(shade2,ClickDelete)
			table.insert(text1,ClickDelete)
			
			Select_2.Name = "Select"
			Select_2.Parent = ClickDelete
			Select_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
			Select_2.BorderSizePixel = 0
			Select_2.Position = UDim2.new(0, 160, 0, 0)
			Select_2.Size = UDim2.new(0, 40, 0, 20)
			Select_2.ZIndex = 10
			Select_2.Font = Enum.Font.SourceSans
			Select_2.Text = "Add"
			Select_2.TextColor3 = Color3.fromRGB(0, 0, 0)
			Select_2.TextSize = 14.000
			table.insert(shade3,Select_2)
			table.insert(text2,Select_2)
			
			Cmdbar_2.Name = "Cmdbar_2"
			Cmdbar_2.Parent = background_2
			Cmdbar_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Cmdbar_2.BorderSizePixel = 0
			Cmdbar_2.Position = UDim2.new(0, 150, 0, 35)
			Cmdbar_2.Size = UDim2.new(0, 150, 0, 20)
			Cmdbar_2.ZIndex = 10
			Cmdbar_2.Font = Enum.Font.SourceSans
			Cmdbar_2.PlaceholderText = "Command"
			Cmdbar_2.Text = ""
			Cmdbar_2.TextColor3 = Color3.fromRGB(255, 255, 255)
			Cmdbar_2.TextSize = 14.000
			Cmdbar_2.TextXAlignment = Enum.TextXAlignment.Left
			
			Cmdbar_3.Name = "Cmdbar_3"
			Cmdbar_3.Parent = background_2
			Cmdbar_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Cmdbar_3.BorderSizePixel = 0
			Cmdbar_3.Position = UDim2.new(0, 150, 0, 60)
			Cmdbar_3.Size = UDim2.new(0, 150, 0, 20)
			Cmdbar_3.ZIndex = 10
			Cmdbar_3.Font = Enum.Font.SourceSans
			Cmdbar_3.PlaceholderText = "Command 2"
			Cmdbar_3.Text = ""
			Cmdbar_3.TextColor3 = Color3.fromRGB(255, 255, 255)
			Cmdbar_3.TextSize = 14.000
			Cmdbar_3.TextXAlignment = Enum.TextXAlignment.Left
			
			CreateToggle.Name = "CreateToggle"
			CreateToggle.Parent = background_2
			CreateToggle.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			CreateToggle.BackgroundTransparency = 1
			CreateToggle.BorderSizePixel = 0
			CreateToggle.Position = UDim2.new(0, 152, 0, 10)
			CreateToggle.Size = UDim2.new(0, 198, 0, 20)
			CreateToggle.ZIndex = 10
			CreateToggle.Font = Enum.Font.SourceSans
			CreateToggle.Text = "Create Toggle"
			CreateToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
			CreateToggle.TextSize = 14.000
			CreateToggle.TextXAlignment = Enum.TextXAlignment.Left
			table.insert(text1,CreateToggle)
			
			Button_2.Name = "Button"
			Button_2.Parent = CreateToggle
			Button_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
			Button_2.BorderSizePixel = 0
			Button_2.Position = UDim2.new(1, -20, 0, 0)
			Button_2.Size = UDim2.new(0, 20, 0, 20)
			Button_2.ZIndex = 10
			table.insert(shade3,Button_2)
			
			On_2.Name = "On"
			On_2.Parent = Button_2
			On_2.BackgroundColor3 = Color3.fromRGB(150, 150, 151)
			On_2.BackgroundTransparency = 1
			On_2.BorderSizePixel = 0
			On_2.Position = UDim2.new(0, 2, 0, 2)
			On_2.Size = UDim2.new(0, 16, 0, 16)
			On_2.ZIndex = 10
			On_2.Font = Enum.Font.SourceSans
			On_2.Text = ""
			On_2.TextColor3 = Color3.fromRGB(0, 0, 0)
			On_2.TextSize = 14.000
			
			shadow_2.Name = "shadow"
			shadow_2.Parent = KeybindEditor
			shadow_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			shadow_2.BorderSizePixel = 0
			shadow_2.Size = UDim2.new(0, 360, 0, 20)
			shadow_2.ZIndex = 10
			table.insert(shade2,shadow_2)
			
			PopupText_2.Name = "PopupText_2"
			PopupText_2.Parent = shadow_2
			PopupText_2.BackgroundTransparency = 1
			PopupText_2.Size = UDim2.new(1, 0, 0.949999988, 0)
			PopupText_2.ZIndex = 10
			PopupText_2.Font = Enum.Font.SourceSans
			PopupText_2.Text = "Set Keybinds"
			PopupText_2.TextColor3 = Color3.fromRGB(255, 255, 255)
			PopupText_2.TextSize = 14.000
			PopupText_2.TextWrapped = true
			table.insert(text1,PopupText_2)
			
			Exit_2.Name = "Exit_2"
			Exit_2.Parent = shadow_2
			Exit_2.BackgroundTransparency = 1
			Exit_2.Position = UDim2.new(1, -20, 0, 0)
			Exit_2.Size = UDim2.new(0, 20, 0, 20)
			Exit_2.ZIndex = 10
			Exit_2.Text = ""
			
			ExitImage_2.Parent = Exit_2
			ExitImage_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			ExitImage_2.BackgroundTransparency = 1
			ExitImage_2.Position = UDim2.new(0, 5, 0, 5)
			ExitImage_2.Size = UDim2.new(0, 10, 0, 10)
			ExitImage_2.ZIndex = 10
			ExitImage_2.Image = "rbxassetid://5054663650"
			
			PositionsFrame.Name = "PositionsFrame"
			PositionsFrame.Parent = Settings
			PositionsFrame.Active = true
			PositionsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			PositionsFrame.BorderSizePixel = 0
			PositionsFrame.Size = UDim2.new(0, 250, 0, 175)
			PositionsFrame.Position = UDim2.new(0, 0, 0, 175)
			PositionsFrame.ZIndex = 10
			table.insert(shade1,PositionsFrame)
			
			Close_3.Name = "Close"
			Close_3.Parent = PositionsFrame
			Close_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Close_3.BorderSizePixel = 0
			Close_3.Position = UDim2.new(0, 205, 0, 150)
			Close_3.Size = UDim2.new(0, 40, 0, 20)
			Close_3.Font = Enum.Font.SourceSans
			Close_3.TextSize = 14
			Close_3.Text = "Close"
			Close_3.TextColor3 = Color3.new(1, 1, 1)
			Close_3.ZIndex = 10
			table.insert(shade2,Close_3)
			table.insert(text1,Close_3)
			
			Delete_5.Name = "Delete"
			Delete_5.Parent = PositionsFrame
			Delete_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Delete_5.BorderSizePixel = 0
			Delete_5.Position = UDim2.new(0, 50, 0, 150)
			Delete_5.Size = UDim2.new(0, 40, 0, 20)
			Delete_5.Font = Enum.Font.SourceSans
			Delete_5.TextSize = 14
			Delete_5.Text = "Clear"
			Delete_5.TextColor3 = Color3.new(1, 1, 1)
			Delete_5.ZIndex = 10
			table.insert(shade2,Delete_5)
			table.insert(text1,Delete_5)
			
			Part.Name = "PartGoto"
			Part.Parent = PositionsFrame
			Part.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Part.BorderSizePixel = 0
			Part.Position = UDim2.new(0, 5, 0, 150)
			Part.Size = UDim2.new(0, 40, 0, 20)
			Part.Font = Enum.Font.SourceSans
			Part.TextSize = 14
			Part.Text = "Part"
			Part.TextColor3 = Color3.new(1, 1, 1)
			Part.ZIndex = 10
			table.insert(shade2,Part)
			table.insert(text1,Part)
			
			Holder_4.Name = "Holder"
			Holder_4.Parent = PositionsFrame
			Holder_4.BackgroundTransparency = 1
			Holder_4.BorderSizePixel = 0
			Holder_4.Position = UDim2.new(0, 0, 0, 0)
			Holder_4.Selectable = false
			Holder_4.Size = UDim2.new(0, 250, 0, 145)
			Holder_4.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
			Holder_4.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_4.CanvasSize = UDim2.new(0, 0, 0, 0)
			Holder_4.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_4.ScrollBarThickness = 0
			Holder_4.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_4.VerticalScrollBarInset = 'Always'
			Holder_4.ZIndex = 10
			
			Example_4.Name = "Example"
			Example_4.Parent = PositionsFrame
			Example_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Example_4.BorderSizePixel = 0
			Example_4.Size = UDim2.new(0, 10, 0, 20)
			Example_4.Visible = false
			Example_4.Position = UDim2.new(0, 0, 0, -5)
			Example_4.ZIndex = 10
			table.insert(shade2,Example_4)
			
			Text_5.Name = "Text"
			Text_5.Parent = Example_4
			Text_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Text_5.BorderSizePixel = 0
			Text_5.Position = UDim2.new(0, 10, 0, 0)
			Text_5.Size = UDim2.new(0, 240, 0, 20)
			Text_5.Font = Enum.Font.SourceSans
			Text_5.TextSize = 14
			Text_5.Text = "Position"
			Text_5.TextColor3 = Color3.new(1, 1, 1)
			Text_5.TextXAlignment = Enum.TextXAlignment.Left
			Text_5.ZIndex = 10
			table.insert(shade2,Text_5)
			table.insert(text1,Text_5)
			
			Delete_6.Name = "Delete"
			Delete_6.Parent = Text_5
			Delete_6.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
			Delete_6.BorderSizePixel = 0
			Delete_6.Position = UDim2.new(0, 200, 0, 0)
			Delete_6.Size = UDim2.new(0, 40, 0, 20)
			Delete_6.Font = Enum.Font.SourceSans
			Delete_6.TextSize = 14
			Delete_6.Text = "Delete"
			Delete_6.TextColor3 = Color3.new(0, 0, 0)
			Delete_6.ZIndex = 10
			table.insert(shade3,Delete_6)
			table.insert(text2,Delete_6)
			
			TP.Name = "TP"
			TP.Parent = Text_5
			TP.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
			TP.BorderSizePixel = 0
			TP.Position = UDim2.new(0, 155, 0, 0)
			TP.Size = UDim2.new(0, 40, 0, 20)
			TP.Font = Enum.Font.SourceSans
			TP.TextSize = 14
			TP.Text = "Goto"
			TP.TextColor3 = Color3.new(0, 0, 0)
			TP.ZIndex = 10
			table.insert(shade3,TP)
			table.insert(text2,TP)
			
			AliasesFrame.Name = "AliasesFrame"
			AliasesFrame.Parent = Settings
			AliasesFrame.Active = true
			AliasesFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			AliasesFrame.BorderSizePixel = 0
			AliasesFrame.Position = UDim2.new(0, 0, 0, 175)
			AliasesFrame.Size = UDim2.new(0, 250, 0, 175)
			AliasesFrame.ZIndex = 10
			table.insert(shade1,AliasesFrame)
			
			Close_2.Name = "Close"
			Close_2.Parent = AliasesFrame
			Close_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Close_2.BorderSizePixel = 0
			Close_2.Position = UDim2.new(0, 205, 0, 150)
			Close_2.Size = UDim2.new(0, 40, 0, 20)
			Close_2.Font = Enum.Font.SourceSans
			Close_2.TextSize = 14
			Close_2.Text = "Close"
			Close_2.TextColor3 = Color3.new(1, 1, 1)
			Close_2.ZIndex = 10
			table.insert(shade2,Close_2)
			table.insert(text1,Close_2)
			
			Delete_3.Name = "Delete"
			Delete_3.Parent = AliasesFrame
			Delete_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Delete_3.BorderSizePixel = 0
			Delete_3.Position = UDim2.new(0, 5, 0, 150)
			Delete_3.Size = UDim2.new(0, 40, 0, 20)
			Delete_3.Font = Enum.Font.SourceSans
			Delete_3.TextSize = 14
			Delete_3.Text = "Clear"
			Delete_3.TextColor3 = Color3.new(1, 1, 1)
			Delete_3.ZIndex = 10
			table.insert(shade2,Delete_3)
			table.insert(text1,Delete_3)
			
			Holder_3.Name = "Holder"
			Holder_3.Parent = AliasesFrame
			Holder_3.BackgroundTransparency = 1
			Holder_3.BorderSizePixel = 0
			Holder_3.Position = UDim2.new(0, 0, 0, 0)
			Holder_3.Size = UDim2.new(0, 250, 0, 145)
			Holder_3.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
			Holder_3.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_3.CanvasSize = UDim2.new(0, 0, 0, 0)
			Holder_3.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_3.ScrollBarThickness = 0
			Holder_3.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_3.VerticalScrollBarInset = 'Always'
			Holder_3.ZIndex = 10
			
			Example_3.Name = "Example"
			Example_3.Parent = AliasesFrame
			Example_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Example_3.BorderSizePixel = 0
			Example_3.Size = UDim2.new(0, 10, 0, 20)
			Example_3.Visible = false
			Example_3.ZIndex = 10
			table.insert(shade2,Example_3)
			
			Text_4.Name = "Text"
			Text_4.Parent = Example_3
			Text_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Text_4.BorderSizePixel = 0
			Text_4.Position = UDim2.new(0, 10, 0, 0)
			Text_4.Size = UDim2.new(0, 240, 0, 20)
			Text_4.Font = Enum.Font.SourceSans
			Text_4.TextSize = 14
			Text_4.Text = "honk"
			Text_4.TextColor3 = Color3.new(1, 1, 1)
			Text_4.TextXAlignment = Enum.TextXAlignment.Left
			Text_4.ZIndex = 10
			table.insert(shade2,Text_4)
			table.insert(text1,Text_4)
			
			Delete_4.Name = "Delete"
			Delete_4.Parent = Text_4
			Delete_4.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
			Delete_4.BorderSizePixel = 0
			Delete_4.Position = UDim2.new(0, 200, 0, 0)
			Delete_4.Size = UDim2.new(0, 40, 0, 20)
			Delete_4.Font = Enum.Font.SourceSans
			Delete_4.TextSize = 14
			Delete_4.Text = "Delete"
			Delete_4.TextColor3 = Color3.new(0, 0, 0)
			Delete_4.ZIndex = 10
			table.insert(shade3,Delete_4)
			table.insert(text2,Delete_4)
			
			PluginsFrame.Name = "PluginsFrame"
			PluginsFrame.Parent = Settings
			PluginsFrame.Active = true
			PluginsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			PluginsFrame.BorderSizePixel = 0
			PluginsFrame.Position = UDim2.new(0, 0, 0, 175)
			PluginsFrame.Size = UDim2.new(0, 250, 0, 175)
			PluginsFrame.ZIndex = 10
			table.insert(shade1,PluginsFrame)
			
			Close_4.Name = "Close"
			Close_4.Parent = PluginsFrame
			Close_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Close_4.BorderSizePixel = 0
			Close_4.Position = UDim2.new(0, 205, 0, 150)
			Close_4.Size = UDim2.new(0, 40, 0, 20)
			Close_4.Font = Enum.Font.SourceSans
			Close_4.TextSize = 14
			Close_4.Text = "Close"
			Close_4.TextColor3 = Color3.new(1, 1, 1)
			Close_4.ZIndex = 10
			table.insert(shade2,Close_4)
			table.insert(text1,Close_4)
			
			Add_3.Name = "Add"
			Add_3.Parent = PluginsFrame
			Add_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Add_3.BorderSizePixel = 0
			Add_3.Position = UDim2.new(0, 5, 0, 150)
			Add_3.Size = UDim2.new(0, 40, 0, 20)
			Add_3.Font = Enum.Font.SourceSans
			Add_3.TextSize = 14
			Add_3.Text = "Add"
			Add_3.TextColor3 = Color3.new(1, 1, 1)
			Add_3.ZIndex = 10
			table.insert(shade2,Add_3)
			table.insert(text1,Add_3)
			
			Holder_5.Name = "Holder"
			Holder_5.Parent = PluginsFrame
			Holder_5.BackgroundTransparency = 1
			Holder_5.BorderSizePixel = 0
			Holder_5.Position = UDim2.new(0, 0, 0, 0)
			Holder_5.Selectable = false
			Holder_5.Size = UDim2.new(0, 250, 0, 145)
			Holder_5.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
			Holder_5.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_5.CanvasSize = UDim2.new(0, 0, 0, 0)
			Holder_5.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_5.ScrollBarThickness = 0
			Holder_5.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			Holder_5.VerticalScrollBarInset = 'Always'
			Holder_5.ZIndex = 10
			
			Example_5.Name = "Example"
			Example_5.Parent = PluginsFrame
			Example_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Example_5.BorderSizePixel = 0
			Example_5.Size = UDim2.new(0, 10, 0, 20)
			Example_5.Visible = false
			Example_5.ZIndex = 10
			table.insert(shade2,Example_5)
			
			Text_6.Name = "Text"
			Text_6.Parent = Example_5
			Text_6.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Text_6.BorderSizePixel = 0
			Text_6.Position = UDim2.new(0, 10, 0, 0)
			Text_6.Size = UDim2.new(0, 240, 0, 20)
			Text_6.Font = Enum.Font.SourceSans
			Text_6.TextSize = 14
			Text_6.Text = "F4 > Toggle Fly"
			Text_6.TextColor3 = Color3.new(1, 1, 1)
			Text_6.TextXAlignment = Enum.TextXAlignment.Left
			Text_6.ZIndex = 10
			table.insert(shade2,Text_6)
			table.insert(text1,Text_6)
			
			Delete_7.Name = "Delete"
			Delete_7.Parent = Text_6
			Delete_7.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
			Delete_7.BorderSizePixel = 0
			Delete_7.Position = UDim2.new(0, 200, 0, 0)
			Delete_7.Size = UDim2.new(0, 40, 0, 20)
			Delete_7.Font = Enum.Font.SourceSans
			Delete_7.TextSize = 14
			Delete_7.Text = "Delete"
			Delete_7.TextColor3 = Color3.new(0, 0, 0)
			Delete_7.ZIndex = 10
			table.insert(shade3,Delete_7)
			table.insert(text2,Delete_7)
			
			PluginEditor.Name = randomString()
			PluginEditor.Parent = PARENT
			PluginEditor.BorderSizePixel = 0
			PluginEditor.Active = true
			PluginEditor.BackgroundTransparency = 1
			PluginEditor.Position = UDim2.new(0.5, -180, 0, -500)
			PluginEditor.Size = UDim2.new(0, 360, 0, 20)
			PluginEditor.ZIndex = 10
			
			background_3.Name = "background"
			background_3.Parent = PluginEditor
			background_3.Active = true
			background_3.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			background_3.BorderSizePixel = 0
			background_3.Position = UDim2.new(0, 0, 0, 20)
			background_3.Size = UDim2.new(0, 360, 0, 160)
			background_3.ZIndex = 10
			table.insert(shade1,background_3)
			
			Dark_2.Name = "Dark"
			Dark_2.Parent = background_3
			Dark_2.Active = true
			Dark_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			Dark_2.BorderSizePixel = 0
			Dark_2.Position = UDim2.new(0, 222, 0, 0)
			Dark_2.Size = UDim2.new(0, 2, 0, 160)
			Dark_2.ZIndex = 10
			table.insert(shade2,Dark_2)
			
			Img.Name = "Img"
			Img.Parent = background_3
			Img.BackgroundTransparency = 1
			Img.Position = UDim2.new(0, 242, 0, 3)
			Img.Size = UDim2.new(0, 100, 0, 95)
			Img.Image = "rbxassetid://4113050383"
			Img.ZIndex = 10
			
			AddPlugin.Name = "AddPlugin"
			AddPlugin.Parent = background_3
			AddPlugin.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			AddPlugin.BorderSizePixel = 0
			AddPlugin.Position = UDim2.new(0, 235, 0, 100)
			AddPlugin.Size = UDim2.new(0, 115, 0, 50)
			AddPlugin.Font = Enum.Font.SourceSans
			AddPlugin.TextSize = 14
			AddPlugin.Text = "Add Plugin"
			AddPlugin.TextColor3 = Color3.new(1, 1, 1)
			AddPlugin.ZIndex = 10
			table.insert(shade2,AddPlugin)
			table.insert(text1,AddPlugin)
			
			FileName.Name = "FileName"
			FileName.Parent = background_3
			FileName.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			FileName.BorderSizePixel = 0
			FileName.Position = UDim2.new(0.028, 0, 0.625, 0)
			FileName.Size = UDim2.new(0, 200, 0, 50)
			FileName.Font = Enum.Font.SourceSans
			FileName.TextSize = 14
			FileName.Text = "Plugin File Name"
			FileName.TextColor3 = Color3.new(1, 1, 1)
			FileName.ZIndex = 10
			table.insert(shade2,FileName)
			table.insert(text1,FileName)
			
			About.Name = "About"
			About.Parent = background_3
			About.BackgroundTransparency = 1
			About.BorderSizePixel = 0
			About.Position = UDim2.new(0, 17, 0, 10)
			About.Size = UDim2.new(0, 187, 0, 49)
			About.Font = Enum.Font.SourceSans
			About.TextSize = 14
			About.Text = "Plugins are .iy files and should be located in the 'workspace' folder of your exploit."
			About.TextColor3 = Color3.fromRGB(255, 255, 255)
			About.TextWrapped = true
			About.TextYAlignment = Enum.TextYAlignment.Top
			About.ZIndex = 10
			table.insert(text1,About)
			
			Directions_2.Name = "Directions"
			Directions_2.Parent = background_3
			Directions_2.BackgroundTransparency = 1
			Directions_2.BorderSizePixel = 0
			Directions_2.Position = UDim2.new(0, 17, 0, 60)
			Directions_2.Size = UDim2.new(0, 187, 0, 49)
			Directions_2.Font = Enum.Font.SourceSans
			Directions_2.TextSize = 14
			Directions_2.Text = "Type the name of the plugin file you want to add below."
			Directions_2.TextColor3 = Color3.fromRGB(255, 255, 255)
			Directions_2.TextWrapped = true
			Directions_2.TextYAlignment = Enum.TextYAlignment.Top
			Directions_2.ZIndex = 10
			table.insert(text1,Directions_2)
			
			shadow_3.Name = "shadow"
			shadow_3.Parent = PluginEditor
			shadow_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			shadow_3.BorderSizePixel = 0
			shadow_3.Size = UDim2.new(0, 360, 0, 20)
			shadow_3.ZIndex = 10
			table.insert(shade2,shadow_3)
			
			PopupText_3.Name = "PopupText"
			PopupText_3.Parent = shadow_3
			PopupText_3.BackgroundTransparency = 1
			PopupText_3.Size = UDim2.new(1, 0, 0.95, 0)
			PopupText_3.ZIndex = 10
			PopupText_3.Font = Enum.Font.SourceSans
			PopupText_3.TextSize = 14
			PopupText_3.Text = "Add Plugins"
			PopupText_3.TextColor3 = Color3.new(1, 1, 1)
			PopupText_3.TextWrapped = true
			table.insert(text1,PopupText_3)
			
			Exit_3.Name = "Exit"
			Exit_3.Parent = shadow_3
			Exit_3.BackgroundTransparency = 1
			Exit_3.Position = UDim2.new(1, -20, 0, 0)
			Exit_3.Size = UDim2.new(0, 20, 0, 20)
			Exit_3.Text = ""
			Exit_3.ZIndex = 10
			
			ExitImage_3.Parent = Exit_3
			ExitImage_3.BackgroundColor3 = Color3.new(1, 1, 1)
			ExitImage_3.BackgroundTransparency = 1
			ExitImage_3.Position = UDim2.new(0, 5, 0, 5)
			ExitImage_3.Size = UDim2.new(0, 10, 0, 10)
			ExitImage_3.Image = "rbxassetid://5054663650"
			ExitImage_3.ZIndex = 10
			
			AliasHint.Name = "AliasHint"
			AliasHint.Parent = AliasesFrame
			AliasHint.BackgroundTransparency = 1
			AliasHint.BorderSizePixel = 0
			AliasHint.Position = UDim2.new(0, 25, 0, 40)
			AliasHint.Size = UDim2.new(0, 200, 0, 50)
			AliasHint.Font = Enum.Font.SourceSansItalic
			AliasHint.TextSize = 16
			AliasHint.Text = "Add aliases by using the 'addalias' command"
			AliasHint.TextColor3 = Color3.new(1, 1, 1)
			AliasHint.TextStrokeColor3 = Color3.new(1, 1, 1)
			AliasHint.TextWrapped = true
			AliasHint.ZIndex = 10
			table.insert(text1,AliasHint)
			
			PluginsHint.Name = "PluginsHint"
			PluginsHint.Parent = PluginsFrame
			PluginsHint.BackgroundTransparency = 1
			PluginsHint.BorderSizePixel = 0
			PluginsHint.Position = UDim2.new(0, 25, 0, 40)
			PluginsHint.Size = UDim2.new(0, 200, 0, 50)
			PluginsHint.Font = Enum.Font.SourceSansItalic
			PluginsHint.TextSize = 16
			PluginsHint.Text = "Download plugins from the IY Discord (discord.io/infiniteyield)"
			PluginsHint.TextColor3 = Color3.new(1, 1, 1)
			PluginsHint.TextStrokeColor3 = Color3.new(1, 1, 1)
			PluginsHint.TextWrapped = true
			PluginsHint.ZIndex = 10
			table.insert(text1,PluginsHint)
			
			PositionsHint.Name = "PositionsHint"
			PositionsHint.Parent = PositionsFrame
			PositionsHint.BackgroundTransparency = 1
			PositionsHint.BorderSizePixel = 0
			PositionsHint.Position = UDim2.new(0, 25, 0, 40)
			PositionsHint.Size = UDim2.new(0, 200, 0, 70)
			PositionsHint.Font = Enum.Font.SourceSansItalic
			PositionsHint.TextSize = 16
			PositionsHint.Text = "Use the 'swp' or 'setwaypoint' command to add a position using your character (NOTE: Part teleports will not save)"
			PositionsHint.TextColor3 = Color3.new(1, 1, 1)
			PositionsHint.TextStrokeColor3 = Color3.new(1, 1, 1)
			PositionsHint.TextWrapped = true
			PositionsHint.ZIndex = 10
			table.insert(text1,PositionsHint)
			
			ToPartFrame.Name = randomString()
			ToPartFrame.Parent = PARENT
			ToPartFrame.Active = true
			ToPartFrame.BackgroundTransparency = 1
			ToPartFrame.Position = UDim2.new(0.5, -180, 0, -500)
			ToPartFrame.Size = UDim2.new(0, 360, 0, 20)
			ToPartFrame.ZIndex = 10
			
			background_4.Name = "background"
			background_4.Parent = ToPartFrame
			background_4.Active = true
			background_4.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
			background_4.BorderSizePixel = 0
			background_4.Position = UDim2.new(0, 0, 0, 20)
			background_4.Size = UDim2.new(0, 360, 0, 117)
			background_4.ZIndex = 10
			table.insert(shade1,background_4)
			
			ChoosePart.Name = "ChoosePart"
			ChoosePart.Parent = background_4
			ChoosePart.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			ChoosePart.BorderSizePixel = 0
			ChoosePart.Position = UDim2.new(0, 100, 0, 55)
			ChoosePart.Size = UDim2.new(0, 75, 0, 30)
			ChoosePart.Font = Enum.Font.SourceSans
			ChoosePart.TextSize = 14
			ChoosePart.Text = "Select Part"
			ChoosePart.TextColor3 = Color3.new(1, 1, 1)
			ChoosePart.ZIndex = 10
			table.insert(shade2,ChoosePart)
			table.insert(text1,ChoosePart)
			
			CopyPath.Name = "CopyPath"
			CopyPath.Parent = background_4
			CopyPath.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			CopyPath.BorderSizePixel = 0
			CopyPath.Position = UDim2.new(0, 185, 0, 55)
			CopyPath.Size = UDim2.new(0, 75, 0, 30)
			CopyPath.Font = Enum.Font.SourceSans
			CopyPath.TextSize = 14
			CopyPath.Text = "Copy Path"
			CopyPath.TextColor3 = Color3.new(1, 1, 1)
			CopyPath.ZIndex = 10
			table.insert(shade2,CopyPath)
			table.insert(text1,CopyPath)
			
			Directions_3.Name = "Directions"
			Directions_3.Parent = background_4
			Directions_3.BackgroundTransparency = 1
			Directions_3.BorderSizePixel = 0
			Directions_3.Position = UDim2.new(0, 51, 0, 17)
			Directions_3.Size = UDim2.new(0, 257, 0, 32)
			Directions_3.Font = Enum.Font.SourceSans
			Directions_3.TextSize = 14
			Directions_3.Text = 'Click on a part and then click the "Select Part" button below to set it as a teleport location'
			Directions_3.TextColor3 = Color3.new(1, 1, 1)
			Directions_3.TextWrapped = true
			Directions_3.TextYAlignment = Enum.TextYAlignment.Top
			Directions_3.ZIndex = 10
			table.insert(text1,Directions_3)
			
			Path.Name = "Path"
			Path.Parent = background_4
			Path.BackgroundTransparency = 1
			Path.BorderSizePixel = 0
			Path.Position = UDim2.new(0, 0, 0, 94)
			Path.Size = UDim2.new(0, 360, 0, 16)
			Path.Font = Enum.Font.SourceSansItalic
			Path.TextSize = 14
			Path.Text = ""
			Path.TextColor3 = Color3.new(1, 1, 1)
			Path.TextScaled = true
			Path.TextWrapped = true
			Path.TextYAlignment = Enum.TextYAlignment.Top
			Path.ZIndex = 10
			table.insert(text1,Path)
			
			shadow_4.Name = "shadow"
			shadow_4.Parent = ToPartFrame
			shadow_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
			shadow_4.BorderSizePixel = 0
			shadow_4.Size = UDim2.new(0, 360, 0, 20)
			shadow_4.ZIndex = 10
			table.insert(shade2,shadow_4)
			
			PopupText_5.Name = "PopupText"
			PopupText_5.Parent = shadow_4
			PopupText_5.BackgroundTransparency = 1
			PopupText_5.Size = UDim2.new(1, 0, 0.95, 0)
			PopupText_5.ZIndex = 10
			PopupText_5.Font = Enum.Font.SourceSans
			PopupText_5.TextSize = 14
			PopupText_5.Text = "Teleport to Part"
			PopupText_5.TextColor3 = Color3.new(1, 1, 1)
			PopupText_5.TextWrapped = true
			table.insert(text1,PopupText_5)
			
			Exit_4.Name = "Exit"
			Exit_4.Parent = shadow_4
			Exit_4.BackgroundTransparency = 1
			Exit_4.Position = UDim2.new(1, -20, 0, 0)
			Exit_4.Size = UDim2.new(0, 20, 0, 20)
			Exit_4.Text = ""
			Exit_4.ZIndex = 10
			
			ExitImage_5.Parent = Exit_4
			ExitImage_5.BackgroundColor3 = Color3.new(1, 1, 1)
			ExitImage_5.BackgroundTransparency = 1
			ExitImage_5.Position = UDim2.new(0, 5, 0, 5)
			ExitImage_5.Size = UDim2.new(0, 10, 0, 10)
			ExitImage_5.Image = "rbxassetid://5054663650"
			ExitImage_5.ZIndex = 10
			
			logs.Name = randomString()
			logs.Parent = PARENT
			logs.Active = true
			logs.BackgroundTransparency = 1
			logs.Position = UDim2.new(0, 0, 1, 10)
			logs.Size = UDim2.new(0, 338, 0, 20)
			logs.ZIndex = 10
			
			shadow.Name = "shadow"
			shadow.Parent = logs
			shadow.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
			shadow.BorderSizePixel = 0
			shadow.Position = UDim2.new(0, 0, 0.00999999978, 0)
			shadow.Size = UDim2.new(0, 338, 0, 20)
			shadow.ZIndex = 10
			table.insert(shade2,shadow)
			
			Hide.Name = "Hide"
			Hide.Parent = shadow
			Hide.BackgroundTransparency = 1
			Hide.Position = UDim2.new(1, -40, 0, 0)
			Hide.Size = UDim2.new(0, 20, 0, 20)
			Hide.ZIndex = 10
			Hide.Text = ""
			
			ImageLabel.Parent = Hide
			ImageLabel.BackgroundColor3 = Color3.new(1, 1, 1)
			ImageLabel.BackgroundTransparency = 1
			ImageLabel.Position = UDim2.new(0, 3, 0, 3)
			ImageLabel.Size = UDim2.new(0, 14, 0, 14)
			ImageLabel.Image = "rbxassetid://2406617031"
			ImageLabel.ZIndex = 10
			
			PopupText.Name = "PopupText"
			PopupText.Parent = shadow
			PopupText.BackgroundTransparency = 1
			PopupText.Size = UDim2.new(1, 0, 0.949999988, 0)
			PopupText.ZIndex = 10
			PopupText.Font = Enum.Font.SourceSans
			PopupText.FontSize = Enum.FontSize.Size14
			PopupText.Text = "Logs"
			PopupText.TextColor3 = Color3.new(1, 1, 1)
			PopupText.TextWrapped = true
			table.insert(text1,PopupText)
			
			Exit.Name = "Exit"
			Exit.Parent = shadow
			Exit.BackgroundTransparency = 1
			Exit.Position = UDim2.new(1, -20, 0, 0)
			Exit.Size = UDim2.new(0, 20, 0, 20)
			Exit.ZIndex = 10
			Exit.Text = ""
			
			ImageLabel_2.Parent = Exit
			ImageLabel_2.BackgroundColor3 = Color3.new(1, 1, 1)
			ImageLabel_2.BackgroundTransparency = 1
			ImageLabel_2.Position = UDim2.new(0, 5, 0, 5)
			ImageLabel_2.Size = UDim2.new(0, 10, 0, 10)
			ImageLabel_2.Image = "rbxassetid://5054663650"
			ImageLabel_2.ZIndex = 10
			
			background.Name = "background"
			background.Parent = logs
			background.Active = true
			background.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
			background.BorderSizePixel = 0
			background.ClipsDescendants = true
			background.Position = UDim2.new(0, 0, 1, 0)
			background.Size = UDim2.new(0, 338, 0, 245)
			background.ZIndex = 10
			
			chat.Name = "chat"
			chat.Parent = background
			chat.Active = true
			chat.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
			chat.BorderSizePixel = 0
			chat.ClipsDescendants = true
			chat.Size = UDim2.new(0, 338, 0, 245)
			chat.ZIndex = 10
			table.insert(shade1,chat)
			
			Clear.Name = "Clear"
			Clear.Parent = chat
			Clear.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
			Clear.BorderSizePixel = 0
			Clear.Position = UDim2.new(0, 5, 0, 220)
			Clear.Size = UDim2.new(0, 50, 0, 20)
			Clear.ZIndex = 10
			Clear.Font = Enum.Font.SourceSans
			Clear.FontSize = Enum.FontSize.Size14
			Clear.Text = "Clear"
			Clear.TextColor3 = Color3.new(1, 1, 1)
			table.insert(shade2,Clear)
			table.insert(text1,Clear)
			
			SaveChatlogs.Name = "SaveChatlogs"
			SaveChatlogs.Parent = chat
			SaveChatlogs.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
			SaveChatlogs.BorderSizePixel = 0
			SaveChatlogs.Position = UDim2.new(0, 258, 0, 220)
			SaveChatlogs.Size = UDim2.new(0, 75, 0, 20)
			SaveChatlogs.ZIndex = 10
			SaveChatlogs.Font = Enum.Font.SourceSans
			SaveChatlogs.FontSize = Enum.FontSize.Size14
			SaveChatlogs.Text = "Save To .txt"
			SaveChatlogs.TextColor3 = Color3.new(1, 1, 1)
			table.insert(shade2,SaveChatlogs)
			table.insert(text1,SaveChatlogs)
			
			Toggle.Name = "Toggle"
			Toggle.Parent = chat
			Toggle.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
			Toggle.BorderSizePixel = 0
			Toggle.Position = UDim2.new(0, 60, 0, 220)
			Toggle.Size = UDim2.new(0, 66, 0, 20)
			Toggle.ZIndex = 10
			Toggle.Font = Enum.Font.SourceSans
			Toggle.FontSize = Enum.FontSize.Size14
			Toggle.Text = "Disabled"
			Toggle.TextColor3 = Color3.new(1, 1, 1)
			table.insert(shade2,Toggle)
			table.insert(text1,Toggle)
			
			scroll_2.Name = "scroll"
			scroll_2.Parent = chat
			scroll_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
			scroll_2.BorderSizePixel = 0
			scroll_2.Position = UDim2.new(0, 5, 0, 25)
			scroll_2.Size = UDim2.new(0, 328, 0, 190)
			scroll_2.ZIndex = 10
			scroll_2.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			scroll_2.CanvasSize = UDim2.new(0, 0, 0, 10)
			scroll_2.ScrollBarThickness = 8
			scroll_2.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			table.insert(scroll,scroll_2)
			table.insert(shade2,scroll_2)
			
			join.Name = "join"
			join.Parent = background
			join.Active = true
			join.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)
			join.BorderSizePixel = 0
			join.ClipsDescendants = true
			join.Size = UDim2.new(0, 338, 0, 245)
			join.Visible = false
			join.ZIndex = 10
			table.insert(shade1,join)
			
			Toggle_2.Name = "Toggle"
			Toggle_2.Parent = join
			Toggle_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
			Toggle_2.BorderSizePixel = 0
			Toggle_2.Position = UDim2.new(0, 60, 0, 220)
			Toggle_2.Size = UDim2.new(0, 66, 0, 20)
			Toggle_2.ZIndex = 10
			Toggle_2.Font = Enum.Font.SourceSans
			Toggle_2.FontSize = Enum.FontSize.Size14
			Toggle_2.Text = "Disabled"
			Toggle_2.TextColor3 = Color3.new(1, 1, 1)
			table.insert(shade2,Toggle_2)
			table.insert(text1,Toggle_2)
			
			Clear_2.Name = "Clear"
			Clear_2.Parent = join
			Clear_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
			Clear_2.BorderSizePixel = 0
			Clear_2.Position = UDim2.new(0, 5, 0, 220)
			Clear_2.Size = UDim2.new(0, 50, 0, 20)
			Clear_2.ZIndex = 10
			Clear_2.Font = Enum.Font.SourceSans
			Clear_2.FontSize = Enum.FontSize.Size14
			Clear_2.Text = "Clear"
			Clear_2.TextColor3 = Color3.new(1, 1, 1)
			table.insert(shade2,Clear_2)
			table.insert(text1,Clear_2)
			
			scroll_3.Name = "scroll"
			scroll_3.Parent = join
			scroll_3.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
			scroll_3.BorderSizePixel = 0
			scroll_3.Position = UDim2.new(0, 5, 0, 25)
			scroll_3.Size = UDim2.new(0, 328, 0, 190)
			scroll_3.ZIndex = 10
			scroll_3.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			scroll_3.CanvasSize = UDim2.new(0, 0, 0, 10)
			scroll_3.ScrollBarThickness = 8
			scroll_3.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
			table.insert(scroll,scroll_3)
			table.insert(shade2,scroll_3)
			
			selectChat.Name = "selectChat"
			selectChat.Parent = background
			selectChat.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
			selectChat.BorderSizePixel = 0
			selectChat.Position = UDim2.new(0, 5, 0, 5)
			selectChat.Size = UDim2.new(0, 164, 0, 20)
			selectChat.ZIndex = 10
			selectChat.Font = Enum.Font.SourceSans
			selectChat.FontSize = Enum.FontSize.Size14
			selectChat.Text = "Chat Logs"
			selectChat.TextColor3 = Color3.new(1, 1, 1)
			table.insert(shade2,selectChat)
			table.insert(text1,selectChat)
			
			selectJoin.Name = "selectJoin"
			selectJoin.Parent = background
			selectJoin.BackgroundColor3 = Color3.new(0.305882, 0.305882, 0.309804)
			selectJoin.BorderSizePixel = 0
			selectJoin.Position = UDim2.new(0, 169, 0, 5)
			selectJoin.Size = UDim2.new(0, 164, 0, 20)
			selectJoin.ZIndex = 10
			selectJoin.Font = Enum.Font.SourceSans
			selectJoin.FontSize = Enum.FontSize.Size14
			selectJoin.Text = "Join Logs"
			selectJoin.TextColor3 = Color3.new(1, 1, 1)
			table.insert(shade3,selectJoin)
			table.insert(text1,selectJoin)
			
			function create(data)
				local insts = {}
				for i,v in pairs(data) do insts[v[1]] = Instance.new(v[2]) end
			
				for _,v in pairs(data) do
					for prop,val in pairs(v[3]) do
						if type(val) == "table" then
							insts[v[1]][prop] = insts[val[1]]
						else
							insts[v[1]][prop] = val
						end
					end
				end
			
				return insts[1]
			end
			
			local textService = game:GetService("TextService")
			ViewportTextBox = (function()
			
				local funcs = {}
				funcs.Update = function(self)
					local cursorPos = self.TextBox.CursorPosition
					local text = self.TextBox.Text
					if text == "" then self.TextBox.Position = UDim2.new(0,2,0,0) return end
					if cursorPos == -1 then return end
			
					local cursorText = text:sub(1,cursorPos-1)
					local pos = nil
					local leftEnd = -self.TextBox.Position.X.Offset
					local rightEnd = leftEnd + self.View.AbsoluteSize.X
			
					local totalTextSize = textService:GetTextSize(text,self.TextBox.TextSize,self.TextBox.Font,Vector2.new(999999999,100)).X
					local cursorTextSize = textService:GetTextSize(cursorText,self.TextBox.TextSize,self.TextBox.Font,Vector2.new(999999999,100)).X
			
					if cursorTextSize > rightEnd then
						pos = math.max(-2,cursorTextSize - self.View.AbsoluteSize.X + 2)
					elseif cursorTextSize < leftEnd then
						pos = math.max(-2,cursorTextSize-2)
					elseif totalTextSize < rightEnd then
						pos = math.max(-2,totalTextSize - self.View.AbsoluteSize.X + 2)
					end
			
					if pos then
						self.TextBox.Position = UDim2.new(0,-pos,0,0)
						self.TextBox.Size = UDim2.new(1,pos,1,0)
					end
				end
			
				local mt = {}
				mt.__index = funcs
			
				local function convert(textbox)
					local obj = setmetatable({OffsetX = 0, TextBox = textbox},mt)
			
					local view = Instance.new("Frame")
					view.BackgroundTransparency = textbox.BackgroundTransparency
					view.BackgroundColor3 = textbox.BackgroundColor3
					view.BorderSizePixel = textbox.BorderSizePixel
					view.BorderColor3 = textbox.BorderColor3
					view.Position = textbox.Position
					view.Size = textbox.Size
					view.ClipsDescendants = true
					view.Name = textbox.Name
					view.ZIndex = 10
					textbox.BackgroundTransparency = 1
					textbox.Position = UDim2.new(0,4,0,0)
					textbox.Size = UDim2.new(1,-8,1,0)
					textbox.TextXAlignment = Enum.TextXAlignment.Left
					textbox.Name = "Input"
					table.insert(text1,textbox)
					table.insert(shade2,view)
			
					obj.View = view
			
					textbox.Changed:Connect(function(prop)
						if prop == "Text" or prop == "CursorPosition" or prop == "AbsoluteSize" then
							obj:Update()
						end
					end)
			
					obj:Update()
			
					view.Parent = textbox.Parent
					textbox.Parent = view
			
					return obj
				end
			
				return {convert = convert}
			end)()
			
			ViewportTextBox.convert(Cmdbar).View.ZIndex = 10
			ViewportTextBox.convert(Cmdbar_2).View.ZIndex = 10
			ViewportTextBox.convert(Cmdbar_3).View.ZIndex = 10
			
			IYMouse = Players.LocalPlayer:GetMouse()
			UserInputService = game:GetService("UserInputService")
			TweenService = game:GetService("TweenService")
			HttpService = game:GetService("HttpService")
			MarketplaceService = game:GetService("MarketplaceService")
			RunService = game:GetService("RunService")
			TeleportService = game:GetService("TeleportService")
			StarterGui = game:GetService("StarterGui")
			GuiService = game:GetService("GuiService")
			Lighting = game:GetService("Lighting")
			ContextActionService = game:GetService("ContextActionService")
			NetworkClient = game:GetService("NetworkClient")
			ReplicatedStorage = game:GetService("ReplicatedStorage")
			GroupService = game:GetService("GroupService")
			PathService = game:GetService("PathfindingService")
			SoundService = game:GetService("SoundService")
			Teams = game:GetService("Teams")
			StarterPlayer = game:GetService("StarterPlayer")
			InsertService = game:GetService("InsertService")
			ChatService = game:GetService("Chat")
			ProximityPromptService = game:GetService("ProximityPromptService")
			StatsService = game:GetService("Stats")
			MaterialService = game:GetService("MaterialService")
			
			sethidden = sethiddenproperty or set_hidden_property or set_hidden_prop
			gethidden = gethiddenproperty or get_hidden_property or get_hidden_prop
			queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
			httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
			PlaceId, JobId = game.PlaceId, game.JobId
			local IsOnMobile = false--table.find({Enum.Platform.IOS, Enum.Platform.Android}, UserInputService:GetPlatform())
			
			function writefileExploit()
				if writefile then
					return true
				end
			end
			
			function isNumber(str)
				if tonumber(str) ~= nil or str == 'inf' then
					return true
				end
			end
			
			function getRoot(char)
				local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
				return rootPart
			end
			
			function tools(plr)
				if plr:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass('Tool') or plr.Character:FindFirstChildOfClass('Tool') then
					return true
				end
			end
			
			function r15(plr)
				if plr.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
					return true
				end
			end
			
			function toClipboard(String)
				local clipBoard = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set)
				if clipBoard then
					clipBoard(String)
					notify('Clipboard','Copied to clipboard')
				else
					notify('Clipboard',"Your exploit doesn't have the ability to use the clipboard")
				end
			end
			
			function getHierarchy(obj)
				local fullname
				local period
			
				if string.find(obj.Name,' ') then
					fullname = '["'..obj.Name..'"]'
					period = false
				else
					fullname = obj.Name
					period = true
				end
			
				local getS = obj
				local parent = obj
				local service = ''
			
				if getS.Parent ~= game then
					repeat
						getS = getS.Parent
						service = getS.ClassName
					until getS.Parent == game
				end
			
				if parent.Parent ~= getS then
					repeat
						parent = parent.Parent
						if string.find(tostring(parent),' ') then
							if period then
								fullname = '["'..parent.Name..'"].'..fullname
							else
								fullname = '["'..parent.Name..'"]'..fullname
							end
							period = false
						else
							if period then
								fullname = parent.Name..'.'..fullname
							else
								fullname = parent.Name..''..fullname
							end
							period = true
						end
					until parent.Parent == getS
				elseif string.find(tostring(parent),' ') then
					fullname = '["'..parent.Name..'"]'
					period = false
				end
			
				if period then
					return 'game:GetService("'..service..'").'..fullname
				else
					return 'game:GetService("'..service..'")'..fullname
				end
			end
			
			AllWaypoints = {}
			
			local cooldown = false
			function writefileCooldown(name,data)
				task.spawn(function()
					if not cooldown then
						cooldown = true
						writefile(name, data)
					else
						repeat wait() until cooldown == false
						writefileCooldown(name,data)
					end
					wait(3)
					cooldown = false
				end)
			end
			
			function dragGUI(gui)
				task.spawn(function()
					local dragging
					local dragInput
					local dragStart = Vector3.new(0,0,0)
					local startPos
					local function update(input)
						local delta = input.Position - dragStart
						local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
						TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
					end
					gui.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
							dragging = true
							dragStart = input.Position
							startPos = gui.Position
			
							input.Changed:Connect(function()
								if input.UserInputState == Enum.UserInputState.End then
									dragging = false
								end
							end)
						end
					end)
					gui.InputChanged:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
							dragInput = input
						end
					end)
					UserInputService.InputChanged:Connect(function(input)
						if input == dragInput and dragging then
							update(input)
						end
					end)
				end)
			end
			
			dragGUI(logs)
			dragGUI(KeybindEditor)
			dragGUI(PluginEditor)
			dragGUI(ToPartFrame)
			
			eventEditor = (function()
				local events = {}
			
				local function registerEvent(name,sets)
					events[name] = {
						commands = {},
						sets = sets or {}
					}
				end
			
				local onEdited = nil
			
				local function fireEvent(name,...)
					local args = {...}
					local event = events[name]
					if event then
						for i,cmd in pairs(event.commands) do
							local metCondition = true
							for idx,set in pairs(event.sets) do
								local argVal = args[idx]
								local cmdSet = cmd[2][idx]
								local condType = set.Type
								if condType == "Player" then
									if cmdSet == 0 then
										metCondition = metCondition and (tostring(Players.LocalPlayer) == argVal)
									elseif cmdSet ~= 1 then
										metCondition = metCondition and table.find(getPlayer(cmdSet,Players.LocalPlayer),argVal)
									end
								elseif condType == "String" then
									if cmdSet ~= 0 then
										metCondition = metCondition and string.find(argVal:lower(),cmdSet:lower())
									end
								elseif condType == "Number" then
									if cmdSet ~= 0 then
										metCondition = metCondition and tonumber(argVal)<=tonumber(cmdSet)
									end
								end
								if not metCondition then break end
							end
			
							if metCondition then
								pcall(task.spawn(function()
									local cmdStr = cmd[1]
									for count,arg in pairs(args) do
										cmdStr = cmdStr:gsub("%$"..count,arg)
									end
									wait(cmd[3] or 0)
									execCmd(cmdStr)
								end))
							end
						end
					end
				end
			
				local main = create({
					{1,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderSizePixel=0,Name="EventEditor",Position=UDim2.new(0.5,-175,0,-500),Size=UDim2.new(0,350,0,20),ZIndex=10,}},
					{2,"Frame",{BackgroundColor3=currentShade2,BorderSizePixel=0,Name="TopBar",Parent={1},Size=UDim2.new(1,0,0,20),ZIndex=10,}},
					{3,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={2},Position=UDim2.new(0,0,0,0),Size=UDim2.new(1,0,0.95,0),Text="Event Editor",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=Enum.TextXAlignment.Center,ZIndex=10,}},
					{4,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Close",Parent={2},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
					{5,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5054663650",Parent={4},Position=UDim2.new(0,5,0,5),Size=UDim2.new(0,10,0,10),ZIndex=10,}},
					{6,"Frame",{BackgroundColor3=currentShade1,BorderSizePixel=0,Name="Content",Parent={1},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,0,202),ZIndex=10,}},
					{7,"ScrollingFrame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage="rbxasset://textures/ui/Scroll/scroll-middle.png",CanvasSize=UDim2.new(0,0,0,100),Name="List",Parent={6},Position=UDim2.new(0,5,0,5),ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,Size=UDim2.new(1,-10,1,-10),TopImage="rbxasset://textures/ui/Scroll/scroll-middle.png",ZIndex=10,}},
					{8,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Holder",Parent={7},Size=UDim2.new(1,0,1,0),ZIndex=10,}},
					{9,"UIListLayout",{Parent={8},SortOrder=2,}},
					{10,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BorderSizePixel=0,ClipsDescendants=true,Name="Settings",Parent={6},Position=UDim2.new(1,0,0,0),Size=UDim2.new(0,150,1,0),ZIndex=10,}},
					{11,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),Name="Slider",Parent={10},Position=UDim2.new(0,-150,0,0),Size=UDim2.new(1,0,1,0),ZIndex=10,}},
					{12,"Frame",{BackgroundColor3=Color3.new(0.23529413342476,0.23529413342476,0.23529413342476),BorderColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BorderSizePixel=0,Name="Line",Parent={11},Size=UDim2.new(0,1,1,0),ZIndex=10,}},
					{13,"ScrollingFrame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage="rbxasset://textures/ui/Scroll/scroll-middle.png",CanvasSize=UDim2.new(0,0,0,100),Name="List",Parent={11},Position=UDim2.new(0,0,0,25),ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,Size=UDim2.new(1,0,1,-25),TopImage="rbxasset://textures/ui/Scroll/scroll-middle.png",ZIndex=10,}},
					{14,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Holder",Parent={13},Size=UDim2.new(1,0,1,0),ZIndex=10,}},
					{15,"UIListLayout",{Parent={14},SortOrder=2,}},
					{16,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={11},Size=UDim2.new(1,0,0,20),Text="Event Settings",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
					{17,"TextButton",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Font=3,Name="Close",BorderSizePixel=0,Parent={11},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text="<",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
					{18,"Folder",{Name="Templates",Parent={10},}},
					{19,"Frame",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name="Players",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,86),Visible=false,ZIndex=10,}},
					{20,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={19},Size=UDim2.new(1,0,0,20),Text="Choose Players",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
					{21,"TextLabel",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Any",Parent={19},Position=UDim2.new(0,5,0,42),Size=UDim2.new(1,-10,0,20),Text="Any Player",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{22,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="Button",Parent={21},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
					{23,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={22},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
					{24,"TextLabel",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Me",Parent={19},Position=UDim2.new(0,5,0,20),Size=UDim2.new(1,-10,0,20),Text="Me Only",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{25,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="Button",Parent={24},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
					{26,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={25},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
					{27,"TextBox",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,Name="Custom",Parent={19},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText="Custom Player Set",Position=UDim2.new(0,5,0,64),Size=UDim2.new(1,-35,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{28,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="CustomButton",Parent={19},Position=UDim2.new(1,-25,0,64),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
					{29,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={28},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
					{30,"Frame",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name="Strings",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,64),Visible=false,ZIndex=10,}},
					{31,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={30},Size=UDim2.new(1,0,0,20),Text="Choose String",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
					{32,"TextLabel",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Any",Parent={30},Position=UDim2.new(0,5,0,20),Size=UDim2.new(1,-10,0,20),Text="Any String",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{33,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="Button",Parent={32},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
					{34,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={33},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
					{54,"Frame",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name="Numbers",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,64),Visible=false,ZIndex=10,}},
					{55,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={54},Size=UDim2.new(1,0,0,20),Text="Choose String",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
					{56,"TextLabel",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Any",Parent={54},Position=UDim2.new(0,5,0,20),Size=UDim2.new(1,-10,0,20),Text="Any Number",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{57,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="Button",Parent={56},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
					{58,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={57},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
					{59,"TextBox",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,Name="Custom",Parent={54},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText="Number",Position=UDim2.new(0,5,0,42),Size=UDim2.new(1,-35,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{60,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="CustomButton",Parent={54},Position=UDim2.new(1,-25,0,42),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
					{61,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={60},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
					{35,"TextBox",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,Name="Custom",Parent={30},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText="Match String",Position=UDim2.new(0,5,0,42),Size=UDim2.new(1,-35,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{36,"Frame",{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,Name="CustomButton",Parent={30},Position=UDim2.new(1,-25,0,42),Size=UDim2.new(0,20,0,20),ZIndex=10,}},
					{37,"TextButton",{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="On",Parent={36},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),Text="",TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
					{38,"Frame",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Name="DelayEditor",Parent={18},Position=UDim2.new(0,0,0,25),Size=UDim2.new(1,0,0,24),Visible=false,ZIndex=10,}},
					{39,"TextBox",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,Font=3,Name="Secs",Parent={38},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),Position=UDim2.new(0,60,0,2),Size=UDim2.new(1,-65,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{40,"TextLabel",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,Name="Label",Parent={39},Position=UDim2.new(0,-55,0,0),Size=UDim2.new(1,0,1,0),Text="Delay (s):",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{41,"Frame",{BackgroundColor3=currentShade1,BorderSizePixel=0,ClipsDescendants=true,Name="EventTemplate",Parent={6},Size=UDim2.new(1,0,0,20),Visible=false,ZIndex=10,}},
					{42,"TextButton",{BackgroundColor3=currentText1,BackgroundTransparency=1,Font=3,Name="Expand",Parent={41},Size=UDim2.new(0,20,0,20),Text=">",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
					{43,"TextLabel",{BackgroundColor3=currentText1,BackgroundTransparency=1,Font=3,Name="EventName",Parent={41},Position=UDim2.new(0,25,0,0),Size=UDim2.new(1,-25,0,20),Text="OnSpawn",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{44,"Frame",{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BorderSizePixel=0,BackgroundTransparency=1,ClipsDescendants=true,Name="Cmds",Parent={41},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,1,-20),ZIndex=10,}},
					{45,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),Name="Add",Parent={44},Position=UDim2.new(0,0,1,-20),Size=UDim2.new(1,0,0,20),ZIndex=10,}},
					{46,"TextBox",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClearTextOnFocus=false,Font=3,Parent={45},PlaceholderColor3=Color3.new(0.7843137383461,0.7843137383461,0.7843137383461),PlaceholderText="Add new command",Position=UDim2.new(0,5,0,0),Size=UDim2.new(1,-10,1,0),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{47,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Holder",Parent={44},Size=UDim2.new(1,0,1,-20),ZIndex=10,}},
					{48,"UIListLayout",{Parent={47},SortOrder=2,}},
					{49,"Frame",{currentShade1,BorderSizePixel=0,ClipsDescendants=true,Name="CmdTemplate",Parent={6},Size=UDim2.new(1,0,0,20),Visible=false,ZIndex=10,}},
					{50,"TextBox",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClearTextOnFocus=false,Font=3,Parent={49},PlaceholderColor3=Color3.new(1,1,1),Position=UDim2.new(0,5,0,0),Size=UDim2.new(1,-45,0,20),Text="a\\b\\c\\d",TextColor3=currentText1,TextSize=14,TextXAlignment=0,ZIndex=10,}},
					{51,"TextButton",{BackgroundColor3=currentShade1,BorderSizePixel=0,Font=3,Name="Delete",Parent={49},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text="X",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
					{52,"TextButton",{BackgroundColor3=currentShade1,BorderSizePixel=0,Font=3,Name="Settings",Parent={49},Position=UDim2.new(1,-40,0,0),Size=UDim2.new(0,20,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},
					{53,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://1204397029",Parent={52},Position=UDim2.new(0,2,0,2),Size=UDim2.new(0,16,0,16),ZIndex=10,}},
				})
				main.Name = randomString()
				local mainFrame = main:WaitForChild("Content")
				local eventList = mainFrame:WaitForChild("List")
				local eventListHolder = eventList:WaitForChild("Holder")
				local cmdTemplate = mainFrame:WaitForChild("CmdTemplate")
				local eventTemplate = mainFrame:WaitForChild("EventTemplate")
				local settingsFrame = mainFrame:WaitForChild("Settings"):WaitForChild("Slider")
				local settingsTemplates = mainFrame.Settings:WaitForChild("Templates")
				local settingsList = settingsFrame:WaitForChild("List"):WaitForChild("Holder")
				table.insert(shade2,main.TopBar) table.insert(shade1,mainFrame) table.insert(shade2,eventTemplate)
				table.insert(text1,eventTemplate.EventName) table.insert(shade1,eventTemplate.Cmds.Add) table.insert(shade1,cmdTemplate)
				table.insert(text1,cmdTemplate.TextBox) table.insert(shade2,cmdTemplate.Delete) table.insert(shade2,cmdTemplate.Settings)
				table.insert(scroll,mainFrame.List) table.insert(shade1,settingsFrame) table.insert(shade2,settingsFrame.Line)
				table.insert(shade2,settingsFrame.Close) table.insert(scroll,settingsFrame.List) table.insert(shade2,settingsTemplates.DelayEditor.Secs)
				table.insert(text1,settingsTemplates.DelayEditor.Secs) table.insert(text1,settingsTemplates.DelayEditor.Secs.Label) table.insert(text1,settingsTemplates.Players.Title)
				table.insert(shade3,settingsTemplates.Players.CustomButton) table.insert(shade2,settingsTemplates.Players.Custom) table.insert(text1,settingsTemplates.Players.Custom)
				table.insert(shade3,settingsTemplates.Players.Any.Button) table.insert(shade3,settingsTemplates.Players.Me.Button) table.insert(text1,settingsTemplates.Players.Any)
				table.insert(text1,settingsTemplates.Players.Me) table.insert(text1,settingsTemplates.Strings.Title) table.insert(text1,settingsTemplates.Strings.Any)
				table.insert(shade3,settingsTemplates.Strings.Any.Button) table.insert(shade3,settingsTemplates.Strings.CustomButton) table.insert(text1,settingsTemplates.Strings.Custom)
				table.insert(shade2,settingsTemplates.Strings.Custom)
				table.insert(text1,settingsTemplates.Players.Me) table.insert(text1,settingsTemplates.Numbers.Title) table.insert(text1,settingsTemplates.Numbers.Any)
				table.insert(shade3,settingsTemplates.Numbers.Any.Button) table.insert(shade3,settingsTemplates.Numbers.CustomButton) table.insert(text1,settingsTemplates.Numbers.Custom)
				table.insert(shade2,settingsTemplates.Numbers.Custom)
			
				local tweenInf = TweenInfo.new(0.25,Enum.EasingStyle.Quart,Enum.EasingDirection.Out)
			
				local currentlyEditingCmd = nil
			
				settingsFrame:WaitForChild("Close").MouseButton1Click:Connect(function()
					settingsFrame:TweenPosition(UDim2.new(0,-150,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
				end)
			
				local function resizeList()
					local size = 0
			
					for i,v in pairs(eventListHolder:GetChildren()) do
						if v.Name == "EventTemplate" then
							size = size + 20
							if v.Expand.Rotation == 90 then
								size = size + 20*(1+(#events[v.EventName:GetAttribute("RawName")].commands or 0))
							end
						end
					end
			
					TweenService:Create(eventList,tweenInf,{CanvasSize = UDim2.new(0,0,0,size)}):Play()
			
					if size > eventList.AbsoluteSize.Y then
						eventListHolder.Size = UDim2.new(1,-8,1,0)
					else
						eventListHolder.Size = UDim2.new(1,0,1,0)
					end
				end
			
				local function resizeSettingsList()
					local size = 0
			
					for i,v in pairs(settingsList:GetChildren()) do
						if v:IsA("Frame") then
							size = size + v.AbsoluteSize.Y
						end
					end
			
					settingsList.Parent.CanvasSize = UDim2.new(0,0,0,size)
			
					if size > settingsList.Parent.AbsoluteSize.Y then
						settingsList.Size = UDim2.new(1,-8,1,0)
					else
						settingsList.Size = UDim2.new(1,0,1,0)
					end
				end
			
				local function setupCheckbox(button,callback)
					local enabled = button.On.BackgroundTransparency == 0
			
					local function update()
						button.On.BackgroundTransparency = (enabled and 0 or 1)
					end
			
					button.On.MouseButton1Click:Connect(function()
						enabled = not enabled
						update()
						if callback then callback(enabled) end
					end)
			
					return {
						Toggle = function(nocall) enabled = not enabled update() if not nocall and callback then callback(enabled) end end,
						Enable = function(nocall) if enabled then return end enabled = true update()if not nocall and callback then callback(enabled) end end,
						Disable = function(nocall) if not enabled then return end enabled = false update()if not nocall and callback then callback(enabled) end end,
						IsEnabled = function() return enabled end
					}
				end
			
				local function openSettingsEditor(event,cmd)
					currentlyEditingCmd = cmd
			
					for i,v in pairs(settingsList:GetChildren()) do if v:IsA("Frame") then v:Destroy() end end
			
					local delayEditor = settingsTemplates.DelayEditor:Clone()
					delayEditor.Secs.FocusLost:Connect(function()
						cmd[3] = tonumber(delayEditor.Secs.Text) or 0
						delayEditor.Secs.Text = cmd[3]
						if onEdited then onEdited() end
					end)
					delayEditor.Secs.Text = cmd[3]
					delayEditor.Visible = true
					table.insert(shade2,delayEditor.Secs)
					table.insert(text1,delayEditor.Secs)
					table.insert(text1,delayEditor.Secs.Label)
					delayEditor.Parent = settingsList
			
					for i,v in pairs(event.sets) do
						if v.Type == "Player" then
							local template = settingsTemplates.Players:Clone()
							template.Title.Text = v.Name or "Player"
			
							local me,any,custom
			
							me = setupCheckbox(template.Me.Button,function(on)
								if not on then return end
								any.Disable()
								custom.Disable()
								cmd[2][i] = 0
								if onEdited then onEdited() end
							end)
			
							any = setupCheckbox(template.Any.Button,function(on)
								if not on then return end
								me.Disable()
								custom.Disable()
								cmd[2][i] = 1
								if onEdited then onEdited() end
							end)
			
							local customTextBox = template.Custom
							custom = setupCheckbox(template.CustomButton,function(on)
								if not on then return end
								me.Disable()
								any.Disable()
								cmd[2][i] = customTextBox.Text
								if onEdited then onEdited() end
							end)
			
							ViewportTextBox.convert(customTextBox)
							customTextBox.FocusLost:Connect(function()
								if custom:IsEnabled() then
									cmd[2][i] = customTextBox.Text
									if onEdited then onEdited() end
								end
							end)
			
							local cVal = cmd[2][i]
							if cVal == 0 then
								me:Enable()
							elseif cVal == 1 then
								any:Enable()
							else
								custom:Enable()
								customTextBox.Text = cVal
							end
			
							template.Visible = true
							table.insert(text1,template.Title)
							table.insert(shade3,template.CustomButton)
							table.insert(shade3,template.Any.Button)
							table.insert(shade3,template.Me.Button)
							table.insert(text1,template.Any)
							table.insert(text1,template.Me)
							template.Parent = settingsList
						elseif v.Type == "String" then
							local template = settingsTemplates.Strings:Clone()
							template.Title.Text = v.Name or "String"
			
							local any,custom
			
							any = setupCheckbox(template.Any.Button,function(on)
								if not on then return end
								custom.Disable()
								cmd[2][i] = 0
								if onEdited then onEdited() end
							end)
			
							local customTextBox = template.Custom
							custom = setupCheckbox(template.CustomButton,function(on)
								if not on then return end
								any.Disable()
								cmd[2][i] = customTextBox.Text
								if onEdited then onEdited() end
							end)
			
							ViewportTextBox.convert(customTextBox)
							customTextBox.FocusLost:Connect(function()
								if custom:IsEnabled() then
									cmd[2][i] = customTextBox.Text
									if onEdited then onEdited() end
								end
							end)
			
							local cVal = cmd[2][i]
							if cVal == 0 then
								any:Enable()
							else
								custom:Enable()
								customTextBox.Text = cVal
							end
			
							template.Visible = true
							table.insert(text1,template.Title)
							table.insert(text1,template.Any)
							table.insert(shade3,template.Any.Button)
							table.insert(shade3,template.CustomButton)
							template.Parent = settingsList
						elseif v.Type == "Number" then
							local template = settingsTemplates.Numbers:Clone()
							template.Title.Text = v.Name or "Number"
			
							local any,custom
			
							any = setupCheckbox(template.Any.Button,function(on)
								if not on then return end
								custom.Disable()
								cmd[2][i] = 0
								if onEdited then onEdited() end
							end)
			
							local customTextBox = template.Custom
							custom = setupCheckbox(template.CustomButton,function(on)
								if not on then return end
								any.Disable()
								cmd[2][i] = customTextBox.Text
								if onEdited then onEdited() end
							end)
			
							ViewportTextBox.convert(customTextBox)
							customTextBox.FocusLost:Connect(function()
								cmd[2][i] = tonumber(customTextBox.Text) or 0
								customTextBox.Text = cmd[2][i]
								if custom:IsEnabled() then
									if onEdited then onEdited() end
								end
							end)
			
							local cVal = cmd[2][i]
							if cVal == 0 then
								any:Enable()
							else
								custom:Enable()
								customTextBox.Text = cVal
							end
			
							template.Visible = true
							table.insert(text1,template.Title)
							table.insert(text1,template.Any)
							table.insert(shade3,template.Any.Button)
							table.insert(shade3,template.CustomButton)
							template.Parent = settingsList
						end
					end
					resizeSettingsList()
					settingsFrame:TweenPosition(UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
				end
			
				local function defaultSettings(ev)
					local res = {}
			
					for i,v in pairs(ev.sets) do
						if v.Type == "Player" then
							res[#res+1] = v.Default or 0
						elseif v.Type == "String" then
							res[#res+1] = v.Default or 0
						elseif v.Type == "Number" then
							res[#res+1] = v.Default or 0
						end
					end
			
					return res
				end
			
				local function refreshList()
					for i,v in pairs(eventListHolder:GetChildren()) do if v:IsA("Frame") then v:Destroy() end end
			
					for name,event in pairs(events) do
						local eventF = eventTemplate:Clone()
						eventF.EventName.Text = name
						eventF.Visible = true
						eventF.EventName:SetAttribute("RawName", name)
						table.insert(shade2,eventF)
						table.insert(text1,eventF.EventName)
						table.insert(shade1,eventF.Cmds.Add)
			
						local expanded = false
						eventF.Expand.MouseButton1Down:Connect(function()
							expanded = not expanded
							eventF:TweenSize(UDim2.new(1,0,0,20 + (expanded and 20*#eventF.Cmds.Holder:GetChildren() or 0)),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
							eventF.Expand.Rotation = expanded and 90 or 0
							resizeList()
						end)
			
						local function refreshCommands()
							for i,v in pairs(eventF.Cmds.Holder:GetChildren()) do
								if v.Name == "CmdTemplate" then
									v:Destroy()
								end
							end
			
							eventF.EventName.Text = name..(#event.commands > 0 and " ("..#event.commands..")" or "")
			
							for i,cmd in pairs(event.commands) do
								local cmdF = cmdTemplate:Clone()
								local cmdTextBox = cmdF.TextBox
								ViewportTextBox.convert(cmdTextBox)
								cmdTextBox.Text = cmd[1]
								cmdF.Visible = true
								table.insert(shade1,cmdF)
								table.insert(shade2,cmdF.Delete)
								table.insert(shade2,cmdF.Settings)
			
								cmdTextBox.FocusLost:Connect(function()
									event.commands[i] = {cmdTextBox.Text,cmd[2],cmd[3]}
									if onEdited then onEdited() end
								end)
			
								cmdF.Settings.MouseButton1Click:Connect(function()
									openSettingsEditor(event,cmd)
								end)
			
								cmdF.Delete.MouseButton1Click:Connect(function()
									table.remove(event.commands,i)
									refreshCommands()
									resizeList()
			
									if currentlyEditingCmd == cmd then
										settingsFrame:TweenPosition(UDim2.new(0,-150,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
									end
									if onEdited then onEdited() end
								end)
			
								cmdF.Parent = eventF.Cmds.Holder
							end
			
							eventF:TweenSize(UDim2.new(1,0,0,20 + (expanded and 20*#eventF.Cmds.Holder:GetChildren() or 0)),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)
						end
			
						local newBox = eventF.Cmds.Add.TextBox
						ViewportTextBox.convert(newBox)
						newBox.FocusLost:Connect(function(enter)
							if enter then
								event.commands[#event.commands+1] = {newBox.Text,defaultSettings(event),0}
								newBox.Text = ""
			
								refreshCommands()
								resizeList()
								if onEdited then onEdited() end
							end
						end)
			
						--eventF:GetPropertyChangedSignal("AbsoluteSize"):Connect(resizeList)
			
						eventF.Parent = eventListHolder
			
						refreshCommands()
					end
			
					resizeList()
				end
			
				local function saveData()
					local result = {}
					for i,v in pairs(events) do
						result[i] = v.commands
					end
					return HttpService:JSONEncode(result)
				end
			
				local function loadData(str)
					local data = HttpService:JSONDecode(str)
					for i,v in pairs(data) do
						if events[i] then
							events[i].commands = v
						end
					end
				end
			
				local function addCmd(event,data)
					table.insert(events[event].commands,data)
				end
			
				local function setOnEdited(f)
					if type(f) == "function" then
						onEdited = f
					end
				end
			
				main.TopBar.Close.MouseButton1Click:Connect(function()
					main:TweenPosition(UDim2.new(0.5,-175,0,-500), "InOut", "Quart", 0.5, true, nil)
				end)
				dragGUI(main)
				main.Parent = PARENT
			
				return {
					RegisterEvent = registerEvent,
					FireEvent = fireEvent,
					Refresh = refreshList,
					SaveData = saveData,
					LoadData = loadData,
					AddCmd = addCmd,
					Frame = main,
					SetOnEdited = setOnEdited
				}
			end)()
			
			reference = (function()
				local main = create({
					{1,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,Name="Main",Position=UDim2.new(0.5,-250,0,-500),Size=UDim2.new(0,500,0,20),ZIndex=10,}},
					{2,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="TopBar",Parent={1},Size=UDim2.new(1,0,0,20),ZIndex=10,}},
					{3,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Title",Parent={2},Size=UDim2.new(1,0,0.94999998807907,0),Text="Reference",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
					{4,"TextButton",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Close",Parent={2},Position=UDim2.new(1,-20,0,0),Size=UDim2.new(0,20,0,20),Text="",TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
					{5,"ImageLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image="rbxassetid://5054663650",Parent={4},Position=UDim2.new(0,5,0,5),Size=UDim2.new(0,10,0,10),ZIndex=10,}},
					{6,"Frame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderSizePixel=0,Name="Content",Parent={1},Position=UDim2.new(0,0,0,20),Size=UDim2.new(1,0,0,300),ZIndex=10,}},
					{7,"ScrollingFrame",{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage="rbxasset://textures/ui/Scroll/scroll-middle.png",CanvasSize=UDim2.new(0,0,0,1313),Name="List",Parent={6},ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,Size=UDim2.new(1,0,1,0),TopImage="rbxasset://textures/ui/Scroll/scroll-middle.png",VerticalScrollBarInset=2,ZIndex=10,}},
					{8,"UIListLayout",{Parent={7},SortOrder=2,}},
					{9,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,429),ZIndex=10,}},
					{10,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={9},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Special Player Cases",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
					{11,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={9},Position=UDim2.new(0,8,0,25),Size=UDim2.new(1,-8,0,20),Text="These keywords can be used to quickly select groups of players in commands:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{12,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={9},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
					{13,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Cases",Parent={9},Position=UDim2.new(0,8,0,55),Size=UDim2.new(1,-16,0,342),ZIndex=10,}},
					{14,"UIListLayout",{Parent={13},SortOrder=2,}},
					{15,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-4,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{16,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={15},Size=UDim2.new(1,0,1,0),Text="all",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{17,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={15},Position=UDim2.new(0,15,0,0),Size=UDim2.new(1,0,1,0),Text="- includes everyone",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{18,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-3,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{19,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={18},Size=UDim2.new(1,0,1,0),Text="others",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{20,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={18},Position=UDim2.new(0,37,0,0),Size=UDim2.new(1,0,1,0),Text="- includes everyone except you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{21,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-2,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{22,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={21},Size=UDim2.new(1,0,1,0),Text="me",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{23,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={21},Position=UDim2.new(0,19,0,0),Size=UDim2.new(1,0,1,0),Text="- includes your player only",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{24,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{25,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={24},Size=UDim2.new(1,0,1,0),Text="#[number]",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{26,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={24},Position=UDim2.new(0,59,0,0),Size=UDim2.new(1,0,1,0),Text="- gets a specified amount of random players",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{27,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{28,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={27},Size=UDim2.new(1,0,1,0),Text="random",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{29,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={27},Position=UDim2.new(0,44,0,0),Size=UDim2.new(1,0,1,0),Text="- affects a random player",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{30,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{31,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={30},Size=UDim2.new(1,0,1,0),Text="%[team name]",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{32,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={30},Position=UDim2.new(0,78,0,0),Size=UDim2.new(1,0,1,0),Text="- includes everyone on a given team",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{33,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{34,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={33},Size=UDim2.new(1,0,1,0),Text="allies / team",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{35,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={33},Position=UDim2.new(0,63,0,0),Size=UDim2.new(1,0,1,0),Text="- players who are on your team",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{36,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{37,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={36},Size=UDim2.new(1,0,1,0),Text="enemies / nonteam",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{38,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={36},Position=UDim2.new(0,101,0,0),Size=UDim2.new(1,0,1,0),Text="- players who are not on your team",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{39,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{40,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={39},Size=UDim2.new(1,0,1,0),Text="friends",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{41,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={39},Position=UDim2.new(0,40,0,0),Size=UDim2.new(1,0,1,0),Text="- anyone who is friends with you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{42,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{43,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={42},Size=UDim2.new(1,0,1,0),Text="nonfriends",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{44,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={42},Position=UDim2.new(0,61,0,0),Size=UDim2.new(1,0,1,0),Text="- anyone who is not friends with you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{45,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{46,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={45},Size=UDim2.new(1,0,1,0),Text="guests",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{47,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={45},Position=UDim2.new(0,36,0,0),Size=UDim2.new(1,0,1,0),Text="- guest players (obsolete)",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{48,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{49,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={48},Size=UDim2.new(1,0,1,0),Text="bacons",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{50,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={48},Position=UDim2.new(0,40,0,0),Size=UDim2.new(1,0,1,0),Text="- anyone with the \"bacon\" or pal hair",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{51,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{52,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={51},Size=UDim2.new(1,0,1,0),Text="age[number]",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{53,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={51},Position=UDim2.new(0,71,0,0),Size=UDim2.new(1,0,1,0),Text="- includes anyone below or at the given age",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{54,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{55,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={54},Size=UDim2.new(1,0,1,0),Text="rad[number]",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{56,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={54},Position=UDim2.new(0,70,0,0),Size=UDim2.new(1,0,1,0),Text="- includes anyone within the given radius",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{57,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{58,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={57},Size=UDim2.new(1,0,1,0),Text="nearest",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{59,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={57},Position=UDim2.new(0,43,0,0),Size=UDim2.new(1,0,1,0),Text="- gets the closest player to you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{60,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{61,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={60},Size=UDim2.new(1,0,1,0),Text="farthest",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{62,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={60},Position=UDim2.new(0,46,0,0),Size=UDim2.new(1,0,1,0),Text="- gets the farthest player from you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{63,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{64,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={63},Size=UDim2.new(1,0,1,0),Text="group[ID]",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{65,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={63},Position=UDim2.new(0,55,0,0),Size=UDim2.new(1,0,1,0),Text="- gets players who are in a certain group",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{66,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{67,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={66},Size=UDim2.new(1,0,1,0),Text="alive",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{68,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={66},Position=UDim2.new(0,27,0,0),Size=UDim2.new(1,0,1,0),Text="- gets players who are alive",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{69,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{70,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={69},Size=UDim2.new(1,0,1,0),Text="dead",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{71,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={69},Position=UDim2.new(0,29,0,0),Size=UDim2.new(1,0,1,0),Text="- gets players who are dead",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{72,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-1,Name="Case",Parent={13},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,0,0,18),ZIndex=10,}},
					{73,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="CaseName",Parent={72},Size=UDim2.new(1,0,1,0),Text="@username",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{74,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="CaseDesc",Parent={72},Position=UDim2.new(0,66,0,0),Size=UDim2.new(1,0,1,0),Text="- searches for players by username only (ignores displaynames)",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{75,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,180),ZIndex=10,}},
					{76,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={75},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Various Operators",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
					{77,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={75},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
					{78,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={75},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,16),Text="Use commas to separate multiple expressions:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{79,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={75},Position=UDim2.new(0,8,0,75),Size=UDim2.new(1,-8,0,16),Text="Use - to exclude, and + to include players in your expression:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{80,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={75},Position=UDim2.new(0,8,0,91),Size=UDim2.new(1,-8,0,16),Text=";locate %blue-friends (gets players in blue team who aren't your friends)",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{81,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={75},Position=UDim2.new(0,8,0,46),Size=UDim2.new(1,-8,0,16),Text=";locate noob,noob2,bob",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{82,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={75},Position=UDim2.new(0,8,0,120),Size=UDim2.new(1,-8,0,16),Text="Put ! before a command to run it with the last arguments it was ran with:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{83,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={75},Position=UDim2.new(0,8,0,136),Size=UDim2.new(1,-8,0,32),Text="After running ;offset 0 100 0,  you can run !offset anytime to repeat that command with the same arguments that were used to run it last time",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{84,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,154),ZIndex=10,}},
					{85,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={84},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Command Looping",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
					{86,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={84},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,20),Text="Form: [How many times it loops]^[delay (optional)]^[command]",TextColor3=Color3.new(1,1,1),TextSize=15,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{87,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={84},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
					{88,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={84},Position=UDim2.new(0,8,0,50),Size=UDim2.new(1,-8,0,20),Text="Use the 'breakloops' command to stop all running loops.",TextColor3=Color3.new(1,1,1),TextSize=15,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{89,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={84},Position=UDim2.new(0,8,0,80),Size=UDim2.new(1,-8,0,16),Text="Examples:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{90,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={84},Position=UDim2.new(0,8,0,98),Size=UDim2.new(1,-8,0,42),Text=";5^btools - gives you 5 sets of btools\n;10^3^drophats - drops your hats every 3 seconds 10 times\n;inf^0.1^animspeed 100 - infinitely loops your animation speed to 100",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{91,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,120),ZIndex=10,}},
					{92,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={91},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Execute Multiple Commands at Once",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
					{93,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={91},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,20),Text="You can execute multiple commands at once using \"\\\"",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{94,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={91},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
					{95,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={91},Position=UDim2.new(0,8,0,60),Size=UDim2.new(1,-8,0,16),Text="Examples:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{96,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={91},Position=UDim2.new(0,8,0,78),Size=UDim2.new(1,-8,0,32),Text=";drophats\\respawn - drops your hats and respawns you\n;enable inventory\\enable playerlist\\refresh - enables those coregui items and refreshes you",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{97,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,75),ZIndex=10,}},
					{98,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={97},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Browse Command History",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
					{99,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={97},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text="While focused on the command bar, you can use the up and down arrow keys to browse recently used commands",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{100,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={97},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
					{101,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,75),ZIndex=10,}},
					{102,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={101},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Autocomplete in the Command Bar",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
					{103,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={101},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text="While focused on the command bar, you can use the tab key to insert the top suggested command into the command bar.",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{104,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={101},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
					{105,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,175),ZIndex=10,}},
					{106,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={105},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Using Event Binds",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
					{107,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={105},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text="Use event binds to set up commands that get executed when certain events happen. You can edit the conditions for an event command to run (such as which player triggers it).",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{108,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={105},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),ZIndex=10,}},
					{109,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={105},Position=UDim2.new(0,8,0,70),Size=UDim2.new(1,-8,0,48),Text="Some events may send arguments; you can use them in your event command by using $ followed by the argument number ($1, $2, etc). You can find out the order and types of these arguments by looking at the settings of the event command.",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{110,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Text",Parent={105},Position=UDim2.new(0,8,0,130),Size=UDim2.new(1,-8,0,16),Text="Example:",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{111,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={105},Position=UDim2.new(0,8,0,148),Size=UDim2.new(1,-8,0,16),Text="Setting up 'goto $1' on the OnChatted event will teleport you to any player that chats.",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
					{112,"Frame",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Name="Section",Parent={7},Size=UDim2.new(1,0,0,105),ZIndex=10,}},
					{113,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,Name="Header",Parent={112},Position=UDim2.new(0,8,0,5),Size=UDim2.new(1,-8,0,20),Text="Get Further Help",TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},
					{114,"TextLabel",{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,Name="Text",Parent={112},Position=UDim2.new(0,8,0,30),Size=UDim2.new(1,-8,0,32),Text="You can join the Discord server to get support with IY,  and read up on more documentation such as the Plugin API.",TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
					{115,"Frame",{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,Name="Line",Parent={112},Position=UDim2.new(0,10,1,-1),Size=UDim2.new(1,-20,0,1),Visible=false,ZIndex=10,}},
					{116,"TextButton",{BackgroundColor3=Color3.new(0.48627451062202,0.61960786581039,0.85098040103912),BorderColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),Font=4,Name="InviteButton",Parent={112},Position=UDim2.new(0,5,0,75),Size=UDim2.new(1,-10,0,25),Text="Copy Discord Invite Link (https://discord.io/infiniteyield)",TextColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),TextSize=16,ZIndex=10,}},
				})
				for i,v in pairs(main.Content.List:GetDescendants()) do
					if v:IsA("TextLabel") then
						table.insert(text1,v)
					end
				end
				table.insert(scroll,main.Content.List)
				table.insert(shade1,main.Content)
				table.insert(shade2,main.TopBar)
				main.Name = randomString()
				main.TopBar.Close.MouseButton1Click:Connect(function()
					main:TweenPosition(UDim2.new(0.5,-250,0,-500), "InOut", "Quart", 0.5, true, nil)
				end)
				local inviteButton = main:FindFirstChild("InviteButton",true)
				local lastPress = nil
				inviteButton.MouseButton1Click:Connect(function()
					local func = setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set)
					if func then
						func("https://discord.io/infiniteyield")
						inviteButton.Text = "Copied"
					else
						inviteButton.Text = "No Clipboard Function, type out the link"
					end
					local pressTime = tick()
					lastPress = pressTime
					wait(2)
					if lastPress ~= pressTime then return end
					inviteButton.Text = "Copy Discord Invite Link (https://discord.io/infiniteyield)"
				end)
				dragGUI(main)
				main.Parent = PARENT
			
				ReferenceButton.MouseButton1Click:Connect(function()
					main:TweenPosition(UDim2.new(0.5,-250,0.5,-150), "InOut", "Quart", 0.5, true, nil)
				end)
			end)()
			
			currentShade1 = Color3.fromRGB(36, 36, 37)
			currentShade2 = Color3.fromRGB(46, 46, 47)
			currentShade3 = Color3.fromRGB(78, 78, 79)
			currentText1 = Color3.new(1, 1, 1)
			currentText2 = Color3.new(0, 0, 0)
			currentScroll = Color3.fromRGB(78,78,79)
			
			defaultsettings = {
				prefix = ';';
				StayOpen = false;
				espTransparency = 0.3;
				keepIY = true;
				logsEnabled = false;
				jLogsEnabled = false;
				aliases = {};
				binds = {};
				WayPoints = {};
				PluginsTable = {};
				currentShade1 = {currentShade1.R,currentShade1.G,currentShade1.B};
				currentShade2 = {currentShade2.R,currentShade2.G,currentShade2.B};
				currentShade3 = {currentShade3.R,currentShade3.G,currentShade3.B};
				currentText1 = {currentText1.R,currentText1.G,currentText1.B};
				currentText2 = {currentText2.R,currentText2.G,currentText2.B};
				currentScroll = {currentScroll.R,currentScroll.G,currentScroll.B};
				eventBinds = eventEditor.SaveData()
			}
			
			defaults = HttpService:JSONEncode(defaultsettings)
			nosaves = false
			
			local loadedEventData = nil
			function saves()
				if writefileExploit() then
					if pcall(function() readfile("IY_FE.iy") end) then
						if readfile("IY_FE.iy") ~= nil then
							local success, response = pcall(function()
								local json = HttpService:JSONDecode(readfile("IY_FE.iy"))
								if json.prefix ~= nil then prefix = json.prefix else prefix = ';' end
								if json.StayOpen ~= nil then StayOpen = json.StayOpen else StayOpen = false end
								if json.keepIY ~= nil then KeepInfYield = json.keepIY else KeepInfYield = true end
								if json.espTransparency ~= nil then espTransparency = json.espTransparency else espTransparency = 0.3 end
								if json.logsEnabled ~= nil then logsEnabled = json.logsEnabled else logsEnabled = false end
								if json.jLogsEnabled ~= nil then jLogsEnabled = json.jLogsEnabled else jLogsEnabled = false end
								if json.aliases ~= nil then aliases = json.aliases else aliases = {} end
								if json.binds ~= nil then binds = (json.binds or {}) else binds = {} end
								if json.spawnCmds ~= nil then spawnCmds = json.spawnCmds end
								if json.WayPoints ~= nil then AllWaypoints = json.WayPoints else WayPoints = {} AllWaypoints = {} end
								if json.PluginsTable ~= nil then PluginsTable = json.PluginsTable else PluginsTable = {} end
								if json.currentShade1 ~= nil then currentShade1 = Color3.new(json.currentShade1[1],json.currentShade1[2],json.currentShade1[3]) end
								if json.currentShade2 ~= nil then currentShade2 = Color3.new(json.currentShade2[1],json.currentShade2[2],json.currentShade2[3]) end
								if json.currentShade3 ~= nil then currentShade3 = Color3.new(json.currentShade3[1],json.currentShade3[2],json.currentShade3[3]) end
								if json.currentText1 ~= nil then currentText1 = Color3.new(json.currentText1[1],json.currentText1[2],json.currentText1[3]) end
								if json.currentText2 ~= nil then currentText2 = Color3.new(json.currentText2[1],json.currentText2[2],json.currentText2[3]) end
								if json.currentScroll ~= nil then currentScroll = Color3.new(json.currentScroll[1],json.currentScroll[2],json.currentScroll[3]) end
								if json.eventBinds ~= nil then loadedEventData = json.eventBinds end
							end)
							if not success then
								warn("Save Json Error:", response)
								warn("Overwriting Save File")
								writefileCooldown("IY_FE.iy", defaults)
								wait()
								saves()
							end
						else
							writefileCooldown("IY_FE.iy", defaults)
							wait()
							saves()
						end
					else
						writefileCooldown("IY_FE.iy", defaults)
						wait()
						if pcall(function() readfile("IY_FE.iy") end) then
							saves()
						else
							nosaves = true
							prefix = ';'
							StayOpen = false
							KeepInfYield = true
							espTransparency = 0.3
							logsEnabled = false
							jLogsEnabled = false
							aliases = {}
							binds = {}
							WayPoints = {}
							PluginsTable = {}
			
							local FileError = Instance.new("Frame")
							local background = Instance.new("Frame")
							local Directions = Instance.new("TextLabel")
							local shadow = Instance.new("Frame")
							local PopupText = Instance.new("TextLabel")
							local Exit = Instance.new("TextButton")
							local ExitImage = Instance.new("ImageLabel")
			
							FileError.Name = randomString()
							FileError.Parent = PARENT
							FileError.Active = true
							FileError.BackgroundTransparency = 1
							FileError.Position = UDim2.new(0.5, -180, 0, 290)
							FileError.Size = UDim2.new(0, 360, 0, 20)
							FileError.ZIndex = 10
			
							background.Name = "background"
							background.Parent = FileError
							background.Active = true
							background.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
							background.BorderSizePixel = 0
							background.Position = UDim2.new(0, 0, 0, 20)
							background.Size = UDim2.new(0, 360, 0, 205)
							background.ZIndex = 10
			
							Directions.Name = "Directions"
							Directions.Parent = background
							Directions.BackgroundTransparency = 1
							Directions.BorderSizePixel = 0
							Directions.Position = UDim2.new(0, 10, 0, 10)
							Directions.Size = UDim2.new(0, 340, 0, 185)
							Directions.Font = Enum.Font.SourceSans
							Directions.TextSize = 14
							Directions.Text = "There was a problem writing a save file to your PC.\n\nPlease contact the developer/support team for your exploit and tell them writefile is not working.\n\nYour settings, keybinds, waypoints, and aliases will not save if you continue.\n\nThings to try:\n> Make sure a 'workspace' folder is located in the same folder as your exploit\n> If your exploit is inside of a zip/rar file, extract it.\n> Rejoin the game and try again or restart your PC and try again."
							Directions.TextColor3 = Color3.new(1, 1, 1)
							Directions.TextWrapped = true
							Directions.TextXAlignment = Enum.TextXAlignment.Left
							Directions.TextYAlignment = Enum.TextYAlignment.Top
							Directions.ZIndex = 10
			
							shadow.Name = "shadow"
							shadow.Parent = FileError
							shadow.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
							shadow.BorderSizePixel = 0
							shadow.Size = UDim2.new(0, 360, 0, 20)
							shadow.ZIndex = 10
			
							PopupText.Name = "PopupText"
							PopupText.Parent = shadow
							PopupText.BackgroundTransparency = 1
							PopupText.Size = UDim2.new(1, 0, 0.95, 0)
							PopupText.ZIndex = 10
							PopupText.Font = Enum.Font.SourceSans
							PopupText.TextSize = 14
							PopupText.Text = "File Error"
							PopupText.TextColor3 = Color3.new(1, 1, 1)
							PopupText.TextWrapped = true
			
							Exit.Name = "Exit"
							Exit.Parent = shadow
							Exit.BackgroundTransparency = 1
							Exit.Position = UDim2.new(1, -20, 0, 0)
							Exit.Size = UDim2.new(0, 20, 0, 20)
							Exit.Text = ""
							Exit.ZIndex = 10
			
							ExitImage.Parent = Exit
							ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
							ExitImage.BackgroundTransparency = 1
							ExitImage.Position = UDim2.new(0, 5, 0, 5)
							ExitImage.Size = UDim2.new(0, 10, 0, 10)
							ExitImage.Image = "rbxassetid://5054663650"
							ExitImage.ZIndex = 10
			
							Exit.MouseButton1Click:Connect(function()
								FileError:Destroy()
							end)
						end
					end
				else
					prefix = ';'
					StayOpen = false
					KeepInfYield = true
					espTransparency = 0.3
					logsEnabled = false
					jLogsEnabled = false
					aliases = {}
					binds = {}
					WayPoints = {}
					PluginsTable = {}
				end
			end
			
			saves()
			
			function updatesaves()
				if nosaves == false and writefileExploit() then
					local update = {
						prefix = prefix;
						StayOpen = StayOpen;
						keepIY = KeepInfYield;
						espTransparency = espTransparency;
						logsEnabled = logsEnabled;
						jLogsEnabled = jLogsEnabled;
						aliases = aliases;
						binds = binds or {};
						WayPoints = AllWaypoints;
						PluginsTable = PluginsTable;
						currentShade1 = {currentShade1.R,currentShade1.G,currentShade1.B};
						currentShade2 = {currentShade2.R,currentShade2.G,currentShade2.B};
						currentShade3 = {currentShade3.R,currentShade3.G,currentShade3.B};
						currentText1 = {currentText1.R,currentText1.G,currentText1.B};
						currentText2 = {currentText2.R,currentText2.G,currentText2.B};
						currentScroll = {currentScroll.R,currentScroll.G,currentScroll.B};
						eventBinds = eventEditor.SaveData()
					}
					writefileCooldown("IY_FE.iy", HttpService:JSONEncode(update))
				end
			end
			
			eventEditor.SetOnEdited(updatesaves)
			
			pWayPoints = {}
			WayPoints = {}
			
			if #AllWaypoints > 0 then
				for i = 1, #AllWaypoints do
					if not AllWaypoints[i].GAME or AllWaypoints[i].GAME == PlaceId then
						WayPoints[#WayPoints + 1] = {NAME = AllWaypoints[i].NAME, COORD = {AllWaypoints[i].COORD[1], AllWaypoints[i].COORD[2], AllWaypoints[i].COORD[3]}, GAME = AllWaypoints[i].GAME}
					end
				end
			end
			
			if type(binds) ~= "table" then binds = {} end
			
			function Time()
				local HOUR = math.floor((tick() % 86400) / 3600)
				local MINUTE = math.floor((tick() % 3600) / 60)
				local SECOND = math.floor(tick() % 60)
				local AP = HOUR > 11 and 'PM' or 'AM'
				HOUR = (HOUR % 12 == 0 and 12 or HOUR % 12)
				HOUR = HOUR < 10 and '0' .. HOUR or HOUR
				MINUTE = MINUTE < 10 and '0' .. MINUTE or MINUTE
				SECOND = SECOND < 10 and '0' .. SECOND or SECOND
				return HOUR .. ':' .. MINUTE .. ':' .. SECOND .. ' ' .. AP
			end
			
			PrefixBox.Text = prefix
			local SettingsOpen = false
			local isHidden = false
			
			if StayOpen == false then
				On.BackgroundTransparency = 1
			else
				On.BackgroundTransparency = 0
			end
			
			if logsEnabled then
				Toggle.Text = 'Enabled'
			else
				Toggle.Text = 'Disabled'
			end
			
			if jLogsEnabled then
				Toggle_2.Text = 'Enabled'
			else
				Toggle_2.Text = 'Disabled'
			end
			
			function maximizeHolder()
				if StayOpen == false then
					Holder:TweenPosition(UDim2.new(1, Holder.Position.X.Offset, 1, -220), "InOut", "Quart", 0.2, true, nil)
				end
			end
			
			local minimizeNum = -20
			function minimizeHolder()
				if StayOpen == false then
					Holder:TweenPosition(UDim2.new(1, Holder.Position.X.Offset, 1, minimizeNum), "InOut", "Quart", 0.5, true, nil)
				end
			end
			
			function cmdbarHolder()
				if StayOpen == false then
					Holder:TweenPosition(UDim2.new(1, Holder.Position.X.Offset, 1, -45), "InOut", "Quart", 0.5, true, nil)
				end
			end
			
			pinNotification = nil
			local notifyCount = 0
			function notify(text,text2,length)
				task.spawn(function()
					local LnotifyCount = notifyCount+1
					local notificationPinned = false
					notifyCount = notifyCount+1
					if pinNotification then pinNotification:Disconnect() end
					pinNotification = PinButton.MouseButton1Click:Connect(function()
						task.spawn(function()
							pinNotification:Disconnect()
							notificationPinned = true
							Title_2.BackgroundTransparency = 1
							wait(0.5)
							Title_2.BackgroundTransparency = 0
						end)
					end)
					Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, 0), "InOut", "Quart", 0.5, true, nil)
					wait(0.6)
					local closepressed = false
					if text2 then
						Title_2.Text = text
						Text_2.Text = text2
					else
						Title_2.Text = 'Notification'
						Text_2.Text = text
					end
					Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, -100), "InOut", "Quart", 0.5, true, nil)
					CloseButton.MouseButton1Click:Connect(function()
						Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, 0), "InOut", "Quart", 0.5, true, nil)
						closepressed = true
						pinNotification:Disconnect()
					end)
					if length and isNumber(length) then
						wait(length)
					else
						wait(10)
					end
					if LnotifyCount == notifyCount then
						if closepressed == false and notificationPinned == false then
							pinNotification:Disconnect()
							Notification:TweenPosition(UDim2.new(1, Notification.Position.X.Offset, 1, 0), "InOut", "Quart", 0.5, true, nil)
						end
						notifyCount = 0
					end
				end)
			end
			
			local lastMessage = nil
			local lastLabel = nil
			local dupeCount = 1
			function CreateLabel(Name, Text)
				if lastMessage == Name..Text then
					dupeCount = dupeCount+1
					lastLabel.Text = Time()..' - ['..Name..']: '..Text..' (x'..dupeCount..')'
				else
					if dupeCount > 1 then dupeCount = 1 end
					if #scroll_2:GetChildren() >= 2546 then
						scroll_2:ClearAllChildren()
					end
					local alls = 0
					for i,v in pairs(scroll_2:GetChildren()) do
						if v then
							alls = v.Size.Y.Offset + alls
						end
						if not v then
							alls = 0
						end
					end
					local tl = Instance.new('TextLabel')
					lastMessage = Name..Text
					lastLabel = tl
					tl.Name = Name
					tl.Parent = scroll_2
					tl.ZIndex = 10
					tl.Text = Time().." - ["..Name.."]: "..Text
					tl.Size = UDim2.new(0,322,0,84)
					tl.BackgroundTransparency = 1
					tl.BorderSizePixel = 0
					tl.Font = "SourceSans"
					tl.Position = UDim2.new(-1,0,0,alls)
					tl.TextTransparency = 1
					tl.TextScaled = false
					tl.TextSize = 14
					tl.TextWrapped = true
					tl.TextXAlignment = "Left"
					tl.TextYAlignment = "Top"
					tl.TextColor3 = currentText1
					tl.Size = UDim2.new(0,322,0,tl.TextBounds.Y)
					table.insert(text1,tl)
					scroll_2.CanvasSize = UDim2.new(0,0,0,alls+tl.TextBounds.Y)
					scroll_2.CanvasPosition = Vector2.new(0,scroll_2.CanvasPosition.Y+tl.TextBounds.Y)
					tl:TweenPosition(UDim2.new(0,3,0,alls), 'In', 'Quint', 0.5)
					for i = 0,50 do wait(0.05)
						tl.TextTransparency = tl.TextTransparency - 0.05
					end
					tl.TextTransparency = 0
				end
			end
			
			function CreateJoinLabel(plr,ID)
				if #scroll_3:GetChildren() >= 2546 then
					scroll_3:ClearAllChildren()
				end
				local infoFrame = Instance.new("Frame")
				local info1 = Instance.new("TextLabel")
				local info2 = Instance.new("TextLabel")
				local ImageLabel_3 = Instance.new("ImageLabel")
				infoFrame.Name = randomString()
				infoFrame.Parent = scroll_3
				infoFrame.BackgroundColor3 = Color3.new(1, 1, 1)
				infoFrame.BackgroundTransparency = 1
				infoFrame.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)
				infoFrame.Size = UDim2.new(1, 0, 0, 50)
				info1.Name = randomString()
				info1.Parent = infoFrame
				info1.BackgroundTransparency = 1
				info1.BorderSizePixel = 0
				info1.Position = UDim2.new(0, 45, 0, 0)
				info1.Size = UDim2.new(0, 135, 1, 0)
				info1.ZIndex = 10
				info1.Font = Enum.Font.SourceSans
				info1.FontSize = Enum.FontSize.Size14
				info1.Text = "Username: "..plr.Name.."\nJoined Server: "..Time()
				info1.TextColor3 = Color3.new(1, 1, 1)
				info1.TextWrapped = true
				info1.TextXAlignment = Enum.TextXAlignment.Left
				info2.Name = randomString()
				info2.Parent = infoFrame
				info2.BackgroundTransparency = 1
				info2.BorderSizePixel = 0
				info2.Position = UDim2.new(0, 185, 0, 0)
				info2.Size = UDim2.new(0, 140, 1, -5)
				info2.ZIndex = 10
				info2.Font = Enum.Font.SourceSans
				info2.FontSize = Enum.FontSize.Size14
				info2.Text = "User ID: "..ID.."\nAccount Age: "..plr.AccountAge.."\nJoined Roblox: Loading..."
				info2.TextColor3 = Color3.new(1, 1, 1)
				info2.TextWrapped = true
				info2.TextXAlignment = Enum.TextXAlignment.Left
				info2.TextYAlignment = Enum.TextYAlignment.Center
				ImageLabel_3.Parent = infoFrame
				ImageLabel_3.BackgroundTransparency = 1
				ImageLabel_3.BorderSizePixel = 0
				ImageLabel_3.Size = UDim2.new(0, 45, 1, 0)
				ImageLabel_3.Image = Players:GetUserThumbnailAsync(ID, Enum.ThumbnailType.AvatarThumbnail, Enum.ThumbnailSize.Size420x420)
				scroll_3.CanvasSize = UDim2.new(0, 0, 0, listlayout.AbsoluteContentSize.Y)
				scroll_3.CanvasPosition = Vector2.new(0,scroll_2.CanvasPosition.Y+infoFrame.AbsoluteSize.Y)
				wait()
				local user = game:HttpGet("https://users.roblox.com/v1/users/"..ID)
				local json = HttpService:JSONDecode(user)
				local date = json["created"]:sub(1,10)
				local splitDates = string.split(date,"-")
				info2.Text = string.gsub(info2.Text, "Loading...",splitDates[2].."/"..splitDates[3].."/"..splitDates[1])
			end
			
			IYMouse.KeyDown:Connect(function(Key)
				if (Key==prefix) then
					Cmdbar:CaptureFocus()
					spawn(function()
						repeat Cmdbar.Text = '' until Cmdbar.Text == ''
					end)
					maximizeHolder()
				end
			end)
			
			local lastMinimizeReq = 0
			Holder.MouseEnter:Connect(function()
				lastMinimizeReq = 0
				maximizeHolder()
			end)
			
			Holder.MouseLeave:Connect(function()
				if not Cmdbar:IsFocused() then
					local reqTime = tick()
					lastMinimizeReq = reqTime
					wait(1)
					if lastMinimizeReq ~= reqTime then return end
					if not Cmdbar:IsFocused() then
						minimizeHolder()
					end
				end
			end)
			
			function updateColors(color,ctype)
				if ctype == shade1 then
					for i,v in pairs(shade1) do
						v.BackgroundColor3 = color
					end
					currentShade1 = color
				elseif ctype == shade2 then
					for i,v in pairs(shade2) do
						v.BackgroundColor3 = color
					end
					currentShade2 = color
				elseif ctype == shade3 then
					for i,v in pairs(shade3) do
						v.BackgroundColor3 = color
					end
					currentShade3 = color
				elseif ctype == text1 then
					for i,v in pairs(text1) do
						v.TextColor3 = color
						if v:IsA("TextBox") then
							v.PlaceholderColor3 = color	
						end
					end
					currentText1 = color
				elseif ctype == text2 then
					for i,v in pairs(text2) do
						v.TextColor3 = color
					end
					currentText2 = color
				elseif ctype == scroll then
					for i,v in pairs(scroll) do
						v.ScrollBarImageColor3 = color
					end
					currentScroll = color
				end
			end
			
			local colorpickerOpen = false
			ColorsButton.MouseButton1Click:Connect(function()
				cache_currentShade1 = currentShade1
				cache_currentShade2 = currentShade2
				cache_currentShade3 = currentShade3
				cache_currentText1 = currentText1
				cache_currentText2 = currentText2
				cache_currentScroll = currentScroll
				if not colorpickerOpen then
					colorpickerOpen = true
					picker = game:GetObjects("rbxassetid://4908465318")[1]
					picker.Name = randomString()
					picker.Parent = PARENT
			
					local ColorPicker do
						ColorPicker = {}
			
						ColorPicker.new = function()
							local newMt = setmetatable({},{})
			
							local pickerGui = picker.ColorPicker
							local pickerTopBar = pickerGui.TopBar
							local pickerExit = pickerTopBar.Exit
							local pickerFrame = pickerGui.Content
							local colorSpace = pickerFrame.ColorSpaceFrame.ColorSpace
							local colorStrip = pickerFrame.ColorStrip
							local previewFrame = pickerFrame.Preview
							local basicColorsFrame = pickerFrame.BasicColors
							local customColorsFrame = pickerFrame.CustomColors
							local defaultButton = pickerFrame.Default
							local cancelButton = pickerFrame.Cancel
							local shade1Button = pickerFrame.Shade1
							local shade2Button = pickerFrame.Shade2
							local shade3Button = pickerFrame.Shade3
							local text1Button = pickerFrame.Text1
							local text2Button = pickerFrame.Text2
							local scrollButton = pickerFrame.Scroll
			
							local colorScope = colorSpace.Scope
							local colorArrow = pickerFrame.ArrowFrame.Arrow
			
							local hueInput = pickerFrame.Hue.Input
							local satInput = pickerFrame.Sat.Input
							local valInput = pickerFrame.Val.Input
			
							local redInput = pickerFrame.Red.Input
							local greenInput = pickerFrame.Green.Input
							local blueInput = pickerFrame.Blue.Input
			
							local mouse = IYMouse
			
							local hue,sat,val = 0,0,1
							local red,green,blue = 1,1,1
							local chosenColor = Color3.new(0,0,0)
			
							local basicColors = {Color3.new(0,0,0),Color3.new(0.66666668653488,0,0),Color3.new(0,0.33333334326744,0),Color3.new(0.66666668653488,0.33333334326744,0),Color3.new(0,0.66666668653488,0),Color3.new(0.66666668653488,0.66666668653488,0),Color3.new(0,1,0),Color3.new(0.66666668653488,1,0),Color3.new(0,0,0.49803924560547),Color3.new(0.66666668653488,0,0.49803924560547),Color3.new(0,0.33333334326744,0.49803924560547),Color3.new(0.66666668653488,0.33333334326744,0.49803924560547),Color3.new(0,0.66666668653488,0.49803924560547),Color3.new(0.66666668653488,0.66666668653488,0.49803924560547),Color3.new(0,1,0.49803924560547),Color3.new(0.66666668653488,1,0.49803924560547),Color3.new(0,0,1),Color3.new(0.66666668653488,0,1),Color3.new(0,0.33333334326744,1),Color3.new(0.66666668653488,0.33333334326744,1),Color3.new(0,0.66666668653488,1),Color3.new(0.66666668653488,0.66666668653488,1),Color3.new(0,1,1),Color3.new(0.66666668653488,1,1),Color3.new(0.33333334326744,0,0),Color3.new(1,0,0),Color3.new(0.33333334326744,0.33333334326744,0),Color3.new(1,0.33333334326744,0),Color3.new(0.33333334326744,0.66666668653488,0),Color3.new(1,0.66666668653488,0),Color3.new(0.33333334326744,1,0),Color3.new(1,1,0),Color3.new(0.33333334326744,0,0.49803924560547),Color3.new(1,0,0.49803924560547),Color3.new(0.33333334326744,0.33333334326744,0.49803924560547),Color3.new(1,0.33333334326744,0.49803924560547),Color3.new(0.33333334326744,0.66666668653488,0.49803924560547),Color3.new(1,0.66666668653488,0.49803924560547),Color3.new(0.33333334326744,1,0.49803924560547),Color3.new(1,1,0.49803924560547),Color3.new(0.33333334326744,0,1),Color3.new(1,0,1),Color3.new(0.33333334326744,0.33333334326744,1),Color3.new(1,0.33333334326744,1),Color3.new(0.33333334326744,0.66666668653488,1),Color3.new(1,0.66666668653488,1),Color3.new(0.33333334326744,1,1),Color3.new(1,1,1)}
							local customColors = {}
			
							dragGUI(picker)
			
							local function updateColor(noupdate)
								local relativeX,relativeY,relativeStripY = 219 - hue*219, 199 - sat*199, 199 - val*199
								local hsvColor = Color3.fromHSV(hue,sat,val)
			
								if noupdate == 2 or not noupdate then
									hueInput.Text = tostring(math.ceil(359*hue))
									satInput.Text = tostring(math.ceil(255*sat))
									valInput.Text = tostring(math.floor(255*val))
								end
								if noupdate == 1 or not noupdate then
									redInput.Text = tostring(math.floor(255*red))
									greenInput.Text = tostring(math.floor(255*green))
									blueInput.Text = tostring(math.floor(255*blue))
								end
			
								chosenColor = Color3.new(red,green,blue)
			
								colorScope.Position = UDim2.new(0,relativeX-9,0,relativeY-9)
								colorStrip.ImageColor3 = Color3.fromHSV(hue,sat,1)
								colorArrow.Position = UDim2.new(0,-2,0,relativeStripY-4)
								previewFrame.BackgroundColor3 = chosenColor
			
								newMt.Color = chosenColor
								if newMt.Changed then newMt:Changed(chosenColor) end
							end
			
							local function colorSpaceInput()
								local relativeX = mouse.X - colorSpace.AbsolutePosition.X
								local relativeY = mouse.Y - colorSpace.AbsolutePosition.Y
			
								if relativeX < 0 then relativeX = 0 elseif relativeX > 219 then relativeX = 219 end
								if relativeY < 0 then relativeY = 0 elseif relativeY > 199 then relativeY = 199 end
			
								hue = (219 - relativeX)/219
								sat = (199 - relativeY)/199
			
								local hsvColor = Color3.fromHSV(hue,sat,val)
								red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
			
								updateColor()
							end
			
							local function colorStripInput()
								local relativeY = mouse.Y - colorStrip.AbsolutePosition.Y
			
								if relativeY < 0 then relativeY = 0 elseif relativeY > 199 then relativeY = 199 end	
			
								val = (199 - relativeY)/199
			
								local hsvColor = Color3.fromHSV(hue,sat,val)
								red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
			
								updateColor()
							end
			
							local function hookButtons(frame,func)
								frame.ArrowFrame.Up.InputBegan:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseMovement then
										frame.ArrowFrame.Up.BackgroundTransparency = 0.5
									elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
										local releaseEvent,runEvent
			
										local startTime = tick()
										local pressing = true
										local startNum = tonumber(frame.Text)
			
										if not startNum then return end
			
										releaseEvent = UserInputService.InputEnded:Connect(function(input)
											if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
											releaseEvent:Disconnect()
											pressing = false
										end)
			
										startNum = startNum + 1
										func(startNum)
										while pressing do
											if tick()-startTime > 0.3 then
												startNum = startNum + 1
												func(startNum)
											end
											wait(0.1)
										end
									end
								end)
			
								frame.ArrowFrame.Up.InputEnded:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseMovement then
										frame.ArrowFrame.Up.BackgroundTransparency = 1
									end
								end)
			
								frame.ArrowFrame.Down.InputBegan:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseMovement then
										frame.ArrowFrame.Down.BackgroundTransparency = 0.5
									elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
										local releaseEvent,runEvent
			
										local startTime = tick()
										local pressing = true
										local startNum = tonumber(frame.Text)
			
										if not startNum then return end
			
										releaseEvent = UserInputService.InputEnded:Connect(function(input)
											if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
											releaseEvent:Disconnect()
											pressing = false
										end)
			
										startNum = startNum - 1
										func(startNum)
										while pressing do
											if tick()-startTime > 0.3 then
												startNum = startNum - 1
												func(startNum)
											end
											wait(0.1)
										end
									end
								end)
			
								frame.ArrowFrame.Down.InputEnded:Connect(function(input)
									if input.UserInputType == Enum.UserInputType.MouseMovement then
										frame.ArrowFrame.Down.BackgroundTransparency = 1
									end
								end)
							end
			
							colorSpace.InputBegan:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									local releaseEvent,mouseEvent
			
									releaseEvent = UserInputService.InputEnded:Connect(function(input)
										if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
										releaseEvent:Disconnect()
										mouseEvent:Disconnect()
									end)
			
									mouseEvent = UserInputService.InputChanged:Connect(function(input)
										if input.UserInputType == Enum.UserInputType.MouseMovement then
											colorSpaceInput()
										end
									end)
			
									colorSpaceInput()
								end
							end)
			
							colorStrip.InputBegan:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									local releaseEvent,mouseEvent
			
									releaseEvent = UserInputService.InputEnded:Connect(function(input)
										if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
										releaseEvent:Disconnect()
										mouseEvent:Disconnect()
									end)
			
									mouseEvent = UserInputService.InputChanged:Connect(function(input)
										if input.UserInputType == Enum.UserInputType.MouseMovement then
											colorStripInput()
										end
									end)
			
									colorStripInput()
								end
							end)
			
							local function updateHue(str)
								local num = tonumber(str)
								if num then
									hue = math.clamp(math.floor(num),0,359)/359
									local hsvColor = Color3.fromHSV(hue,sat,val)
									red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
									hueInput.Text = tostring(hue*359)
									updateColor(1)
								end
							end
							hueInput.FocusLost:Connect(function() updateHue(hueInput.Text) end) hookButtons(hueInput,updateHue)
			
							local function updateSat(str)
								local num = tonumber(str)
								if num then
									sat = math.clamp(math.floor(num),0,255)/255
									local hsvColor = Color3.fromHSV(hue,sat,val)
									red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
									satInput.Text = tostring(sat*255)
									updateColor(1)
								end
							end
							satInput.FocusLost:Connect(function() updateSat(satInput.Text) end) hookButtons(satInput,updateSat)
			
							local function updateVal(str)
								local num = tonumber(str)
								if num then
									val = math.clamp(math.floor(num),0,255)/255
									local hsvColor = Color3.fromHSV(hue,sat,val)
									red,green,blue = hsvColor.r,hsvColor.g,hsvColor.b
									valInput.Text = tostring(val*255)
									updateColor(1)
								end
							end
							valInput.FocusLost:Connect(function() updateVal(valInput.Text) end) hookButtons(valInput,updateVal)
			
							local function updateRed(str)
								local num = tonumber(str)
								if num then
									red = math.clamp(math.floor(num),0,255)/255
									local newColor = Color3.new(red,green,blue)
									hue,sat,val = Color3.toHSV(newColor)
									redInput.Text = tostring(red*255)
									updateColor(2)
								end
							end
							redInput.FocusLost:Connect(function() updateRed(redInput.Text) end) hookButtons(redInput,updateRed)
			
							local function updateGreen(str)
								local num = tonumber(str)
								if num then
									green = math.clamp(math.floor(num),0,255)/255
									local newColor = Color3.new(red,green,blue)
									hue,sat,val = Color3.toHSV(newColor)
									greenInput.Text = tostring(green*255)
									updateColor(2)
								end
							end
							greenInput.FocusLost:Connect(function() updateGreen(greenInput.Text) end) hookButtons(greenInput,updateGreen)
			
							local function updateBlue(str)
								local num = tonumber(str)
								if num then
									blue = math.clamp(math.floor(num),0,255)/255
									local newColor = Color3.new(red,green,blue)
									hue,sat,val = Color3.toHSV(newColor)
									blueInput.Text = tostring(blue*255)
									updateColor(2)
								end
							end
							blueInput.FocusLost:Connect(function() updateBlue(blueInput.Text) end) hookButtons(blueInput,updateBlue)
			
							local colorChoice = Instance.new("TextButton")
							colorChoice.Name = "Choice"
							colorChoice.Size = UDim2.new(0,25,0,18)
							colorChoice.BorderColor3 = Color3.new(96/255,96/255,96/255)
							colorChoice.Text = ""
							colorChoice.AutoButtonColor = false
							colorChoice.ZIndex = 10
			
							local row = 0
							local column = 0
							for i,v in pairs(basicColors) do
								local newColor = colorChoice:Clone()
								newColor.BackgroundColor3 = v
								newColor.Position = UDim2.new(0,1 + 30*column,0,21 + 23*row)
			
								newColor.MouseButton1Click:Connect(function()
									red,green,blue = v.r,v.g,v.b
									local newColor = Color3.new(red,green,blue)
									hue,sat,val = Color3.toHSV(newColor)
									updateColor()
								end)	
			
								newColor.Parent = basicColorsFrame
								column = column + 1
								if column == 6 then row = row + 1 column = 0 end
							end
			
							row = 0
							column = 0
							for i = 1,12 do
								local color = customColors[i] or Color3.new(0,0,0)
								local newColor = colorChoice:Clone()
								newColor.BackgroundColor3 = color
								newColor.Position = UDim2.new(0,1 + 30*column,0,20 + 23*row)
			
								newColor.MouseButton1Click:Connect(function()
									local curColor = customColors[i] or Color3.new(0,0,0)
									red,green,blue = curColor.r,curColor.g,curColor.b
									hue,sat,val = Color3.toHSV(curColor)
									updateColor()
								end)
			
								newColor.MouseButton2Click:Connect(function()
									customColors[i] = chosenColor
									newColor.BackgroundColor3 = chosenColor
								end)
			
								newColor.Parent = customColorsFrame
								column = column + 1
								if column == 6 then row = row + 1 column = 0 end
							end
			
							shade1Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,shade1) end end)
							shade1Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade1Button.BackgroundTransparency = 0.4 end end)
							shade1Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade1Button.BackgroundTransparency = 0 end end)
			
							shade2Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,shade2) end end)
							shade2Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade2Button.BackgroundTransparency = 0.4 end end)
							shade2Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade2Button.BackgroundTransparency = 0 end end)
			
							shade3Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,shade3) end end)
							shade3Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade3Button.BackgroundTransparency = 0.4 end end)
							shade3Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then shade3Button.BackgroundTransparency = 0 end end)
			
							text1Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,text1) end end)
							text1Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text1Button.BackgroundTransparency = 0.4 end end)
							text1Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text1Button.BackgroundTransparency = 0 end end)
			
							text2Button.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,text2) end end)
							text2Button.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text2Button.BackgroundTransparency = 0.4 end end)
							text2Button.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then text2Button.BackgroundTransparency = 0 end end)
			
							scrollButton.MouseButton1Click:Connect(function() if newMt.Confirm then newMt:Confirm(chosenColor,scroll) end end)
							scrollButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then scrollButton.BackgroundTransparency = 0.4 end end)
							scrollButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then scrollButton.BackgroundTransparency = 0 end end)
			
							cancelButton.MouseButton1Click:Connect(function() if newMt.Cancel then newMt:Cancel() end end)
							cancelButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then cancelButton.BackgroundTransparency = 0.4 end end)
							cancelButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then cancelButton.BackgroundTransparency = 0 end end)
			
							defaultButton.MouseButton1Click:Connect(function() if newMt.Default then newMt:Default() end end)
							defaultButton.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then defaultButton.BackgroundTransparency = 0.4 end end)
							defaultButton.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement then defaultButton.BackgroundTransparency = 0 end end)
			
							pickerExit.MouseButton1Click:Connect(function()
								picker:TweenPosition(UDim2.new(0.5, -219, 0, -500), "InOut", "Quart", 0.5, true, nil)
							end)
			
							updateColor()
			
							newMt.SetColor = function(self,color)
								red,green,blue = color.r,color.g,color.b
								hue,sat,val = Color3.toHSV(color)
								updateColor()
							end
			
							return newMt
						end
					end
			
					picker:TweenPosition(UDim2.new(0.5, -219, 0, 100), "InOut", "Quart", 0.5, true, nil)
			
					local Npicker = ColorPicker.new()
					Npicker.Confirm = function(self,color,ctype) updateColors(color,ctype) wait() updatesaves() end
					Npicker.Cancel = function(self)
						updateColors(cache_currentShade1,shade1)
						updateColors(cache_currentShade2,shade2)
						updateColors(cache_currentShade3,shade3)
						updateColors(cache_currentText1,text1)
						updateColors(cache_currentText2,text2)
						updateColors(cache_currentScroll,scroll)
						wait()
						updatesaves()
					end
					Npicker.Default = function(self)
						updateColors(Color3.fromRGB(36, 36, 37),shade1)
						updateColors(Color3.fromRGB(46, 46, 47),shade2)
						updateColors(Color3.fromRGB(78, 78, 79),shade3)
						updateColors(Color3.new(1, 1, 1),text1)
						updateColors(Color3.new(0, 0, 0),text2)
						updateColors(Color3.fromRGB(78,78,79),scroll)
						wait()
						updatesaves()
					end
				else
					picker:TweenPosition(UDim2.new(0.5, -219, 0, 100), "InOut", "Quart", 0.5, true, nil)
				end
			end)
			
			
			SettingsButton.MouseButton1Click:Connect(function()
				if SettingsOpen == false then SettingsOpen = true
					Settings:TweenPosition(UDim2.new(0, 0, 0, 45), "InOut", "Quart", 0.5, true, nil)
					CMDsF.Visible = false
				else SettingsOpen = false
					CMDsF.Visible = true
					Settings:TweenPosition(UDim2.new(0, 0, 0, 220), "InOut", "Quart", 0.5, true, nil)
				end
			end)
			
			On.MouseButton1Click:Connect(function()
				if isHidden == false then
					if StayOpen == false then
						StayOpen = true
						On.BackgroundTransparency = 0
					else
						StayOpen = false
						On.BackgroundTransparency = 1
					end
					updatesaves()
				end
			end)
			
			Clear.MouseButton1Down:Connect(function()
				for _, child in pairs(scroll_2:GetChildren()) do
					child:Destroy()
				end
				scroll_2.CanvasSize = UDim2.new(0, 0, 0, 10)
			end)
			
			Clear_2.MouseButton1Down:Connect(function()
				for _, child in pairs(scroll_3:GetChildren()) do
					child:Destroy()
				end
				scroll_3.CanvasSize = UDim2.new(0, 0, 0, 10)
			end)
			
			Toggle.MouseButton1Down:Connect(function()
				if logsEnabled then
					logsEnabled = false
					Toggle.Text = 'Disabled'
					updatesaves()
				else
					logsEnabled = true
					Toggle.Text = 'Enabled'
					updatesaves()
				end
			end)
			
			Toggle_2.MouseButton1Down:Connect(function()
				if jLogsEnabled then
					jLogsEnabled = false
					Toggle_2.Text = 'Disabled'
					updatesaves()
				else
					jLogsEnabled = true
					Toggle_2.Text = 'Enabled'
					updatesaves()
				end
			end)
			
			selectChat.MouseButton1Down:Connect(function()
				join.Visible = false
				chat.Visible = true
				table.remove(shade3,table.find(shade3,selectChat))
				table.remove(shade2,table.find(shade2,selectJoin))
				table.insert(shade2,selectChat)
				table.insert(shade3,selectJoin)
				selectJoin.BackgroundColor3 = currentShade3
				selectChat.BackgroundColor3 = currentShade2
			end)
			
			selectJoin.MouseButton1Down:Connect(function()
				chat.Visible = false
				join.Visible = true	
				table.remove(shade3,table.find(shade3,selectJoin))
				table.remove(shade2,table.find(shade2,selectChat))
				table.insert(shade2,selectJoin)
				table.insert(shade3,selectChat)
				selectChat.BackgroundColor3 = currentShade3
				selectJoin.BackgroundColor3 = currentShade2
			end)
			
			if not writefileExploit() then
				notify('Saves','Your exploit does not support read/write file. Your settings will not save.')
			end
			
			ChatLog = function(plr)
				plr.Chatted:Connect(function(Message)
					if logsEnabled == true then
						CreateLabel(plr.Name,Message)
					end
				end)
			end
			
			JoinLog = function(plr)
				if jLogsEnabled == true then
					CreateJoinLabel(plr,plr.UserId)
				end
			end
			
			local CleanFileName = function(str)
				local gsub = string.gsub
				return gsub(str, "[*\\?:<>|]+", "")
			end
			
			SaveChatlogs.MouseButton1Down:Connect(function()
				if writefileExploit() then
					if #scroll_2:GetChildren() > 0 then
						notify("Loading",'Hold on a sec')
						local placeName = CleanFileName(MarketplaceService:GetProductInfo(PlaceId).Name)
						local writelogs = '-- Infinite Yield Chat logs for "'..placeName..'"\n'
						for _, child in pairs(scroll_2:GetChildren()) do
							writelogs = writelogs..'\n'..child.Text
						end
						local writelogsFile = tostring(writelogs)
						local fileext = 0
						local function nameFile()
							local file
							pcall(function() file = readfile(placeName..' Chat Logs ('..fileext..').txt') end)
							if file then
								fileext = fileext+1
								nameFile()
							else
								writefileCooldown(placeName..' Chat Logs ('..fileext..').txt', writelogsFile)
							end
						end
						nameFile()
						notify('Chat Logs','Saved chat logs to the workspace folder within your exploit folder.')
					end
				else
					notify('Chat Logs','Your exploit does not support write file. You cannot save chat logs.')
				end
			end)
			
			for _, plr in pairs(Players:GetChildren()) do
				if plr.ClassName == "Player" then
					ChatLog(plr)
				end
			end
			
			Players.PlayerRemoving:Connect(function(player)
				if ESPenabled or CHMSenabled or COREGUI:FindFirstChild(player.Name..'_LC') then
					for i,v in pairs(COREGUI:GetChildren()) do
						if v.Name == player.Name..'_ESP' or v.Name == player.Name..'_LC' or v.Name == player.Name..'_CHMS' then
							v:Destroy()
						end
					end
				end
				if viewing ~= nil and player == viewing then
					workspace.CurrentCamera.CameraSubject = Players.LocalPlayer.Character
					viewing = nil
					if viewDied then
						viewDied:Disconnect()
						viewChanged:Disconnect()
					end
					notify('Spectate','View turned off (player left)')
				end
			end)
			
			Exit.MouseButton1Down:Connect(function()
				logs:TweenPosition(UDim2.new(0, 0, 1, 10), "InOut", "Quart", 0.3, true, nil)
			end)
			
			Hide.MouseButton1Down:Connect(function()
				if logs.Position ~= UDim2.new(0, 0, 1, -20) then
					logs:TweenPosition(UDim2.new(0, 0, 1, -20), "InOut", "Quart", 0.3, true, nil)
				else
					logs:TweenPosition(UDim2.new(0, 0, 1, -265), "InOut", "Quart", 0.3, true, nil)
				end
			end)
			
			EventBind.MouseButton1Click:Connect(function()
				eventEditor.Frame:TweenPosition(UDim2.new(0.5,-175,0.5,-101), "InOut", "Quart", 0.5, true, nil)
			end)
			
			Keybinds.MouseButton1Click:Connect(function()
				KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
				wait(0.5)
				SettingsHolder.Visible = false
			end)
			
			Close.MouseButton1Click:Connect(function()
				SettingsHolder.Visible = true
				KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
			end)
			
			Keybinds.MouseButton1Click:Connect(function()
				KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
				wait(0.5)
				SettingsHolder.Visible = false
			end)
			
			Add.MouseButton1Click:Connect(function()
				KeybindEditor:TweenPosition(UDim2.new(0.5, -180, 0, 260), "InOut", "Quart", 0.5, true, nil)
			end)
			
			Delete.MouseButton1Click:Connect(function()
				binds = {}
				refreshbinds()
				updatesaves()
				notify('Keybinds Updated','Removed all keybinds')
			end)
			
			Close_2.MouseButton1Click:Connect(function()
				SettingsHolder.Visible = true
				AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
			end)
			
			Aliases.MouseButton1Click:Connect(function()
				AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
				wait(0.5)
				SettingsHolder.Visible = false
			end)
			
			Close_3.MouseButton1Click:Connect(function()
				SettingsHolder.Visible = true
				PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
			end)
			
			Positions.MouseButton1Click:Connect(function()
				PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
				wait(0.5)
				SettingsHolder.Visible = false
			end)
			
			local selectionBox = Instance.new("SelectionBox")
			selectionBox.Name = randomString()
			selectionBox.Color3 = Color3.new(255,255,255)
			selectionBox.Adornee = nil
			selectionBox.Parent = PARENT
			
			local selected = Instance.new("SelectionBox")
			selected.Name = randomString()
			selected.Color3 = Color3.new(0,166,0)
			selected.Adornee = nil
			selected.Parent = PARENT
			
			local ActivateHighlight = nil
			local ClickSelect = nil
			function selectPart()
				ToPartFrame:TweenPosition(UDim2.new(0.5, -180, 0, 335), "InOut", "Quart", 0.5, true, nil)
				local function HighlightPart()
					if selected.Adornee ~= IYMouse.Target then
						selectionBox.Adornee = IYMouse.Target
					else
						selectionBox.Adornee = nil
					end
				end
				ActivateHighlight = IYMouse.Move:Connect(HighlightPart)
				local function SelectPart()
					if IYMouse.Target ~= nil then
						selected.Adornee = IYMouse.Target
						Path.Text = getHierarchy(IYMouse.Target)
					end
				end
				ClickSelect = IYMouse.Button1Down:Connect(SelectPart)
			end
			
			Part.MouseButton1Click:Connect(function()
				selectPart()
			end)
			
			Exit_4.MouseButton1Click:Connect(function()
				ToPartFrame:TweenPosition(UDim2.new(0.5, -180, 0, -500), "InOut", "Quart", 0.5, true, nil)
				if ActivateHighlight then
					ActivateHighlight:Disconnect()
				end
				if ClickSelect then
					ClickSelect:Disconnect()
				end
				selectionBox.Adornee = nil
				selected.Adornee = nil
				Path.Text = ""
			end)
			
			CopyPath.MouseButton1Click:Connect(function()
				if Path.Text ~= "" then
					toClipboard(Path.Text)
				else
					notify('Copy Path','Select a part to copy its path')
				end
			end)
			
			ChoosePart.MouseButton1Click:Connect(function()
				if Path.Text ~= "" then
					local tpNameExt = ''
					local function handleWpNames()
						local FoundDupe = false
						for i,v in pairs(pWayPoints) do
							if v.NAME:lower() == selected.Adornee.Name:lower()..tpNameExt then
								FoundDupe = true
							end
						end
						if not FoundDupe then
							notify('Modified Waypoints',"Created waypoint: "..selected.Adornee.Name..tpNameExt)
							pWayPoints[#pWayPoints + 1] = {NAME = selected.Adornee.Name..tpNameExt, COORD = {selected.Adornee}}
						else
							if isNumber(tpNameExt) then
								tpNameExt = tpNameExt+1
							else
								tpNameExt = 1
							end
							handleWpNames()
						end
					end
					handleWpNames()
					refreshwaypoints()
				else
					notify('Part Selection','Select a part first')
				end
			end)
			
			cmds={}
			customAlias = {}
			Delete_3.MouseButton1Click:Connect(function()
				customAlias = {}
				aliases = {}
				notify('Aliases Modified','Removed all aliases')
				updatesaves()
				refreshaliases()
			end)
			
			PrefixBox:GetPropertyChangedSignal("Text"):Connect(function()
				prefix = PrefixBox.Text
				Cmdbar.PlaceholderText = "Command Bar ("..prefix..")"
				updatesaves()
			end)
			
			function CamViewport()
				if workspace.CurrentCamera then
					return workspace.CurrentCamera.ViewportSize.X
				end
			end
			
			function UpdateToViewport()
				if Holder.Position.X.Offset < -CamViewport() then
					Holder:TweenPosition(UDim2.new(1, -CamViewport(), Holder.Position.Y.Scale, Holder.Position.Y.Offset), "InOut", "Quart", 0.04, true, nil)
					Notification:TweenPosition(UDim2.new(1, -CamViewport() + 250, Notification.Position.Y.Scale, Notification.Position.Y.Offset), "InOut", "Quart", 0.04, true, nil)
				end
			end
			CameraChanged = workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(UpdateToViewport)
			
			function updateCamera(child, parent)
				if parent ~= workspace then
					CamMoved:Disconnect()
					CameraChanged:Disconnect()
					repeat wait() until workspace.CurrentCamera
					CameraChanged = workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(UpdateToViewport)
					CamMoved = workspace.CurrentCamera.AncestryChanged:Connect(updateCamera)
				end
			end
			CamMoved = workspace.CurrentCamera.AncestryChanged:Connect(updateCamera)
			
			function dragMain(dragpoint,gui)
				task.spawn(function()
					local dragging
					local dragInput
					local dragStart = Vector3.new(0,0,0)
					local startPos
					local function update(input)
						local pos = -250
						local delta = input.Position - dragStart
						if startPos.X.Offset + delta.X <= -500 then
							local Position = UDim2.new(1, -250, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
							TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position}):Play()
							pos = 250
						else
							local Position = UDim2.new(1, -500, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
							TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position}):Play()
							pos = -250
						end
						if startPos.X.Offset + delta.X <= -250 and -CamViewport() <= startPos.X.Offset + delta.X then
							local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, gui.Position.Y.Scale, gui.Position.Y.Offset)
							TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
							local Position2 = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X + pos, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
							TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position2}):Play()
						elseif startPos.X.Offset + delta.X > -500 then
							local Position = UDim2.new(1, -250, gui.Position.Y.Scale, gui.Position.Y.Offset)
							TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
						elseif -CamViewport() > startPos.X.Offset + delta.X then
							gui:TweenPosition(UDim2.new(1, -CamViewport(), gui.Position.Y.Scale, gui.Position.Y.Offset), "InOut", "Quart", 0.04, true, nil)
							local Position = UDim2.new(1, -CamViewport(), gui.Position.Y.Scale, gui.Position.Y.Offset)
							TweenService:Create(gui, TweenInfo.new(.20), {Position = Position}):Play()
							local Position2 = UDim2.new(1, -CamViewport() + 250, Notification.Position.Y.Scale, Notification.Position.Y.Offset)
							TweenService:Create(Notification, TweenInfo.new(.20), {Position = Position2}):Play()
						end
					end
					dragpoint.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
							dragging = true
							dragStart = input.Position
							startPos = gui.Position
			
							input.Changed:Connect(function()
								if input.UserInputState == Enum.UserInputState.End then
									dragging = false
								end
							end)
						end
					end)
					dragpoint.InputChanged:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
							dragInput = input
						end
					end)
					UserInputService.InputChanged:Connect(function(input)
						if input == dragInput and dragging then
							update(input)
						end
					end)
				end)
			end
			
			dragMain(Title,Holder)
			
			Match = function(name,str)
				str = str:gsub("%W", "%%%1")
				return name:lower():find(str:lower()) and true
			end
			
			local canvasPos = Vector2.new(0,0)
			local topCommand = nil
			IndexContents = function(str,bool,cmdbar,Ianim)
				CMDsF.CanvasPosition = Vector2.new(0,0)
				local SizeY = 0
				local indexnum = 0
				local frame = CMDsF
				topCommand = nil
				local chunks = {}
				if str:sub(#str,#str) == "\\" then str = "" end
				for w in string.gmatch(str,"[^\\]+") do
					table.insert(chunks,w)
				end
				if #chunks > 0 then str = chunks[#chunks] end
				if str:sub(1,1) == "!" then str = str:sub(2) end
				for i,v in next, frame:GetChildren() do
					if v:IsA("TextButton") then
						if bool then
							if Match(v.Text,str) then
								indexnum = indexnum + 1
								v.Visible = true
								if topCommand == nil then
									topCommand = v.Text
								end
							else
								v.Visible = false
							end
						else
							v.Visible = true
							if topCommand == nil then
								topCommand = v.Text
							end
						end
					end
				end
				frame.CanvasSize = UDim2.new(0,0,0,cmdListLayout.AbsoluteContentSize.Y)
				if not Ianim then
					if indexnum == 0 or string.find(str, " ") then
						if not cmdbar then
							minimizeHolder()
						elseif cmdbar then
							cmdbarHolder()
						end
					else
						maximizeHolder()
					end
				else
					minimizeHolder()
				end
			end
			
			PlayerGui = Players.LocalPlayer:FindFirstChildOfClass("PlayerGui")
			local chatbox
			task.spawn(function()
				local success, result = pcall(function() chatbox = game.WaitForChild(PlayerGui, "Chat").Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar end)
				if success then
					local function chatboxFocused()
						canvasPos = CMDsF.CanvasPosition
					end
					local chatboxFocusedC = chatbox.Focused:Connect(chatboxFocused)
			
					local function Index()
						if chatbox.Text:lower():sub(1,1) == prefix then
							if SettingsOpen == true then
								wait(0.2)
								CMDsF.Visible = true
								Settings:TweenPosition(UDim2.new(0, 0, 0, 220), "InOut", "Quart", 0.2, true, nil)
							end
							IndexContents(PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar.Text:lower():sub(2),true)
						else
							minimizeHolder()
							if SettingsOpen == true then
								wait(0.2)
								Settings:TweenPosition(UDim2.new(0, 0, 0, 45), "InOut", "Quart", 0.2, true, nil)
								CMDsF.Visible = false
							end
						end
					end
					local chatboxFunc = chatbox:GetPropertyChangedSignal("Text"):Connect(Index)
			
					local function chatboxFocusLost(enterpressed)
						if not enterpressed or chatbox.Text:lower():sub(1,1) ~= prefix then
							IndexContents('',true)
						end
						CMDsF.CanvasPosition = canvasPos
						minimizeHolder()
					end
					local chatboxFocusLostC = chatbox.FocusLost:Connect(chatboxFocusLost)
			
					PlayerGui:WaitForChild("Chat").Frame.ChatBarParentFrame.ChildAdded:Connect(function(newbar)
						wait()
						if newbar:FindFirstChild('BoxFrame') then
							chatbox = PlayerGui:WaitForChild("Chat").Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar
							if chatboxFocusedC then chatboxFocusedC:Disconnect() end
							chatboxFocusedC = chatbox.Focused:Connect(chatboxFocused)
							if chatboxFunc then chatboxFunc:Disconnect() end
							chatboxFunc = chatbox:GetPropertyChangedSignal("Text"):Connect(Index)
							if chatboxFocusLostC then chatboxFocusLostC:Disconnect() end
							chatboxFocusLostC = chatbox.FocusLost:Connect(chatboxFocusLost)
						end
					end)
					--else
					--print('Custom chat detected. Will not provide suggestions for commands typed in the chat.')
				end
			end)
			
			function autoComplete(str,curText)
				local endingChar = {"[", "/", "(", " "}
				local stop = 0
				for i=1,#str do
					local c = str:sub(i,i)
					if table.find(endingChar, c) then
						stop = i
						break
					end
				end
				curText = curText or Cmdbar.Text
				local subPos = 0
				local pos = 1
				local findRes = string.find(curText,"\\",pos)
				while findRes do
					subPos = findRes
					pos = findRes+1
					findRes = string.find(curText,"\\",pos)
				end
				if curText:sub(subPos+1,subPos+1) == "!" then subPos = subPos + 1 end
				Cmdbar.Text = curText:sub(1,subPos) .. str:sub(1, stop - 1)..' '
				wait()
				Cmdbar.Text = Cmdbar.Text:gsub( '\t', '' )
				Cmdbar.CursorPosition = #Cmdbar.Text+1--1020
			end
			
			CMDs = {}
			CMDs[#CMDs + 1] = {NAME = 'discord / support / help', DESC = 'Invite to the Infinite Yield support server.'}
			CMDs[#CMDs + 1] = {NAME = 'console', DESC = 'Loads old Roblox console'}
			CMDs[#CMDs + 1] = {NAME = 'explorer / dex', DESC = 'Opens DEX by Moon'}
			CMDs[#CMDs + 1] = {NAME = 'olddex / odex', DESC = 'Opens Old DEX by Moon'}
			CMDs[#CMDs + 1] = {NAME = 'remotespy / rspy', DESC = 'Opens Simple Spy V3'}
			CMDs[#CMDs + 1] = {NAME = 'audiologger / alogger', DESC = 'Opens Edges audio logger'}
			CMDs[#CMDs + 1] = {NAME = 'serverinfo / info', DESC = 'Gives you info about the server'}
			CMDs[#CMDs + 1] = {NAME = 'jobid', DESC = 'Copies the games JobId to your clipboard'}
			CMDs[#CMDs + 1] = {NAME = 'notifyjobid', DESC = 'Notifies you the games JobId'}
			CMDs[#CMDs + 1] = {NAME = 'rejoin / rj', DESC = 'Makes you rejoin the game'}
			CMDs[#CMDs + 1] = {NAME = 'autorejoin / autorj', DESC = 'Automatically rejoins the server if you get kicked/disconnected'}
			CMDs[#CMDs + 1] = {NAME = 'serverhop / shop', DESC = 'Teleports you to a different server'}
			CMDs[#CMDs + 1] = {NAME = 'joinplayer [username / ID] [place ID]', DESC = 'Joins a specific players server'}
			CMDs[#CMDs + 1] = {NAME = 'gameteleport / gametp [place ID]', DESC = 'Joins a game by ID'}
			CMDs[#CMDs + 1] = {NAME = 'antiidle / antiafk', DESC = 'Prevents the game from kicking you for being idle/afk'}
			CMDs[#CMDs + 1] = {NAME = 'datalimit [num]', DESC = 'Set outgoing KBPS limit'}
			CMDs[#CMDs + 1] = {NAME = 'replicationlag / backtrack [num]', DESC = 'Set IncomingReplicationLag'}
			CMDs[#CMDs + 1] = {NAME = 'creatorid / creator', DESC = 'Notifies you the creators ID'}
			CMDs[#CMDs + 1] = {NAME = 'copycreatorid / copycreator', DESC = 'Copies the creators ID to your clipboard'}
			CMDs[#CMDs + 1] = {NAME = 'setcreatorid / setcreator', DESC = 'Sets your userid to the creators ID'}
			CMDs[#CMDs + 1] = {NAME = 'noprompts', DESC = 'Prevents the game from showing you purchase/premium prompts'}
			CMDs[#CMDs + 1] = {NAME = 'showprompts', DESC = 'Allows the game to show purchase/premium prompts again'}
			CMDs[#CMDs + 1] = {NAME = 'enable [inventory/playerlist/chat/reset/emotes/all]', DESC = 'Toggles visibility of coregui items'}
			CMDs[#CMDs + 1] = {NAME = 'disable [inventory/playerlist/chat/reset/emotes/all]', DESC = 'Toggles visibility of coregui items'}
			CMDs[#CMDs + 1] = {NAME = 'showguis', DESC = 'Shows any invisible GUIs'}
			CMDs[#CMDs + 1] = {NAME = 'unshowguis', DESC = 'Undoes showguis'}
			CMDs[#CMDs + 1] = {NAME = 'hideguis', DESC = 'Hides any GUIs in PlayerGui'}
			CMDs[#CMDs + 1] = {NAME = 'unhideguis', DESC = 'Undoes hideguis'}
			CMDs[#CMDs + 1] = {NAME = 'guidelete', DESC = 'Enables backspace to delete GUI'}
			CMDs[#CMDs + 1] = {NAME = 'unguidelete / noguidelete', DESC = 'Disables guidelete'}
			CMDs[#CMDs + 1] = {NAME = 'hideiy', DESC = 'Hides the main IY GUI'}
			CMDs[#CMDs + 1] = {NAME = 'showiy / unhideiy', DESC = 'Shows IY again'}
			CMDs[#CMDs + 1] = {NAME = 'keepiy', DESC = 'Auto execute IY when you teleport through servers'}
			CMDs[#CMDs + 1] = {NAME = 'unkeepiy', DESC = 'Disable keepiy'}
			CMDs[#CMDs + 1] = {NAME = 'togglekeepiy', DESC = 'Toggle keepiy'}
			CMDs[#CMDs + 1] = {NAME = 'savegame / saveplace', DESC = 'Uses saveinstance to save the game'}
			CMDs[#CMDs + 1] = {NAME = 'clearerror', DESC = 'Clears the annoying box and blur when a game kicks you'}
			CMDs[#CMDs + 1] = {NAME = 'clientantikick / antikick (CLIENT)', DESC = 'Prevents localscripts from kicking you'}
			CMDs[#CMDs + 1] = {NAME = 'clientantiteleport / antiteleport (CLIENT)', DESC = 'Prevents localscripts from teleporting you'}
			CMDs[#CMDs + 1] = {NAME = 'allowrejoin / allowrj [true/false] (CLIENT)', DESC = 'Changes if antiteleport allows you to rejoin or not'}
			CMDs[#CMDs + 1] = {NAME = 'cancelteleport / canceltp', DESC = 'Cancels teleports in progress'}
			CMDs[#CMDs + 1] = {NAME = 'volume / vol [0-10]', DESC = 'Adjusts your game volume on a scale of 0 to 10'}
			CMDs[#CMDs + 1] = {NAME = 'antilag / boostfps / lowgraphics', DESC = 'Lowers game quality to boost FPS'}
			CMDs[#CMDs + 1] = {NAME = 'record / rec', DESC = 'Starts roblox recorder'}
			CMDs[#CMDs + 1] = {NAME = 'screenshot / scrnshot', DESC = 'Takes a screenshot'}
			CMDs[#CMDs + 1] = {NAME = 'togglefullscreen / togglefs', DESC = 'Toggles fullscreen'}
			CMDs[#CMDs + 1] = {NAME = 'notify [text]', DESC = 'Sends you a notification with the provided text'}
			CMDs[#CMDs + 1] = {NAME = 'lastcommand / lastcmd', DESC = 'Executes the previous command used'}
			CMDs[#CMDs + 1] = {NAME = 'exit', DESC = 'Kills roblox process'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'ntool', DESC = 'Noclip tool'}
			CMDs[#CMDs + 1] = {NAME = 'loopntool', DESC = 'Noclip tool forever'}
			CMDs[#CMDs + 1] = {NAME = 'noclip', DESC = 'Go through objects'}
			CMDs[#CMDs + 1] = {NAME = 'unnoclip / clip', DESC = 'Disables noclip'}
			CMDs[#CMDs + 1] = {NAME = 'fly [speed]', DESC = 'Makes you fly'}
			CMDs[#CMDs + 1] = {NAME = 'unfly', DESC = 'Disables fly'}
			CMDs[#CMDs + 1] = {NAME = 'flyspeed [num]', DESC = 'Set fly speed (default is 20)'}
			CMDs[#CMDs + 1] = {NAME = 'vehiclefly / vfly [speed]', DESC = 'Makes you fly in a vehicle'}
			CMDs[#CMDs + 1] = {NAME = 'unvehiclefly / unvfly', DESC = 'Disables vehicle fly'}
			CMDs[#CMDs + 1] = {NAME = 'vehicleflyspeed  / vflyspeed [num]', DESC = 'Set vehicle fly speed'}
			CMDs[#CMDs + 1] = {NAME = 'cframefly / cfly [speed]', DESC = 'Makes you fly, bypassing some anti cheats (works on mobile)'}
			CMDs[#CMDs + 1] = {NAME = 'uncframefly / uncfly', DESC = 'Disables cfly'}
			CMDs[#CMDs + 1] = {NAME = 'cframeflyspeed  / cflyspeed [num]', DESC = 'Sets cfly speed'}
			CMDs[#CMDs + 1] = {NAME = 'qefly [true / false]', DESC = 'enables or disables the Q and E hotkeys for fly'}
			CMDs[#CMDs + 1] = {NAME = 'vehiclenoclip / vnoclip', DESC = 'Turns off vehicle collision'}
			CMDs[#CMDs + 1] = {NAME = 'vehicleclip / vclip / unvnoclip', DESC = 'Enables vehicle collision'}
			CMDs[#CMDs + 1] = {NAME = 'float /  platform', DESC = 'Spawns a platform beneath you causing you to float'}
			CMDs[#CMDs + 1] = {NAME = 'unfloat / noplatform', DESC = 'Removes the platform'}
			CMDs[#CMDs + 1] = {NAME = 'swim', DESC = 'Allows you to swim in the air'}
			CMDs[#CMDs + 1] = {NAME = 'unswim / noswim', DESC = 'Stops you from swimming everywhere'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'setwaypoint / swp [name]', DESC = 'Sets a waypoint at your position'}
			CMDs[#CMDs + 1] = {NAME = 'waypointpos / wpp [name] [X Y Z]', DESC = 'Sets a waypoint with specified coordinates'}
			CMDs[#CMDs + 1] = {NAME = 'waypoints', DESC = 'Shows a list of currently active waypoints'}
			CMDs[#CMDs + 1] = {NAME = 'showwaypoints / showwp', DESC = 'Shows all currently set waypoints'}
			CMDs[#CMDs + 1] = {NAME = 'hidewaypoints / hidewp', DESC = 'Hides shown waypoints'}
			CMDs[#CMDs + 1] = {NAME = 'waypoint / wp [name]', DESC = 'Teleports player to a waypoint'}
			CMDs[#CMDs + 1] = {NAME = 'tweenwaypoint / twp [name]', DESC = 'Tweens player to a waypoint'}
			CMDs[#CMDs + 1] = {NAME = 'walktowaypoint / wtwp [name]', DESC = 'Walks player to a waypoint'}
			CMDs[#CMDs + 1] = {NAME = 'deletewaypoint / dwp [name]', DESC = 'Deletes a waypoint'}
			CMDs[#CMDs + 1] = {NAME = 'clearwaypoints / cwp', DESC = 'Clears all waypoints'}
			CMDs[#CMDs + 1] = {NAME = 'cleargamewaypoints / cgamewp', DESC = 'Clears all waypoints for the game you are in'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'goto [plr]', DESC = 'Go to a player'}
			CMDs[#CMDs + 1] = {NAME = 'tweengoto / tgoto [plr]', DESC = 'Tween to a player (bypasses some anti cheats)'}
			CMDs[#CMDs + 1] = {NAME = 'tweenspeed / tspeed [num]', DESC = 'Sets how fast all tween commands go (default is 1)'}
			CMDs[#CMDs + 1] = {NAME = 'vehiclegoto / vgoto [plr]', DESC = 'Go to a player while in a vehicle'}
			CMDs[#CMDs + 1] = {NAME = 'loopgoto [plr] [distance] [delay]', DESC = 'Loop teleport to a player'}
			CMDs[#CMDs + 1] = {NAME = 'unloopgoto', DESC = 'Stops teleporting you to a player'}
			CMDs[#CMDs + 1] = {NAME = 'pulsetp / ptp [plr] [seconds]', DESC = 'Teleports you to a player for a specified ammount of time'}
			CMDs[#CMDs + 1] = {NAME = 'clientbring / cbring [plr] (CLIENT)', DESC = 'Bring a player'}
			CMDs[#CMDs + 1] = {NAME = 'loopbring [plr] [distance] [delay] (CLIENT)', DESC = 'Loop brings a player to you (useful for killing)'}
			CMDs[#CMDs + 1] = {NAME = 'unloopbring [plr]', DESC = 'Undoes loopbring'}
			CMDs[#CMDs + 1] = {NAME = 'freeze / fr [plr] (CLIENT)', DESC = 'Freezes a player'}
			CMDs[#CMDs + 1] = {NAME = 'freezeanims', DESC = 'Freezes your animations / pauses your animations - Does not work on default animations'}
			CMDs[#CMDs + 1] = {NAME = 'unfreezeanims', DESC = 'Unfreezes your animations / plays your animations'}
			CMDs[#CMDs + 1] = {NAME = 'thaw / unfr [plr] (CLIENT)', DESC = 'Unfreezes a player'}
			CMDs[#CMDs + 1] = {NAME = 'tpposition / tppos [X Y Z]', DESC = 'Teleports you to certain coordinates'}
			CMDs[#CMDs + 1] = {NAME = 'tweentpposition / ttppos [X Y Z]', DESC = 'Tween to coordinates (bypasses some anti cheats)'}
			CMDs[#CMDs + 1] = {NAME = 'offset [X Y Z]', DESC = 'Offsets you by certain coordinates'}
			CMDs[#CMDs + 1] = {NAME = 'tweenoffset / toffset [X Y Z]', DESC = 'Tween offset (bypasses some anti cheats)'}
			CMDs[#CMDs + 1] = {NAME = 'notifyposition / notifypos [plr]', DESC = 'Notifies you the coordinates of a character'}
			CMDs[#CMDs + 1] = {NAME = 'copyposition / copypos [plr]', DESC = 'Copies the coordinates of a character to your clipboard'}
			CMDs[#CMDs + 1] = {NAME = 'walktoposition / walktopos [X Y Z]', DESC = 'Makes you walk to a coordinate'}
			CMDs[#CMDs + 1] = {NAME = 'spawnpoint / spawn [delay]', DESC = 'Sets a position where you will spawn'}
			CMDs[#CMDs + 1] = {NAME = 'nospawnpoint / nospawn', DESC = 'Removes your custom spawn point'}
			CMDs[#CMDs + 1] = {NAME = 'flashback / diedtp', DESC = 'Teleports you to where you last died'}
			CMDs[#CMDs + 1] = {NAME = 'walltp', DESC = 'Teleports you above/over any wall you run into'}
			CMDs[#CMDs + 1] = {NAME = 'nowalltp / unwalltp', DESC = 'Disables walltp'}
			CMDs[#CMDs + 1] = {NAME = 'teleporttool / tptool', DESC = 'Gives you a teleport tool'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'logs', DESC = 'Opens the logs GUI'}
			CMDs[#CMDs + 1] = {NAME = 'chatlogs / clogs', DESC = 'Log what people say or whisper'}
			CMDs[#CMDs + 1] = {NAME = 'joinlogs / jlogs', DESC = 'Log when people join'}
			CMDs[#CMDs + 1] = {NAME = 'chat / say [text]', DESC = 'Makes you chat a string (possible mute bypass)'}
			CMDs[#CMDs + 1] = {NAME = 'spam [text]', DESC = 'Makes you spam the chat'}
			CMDs[#CMDs + 1] = {NAME = 'unspam', DESC = 'Turns off spam'}
			CMDs[#CMDs + 1] = {NAME = 'whisper / pm [plr] [text]', DESC = 'Makes you whisper a string to someone (possible mute bypass)'}
			CMDs[#CMDs + 1] = {NAME = 'pmspam [plr] [text]', DESC = 'Makes you spam a players whispers'}
			CMDs[#CMDs + 1] = {NAME = 'unpmspam [plr]', DESC = 'Turns off pm spam'}
			CMDs[#CMDs + 1] = {NAME = 'spamspeed [num]', DESC = 'How quickly you spam (default is 1)'}
			CMDs[#CMDs + 1] = {NAME = 'bubblechat (CLIENT)', DESC = 'Enables bubble chat for your client'}
			CMDs[#CMDs + 1] = {NAME = 'unbubblechat / nobubblechat', DESC = 'Disables the bubblechat command'}
			CMDs[#CMDs + 1] = {NAME = 'safechat', DESC = 'Enables safe chat'}
			CMDs[#CMDs + 1] = {NAME = 'nosafechat / disablesafechat', DESC = 'Disables safechat'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'esp', DESC = 'View all players and their status'}
			CMDs[#CMDs + 1] = {NAME = 'noesp / unesp', DESC = 'Removes esp'}
			CMDs[#CMDs + 1] = {NAME = 'esptransparency [number]', DESC = 'Changes the transparency of esp related commands'}
			CMDs[#CMDs + 1] = {NAME = 'partesp [part name]', DESC = 'Highlights a part'}
			CMDs[#CMDs + 1] = {NAME = 'unpartesp / nopartesp [part name]', DESC = 'removes partesp'}
			CMDs[#CMDs + 1] = {NAME = 'chams', DESC = 'ESP but without text in the way'}
			CMDs[#CMDs + 1] = {NAME = 'nochams / unchams', DESC = 'Removes chams'}
			CMDs[#CMDs + 1] = {NAME = 'locate [plr]', DESC = 'View a single player and their status'}
			CMDs[#CMDs + 1] = {NAME = 'unlocate / nolocate [plr]', DESC = 'Removes locate'}
			CMDs[#CMDs + 1] = {NAME = 'xray', DESC = 'Makes all parts in workspace transparent'}
			CMDs[#CMDs + 1] = {NAME = 'unxray / noxray', DESC = 'Restores transparency'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'spectate / view [plr]', DESC = 'View a player'}
			CMDs[#CMDs + 1] = {NAME = 'viewpart / viewp [part name]', DESC = 'View a part'}
			CMDs[#CMDs + 1] = {NAME = 'unspectate / unview', DESC = 'Stops viewing player'}
			CMDs[#CMDs + 1] = {NAME = 'freecam / fc', DESC = 'Allows you to freely move camera around the game'}
			CMDs[#CMDs + 1] = {NAME = 'freecampos / fcpos [X Y Z]', DESC = 'Moves / opens freecam in a certain position'}
			CMDs[#CMDs + 1] = {NAME = 'freecamwaypoint / fcwp [name]', DESC = 'Moves / opens freecam to a waypoint'}
			CMDs[#CMDs + 1] = {NAME = 'freecamgoto / fcgoto / fctp [plr]', DESC = 'Moves / opens freecam to a player'}
			CMDs[#CMDs + 1] = {NAME = 'unfreecam / unfc', DESC = 'Disables freecam'}
			CMDs[#CMDs + 1] = {NAME = 'freecamspeed / fcspeed [num]', DESC = 'Adjusts freecam speed (default is 1)'}
			CMDs[#CMDs + 1] = {NAME = 'notifyfreecamposition / notifyfcpos', DESC = 'Noitifies you your freecam coordinates'}
			CMDs[#CMDs + 1] = {NAME = 'copyfreecamposition / copyfcpos', DESC = 'Copies your freecam coordinates to your clipboard'}
			CMDs[#CMDs + 1] = {NAME = 'gotocamera / gotocam', DESC = 'Teleports you to the location of your camera'}
			CMDs[#CMDs + 1] = {NAME = 'tweengotocam / tgotocam', DESC = 'Tweens you to the location of your camera'}
			CMDs[#CMDs + 1] = {NAME = 'firstp', DESC = 'Forces camera to go into first person'}
			CMDs[#CMDs + 1] = {NAME = 'thirdp', DESC = 'Allows camera to go into third person'}
			CMDs[#CMDs + 1] = {NAME = 'noclipcam / nccam', DESC = 'Allows camera to go through objects like walls'}
			CMDs[#CMDs + 1] = {NAME = 'maxzoom [num]', DESC = 'Maximum camera zoom'}
			CMDs[#CMDs + 1] = {NAME = 'minzoom [num]', DESC = 'Minimum camera zoom'}
			CMDs[#CMDs + 1] = {NAME = 'camdistance [num]', DESC = 'Changes camera distance from your player'}
			CMDs[#CMDs + 1] = {NAME = 'fov [num]', DESC = 'Adjusts field of view (default is 70)'}
			CMDs[#CMDs + 1] = {NAME = 'fixcam / restorecam', DESC = 'Fixes camera'}
			CMDs[#CMDs + 1] = {NAME = 'enableshiftlock / enablesl', DESC = 'Enables the shift lock option'}
			CMDs[#CMDs + 1] = {NAME = 'lookat [plr]', DESC = 'Moves your camera view to a player'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'btools (CLIENT)', DESC = 'Gives you building tools (DOES NOT REPLICATE)'}
			CMDs[#CMDs + 1] = {NAME = 'f3x (CLIENT)', DESC = 'Gives you F3X building tools (DOES NOT REPLICATE)'}
			CMDs[#CMDs + 1] = {NAME = 'partname / partpath', DESC = 'Allows you to click a part to see its path & name'}
			CMDs[#CMDs + 1] = {NAME = 'delete [instance name] (CLIENT)', DESC = 'Removes any part with a certain name from the workspace (DOES NOT REPLICATE)'}
			CMDs[#CMDs + 1] = {NAME = 'deleteclass / dc [class name] (CLIENT)', DESC = 'Removes any part with a certain classname from the workspace (DOES NOT REPLICATE)'}
			CMDs[#CMDs + 1] = {NAME = 'lockworkspace / lockws', DESC = 'Locks the whole workspace'}
			CMDs[#CMDs + 1] = {NAME = 'unlockworkspace / unlockws', DESC = 'Unlocks the whole workspace'}
			CMDs[#CMDs + 1] = {NAME = 'invisibleparts / invisparts (CLIENT)', DESC = 'Shows invisible parts'}
			CMDs[#CMDs + 1] = {NAME = 'uninvisibleparts / uninvisparts (CLIENT)', DESC = 'Makes parts affected by invisparts return to normal'}
			CMDs[#CMDs + 1] = {NAME = 'deleteinvisparts / dip (CLIENT)', DESC = 'Deletes invisible parts'}
			CMDs[#CMDs + 1] = {NAME = 'gotopart [part name]', DESC = 'Moves your character to a part or multiple parts'}
			CMDs[#CMDs + 1] = {NAME = 'tweengotopart / tgotopart [part name]', DESC = 'Tweens your character to a part or multiple parts'}
			CMDs[#CMDs + 1] = {NAME = 'gotopartclass / gpc [class name]', DESC = 'Moves your character to a part or multiple parts based on classname'}
			CMDs[#CMDs + 1] = {NAME = 'tweengotopartclass / tgpc [class name]', DESC = 'Tweens your character to a part or multiple parts based on classname'}
			CMDs[#CMDs + 1] = {NAME = 'gotomodel [part name]', DESC = 'Moves your character to a model or multiple models'}
			CMDs[#CMDs + 1] = {NAME = 'tweengotomodel / tgotomodel [part name]', DESC = 'Tweens your character to a model or multiple models'}
			CMDs[#CMDs + 1] = {NAME = 'gotopartdelay / gotomodeldelay [num]', DESC = 'Adjusts how quickly you teleport to each part (default is 0.1)'}
			CMDs[#CMDs + 1] = {NAME = 'bringpart [part name] (CLIENT)', DESC = 'Moves a part or multiple parts to your character'}
			CMDs[#CMDs + 1] = {NAME = 'bringpartclass / bpc [class name] (CLIENT)', DESC = 'Moves a part or multiple parts to your character based on classname'}
			CMDs[#CMDs + 1] = {NAME = 'noclickdetectorlimits / nocdlimits', DESC = 'Sets all click detectors MaxActivationDistance to math.huge'}
			CMDs[#CMDs + 1] = {NAME = 'fireclickdetectors / firecd [name]', DESC = 'Uses all click detectors in a game or uses the optional name'}
			CMDs[#CMDs + 1] = {NAME = 'firetouchinterests / touchinterests [name]', DESC = 'Uses all touchinterests in a game or uses the optional name'}
			CMDs[#CMDs + 1] = {NAME = 'noproximitypromptlimits / nopplimits', DESC = 'Sets all proximity prompts MaxActivationDistance to math.huge'}
			CMDs[#CMDs + 1] = {NAME = 'fireproximityprompts / firepp [name]', DESC = 'Uses all proximity prompts in a game or uses the optional name'}
			CMDs[#CMDs + 1] = {NAME = 'instantproximityprompts / instantpp', DESC = 'Disable the cooldown for proximity prompts'}
			CMDs[#CMDs + 1] = {NAME = 'uninstantproximityprompts / uninstantpp', DESC = 'Undo the cooldown removal'}
			CMDs[#CMDs + 1] = {NAME = 'tpunanchored / tpua [plr]', DESC = 'Teleports unanchored parts to a player'}
			CMDs[#CMDs + 1] = {NAME = 'animsunanchored / freezeua', DESC = 'Freezes unanchored parts'}
			CMDs[#CMDs + 1] = {NAME = 'thawunanchored / thawua / unfreezeua', DESC = 'Thaws unanchored parts'}
			CMDs[#CMDs + 1] = {NAME = 'removeterrain / rterrain / noterrain', DESC = 'Removes all terrain'}
			CMDs[#CMDs + 1] = {NAME = 'clearnilinstances / nonilinstances / cni', DESC = 'Removes nil instances'}
			CMDs[#CMDs + 1] = {NAME = 'destroyheight / dh [num]', DESC = 'Sets FallenPartsDestroyHeight'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'fullbright / fb (CLIENT)', DESC = 'Makes the map brighter / more visible'}
			CMDs[#CMDs + 1] = {NAME = 'loopfullbright / loopfb (CLIENT)', DESC = 'Makes the map brighter / more visible but looped'}
			CMDs[#CMDs + 1] = {NAME = 'unloopfullbright / unloopfb', DESC = 'Unloops fullbright'}
			CMDs[#CMDs + 1] = {NAME = 'ambient [num] [num] [num] (CLIENT)', DESC = 'Changes ambient'}
			CMDs[#CMDs + 1] = {NAME = 'day (CLIENT)', DESC = 'Changes the time to day for the client'}
			CMDs[#CMDs + 1] = {NAME = 'night (CLIENT)', DESC = 'Changes the time to night for the client'}
			CMDs[#CMDs + 1] = {NAME = 'nofog (CLIENT)', DESC = 'Removes fog'}
			CMDs[#CMDs + 1] = {NAME = 'brightness [num] (CLIENT)', DESC = 'Changes the brightness lighting property'}
			CMDs[#CMDs + 1] = {NAME = 'globalshadows / gshadows (CLIENT)', DESC = 'Enables global shadows'}
			CMDs[#CMDs + 1] = {NAME = 'noglobalshadows / nogshadows (CLIENT)', DESC = 'Disables global shadows'}
			CMDs[#CMDs + 1] = {NAME = 'restorelighting / rlighting', DESC = 'Restores Lighting properties'}
			CMDs[#CMDs + 1] = {NAME = 'light [radius] [brightness] (CLIENT)', DESC = 'Gives your player dynamic light'}
			CMDs[#CMDs + 1] = {NAME = 'nolight / unlight', DESC = 'Removes dynamic light from your player'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'inspect / examine [plr]', DESC = 'Opens InspectMenu for a certain player'}
			CMDs[#CMDs + 1] = {NAME = 'age [plr]', DESC = 'Tells you the age of a player'}
			CMDs[#CMDs + 1] = {NAME = 'chatage [plr]', DESC = 'Chats the age of a player'}
			CMDs[#CMDs + 1] = {NAME = 'joindate / jd [plr]', DESC = 'Tells you the date the player joined Roblox'}
			CMDs[#CMDs + 1] = {NAME = 'chatjoindate / cjd [plr]', DESC = 'Chats the date the player joined Roblox'}
			CMDs[#CMDs + 1] = {NAME = 'copyname / copyuser [plr]', DESC = 'Copies a players full username to your clipboard'}
			CMDs[#CMDs + 1] = {NAME = 'userid / id [plr]', DESC = 'Notifies a players user ID'}
			CMDs[#CMDs + 1] = {NAME = 'copyuserid / copyid [plr]', DESC = 'Copies a players user ID to your clipboard'}
			CMDs[#CMDs + 1] = {NAME = 'appearanceid / aid [plr]', DESC = 'Notifies a players appearance ID'}
			CMDs[#CMDs + 1] = {NAME = 'copyappearanceid / caid [plr]', DESC = 'Copies a players appearance ID to your clipboard'}
			CMDs[#CMDs + 1] = {NAME = 'bang [plr] [speed]', DESC = 'owo'}
			CMDs[#CMDs + 1] = {NAME = 'unbang', DESC = 'uwu'}
			CMDs[#CMDs + 1] = {NAME = 'carpet [plr]', DESC = 'Be someones carpet'}
			CMDs[#CMDs + 1] = {NAME = 'uncarpet', DESC = 'Undoes carpet'}
			CMDs[#CMDs + 1] = {NAME = 'friend [plr]', DESC = 'Sends a friend request to certain players'}
			CMDs[#CMDs + 1] = {NAME = 'unfriend [plr]', DESC = 'Unfriends certain players'}
			CMDs[#CMDs + 1] = {NAME = 'headsit [plr]', DESC = 'Sit on a players head'}
			CMDs[#CMDs + 1] = {NAME = 'walkto / follow [plr]', DESC = 'Follow a player'}
			CMDs[#CMDs + 1] = {NAME = 'pathfindwalkto / pathfindfollow [plr]', DESC = 'Follow a player using pathfinding'}
			CMDs[#CMDs + 1] = {NAME = 'pathfindwalktowaypoint / pathfindwalktowp [waypoint]', DESC = 'Walk to a waypoint using pathfinding'}
			CMDs[#CMDs + 1] = {NAME = 'unwalkto / unfollow', DESC = 'Stops following a player'}
			CMDs[#CMDs + 1] = {NAME = 'stareat / stare [plr]', DESC = 'Stare / look at a player'}
			CMDs[#CMDs + 1] = {NAME = 'unstareat / unstare [plr]', DESC = 'Disables stareat'}
			CMDs[#CMDs + 1] = {NAME = 'rolewatch [group id] [role name]', DESC = 'Notify if someone from a watched group joins the server'}
			CMDs[#CMDs + 1] = {NAME = 'rolewatchstop / unrolewatch', DESC = 'Disable Rolewatch'}
			CMDs[#CMDs + 1] = {NAME = 'rolewatchleave', DESC = 'Toggle if you should leave the game if someone from a watched group joins the server'}
			CMDs[#CMDs + 1] = {NAME = 'attach [plr] (TOOL)', DESC = 'Attaches you to a player (YOU NEED A TOOL)'}
			CMDs[#CMDs + 1] = {NAME = 'kill [plr] (TOOL)', DESC = 'Kills a player (YOU NEED A TOOL)'}
			CMDs[#CMDs + 1] = {NAME = 'fastkill [plr] (TOOL)', DESC = 'Kills a player (less reliable) (YOU NEED A TOOL)'}
			CMDs[#CMDs + 1] = {NAME = 'handlekill / hkill [plr] (TOOL)', DESC = 'Kills a player using tool damage (YOU NEED A TOOL)'}
			CMDs[#CMDs + 1] = {NAME = 'bring [plr] (TOOL)', DESC = 'Brings a player (YOU NEED A TOOL)'}
			CMDs[#CMDs + 1] = {NAME = 'fastbring [plr] (TOOL)', DESC = 'Brings a player (less reliable) (YOU NEED A TOOL)'}
			CMDs[#CMDs + 1] = {NAME = 'teleport / tp [plr] [plr] (TOOL)', DESC = 'Teleports a player to another player (YOU NEED A TOOL)'}
			CMDs[#CMDs + 1] = {NAME = 'fastteleport / fasttp [plr] [plr] (TOOL)', DESC = 'Teleports a player to another player (less reliable) (YOU NEED A TOOL)'}
			CMDs[#CMDs + 1] = {NAME = 'fling', DESC = 'Flings anyone you touch'}
			CMDs[#CMDs + 1] = {NAME = 'unfling', DESC = 'Disables the fling command'}
			CMDs[#CMDs + 1] = {NAME = 'invisfling', DESC = 'Enables invisible fling'}
			CMDs[#CMDs + 1] = {NAME = 'loopoof', DESC = 'Loops everyones character sounds (everyone can hear)'}
			CMDs[#CMDs + 1] = {NAME = 'unloopoof', DESC = 'Stops the oof chaos'}
			CMDs[#CMDs + 1] = {NAME = 'muteboombox [plr]', DESC = 'Mutes someones boombox'}
			CMDs[#CMDs + 1] = {NAME = 'unmuteboombox [plr]', DESC = 'Unmutes someones boombox'}
			CMDs[#CMDs + 1] = {NAME = 'hitbox [plr] [size]', DESC = 'Expands the hitbox for players HumanoidRootPart (default is 1)'}
			CMDs[#CMDs + 1] = {NAME = 'headsize [plr] [size]', DESC = 'Expands the head size for players Head (default is 1)'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'reset', DESC = 'Resets your character normally'}
			CMDs[#CMDs + 1] = {NAME = 'respawn', DESC = 'Respawns you'}
			CMDs[#CMDs + 1] = {NAME = 'refresh / re', DESC = 'Respawns and brings you back to the same position'}
			CMDs[#CMDs + 1] = {NAME = 'god', DESC = 'Makes your character difficult to kill in most games'}
			CMDs[#CMDs + 1] = {NAME = 'invisible / invis', DESC = 'Makes you invisible to other players'}
			CMDs[#CMDs + 1] = {NAME = 'visible / vis', DESC = 'Makes you visible to other players'}
			CMDs[#CMDs + 1] = {NAME = 'toolinvisible / toolinvis / tinvis', DESC = 'Makes you invisible to other players and able to use tools'}
			CMDs[#CMDs + 1] = {NAME = 'speed / ws / walkspeed [num]', DESC = 'Change your walkspeed'}
			CMDs[#CMDs + 1] = {NAME = 'spoofspeed / spoofws [num]', DESC = 'Spoofs your WalkSpeed on the Client'}
			CMDs[#CMDs + 1] = {NAME = 'loopspeed / loopws [num]', DESC = 'Loops your walkspeed'}
			CMDs[#CMDs + 1] = {NAME = 'unloopspeed / unloopws', DESC = 'Turns off loopspeed'}
			CMDs[#CMDs + 1] = {NAME = 'hipheight / hheight [num]', DESC = 'Adjusts hip height'}
			CMDs[#CMDs + 1] = {NAME = 'jumppower / jpower / jp [num]', DESC = 'Change a players jump height'}
			CMDs[#CMDs + 1] = {NAME = 'spoofjumppower / spoofjp [num]', DESC = 'Spoofs your JumpPower on the Client'}
			CMDs[#CMDs + 1] = {NAME = 'loopjumppower / loopjp [num]', DESC = 'Loops your jump height'}
			CMDs[#CMDs + 1] = {NAME = 'unloopjumppower / unloopjp', DESC = 'Turns off loopjumppower'}
			CMDs[#CMDs + 1] = {NAME = 'maxslopeangle / msa [num]', DESC = 'Adjusts MaxSlopeAngle'}
			CMDs[#CMDs + 1] = {NAME = 'gravity / grav [num] (CLIENT)', DESC = 'Change your gravity'}
			CMDs[#CMDs + 1] = {NAME = 'sit', DESC = 'Makes your character sit'}
			CMDs[#CMDs + 1] = {NAME = 'lay / laydown', DESC = 'Makes your character lay down'}
			CMDs[#CMDs + 1] = {NAME = 'sitwalk', DESC = 'Makes your character sit while still being able to walk'}
			CMDs[#CMDs + 1] = {NAME = 'nosit', DESC = 'Prevents your character from sitting'}
			CMDs[#CMDs + 1] = {NAME = 'unnosit', DESC = 'Disables nosit'}
			CMDs[#CMDs + 1] = {NAME = 'jump', DESC = 'Makes your character jump'}
			CMDs[#CMDs + 1] = {NAME = 'infinitejump / infjump', DESC = 'Allows you to jump before hitting the ground'}
			CMDs[#CMDs + 1] = {NAME = 'uninfinitejump / uninfjump', DESC = 'Disables infjump'}
			CMDs[#CMDs + 1] = {NAME = 'flyjump', DESC = 'Allows you to hold space to fly up'}
			CMDs[#CMDs + 1] = {NAME = 'unflyjump', DESC = 'Disables flyjump'}
			CMDs[#CMDs + 1] = {NAME = 'autojump / ajump', DESC = 'Automatically jumps when you run into an object'}
			CMDs[#CMDs + 1] = {NAME = 'unautojump / unajump', DESC = 'Disables autojump'}
			CMDs[#CMDs + 1] = {NAME = 'edgejump / ejump', DESC = 'Automatically jumps when you get to the edge of an object'}
			CMDs[#CMDs + 1] = {NAME = 'unedgejump / unejump', DESC = 'Disables edgejump'}
			CMDs[#CMDs + 1] = {NAME = 'platformstand / stun', DESC = 'Enables PlatformStand'}
			CMDs[#CMDs + 1] = {NAME = 'unplatformstand / unstun', DESC = 'Disables PlatformStand'}
			CMDs[#CMDs + 1] = {NAME = 'norotate / noautorotate', DESC = 'Disables AutoRotate'}
			CMDs[#CMDs + 1] = {NAME = 'unnorotate / autorotate', DESC = 'Enables AutoRotate'}
			CMDs[#CMDs + 1] = {NAME = 'enablestate [StateType]', DESC = 'Enables a humanoid state type'}
			CMDs[#CMDs + 1] = {NAME = 'disablestate [StateType]', DESC = 'Disables a humanoid state type'}
			CMDs[#CMDs + 1] = {NAME = 'team [team name] (CLIENT)', DESC = 'Changes your team. Sometimes fools localscripts.'}
			CMDs[#CMDs + 1] = {NAME = 'nobillboardgui / nobgui / noname', DESC = 'Removes billboard and surface guis from your players (i.e. name guis at cafes)'}
			CMDs[#CMDs + 1] = {NAME = 'loopnobgui / loopnoname', DESC = 'Loop removes billboard and surface guis from your players (i.e. name guis at cafes)'}
			CMDs[#CMDs + 1] = {NAME = 'unloopnobgui / unloopnoname', DESC = 'Disables loopnobgui'}
			CMDs[#CMDs + 1] = {NAME = 'nohead / headless', DESC = 'Removes your head (uses simulation radius)'}
			CMDs[#CMDs + 1] = {NAME = 'noarms', DESC = 'Removes your arms'}
			CMDs[#CMDs + 1] = {NAME = 'nolegs', DESC = 'Removes your legs'}
			CMDs[#CMDs + 1] = {NAME = 'nolimbs', DESC = 'Removes your limbs'}
			CMDs[#CMDs + 1] = {NAME = 'naked (CLIENT)', DESC = 'Removes your clothing'}
			CMDs[#CMDs + 1] = {NAME = 'noface / removeface', DESC = 'Removes your face'}
			CMDs[#CMDs + 1] = {NAME = 'blockhead', DESC = 'Turns your head into a block'}
			CMDs[#CMDs + 1] = {NAME = 'blockhats', DESC = 'Turns your hats into blocks'}
			CMDs[#CMDs + 1] = {NAME = 'blocktool', DESC = 'Turns the currently selected tool into a block'}
			CMDs[#CMDs + 1] = {NAME = 'creeper', DESC = 'Makes you look like a creeper'}
			CMDs[#CMDs + 1] = {NAME = 'drophats', DESC = 'Drops your hats'}
			CMDs[#CMDs + 1] = {NAME = 'nohats / deletehats / rhats', DESC = 'Deletes your hats'}
			CMDs[#CMDs + 1] = {NAME = 'hatspin / spinhats', DESC = 'Spins your characters accessories'}
			CMDs[#CMDs + 1] = {NAME = 'unhatspin / unspinhats', DESC = 'Undoes spinhats'}
			CMDs[#CMDs + 1] = {NAME = 'clearhats / cleanhats', DESC = 'Clears hats in the workspace'}
			CMDs[#CMDs + 1] = {NAME = 'chardelete / cd [instance name]', DESC = 'Removes any part with a certain name from your character'}
			CMDs[#CMDs + 1] = {NAME = 'chardeleteclass / cdc [class name]', DESC = 'Removes any part with a certain classname from your character'}
			CMDs[#CMDs + 1] = {NAME = 'deletevelocity / dv / removeforces', DESC = 'Removes any velocity / force instances in your character'}
			CMDs[#CMDs + 1] = {NAME = 'weaken [num]', DESC = 'Makes your character less dense'}
			CMDs[#CMDs + 1] = {NAME = 'unweaken', DESC = 'Sets your characters CustomPhysicalProperties to default'}
			CMDs[#CMDs + 1] = {NAME = 'strengthen [num]', DESC = 'Makes your character more dense (CustomPhysicalProperties)'}
			CMDs[#CMDs + 1] = {NAME = 'unstrengthen', DESC = 'Sets your characters CustomPhysicalProperties to default'}
			CMDs[#CMDs + 1] = {NAME = 'breakvelocity', DESC = 'Sets your characters velocity to 0'}
			CMDs[#CMDs + 1] = {NAME = 'spin [speed]', DESC = 'Spins your character'}
			CMDs[#CMDs + 1] = {NAME = 'unspin', DESC = 'Disables spin'}
			CMDs[#CMDs + 1] = {NAME = 'vr', DESC = 'Loads CLOVR by Abacaxl'}
			CMDs[#CMDs + 1] = {NAME = 'split', DESC = 'Splits your character in half'}
			CMDs[#CMDs + 1] = {NAME = 'nilchar', DESC = 'Sets your characters parent to nil'}
			CMDs[#CMDs + 1] = {NAME = 'unnilchar / nonilchar', DESC = 'Sets your characters parent to workspace'}
			CMDs[#CMDs + 1] = {NAME = 'noroot / removeroot / rroot', DESC = 'Removes your characters HumanoidRootPart'}
			CMDs[#CMDs + 1] = {NAME = 'replaceroot', DESC = 'Replaces your characters HumanoidRootPart'}
			CMDs[#CMDs + 1] = {NAME = 'clearcharappearance / clearchar / clrchar', DESC = 'Removes all accessory, shirt, pants, charactermesh, and bodycolors'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'animation / anim [ID] [speed]', DESC = 'Makes your character perform an animation (must be by roblox to replicate)'}
			CMDs[#CMDs + 1] = {NAME = 'dance', DESC = 'Makes you  d a n c e'}
			CMDs[#CMDs + 1] = {NAME = 'undance', DESC = 'Stops dance animations'}
			CMDs[#CMDs + 1] = {NAME = 'spasm', DESC = 'Makes you  c r a z y'}
			CMDs[#CMDs + 1] = {NAME = 'unspasm', DESC = 'Stops spasm'}
			CMDs[#CMDs + 1] = {NAME = 'headthrow', DESC = 'Simply makes you throw your head'}
			CMDs[#CMDs + 1] = {NAME = 'noanim', DESC = 'Disables your animations'}
			CMDs[#CMDs + 1] = {NAME = 'reanim', DESC = 'Restores your animations'}
			CMDs[#CMDs + 1] = {NAME = 'animspeed [num]', DESC = 'Changes the speed of your current animation'}
			CMDs[#CMDs + 1] = {NAME = 'copyanimation / copyanim / copyemote [plr]', DESC = 'Copies someone elses animation'}
			CMDs[#CMDs + 1] = {NAME = 'loopanimation / loopanim', DESC = 'Loops your current animation'}
			CMDs[#CMDs + 1] = {NAME = 'stopanimations / stopanims', DESC = 'Stops running animations'}
			CMDs[#CMDs + 1] = {NAME = 'refreshanimations / refreshanims', DESC = 'Refreshes animations'}
			CMDs[#CMDs + 1] = {NAME = 'allowcustomanim / allowcustomanimations', DESC = 'Lets you use custom animation packs instead'}
			CMDs[#CMDs + 1] = {NAME = 'unallowcustomanim / unallowcustomanimations', DESC = 'Doesn\'t let you use custom animation packs instead'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'autoclick [click delay] [release delay]', DESC = 'Automatically clicks your mouse with a set delay'}
			CMDs[#CMDs + 1] = {NAME = 'unautoclick / noautoclick', DESC = 'Turns off autoclick'}
			CMDs[#CMDs + 1] = {NAME = 'autokeypress [key] [down delay] [up delay]', DESC = 'Automatically presses a key with a set delay'}
			CMDs[#CMDs + 1] = {NAME = 'unautokeypress', DESC = 'Stops autokeypress'}
			CMDs[#CMDs + 1] = {NAME = 'hovername', DESC = 'Shows a players username when your mouse is hovered over them'}
			CMDs[#CMDs + 1] = {NAME = 'unhovername / nohovername', DESC = 'Turns off hovername'}
			CMDs[#CMDs + 1] = {NAME = 'mousesensitivity / ms [0-10]', DESC = 'Sets your mouse sensitivity (affects first person and right click drag) (default is 1)'}
			CMDs[#CMDs + 1] = {NAME = 'clickdelete', DESC = 'Go to settings>Keybinds>Add for clicktp'}
			CMDs[#CMDs + 1] = {NAME = 'clickteleport', DESC = 'Go to settings>Keybinds>Add for click tp'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'tools', DESC = 'Copies tools from ReplicatedStorage and Lighting'}
			CMDs[#CMDs + 1] = {NAME = 'notools / removetools / deletetools', DESC = 'Removes tools from character and backpack'}
			CMDs[#CMDs + 1] = {NAME = 'deleteselectedtool / dst', DESC = 'Removes any currently selected tools'}
			CMDs[#CMDs + 1] = {NAME = 'grabtools', DESC = 'Automatically get tools that are dropped'}
			CMDs[#CMDs + 1] = {NAME = 'ungrabtools / nograbtools', DESC = 'Disables grabtools'}
			CMDs[#CMDs + 1] = {NAME = 'copytools [plr] (CLIENT)', DESC = 'Copies a players tools'}
			CMDs[#CMDs + 1] = {NAME = 'dupetools / clonetools [num]', DESC = 'Duplicates your inventory tools a set ammount of times'}
			CMDs[#CMDs + 1] = {NAME = 'givetool / givetools', DESC = 'Gives all the tools you\'re holding to [plr] using the attach method.'}
			CMDs[#CMDs + 1] = {NAME = 'droptools', DESC = 'Drops your tools'}
			CMDs[#CMDs + 1] = {NAME = 'droppabletools', DESC = 'Makes your tools droppable'}
			CMDs[#CMDs + 1] = {NAME = 'equiptools', DESC = 'Equips every tool in your inventory at once'}
			CMDs[#CMDs + 1] = {NAME = 'unequiptools', DESC = 'Unequips every tool you are currently holding at once'}
			CMDs[#CMDs + 1] = {NAME = 'removespecifictool [name]', DESC = 'Automatically remove a specific tool from your inventory'}
			CMDs[#CMDs + 1] = {NAME = 'unremovespecifictool [name]', DESC = 'Stops removing a specific tool from your inventory'}
			CMDs[#CMDs + 1] = {NAME = 'clearremovespecifictool', DESC = 'Stop removing all specific tools from your inventory'}
			CMDs[#CMDs + 1] = {NAME = 'reach [num]', DESC = 'Increases the hitbox of your held tool'}
			CMDs[#CMDs + 1] = {NAME = 'unreach / noreach', DESC = 'Turns off reach'}
			CMDs[#CMDs + 1] = {NAME = 'grippos [X Y Z]', DESC = 'Changes your current tools grip position'}
			CMDs[#CMDs + 1] = {NAME = 'usetools [ammount] [delay]', DESC = 'Activates all tools in your backpack at the same time'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'addalias [cmd] [alias]', DESC = 'Adds an alias to a command'}
			CMDs[#CMDs + 1] = {NAME = 'removealias [alias]', DESC = 'Removes a custom alias'}
			CMDs[#CMDs + 1] = {NAME = 'clraliases', DESC = 'Removes all custom aliases'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'addplugin / plugin [name]', DESC = 'Add a plugin via command'}
			CMDs[#CMDs + 1] = {NAME = 'removeplugin / deleteplugin [name]', DESC = 'Remove a plugin via command'}
			CMDs[#CMDs + 1] = {NAME = 'reloadplugin [name]', DESC = 'Reloads a plugin'}
			CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
			CMDs[#CMDs + 1] = {NAME = 'breakloops / break (cmd loops)', DESC = 'Stops any cmd loops (;100^1^cmd)'}
			CMDs[#CMDs + 1] = {NAME = 'removecmd / deletecmd', DESC = 'Removes a command until the admin is reloaded'}
			CMDs[#CMDs + 1] = {NAME = 'tpwalk / teleportwalk [num]', DESC = 'Teleports you to your move direction'}
			CMDs[#CMDs + 1] = {NAME = 'untpwalk / unteleportwalk', DESC = 'Undoes tpwalk / teleportwalk'}
			CMDs[#CMDs + 1] = {NAME = 'notifyping / ping', DESC = 'Notify yourself your ping'}
			CMDs[#CMDs + 1] = {NAME = 'trip', DESC = 'Makes your character fall over'}
			CMDs[#CMDs + 1] = {NAME = 'norender', DESC = 'Disable 3d Rendering to decrease the amount of CPU the client uses'}
			CMDs[#CMDs + 1] = {NAME = 'render', DESC = 'Enable 3d Rendering'}
			CMDs[#CMDs + 1] = {NAME = 'use2022materials / 2022materials', DESC = 'Enables 2022 material textures'}
			CMDs[#CMDs + 1] = {NAME = 'unuse2022materials / un2022materials', DESC = 'Disables 2022 material textures'}
			wait()
			
			for i = 1, #CMDs do
				local newcmd = Example:Clone()
				newcmd.Parent = CMDsF
				newcmd.Visible = false
				newcmd.Text = CMDs[i].NAME
				newcmd.Name = "CMD"
				table.insert(text1, newcmd)
				if CMDs[i].DESC ~= "" then
					newcmd:SetAttribute("Title", CMDs[i].NAME)
					newcmd:SetAttribute("Desc", CMDs[i].DESC)
					newcmd.MouseButton1Down:Connect(function()
						if not IsOnMobile and newcmd.Visible and newcmd.TextTransparency == 0 then
							local currentText = Cmdbar.Text
							Cmdbar:CaptureFocus()
							autoComplete(newcmd.Text, currentText)
							maximizeHolder()
						end
					end)
				end
			end
			
			IndexContents("", true)
			
			function checkTT()
				local t
				local guisAtPosition = COREGUI:GetGuiObjectsAtPosition(IYMouse.X, IYMouse.Y)
			
				for _, gui in pairs(guisAtPosition) do
					if gui.Parent == CMDsF then
						t = gui
					end
				end
			
				if t ~= nil and t:GetAttribute("Title") ~= nil then
					local x = IYMouse.X
					local y = IYMouse.Y
					local xP
					local yP
					if IYMouse.X > 200 then
						xP = x - 201
					else
						xP = x + 21
					end
					if IYMouse.Y > (IYMouse.ViewSizeY-96) then
						yP = y - 97
					else
						yP = y
					end
					Tooltip.Position = UDim2.new(0, xP, 0, yP)
					Description.Text = t:GetAttribute("Desc")
					if t:GetAttribute("Title") ~= nil then
						Title_3.Text = t:GetAttribute("Title")
					else
						Title_3.Text = ''
					end
					Tooltip.Visible = true
				else
					Tooltip.Visible = false
				end
			end
			
			function FindInTable(tbl,val)
				if tbl == nil then return false end
				for _,v in pairs(tbl) do
					if v == val then return true end
				end 
				return false
			end
			
			function GetInTable(Table, Name)
				for i = 1, #Table do
					if Table[i] == Name then
						return i
					end
				end
				return false
			end
			
			function respawn(plr)
				if invisRunning then TurnVisible() end
				local char = plr.Character
				if char:FindFirstChildOfClass("Humanoid") then char:FindFirstChildOfClass("Humanoid"):ChangeState(15) end
				char:ClearAllChildren()
				local newChar = Instance.new("Model")
				newChar.Parent = workspace
				plr.Character = newChar
				wait()
				plr.Character = char
				newChar:Destroy()
			end
			
			local refreshCmd = false
			function refresh(plr)
				refreshCmd = true
				local Human = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid", true)
				local pos = Human and Human.RootPart and Human.RootPart.CFrame
				local pos1 = workspace.CurrentCamera.CFrame
				respawn(plr)
				task.spawn(function()
					plr.CharacterAdded:Wait():WaitForChild("Humanoid").RootPart.CFrame, workspace.CurrentCamera.CFrame = pos, wait() and pos1
					refreshCmd = false
				end)
			end
			
			local lastDeath
			
			function onDied()
				task.spawn(function()
					if pcall(function() Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') end) and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
						Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').Died:Connect(function()
							if getRoot(Players.LocalPlayer.Character) then
								lastDeath = getRoot(Players.LocalPlayer.Character).CFrame
							end
						end)
					else
						wait(2)
						onDied()
					end
				end)
			end
			
			Clip = true
			spDelay = 0.1
			Players.LocalPlayer.CharacterAdded:Connect(function()
				NOFLY()
				Floating = false
			
				if not Clip then
					execCmd('clip')
				end
			
				repeat wait() until getRoot(Players.LocalPlayer.Character)
			
				pcall(function()
					if spawnpoint and not refreshCmd and spawnpos ~= nil then
						wait(spDelay)
						getRoot(Players.LocalPlayer.Character).CFrame = spawnpos
					end
				end)
			
				onDied()
			end)
			
			onDied()
			
			function getstring(begin)
				local start = begin-1
				local AA = '' for i,v in pairs(cargs) do
					if i > start then
						if AA ~= '' then
							AA = AA .. ' ' .. v
						else
							AA = AA .. v
						end
					end
				end
				return AA
			end
			
			findCmd=function(cmd_name)
				for i,v in pairs(cmds)do
					if v.NAME:lower()==cmd_name:lower() or FindInTable(v.ALIAS,cmd_name:lower()) then
						return v
					end
				end
				return customAlias[cmd_name:lower()]
			end
			
			function splitString(str,delim)
				local broken = {}
				if delim == nil then delim = "," end
				for w in string.gmatch(str,"[^"..delim.."]+") do
					table.insert(broken,w)
				end
				return broken
			end
			
			cmdHistory = {}
			local lastCmds = {}
			local historyCount = 0
			local split=" "
			local lastBreakTime = 0
			function execCmd(cmdStr,speaker,store)
				cmdStr = cmdStr:gsub("%s+$","")
				task.spawn(function()
					local rawCmdStr = cmdStr
					cmdStr = string.gsub(cmdStr,"\\\\","%%BackSlash%%")
					local commandsToRun = splitString(cmdStr,"\\")
					for i,v in pairs(commandsToRun) do
						v = string.gsub(v,"%%BackSlash%%","\\")
						local x,y,num = v:find("^(%d+)%^")
						local cmdDelay = 0
						local infTimes = false
						if num then
							v = v:sub(y+1)
							local x,y,del = v:find("^([%d%.]+)%^")
							if del then
								v = v:sub(y+1)
								cmdDelay = tonumber(del) or 0
							end
						else
							local x,y = v:find("^inf%^")
							if x then
								infTimes = true
								v = v:sub(y+1)
								local x,y,del = v:find("^([%d%.]+)%^")
								if del then
									v = v:sub(y+1)
									del = tonumber(del) or 1
									cmdDelay = (del > 0 and del or 1)
								else
									cmdDelay = 1
								end
							end
						end
						num = tonumber(num or 1)
			
						if v:sub(1,1) == "!" then
							local chunks = splitString(v:sub(2),split)
							if chunks[1] and lastCmds[chunks[1]] then v = lastCmds[chunks[1]] end
						end
			
						local args = splitString(v,split)
						local cmdName = args[1]
						local cmd = findCmd(cmdName)
						if cmd then
							table.remove(args,1)
							cargs = args
							if not speaker then speaker = Players.LocalPlayer end
							if store then
								if speaker == Players.LocalPlayer then
									if cmdHistory[1] ~= rawCmdStr and rawCmdStr:sub(1,11) ~= 'lastcommand' and rawCmdStr:sub(1,7) ~= 'lastcmd' then
										table.insert(cmdHistory,1,rawCmdStr)
									end
								end
								if #cmdHistory > 30 then table.remove(cmdHistory) end
			
								lastCmds[cmdName] = v
							end
							local cmdStartTime = tick()
							if infTimes then
								while lastBreakTime < cmdStartTime do
									local success,err = pcall(cmd.FUNC,args, speaker)
									if not success and _G.IY_DEBUG then
										warn("Command Error:", cmdName, err)
									end
									wait(cmdDelay)
								end
							else
								for rep = 1,num do
									if lastBreakTime > cmdStartTime then break end
									local success,err = pcall(function()
										cmd.FUNC(args, speaker)
									end)
									if not success and _G.IY_DEBUG then
										warn("Command Error:", cmdName, err)
									end
									if cmdDelay ~= 0 then wait(cmdDelay) end
								end
							end
						end
					end
				end)
			end	
			
			function addcmd(name,alias,func,plgn)
				cmds[#cmds+1]=
					{
						NAME=name;
						ALIAS=alias or {};
						FUNC=func;
						PLUGIN=plgn;
					}
			end
			
			function removecmd(cmd)
				if cmd ~= " " then
					for i = #cmds,1,-1 do
						if cmds[i].NAME == cmd or FindInTable(cmds[i].ALIAS,cmd) then
							table.remove(cmds, i)
							for a,c in pairs(CMDsF:GetChildren()) do
								if string.find(c.Text, "^"..cmd.."$") or string.find(c.Text, "^"..cmd.." ") or string.find(c.Text, " "..cmd.."$") or string.find(c.Text, " "..cmd.." ") then
									c.TextTransparency = 0.7
									c.MouseButton1Click:Connect(function()
										notify(c.Text, "Command has been disabled by you or a plugin")
									end)
								end
							end
						end
					end
				end
			end
			
			function addbind(cmd,key,iskeyup,toggle)
				if toggle then
					binds[#binds+1]=
						{
							COMMAND=cmd;
							KEY=key;
							ISKEYUP=iskeyup;
							TOGGLE = toggle;
						}
				else
					binds[#binds+1]=
						{
							COMMAND=cmd;
							KEY=key;
							ISKEYUP=iskeyup;
						}
				end
			end
			
			function addcmdtext(text,name,desc)
				local newcmd = Example:Clone()
				local tooltipText = tostring(text)
				local tooltipDesc = tostring(desc)
				newcmd.Parent = CMDsF
				newcmd.Visible = false
				newcmd.Text = text
				newcmd.Name = 'PLUGIN_'..name
				table.insert(text1,newcmd)
				if desc and desc ~= '' then
					newcmd:SetAttribute("Title", tooltipText)
					newcmd:SetAttribute("Desc", tooltipDesc)
					newcmd.MouseButton1Down:Connect(function()
						if newcmd.Visible and newcmd.TextTransparency == 0 then
							Cmdbar:CaptureFocus()
							autoComplete(newcmd.Text)
							maximizeHolder()
						end
					end)
				end
			end
			
			local WorldToScreen = function(Object)
				local ObjectVector = workspace.CurrentCamera:WorldToScreenPoint(Object.Position)
				return Vector2.new(ObjectVector.X, ObjectVector.Y)
			end
			
			local MousePositionToVector2 = function()
				return Vector2.new(IYMouse.X, IYMouse.Y)
			end
			
			local GetClosestPlayerFromCursor = function()
				local found = nil
				local ClosestDistance = math.huge
				for i, v in pairs(Players:GetPlayers()) do
					if v ~= Players.LocalPlayer and v.Character and v.Character:FindFirstChildOfClass("Humanoid") then
						for k, x in pairs(v.Character:GetChildren()) do
							if string.find(x.Name, "Torso") then
								local Distance = (WorldToScreen(x) - MousePositionToVector2()).Magnitude
								if Distance < ClosestDistance then
									ClosestDistance = Distance
									found = v
								end
							end
						end
					end
				end
				return found
			end
			
			SpecialPlayerCases = {
				["all"] = function(speaker) return Players:GetPlayers() end,
				["others"] = function(speaker)
					local plrs = {}
					for i,v in pairs(Players:GetPlayers()) do
						if v ~= speaker then
							table.insert(plrs,v)
						end
					end
					return plrs
				end,
				["me"] = function(speaker)return {speaker} end,
				["#(%d+)"] = function(speaker,args,currentList)
					local returns = {}
					local randAmount = tonumber(args[1])
					local players = {unpack(currentList)}
					for i = 1,randAmount do
						if #players == 0 then break end
						local randIndex = math.random(1,#players)
						table.insert(returns,players[randIndex])
						table.remove(players,randIndex)
					end
					return returns
				end,
				["random"] = function(speaker,args,currentList)
					local players = Players:GetPlayers()
					local localplayer = Players.LocalPlayer
					table.remove(players, table.find(players, localplayer))
					return {players[math.random(1,#players)]}
				end,
				["%%(.+)"] = function(speaker,args)
					local returns = {}
					local team = args[1]
					for _,plr in pairs(Players:GetPlayers()) do
						if plr.Team and string.sub(string.lower(plr.Team.Name),1,#team) == string.lower(team) then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["allies"] = function(speaker)
					local returns = {}
					local team = speaker.Team
					for _,plr in pairs(Players:GetPlayers()) do
						if plr.Team == team then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["enemies"] = function(speaker)
					local returns = {}
					local team = speaker.Team
					for _,plr in pairs(Players:GetPlayers()) do
						if plr.Team ~= team then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["team"] = function(speaker)
					local returns = {}
					local team = speaker.Team
					for _,plr in pairs(Players:GetPlayers()) do
						if plr.Team == team then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["nonteam"] = function(speaker)
					local returns = {}
					local team = speaker.Team
					for _,plr in pairs(Players:GetPlayers()) do
						if plr.Team ~= team then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["friends"] = function(speaker,args)
					local returns = {}
					for _,plr in pairs(Players:GetPlayers()) do
						if plr:IsFriendsWith(speaker.UserId) and plr ~= speaker then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["nonfriends"] = function(speaker,args)
					local returns = {}
					for _,plr in pairs(Players:GetPlayers()) do
						if not plr:IsFriendsWith(speaker.UserId) and plr ~= speaker then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["guests"] = function(speaker,args)
					local returns = {}
					for _,plr in pairs(Players:GetPlayers()) do
						if plr.Guest then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["bacons"] = function(speaker,args)
					local returns = {}
					for _,plr in pairs(Players:GetPlayers()) do
						if plr.Character:FindFirstChild('Pal Hair') or plr.Character:FindFirstChild('Kate Hair') then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["age(%d+)"] = function(speaker,args)
					local returns = {}
					local age = tonumber(args[1])
					if not age == nil then return end
					for _,plr in pairs(Players:GetPlayers()) do
						if plr.AccountAge <= age then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["nearest"] = function(speaker,args,currentList)
					local speakerChar = speaker.Character
					if not speakerChar or not getRoot(speakerChar) then return end
					local lowest = math.huge
					local NearestPlayer = nil
					for _,plr in pairs(currentList) do
						if plr ~= speaker and plr.Character then
							local distance = plr:DistanceFromCharacter(getRoot(speakerChar).Position)
							if distance < lowest then
								lowest = distance
								NearestPlayer = {plr}
							end
						end
					end
					return NearestPlayer
				end,
				["farthest"] = function(speaker,args,currentList)
					local speakerChar = speaker.Character
					if not speakerChar or not getRoot(speakerChar) then return end
					local highest = 0
					local Farthest = nil
					for _,plr in pairs(currentList) do
						if plr ~= speaker and plr.Character then
							local distance = plr:DistanceFromCharacter(getRoot(speakerChar).Position)
							if distance > highest then
								highest = distance
								Farthest = {plr}
							end
						end
					end
					return Farthest
				end,
				["group(%d+)"] = function(speaker,args)
					local returns = {}
					local groupID = tonumber(args[1])
					for _,plr in pairs(Players:GetPlayers()) do
						if plr:IsInGroup(groupID) then  
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["alive"] = function(speaker,args)
					local returns = {}
					for _,plr in pairs(Players:GetPlayers()) do
						if plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["dead"] = function(speaker,args)
					local returns = {}
					for _,plr in pairs(Players:GetPlayers()) do
						if (not plr.Character or not plr.Character:FindFirstChildOfClass("Humanoid")) or plr.Character:FindFirstChildOfClass("Humanoid").Health <= 0 then
							table.insert(returns,plr)
						end
					end
					return returns
				end,
				["rad(%d+)"] = function(speaker,args)
					local returns = {}
					local radius = tonumber(args[1])
					local speakerChar = speaker.Character
					if not speakerChar or not getRoot(speakerChar) then return end
					for _,plr in pairs(Players:GetPlayers()) do
						if plr.Character and getRoot(plr.Character) then
							local magnitude = (getRoot(plr.Character).Position-getRoot(speakerChar).Position).magnitude
							if magnitude <= radius then table.insert(returns,plr) end
						end
					end
					return returns
				end,
				["cursor"] = function(speaker)
					local plrs = {}
					local v = GetClosestPlayerFromCursor()
					if v ~= nil then table.insert(plrs, v) end
					return plrs
				end,
			    ["npcs"] = function(speaker,args)
					local returns = {}
				  for _, v in pairs(workspace:GetDescendants()) do
					if v:IsA("Model") and getRoot(v) and v:FindFirstChildWhichIsA("Humanoid") and Players:GetPlayerFromCharacter(v) == nil then
					    local clone = Instance.new("Player")
					    clone.Name = v.Name .. " - " .. v:FindFirstChildWhichIsA("Humanoid").DisplayName
					    clone.Character = v
					    table.insert(returns, clone)
					end
				  end
					return returns
				end,
			}
			
			function toTokens(str)
				local tokens = {}
				for op,name in string.gmatch(str,"([+-])([^+-]+)") do
					table.insert(tokens,{Operator = op,Name = name})
				end
				return tokens
			end
			
			function onlyIncludeInTable(tab,matches)
				local matchTable = {}
				local resultTable = {}
				for i,v in pairs(matches) do matchTable[v.Name] = true end
				for i,v in pairs(tab) do if matchTable[v.Name] then table.insert(resultTable,v) end end
				return resultTable
			end
			
			function removeTableMatches(tab,matches)
				local matchTable = {}
				local resultTable = {}
				for i,v in pairs(matches) do matchTable[v.Name] = true end
				for i,v in pairs(tab) do if not matchTable[v.Name] then table.insert(resultTable,v) end end
				return resultTable
			end
			
			function getPlayersByName(Name)
				local Name,Len,Found = string.lower(Name),#Name,{}
				for _,v in pairs(Players:GetPlayers()) do
					if Name:sub(0,1) == '@' then
						if string.sub(string.lower(v.Name),1,Len-1) == Name:sub(2) then
							table.insert(Found,v)
						end
					else
						if string.sub(string.lower(v.Name),1,Len) == Name or string.sub(string.lower(v.DisplayName),1,Len) == Name then
							table.insert(Found,v)
						end
					end
				end
				return Found
			end
			
			function getPlayer(list,speaker)
				if list == nil then return {speaker.Name} end
				local nameList = splitString(list,",")
			
				local foundList = {}
			
				for _,name in pairs(nameList) do
					if string.sub(name,1,1) ~= "+" and string.sub(name,1,1) ~= "-" then name = "+"..name end
					local tokens = toTokens(name)
					local initialPlayers = Players:GetPlayers()
			
					for i,v in pairs(tokens) do
						if v.Operator == "+" then
							local tokenContent = v.Name
							local foundCase = false
							for regex,case in pairs(SpecialPlayerCases) do
								local matches = {string.match(tokenContent,"^"..regex.."$")}
								if #matches > 0 then
									foundCase = true
									initialPlayers = onlyIncludeInTable(initialPlayers,case(speaker,matches,initialPlayers))
								end
							end
							if not foundCase then
								initialPlayers = onlyIncludeInTable(initialPlayers,getPlayersByName(tokenContent))
							end
						else
							local tokenContent = v.Name
							local foundCase = false
							for regex,case in pairs(SpecialPlayerCases) do
								local matches = {string.match(tokenContent,"^"..regex.."$")}
								if #matches > 0 then
									foundCase = true
									initialPlayers = removeTableMatches(initialPlayers,case(speaker,matches,initialPlayers))
								end
							end
							if not foundCase then
								initialPlayers = removeTableMatches(initialPlayers,getPlayersByName(tokenContent))
							end
						end
					end
			
					for i,v in pairs(initialPlayers) do table.insert(foundList,v) end
				end
			
				local foundNames = {}
				for i,v in pairs(foundList) do table.insert(foundNames,v.Name) end
			
				return foundNames
			end
			
			getprfx=function(strn)
				if strn:sub(1,string.len(prefix))==prefix then return{'cmd',string.len(prefix)+1}
				end return
			end
			
			function do_exec(str, plr)
				str = str:gsub('/e ', '')
				local t = getprfx(str)
				if not t then return end
				str = str:sub(t[2])
				if t[1]=='cmd' then
					execCmd(str, plr, true)
					IndexContents('',true,false,true)
					CMDsF.CanvasPosition = canvasPos
				end
			end
			
			lastTextBoxString,lastTextBoxCon,lastEnteredString = nil,nil,nil
			
			UserInputService.TextBoxFocused:Connect(function(obj)
				if lastTextBoxCon then lastTextBoxCon:Disconnect() end
				if obj == Cmdbar then lastTextBoxString = nil return end
				lastTextBoxString = obj.Text
				lastTextBoxCon = obj:GetPropertyChangedSignal("Text"):Connect(function()
					if not (UserInputService:IsKeyDown(Enum.KeyCode.Return) or UserInputService:IsKeyDown(Enum.KeyCode.KeypadEnter)) then
						lastTextBoxString = obj.Text
					end
				end)
			end)
			
			UserInputService.InputBegan:Connect(function(input,gameProcessed)
				if gameProcessed then
					if Cmdbar and Cmdbar:IsFocused() then
						if input.KeyCode == Enum.KeyCode.Up then
							historyCount = historyCount + 1
							if historyCount > #cmdHistory then historyCount = #cmdHistory end
							Cmdbar.Text = cmdHistory[historyCount] or ""
							Cmdbar.CursorPosition = 1020
						elseif input.KeyCode == Enum.KeyCode.Down then
							historyCount = historyCount - 1
							if historyCount < 0 then historyCount = 0 end
							Cmdbar.Text = cmdHistory[historyCount] or ""
							Cmdbar.CursorPosition = 1020
						end
					elseif input.KeyCode == Enum.KeyCode.Return or input.KeyCode == Enum.KeyCode.KeypadEnter then
						lastEnteredString = lastTextBoxString
					end
				end
			end)
			
			Players.LocalPlayer.Chatted:Connect(function()
				wait()
				if lastEnteredString then
					local message = lastEnteredString
					lastEnteredString = nil
					do_exec(message, Players.LocalPlayer)
				end
			end)
			
			Cmdbar.PlaceholderText = "Command Bar ("..prefix..")"
			Cmdbar:GetPropertyChangedSignal("Text"):Connect(function()
				if Cmdbar:IsFocused() then
					IndexContents(Cmdbar.Text,true,true)
				end
			end)
			
			local tabComplete = nil
			tabAllowed = true
			Cmdbar.FocusLost:Connect(function(enterpressed)
				if enterpressed then
					local cmdbarText = Cmdbar.Text:gsub("^"..prefix,"")
					execCmd(cmdbarText,Players.LocalPlayer,true)
				end
				if tabComplete then tabComplete:Disconnect() end
				wait()
				if not Cmdbar:IsFocused() then
					Cmdbar.Text = ""
					IndexContents('',true,false,true)
					if SettingsOpen == true then
						wait(0.2)
						Settings:TweenPosition(UDim2.new(0, 0, 0, 45), "InOut", "Quart", 0.2, true, nil)
						CMDsF.Visible = false
					end
				end
				CMDsF.CanvasPosition = canvasPos
			end)
			
			Cmdbar.Focused:Connect(function()
				historyCount = 0
				canvasPos = CMDsF.CanvasPosition
				if SettingsOpen == true then
					wait(0.2)
					CMDsF.Visible = true
					Settings:TweenPosition(UDim2.new(0, 0, 0, 220), "InOut", "Quart", 0.2, true, nil)
				end
				tabComplete = UserInputService.InputBegan:Connect(function(input,gameProcessed)
					if Cmdbar:IsFocused() then
						if tabAllowed == true and input.KeyCode == Enum.KeyCode.Tab and topCommand ~= nil then
							autoComplete(topCommand)
						end
					else
						tabComplete:Disconnect()
					end
				end)
			end)
			
			ESPenabled = false
			CHMSenabled = false
			
			function round(num, numDecimalPlaces)
				local mult = 10^(numDecimalPlaces or 0)
				return math.floor(num * mult + 0.5) / mult
			end
			
			function ESP(plr)
				task.spawn(function()
					for i,v in pairs(COREGUI:GetChildren()) do
						if v.Name == plr.Name..'_ESP' then
							v:Destroy()
						end
					end
					wait()
					if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI:FindFirstChild(plr.Name..'_ESP') then
						local ESPholder = Instance.new("Folder")
						ESPholder.Name = plr.Name..'_ESP'
						ESPholder.Parent = COREGUI
						repeat wait(1) until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
						for b,n in pairs (plr.Character:GetChildren()) do
							if (n:IsA("BasePart")) then
								local a = Instance.new("BoxHandleAdornment")
								a.Name = plr.Name
								a.Parent = ESPholder
								a.Adornee = n
								a.AlwaysOnTop = true
								a.ZIndex = 10
								a.Size = n.Size
								a.Transparency = espTransparency
								a.Color = plr.TeamColor
							end
						end
						if plr.Character and plr.Character:FindFirstChild('Head') then
							local BillboardGui = Instance.new("BillboardGui")
							local TextLabel = Instance.new("TextLabel")
							BillboardGui.Adornee = plr.Character.Head
							BillboardGui.Name = plr.Name
							BillboardGui.Parent = ESPholder
							BillboardGui.Size = UDim2.new(0, 100, 0, 150)
							BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
							BillboardGui.AlwaysOnTop = true
							TextLabel.Parent = BillboardGui
							TextLabel.BackgroundTransparency = 1
							TextLabel.Position = UDim2.new(0, 0, 0, -50)
							TextLabel.Size = UDim2.new(0, 100, 0, 100)
							TextLabel.Font = Enum.Font.SourceSansSemibold
							TextLabel.TextSize = 20
							TextLabel.TextColor3 = Color3.new(1, 1, 1)
							TextLabel.TextStrokeTransparency = 0
							TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
							TextLabel.Text = 'Name: '..plr.Name
							TextLabel.ZIndex = 10
							local espLoopFunc
							local teamChange
							local addedFunc
							addedFunc = plr.CharacterAdded:Connect(function()
								if ESPenabled then
									espLoopFunc:Disconnect()
									teamChange:Disconnect()
									ESPholder:Destroy()
									repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
									ESP(plr)
									addedFunc:Disconnect()
								else
									teamChange:Disconnect()
									addedFunc:Disconnect()
								end
							end)
							teamChange = plr:GetPropertyChangedSignal("TeamColor"):Connect(function()
								if ESPenabled then
									espLoopFunc:Disconnect()
									addedFunc:Disconnect()
									ESPholder:Destroy()
									repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
									ESP(plr)
									teamChange:Disconnect()
								else
									teamChange:Disconnect()
								end
							end)
							local function espLoop()
								if COREGUI:FindFirstChild(plr.Name..'_ESP') then
									if plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid") and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
										local pos = math.floor((getRoot(Players.LocalPlayer.Character).Position - getRoot(plr.Character).Position).magnitude)
										TextLabel.Text = 'Name: '..plr.Name..' | Health: '..round(plr.Character:FindFirstChildOfClass('Humanoid').Health, 1)..' | Studs: '..pos
									end
								else
									teamChange:Disconnect()
									addedFunc:Disconnect()
									espLoopFunc:Disconnect()
								end
							end
							espLoopFunc = RunService.RenderStepped:Connect(espLoop)
						end
					end
				end)
			end
			
			function CHMS(plr)
				task.spawn(function()
					for i,v in pairs(COREGUI:GetChildren()) do
						if v.Name == plr.Name..'_CHMS' then
							v:Destroy()
						end
					end
					wait()
					if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI:FindFirstChild(plr.Name..'_CHMS') then
						local ESPholder = Instance.new("Folder")
						ESPholder.Name = plr.Name..'_CHMS'
						ESPholder.Parent = COREGUI
						repeat wait(1) until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
						for b,n in pairs (plr.Character:GetChildren()) do
							if (n:IsA("BasePart")) then
								local a = Instance.new("BoxHandleAdornment")
								a.Name = plr.Name
								a.Parent = ESPholder
								a.Adornee = n
								a.AlwaysOnTop = true
								a.ZIndex = 10
								a.Size = n.Size
								a.Transparency = espTransparency
								a.Color = plr.TeamColor
							end
						end
						local addedFunc
						local teamChange
						local CHMSremoved
						addedFunc = plr.CharacterAdded:Connect(function()
							if CHMSenabled then
								ESPholder:Destroy()
								teamChange:Disconnect()
								repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
								CHMS(plr)
								addedFunc:Disconnect()
							else
								teamChange:Disconnect()
								addedFunc:Disconnect()
							end
						end)
						teamChange = plr:GetPropertyChangedSignal("TeamColor"):Connect(function()
							if CHMSenabled then
								ESPholder:Destroy()
								addedFunc:Disconnect()
								repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
								CHMS(plr)
								teamChange:Disconnect()
							else
								teamChange:Disconnect()
							end
						end)
						CHMSremoved = ESPholder.AncestryChanged:Connect(function()
							teamChange:Disconnect()
							addedFunc:Disconnect()
							CHMSremoved:Disconnect()
						end)
					end
				end)
			end
			
			function Locate(plr)
				task.spawn(function()
					for i,v in pairs(COREGUI:GetChildren()) do
						if v.Name == plr.Name..'_LC' then
							v:Destroy()
						end
					end
					wait()
					if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI:FindFirstChild(plr.Name..'_LC') then
						local ESPholder = Instance.new("Folder")
						ESPholder.Name = plr.Name..'_LC'
						ESPholder.Parent = COREGUI
						repeat wait(1) until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
						for b,n in pairs (plr.Character:GetChildren()) do
							if (n:IsA("BasePart")) then
								local a = Instance.new("BoxHandleAdornment")
								a.Name = plr.Name
								a.Parent = ESPholder
								a.Adornee = n
								a.AlwaysOnTop = true
								a.ZIndex = 10
								a.Size = n.Size
								a.Transparency = espTransparency
								a.Color = plr.TeamColor
							end
						end
						if plr.Character and plr.Character:FindFirstChild('Head') then
							local BillboardGui = Instance.new("BillboardGui")
							local TextLabel = Instance.new("TextLabel")
							BillboardGui.Adornee = plr.Character.Head
							BillboardGui.Name = plr.Name
							BillboardGui.Parent = ESPholder
							BillboardGui.Size = UDim2.new(0, 100, 0, 150)
							BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
							BillboardGui.AlwaysOnTop = true
							TextLabel.Parent = BillboardGui
							TextLabel.BackgroundTransparency = 1
							TextLabel.Position = UDim2.new(0, 0, 0, -50)
							TextLabel.Size = UDim2.new(0, 100, 0, 100)
							TextLabel.Font = Enum.Font.SourceSansSemibold
							TextLabel.TextSize = 20
							TextLabel.TextColor3 = Color3.new(1, 1, 1)
							TextLabel.TextStrokeTransparency = 0
							TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
							TextLabel.Text = 'Name: '..plr.Name
							TextLabel.ZIndex = 10
							local lcLoopFunc
							local addedFunc
							local teamChange
							addedFunc = plr.CharacterAdded:Connect(function()
								if ESPholder ~= nil and ESPholder.Parent ~= nil then
									lcLoopFunc:Disconnect()
									teamChange:Disconnect()
									ESPholder:Destroy()
									repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
									Locate(plr)
									addedFunc:Disconnect()
								else
									teamChange:Disconnect()
									addedFunc:Disconnect()
								end
							end)
							teamChange = plr:GetPropertyChangedSignal("TeamColor"):Connect(function()
								if ESPholder ~= nil and ESPholder.Parent ~= nil then
									lcLoopFunc:Disconnect()
									addedFunc:Disconnect()
									ESPholder:Destroy()
									repeat wait(1) until getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")
									Locate(plr)
									teamChange:Disconnect()
								else
									teamChange:Disconnect()
								end
							end)
							local function lcLoop()
								if COREGUI:FindFirstChild(plr.Name..'_LC') then
									if plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid") and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
										local pos = math.floor((getRoot(Players.LocalPlayer.Character).Position - getRoot(plr.Character).Position).magnitude)
										TextLabel.Text = 'Name: '..plr.Name..' | Health: '..round(plr.Character:FindFirstChildOfClass('Humanoid').Health, 1)..' | Studs: '..pos
									end
								else
									teamChange:Disconnect()
									addedFunc:Disconnect()
									lcLoopFunc:Disconnect()
								end
							end
							lcLoopFunc = RunService.RenderStepped:Connect(lcLoop)
						end
					end
				end)
			end
			
			local bindsGUI = KeybindEditor
			local awaitingInput = false
			local keySelected = false
			
			function refreshbinds()
				if Holder_2 then
					Holder_2:ClearAllChildren()
					Holder_2.CanvasSize = UDim2.new(0, 0, 0, 10)
					for i = 1, #binds do
						local YSize = 25
						local Position = ((i * YSize) - YSize)
						local newbind = Example_2:Clone()
						newbind.Parent = Holder_2
						newbind.Visible = true
						newbind.Position = UDim2.new(0,0,0, Position + 5)
						table.insert(shade2,newbind)
						table.insert(shade2,newbind.Text)
						table.insert(text1,newbind.Text)
						table.insert(shade3,newbind.Text.Delete)
						table.insert(text2,newbind.Text.Delete)
						local input = tostring(binds[i].KEY)
						local key
						if input == 'RightClick' or input == 'LeftClick' then
							key = input
						else
							key = input:sub(14)
						end
						if binds[i].TOGGLE then
							newbind.Text.Text = key.." > "..binds[i].COMMAND.." / "..binds[i].TOGGLE
						else
							newbind.Text.Text = key.." > "..binds[i].COMMAND.."  "..(binds[i].ISKEYUP and "(keyup)" or "(keydown)")
						end
						Holder_2.CanvasSize = UDim2.new(0,0,0, Position + 30)
						newbind.Text.Delete.MouseButton1Click:Connect(function()
							unkeybind(binds[i].COMMAND,binds[i].KEY)
						end)
					end
				end
			end
			
			refreshbinds()
			
			toggleOn = {}
			
			function unkeybind(cmd,key)
				for i = #binds,1,-1 do
					if binds[i].COMMAND == cmd and binds[i].KEY == key then
						toggleOn[binds[i]] = nil
						table.remove(binds, i)
					end
				end
				refreshbinds()
				updatesaves()
				if key == 'RightClick' or key == 'LeftClick' then
					notify('Keybinds Updated','Unbinded '..key..' from '..cmd)
				else
					notify('Keybinds Updated','Unbinded '..key:sub(14)..' from '..cmd)
				end
			end
			
			PositionsFrame.Delete.MouseButton1Click:Connect(function()
				execCmd('cpos')
			end)
			
			function refreshwaypoints()
				if #WayPoints > 0 or #pWayPoints > 0 then
					PositionsHint:Destroy()
				end
				if Holder_4 then
					Holder_4:ClearAllChildren()
					Holder_4.CanvasSize = UDim2.new(0, 0, 0, 10)
					local YSize = 25
					local num = 1
					for i = 1, #WayPoints do
						local Position = ((num * YSize) - YSize)
						local newpoint = Example_4:Clone()
						newpoint.Parent = Holder_4
						newpoint.Visible = true
						newpoint.Position = UDim2.new(0,0,0, Position + 5)
						newpoint.Text.Text = WayPoints[i].NAME
						table.insert(shade2,newpoint)
						table.insert(shade2,newpoint.Text)
						table.insert(text1,newpoint.Text)
						table.insert(shade3,newpoint.Text.Delete)
						table.insert(text2,newpoint.Text.Delete)
						table.insert(shade3,newpoint.Text.TP)
						table.insert(text2,newpoint.Text.TP)
						Holder_4.CanvasSize = UDim2.new(0,0,0, Position + 30)
						newpoint.Text.Delete.MouseButton1Click:Connect(function()
							execCmd('dpos '..WayPoints[i].NAME)
						end)
						newpoint.Text.TP.MouseButton1Click:Connect(function()
							execCmd("loadpos "..WayPoints[i].NAME)
						end)
						num = num+1
					end
					for i = 1, #pWayPoints do
						local Position = ((num * YSize) - YSize)
						local newpoint = Example_4:Clone()
						newpoint.Parent = Holder_4
						newpoint.Visible = true
						newpoint.Position = UDim2.new(0,0,0, Position + 5)
						newpoint.Text.Text = pWayPoints[i].NAME
						table.insert(shade2,newpoint)
						table.insert(shade2,newpoint.Text)
						table.insert(text1,newpoint.Text)
						table.insert(shade3,newpoint.Text.Delete)
						table.insert(text2,newpoint.Text.Delete)
						table.insert(shade3,newpoint.Text.TP)
						table.insert(text2,newpoint.Text.TP)
						Holder_4.CanvasSize = UDim2.new(0,0,0, Position + 30)
						newpoint.Text.Delete.MouseButton1Click:Connect(function()
							execCmd('dpos '..pWayPoints[i].NAME)
						end)
						newpoint.Text.TP.MouseButton1Click:Connect(function()
							execCmd("loadpos "..pWayPoints[i].NAME)
						end)
						num = num+1
					end
				end
			end
			
			refreshwaypoints()
			
			function refreshaliases()
				if #aliases > 0 then
					AliasHint:Destroy()
				end
				if Holder_3 then
					Holder_3:ClearAllChildren()
					Holder_3.CanvasSize = UDim2.new(0, 0, 0, 10)
					for i = 1, #aliases do
						local YSize = 25
						local Position = ((i * YSize) - YSize)
						local newalias = Example_3:Clone()
						newalias.Parent = Holder_3
						newalias.Visible = true
						newalias.Position = UDim2.new(0,0,0, Position + 5)
						newalias.Text.Text = aliases[i].CMD.." > "..aliases[i].ALIAS
						table.insert(shade2,newalias)
						table.insert(shade2,newalias.Text)
						table.insert(text1,newalias.Text)
						table.insert(shade3,newalias.Text.Delete)
						table.insert(text2,newalias.Text.Delete)
						Holder_3.CanvasSize = UDim2.new(0,0,0, Position + 30)
						newalias.Text.Delete.MouseButton1Click:Connect(function()
							execCmd('removealias '..aliases[i].ALIAS)
						end)
					end
				end
			end
			
			local bindChosenKeyUp = false
			
			BindTo.MouseButton1Click:Connect(function()
				awaitingInput = true
				BindTo.Text = 'Press something'
			end)
			
			BindTriggerSelect.MouseButton1Click:Connect(function()
				bindChosenKeyUp = not bindChosenKeyUp
				BindTriggerSelect.Text = bindChosenKeyUp and "KeyUp" or "KeyDown"
			end)
			
			newToggle = false
			Cmdbar_3.Parent.Visible = false
			On_2.MouseButton1Click:Connect(function()
				if newToggle == false then newToggle = true
					On_2.BackgroundTransparency = 0
					Cmdbar_3.Parent.Visible = true
					BindTriggerSelect.Visible = false
				else newToggle = false
					On_2.BackgroundTransparency = 1
					Cmdbar_3.Parent.Visible = false
					BindTriggerSelect.Visible = true
				end
			end)
			
			Add_2.MouseButton1Click:Connect(function()
				if keySelected then
					if string.find(Cmdbar_2.Text, "\\\\") or string.find(Cmdbar_3.Text, "\\\\") then
						notify('Keybind Error','Only use one backslash to keybind multiple commands into one keybind or command')
					else
						if newToggle and Cmdbar_3.Text ~= '' and Cmdbar_2.text ~= '' then
							addbind(Cmdbar_2.Text,keyPressed,false,Cmdbar_3.Text)
						elseif not newToggle and Cmdbar_2.text ~= '' then
							addbind(Cmdbar_2.Text,keyPressed,bindChosenKeyUp)
						else
							return
						end
						refreshbinds()
						updatesaves()
						if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
							notify('Keybinds Updated','Binded '..keyPressed..' to '..Cmdbar_2.Text..(newToggle and " / "..Cmdbar_3.Text or ""))
						else
							notify('Keybinds Updated','Binded '..keyPressed:sub(14)..' to '..Cmdbar_2.Text..(newToggle and " / "..Cmdbar_3.Text or ""))
						end
					end
				end
			end)
			
			Exit_2.MouseButton1Click:Connect(function()
				Cmdbar_2.Text = 'Command'
				Cmdbar_3.Text = 'Command 2'
				BindTo.Text = 'Click to bind'
				bindChosenKeyUp = false
				BindTriggerSelect.Text = "KeyDown"
				keySelected = false
				KeybindEditor:TweenPosition(UDim2.new(0.5, -180, 0, -500), "InOut", "Quart", 0.5, true, nil)
			end)
			
			function onInputBegan(input,gameProcessed)
				if awaitingInput then
					if input.UserInputType == Enum.UserInputType.Keyboard then
						keyPressed = tostring(input.KeyCode)
						BindTo.Text = keyPressed:sub(14)
					elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
						keyPressed = 'LeftClick'
						BindTo.Text = 'LeftClick'
					elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
						keyPressed = 'RightClick'
						BindTo.Text = 'RightClick'
					end
					awaitingInput = false
					keySelected = true
				end
				if not gameProcessed and #binds > 0 then
					for i,v in pairs(binds) do
						if not v.ISKEYUP then
							if (input.UserInputType == Enum.UserInputType.Keyboard and v.KEY:lower()==tostring(input.KeyCode):lower()) or (input.UserInputType == Enum.UserInputType.MouseButton1 and v.KEY:lower()=='leftclick') or (input.UserInputType == Enum.UserInputType.MouseButton2 and v.KEY:lower()=='rightclick') then
								if v.TOGGLE then
									local isOn = toggleOn[v] == true
									toggleOn[v] = not isOn
									if isOn then
										execCmd(v.TOGGLE,Players.LocalPlayer)
									else
										execCmd(v.COMMAND,Players.LocalPlayer)
									end
								else
									execCmd(v.COMMAND,Players.LocalPlayer)
								end
							end
						end
					end
				end
			end
			
			function onInputEnded(input,gameProcessed)
				if not gameProcessed and #binds > 0 then
					for i,v in pairs(binds) do
						if v.ISKEYUP then
							if (input.UserInputType == Enum.UserInputType.Keyboard and v.KEY:lower()==tostring(input.KeyCode):lower()) or (input.UserInputType == Enum.UserInputType.MouseButton1 and v.KEY:lower()=='leftclick') or (input.UserInputType == Enum.UserInputType.MouseButton2 and v.KEY:lower()=='rightclick') then
								execCmd(v.COMMAND,Players.LocalPlayer)
							end
						end
					end
				end
			end
			
			UserInputService.InputBegan:Connect(onInputBegan)
			UserInputService.InputEnded:Connect(onInputEnded)
			
			ClickTP.Select.MouseButton1Click:Connect(function()
				if keySelected then
					addbind('clicktp',keyPressed,bindChosenKeyUp)
					refreshbinds()
					updatesaves()
					if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
						notify('Keybinds Updated','Binded '..keyPressed..' to click tp')
					else
						notify('Keybinds Updated','Binded '..keyPressed:sub(14)..' to click tp')
					end
				end
			end)
			
			ClickDelete.Select.MouseButton1Click:Connect(function()
				if keySelected then
					addbind('clickdel',keyPressed,bindChosenKeyUp)
					refreshbinds()
					updatesaves()
					if keyPressed == 'RightClick' or keyPressed == 'LeftClick' then
						notify('Keybinds Updated','Binded '..keyPressed..' to click delete')
					else
						notify('Keybinds Updated','Binded '..keyPressed:sub(14)..' to click delete')
					end
				end
			end)
			
			local function clicktpFunc()
				pcall(function()
					local character = Players.LocalPlayer.Character
					local humanoid = character:FindFirstChildOfClass("Humanoid")
					if humanoid and humanoid.SeatPart then
						humanoid.Sit = false
						wait(0.1)
					end
					
					local hipHeight = humanoid and humanoid.HipHeight > 0 and (humanoid.HipHeight + 1)
					local rootPart = getRoot(character)
					local rootPartPosition = rootPart.Position
					local hitPosition = IYMouse.Hit.Position
					local newCFrame = CFrame.new(
						hitPosition, 
						Vector3.new(rootPartPosition.X, hitPosition.Y, rootPartPosition.Z)
					) * CFrame.Angles(0, math.pi, 0)
			
					rootPart.CFrame = newCFrame + Vector3.new(0, hipHeight or 4, 0)
				end)
			end
			
			IYMouse.Button1Down:Connect(function()
				for i,v in pairs(binds) do
					if v.COMMAND == 'clicktp' then
						local input = v.KEY
						if input == 'RightClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) and Players.LocalPlayer.Character then
							clicktpFunc()
						elseif input == 'LeftClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) and Players.LocalPlayer.Character then
							clicktpFunc()
						elseif UserInputService:IsKeyDown(Enum.KeyCode[input:sub(14)]) and Players.LocalPlayer.Character then
							clicktpFunc()
						end
					elseif v.COMMAND == 'clickdel' then
						local input = v.KEY
						if input == 'RightClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
							pcall(function() IYMouse.Target:Destroy() end)
						elseif input == 'LeftClick' and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
							pcall(function() IYMouse.Target:Destroy() end)
						elseif UserInputService:IsKeyDown(Enum.KeyCode[input:sub(14)]) then
							pcall(function() IYMouse.Target:Destroy() end)
						end
					end
				end
			end)
			
			PluginsGUI = PluginEditor.background
			
			function addPlugin(name)
				if name:lower() == 'plugin file name' or name:lower() == 'iy_fe.iy' or name == 'iy_fe' then
					notify('Plugin Error','Please enter a valid plugin')
				else
					local file
					local fileName
					if name:sub(-3) == '.iy' then
						pcall(function() file = readfile(name) end)
						fileName = name
					else
						pcall(function() file = readfile(name..'.iy') end)
						fileName = name..'.iy'
					end
					if file then
						if not FindInTable(PluginsTable, fileName) then
							table.insert(PluginsTable, fileName)
							LoadPlugin(fileName)
							refreshplugins()
							pcall(eventEditor.Refresh)
						else
							notify('Plugin Error','This plugin is already added')
						end
					else
						notify('Plugin Error','Cannot locate file "'..fileName..'". Is the file in the correct folder?')
					end
				end
			end
			
			function deletePlugin(name)
				local pName = name..'.iy'
				if name:sub(-3) == '.iy' then
					pName = name
				end
				for i = #cmds,1,-1 do
					if cmds[i].PLUGIN == pName then
						table.remove(cmds, i)
					end
				end
				for i,v in pairs(CMDsF:GetChildren()) do
					if v.Name == 'PLUGIN_'..pName then
						v:Destroy()
					end
				end
				for i,v in pairs(PluginsTable) do
					if v == pName then
						table.remove(PluginsTable, i)
						notify('Removed Plugin',pName..' was removed')
					end
				end
				IndexContents('',true)
				refreshplugins()
			end
			
			function refreshplugins(dontSave)
				if #PluginsTable > 0 then
					PluginsHint:Destroy()
				end
				if Holder_5 then
					Holder_5:ClearAllChildren()
					Holder_5.CanvasSize = UDim2.new(0, 0, 0, 10)
					for i,v in pairs(PluginsTable) do
						local pName = v
						local YSize = 25
						local Position = ((i * YSize) - YSize)
						local newplugin = Example_5:Clone()
						newplugin.Parent = Holder_5
						newplugin.Visible = true
						newplugin.Position = UDim2.new(0,0,0, Position + 5)
						newplugin.Text.Text = pName
						table.insert(shade2,newplugin)
						table.insert(shade2,newplugin.Text)
						table.insert(text1,newplugin.Text)
						table.insert(shade3,newplugin.Text.Delete)
						table.insert(text2,newplugin.Text.Delete)
						Holder_5.CanvasSize = UDim2.new(0,0,0, Position + 30)
						newplugin.Text.Delete.MouseButton1Click:Connect(function()
							deletePlugin(pName)
						end)
					end
					if not dontSave then
						updatesaves()
					end
				end
			end
			
			local PluginCache
			function LoadPlugin(val,startup)
				local plugin
			
				function CatchedPluginLoad()
					plugin = loadfile(val)()
				end
			
				function handlePluginError(plerror)
					notify('Plugin Error','An error occurred with the plugin, "'..val..'" and it could not be loaded')
					if FindInTable(PluginsTable,val) then
						for i,v in pairs(PluginsTable) do
							if v == val then
								table.remove(PluginsTable,i)
							end
						end
					end
					updatesaves()
			
					print("Original Error: "..tostring(plerror))
					print("Plugin Error, stack traceback: "..tostring(debug.traceback()))
			
					plugin = nil
			
					return false
				end
			
				xpcall(CatchedPluginLoad, handlePluginError)
			
				if plugin ~= nil then
					if not startup then
						notify('Loaded Plugin',"Name: "..plugin["PluginName"].."\n".."Description: "..plugin["PluginDescription"])
					end
					addcmdtext('',val)
					addcmdtext(string.upper('--'..plugin["PluginName"]),val,plugin["PluginDescription"])
					if plugin["Commands"] then
						for i,v in pairs(plugin["Commands"]) do 
							local cmdExt = ''
							local cmdName = i
							local function handleNames()
								cmdName = i
								if findCmd(cmdName..cmdExt) then
									if isNumber(cmdExt) then
										cmdExt = cmdExt+1
									else
										cmdExt = 1
									end
									handleNames()
								else
									cmdName = cmdName..cmdExt
								end
							end
							handleNames()
							addcmd(cmdName, v["Aliases"], v["Function"], val)
							if v["ListName"] then
								local newName = v.ListName
								local cmdNames = {i,unpack(v.Aliases)}
								for i,v in pairs(cmdNames) do
									newName = newName:gsub(v,v..cmdExt)
								end
								addcmdtext(newName,val,v["Description"])
							else
								addcmdtext(cmdName,val,v["Description"])
							end
						end
					end
					IndexContents('',true)
				elseif plugin == nil then
					plugin = nil
				end
			end
			
			function FindPlugins()
				if PluginsTable ~= nil and type(PluginsTable) == "table" then
					for i,v in pairs(PluginsTable) do
						LoadPlugin(v,true)
					end
					refreshplugins(true)
				end
			end
			
			AddPlugin.MouseButton1Click:Connect(function()
				addPlugin(PluginsGUI.FileName.Text)
			end)
			
			Exit_3.MouseButton1Click:Connect(function()
				PluginEditor:TweenPosition(UDim2.new(0.5, -180, 0, -500), "InOut", "Quart", 0.5, true, nil)
				FileName.Text = 'Plugin File Name'
			end)
			
			Add_3.MouseButton1Click:Connect(function()
				PluginEditor:TweenPosition(UDim2.new(0.5, -180, 0, 310), "InOut", "Quart", 0.5, true, nil)
			end)
			
			Plugins.MouseButton1Click:Connect(function()
				if writefileExploit() then
					PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
					wait(0.5)
					SettingsHolder.Visible = false
				else
					notify('Incompatible Exploit','Your exploit is unable to use plugins (missing read/writefile)')
				end
			end)
			
			Close_4.MouseButton1Click:Connect(function()
				SettingsHolder.Visible = true
				PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
			end)
			
			Players.LocalPlayer.OnTeleport:Connect(function(State)
				if State == Enum.TeleportState.Started then
					if KeepInfYield and queueteleport then
						queueteleport("loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()")
					end
				end
			end)
			
			addcmd('addalias',{},function(args, speaker)
				if #args < 2 then return end
				local cmd = string.lower(args[1])
				local alias = string.lower(args[2])
				for i,v in pairs(cmds) do
					if v.NAME:lower()==cmd or FindInTable(v.ALIAS,cmd) then
						customAlias[alias] = v
						aliases[#aliases + 1] = {CMD = cmd, ALIAS = alias}
						notify('Aliases Modified',"Added "..alias.." as an alias to "..cmd)
						updatesaves()
						refreshaliases()
						break
					end
				end
			end)
			
			addcmd('removealias',{},function(args, speaker)
				if #args < 1 then return end
				local alias = string.lower(args[1])
				if customAlias[alias] then
					local cmd = customAlias[alias].NAME
					customAlias[alias] = nil
					for i = #aliases,1,-1 do
						if aliases[i].ALIAS == tostring(alias) then
							table.remove(aliases, i)
						end
					end
					notify('Aliases Modified',"Removed the alias "..alias.." from "..cmd)
					updatesaves()
					refreshaliases()
				end
			end)
			
			addcmd('clraliases',{},function(args, speaker)
				customAlias = {}
				aliases = {}
				notify('Aliases Modified','Removed all aliases')
				updatesaves()
				refreshaliases()
			end)
			
			addcmd('discord', {'support', 'help'}, function(args, speaker)
				if toClipboard then
					toClipboard('https://discord.com/invite/dYHag43eeU')
					notify('Discord Invite', 'Copied to clipboard!\ndiscord.gg/dYHag43eeU')
				else
					notify('Discord Invite', 'discord.gg/dYHag43eeU')
				end
				if httprequest then
					httprequest({
						Url = 'http://127.0.0.1:6463/rpc?v=1',
						Method = 'POST',
						Headers = {
							['Content-Type'] = 'application/json',
							Origin = 'https://discord.com'
						},
						Body = HttpService:JSONEncode({
							cmd = 'INVITE_BROWSER',
							nonce = HttpService:GenerateGUID(false),
							args = {code = 'dYHag43eeU'}
						})
					})
				end
			end)
			
			addcmd('keepiy', {}, function(args, speaker)
				if queueteleport then
					KeepInfYield = true
					updatesaves()
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing queue_on_teleport)')
				end
			end)
			
			addcmd('unkeepiy', {}, function(args, speaker)
				if queueteleport then
					KeepInfYield = false
					updatesaves()
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing queue_on_teleport)')
				end
			end)
			
			addcmd('toggleunkeepiy', {}, function(args, speaker)
				if queueteleport then
					KeepInfYield = not KeepInfYield
					updatesaves()
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing queue_on_teleport)')
				end
			end)
			
			local canOpenServerinfo = true
			addcmd('serverinfo',{'info','sinfo'},function(args, speaker)
				if not canOpenServerinfo then return end
				canOpenServerinfo = false
				task.spawn(function()
					local FRAME = Instance.new("Frame")
					local shadow = Instance.new("Frame")
					local PopupText = Instance.new("TextLabel")
					local Exit = Instance.new("TextButton")
					local ExitImage = Instance.new("ImageLabel")
					local background = Instance.new("Frame")
					local TextLabel = Instance.new("TextLabel")
					local TextLabel2 = Instance.new("TextLabel")
					local TextLabel3 = Instance.new("TextLabel")
					local Time = Instance.new("TextLabel")
					local appearance = Instance.new("TextLabel")
					local maxplayers = Instance.new("TextLabel")
					local name = Instance.new("TextLabel")
					local placeid = Instance.new("TextLabel")
					local playerid = Instance.new("TextLabel")
					local players = Instance.new("TextLabel")
					local CopyApp = Instance.new("TextButton")
					local CopyPlrID = Instance.new("TextButton")
					local CopyPlcID = Instance.new("TextButton")
			
					FRAME.Name = randomString()
					FRAME.Parent = PARENT
					FRAME.Active = true
					FRAME.BackgroundTransparency = 1
					FRAME.Position = UDim2.new(0.5, -130, 0, -500)
					FRAME.Size = UDim2.new(0, 250, 0, 20)
					FRAME.ZIndex = 10
					dragGUI(FRAME)
			
					shadow.Name = "shadow"
					shadow.Parent = FRAME
					shadow.BackgroundColor3 = currentShade2
					shadow.BorderSizePixel = 0
					shadow.Size = UDim2.new(0, 250, 0, 20)
					shadow.ZIndex = 10
					table.insert(shade2,shadow)
			
					PopupText.Name = "PopupText"
					PopupText.Parent = shadow
					PopupText.BackgroundTransparency = 1
					PopupText.Size = UDim2.new(1, 0, 0.95, 0)
					PopupText.ZIndex = 10
					PopupText.Font = Enum.Font.SourceSans
					PopupText.TextSize = 14
					PopupText.Text = "Server"
					PopupText.TextColor3 = currentText1
					PopupText.TextWrapped = true
					table.insert(text1,PopupText)
			
					Exit.Name = "Exit"
					Exit.Parent = shadow
					Exit.BackgroundTransparency = 1
					Exit.Position = UDim2.new(1, -20, 0, 0)
					Exit.Size = UDim2.new(0, 20, 0, 20)
					Exit.Text = ""
					Exit.ZIndex = 10
			
					ExitImage.Parent = Exit
					ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
					ExitImage.BackgroundTransparency = 1
					ExitImage.Position = UDim2.new(0, 5, 0, 5)
					ExitImage.Size = UDim2.new(0, 10, 0, 10)
					ExitImage.Image = "rbxassetid://5054663650"
					ExitImage.ZIndex = 10
			
					background.Name = "background"
					background.Parent = FRAME
					background.Active = true
					background.BackgroundColor3 = currentShade1
					background.BorderSizePixel = 0
					background.Position = UDim2.new(0, 0, 1, 0)
					background.Size = UDim2.new(0, 250, 0, 250)
					background.ZIndex = 10
					table.insert(shade1,background)
			
					TextLabel.Name = "Text Label"
					TextLabel.Parent = background
					TextLabel.BackgroundTransparency = 1
					TextLabel.BorderSizePixel = 0
					TextLabel.Position = UDim2.new(0, 5, 0, 80)
					TextLabel.Size = UDim2.new(0, 100, 0, 20)
					TextLabel.ZIndex = 10
					TextLabel.Font = Enum.Font.SourceSansLight
					TextLabel.TextSize = 20
					TextLabel.Text = "Run Time:"
					TextLabel.TextColor3 = currentText1
					TextLabel.TextXAlignment = Enum.TextXAlignment.Left
					table.insert(text1,TextLabel)
			
					TextLabel2.Name = "Text Label2"
					TextLabel2.Parent = background
					TextLabel2.BackgroundTransparency = 1
					TextLabel2.BorderSizePixel = 0
					TextLabel2.Position = UDim2.new(0, 5, 0, 130)
					TextLabel2.Size = UDim2.new(0, 100, 0, 20)
					TextLabel2.ZIndex = 10
					TextLabel2.Font = Enum.Font.SourceSansLight
					TextLabel2.TextSize = 20
					TextLabel2.Text = "Statistics:"
					TextLabel2.TextColor3 = currentText1
					TextLabel2.TextXAlignment = Enum.TextXAlignment.Left
					table.insert(text1,TextLabel2)
			
					TextLabel3.Name = "Text Label3"
					TextLabel3.Parent = background
					TextLabel3.BackgroundTransparency = 1
					TextLabel3.BorderSizePixel = 0
					TextLabel3.Position = UDim2.new(0, 5, 0, 10)
					TextLabel3.Size = UDim2.new(0, 100, 0, 20)
					TextLabel3.ZIndex = 10
					TextLabel3.Font = Enum.Font.SourceSansLight
					TextLabel3.TextSize = 20
					TextLabel3.Text = "Local Player:"
					TextLabel3.TextColor3 = currentText1
					TextLabel3.TextXAlignment = Enum.TextXAlignment.Left
					table.insert(text1,TextLabel3)
			
					Time.Name = "Time"
					Time.Parent = background
					Time.BackgroundTransparency = 1
					Time.BorderSizePixel = 0
					Time.Position = UDim2.new(0, 5, 0, 105)
					Time.Size = UDim2.new(0, 100, 0, 20)
					Time.ZIndex = 10
					Time.Font = Enum.Font.SourceSans
					Time.FontSize = Enum.FontSize.Size14
					Time.Text = "LOADING"
					Time.TextColor3 = currentText1
					Time.TextXAlignment = Enum.TextXAlignment.Left
					table.insert(text1,Time)
			
					appearance.Name = "appearance"
					appearance.Parent = background
					appearance.BackgroundTransparency = 1
					appearance.BorderSizePixel = 0
					appearance.Position = UDim2.new(0, 5, 0, 55)
					appearance.Size = UDim2.new(0, 100, 0, 20)
					appearance.ZIndex = 10
					appearance.Font = Enum.Font.SourceSans
					appearance.FontSize = Enum.FontSize.Size14
					appearance.Text = "Appearance: LOADING"
					appearance.TextColor3 = currentText1
					appearance.TextXAlignment = Enum.TextXAlignment.Left
					table.insert(text1,appearance)
			
					maxplayers.Name = "maxplayers"
					maxplayers.Parent = background
					maxplayers.BackgroundTransparency = 1
					maxplayers.BorderSizePixel = 0
					maxplayers.Position = UDim2.new(0, 5, 0, 175)
					maxplayers.Size = UDim2.new(0, 100, 0, 20)
					maxplayers.ZIndex = 10
					maxplayers.Font = Enum.Font.SourceSans
					maxplayers.FontSize = Enum.FontSize.Size14
					maxplayers.Text = "LOADING"
					maxplayers.TextColor3 = currentText1
					maxplayers.TextXAlignment = Enum.TextXAlignment.Left
					table.insert(text1,maxplayers)
			
					name.Name = "name"
					name.Parent = background
					name.BackgroundTransparency = 1
					name.BorderSizePixel = 0
					name.Position = UDim2.new(0, 5, 0, 215)
					name.Size = UDim2.new(0, 240, 0, 30)
					name.ZIndex = 10
					name.Font = Enum.Font.SourceSans
					name.FontSize = Enum.FontSize.Size14
					name.Text = "Place Name: LOADING"
					name.TextColor3 = currentText1
					name.TextWrapped = true
					name.TextXAlignment = Enum.TextXAlignment.Left
					name.TextYAlignment = Enum.TextYAlignment.Top
					table.insert(text1,name)
			
					placeid.Name = "placeid"
					placeid.Parent = background
					placeid.BackgroundTransparency = 1
					placeid.BorderSizePixel = 0
					placeid.Position = UDim2.new(0, 5, 0, 195)
					placeid.Size = UDim2.new(0, 100, 0, 20)
					placeid.ZIndex = 10
					placeid.Font = Enum.Font.SourceSans
					placeid.FontSize = Enum.FontSize.Size14
					placeid.Text = "Place ID: LOADING"
					placeid.TextColor3 = currentText1
					placeid.TextXAlignment = Enum.TextXAlignment.Left
					table.insert(text1,placeid)
			
					playerid.Name = "playerid"
					playerid.Parent = background
					playerid.BackgroundTransparency = 1
					playerid.BorderSizePixel = 0
					playerid.Position = UDim2.new(0, 5, 0, 35)
					playerid.Size = UDim2.new(0, 100, 0, 20)
					playerid.ZIndex = 10
					playerid.Font = Enum.Font.SourceSans
					playerid.FontSize = Enum.FontSize.Size14
					playerid.Text = "Player ID: LOADING"
					playerid.TextColor3 = currentText1
					playerid.TextXAlignment = Enum.TextXAlignment.Left
					table.insert(text1,playerid)
			
					players.Name = "players"
					players.Parent = background
					players.BackgroundTransparency = 1
					players.BorderSizePixel = 0
					players.Position = UDim2.new(0, 5, 0, 155)
					players.Size = UDim2.new(0, 100, 0, 20)
					players.ZIndex = 10
					players.Font = Enum.Font.SourceSans
					players.FontSize = Enum.FontSize.Size14
					players.Text = "LOADING"
					players.TextColor3 = currentText1
					players.TextXAlignment = Enum.TextXAlignment.Left
					table.insert(text1,players)
			
					CopyApp.Name = "CopyApp"
					CopyApp.Parent = background
					CopyApp.BackgroundColor3 = currentShade2
					CopyApp.BorderSizePixel = 0
					CopyApp.Position = UDim2.new(0, 210, 0, 55)
					CopyApp.Size = UDim2.new(0, 35, 0, 20)
					CopyApp.Font = Enum.Font.SourceSans
					CopyApp.TextSize = 14
					CopyApp.Text = "Copy"
					CopyApp.TextColor3 = currentText1
					CopyApp.ZIndex = 10
					table.insert(shade2,CopyApp)
					table.insert(text1,CopyApp)
			
					CopyPlrID.Name = "CopyPlrID"
					CopyPlrID.Parent = background
					CopyPlrID.BackgroundColor3 = currentShade2
					CopyPlrID.BorderSizePixel = 0
					CopyPlrID.Position = UDim2.new(0, 210, 0, 35)
					CopyPlrID.Size = UDim2.new(0, 35, 0, 20)
					CopyPlrID.Font = Enum.Font.SourceSans
					CopyPlrID.TextSize = 14
					CopyPlrID.Text = "Copy"
					CopyPlrID.TextColor3 = currentText1
					CopyPlrID.ZIndex = 10
					table.insert(shade2,CopyPlrID)
					table.insert(text1,CopyPlrID)
			
					CopyPlcID.Name = "CopyPlcID"
					CopyPlcID.Parent = background
					CopyPlcID.BackgroundColor3 = currentShade2
					CopyPlcID.BorderSizePixel = 0
					CopyPlcID.Position = UDim2.new(0, 210, 0, 195)
					CopyPlcID.Size = UDim2.new(0, 35, 0, 20)
					CopyPlcID.Font = Enum.Font.SourceSans
					CopyPlcID.TextSize = 14
					CopyPlcID.Text = "Copy"
					CopyPlcID.TextColor3 = currentText1
					CopyPlcID.ZIndex = 10
					table.insert(shade2,CopyPlcID)
					table.insert(text1,CopyPlcID)
			
					local SINFOGUI = background
					FRAME:TweenPosition(UDim2.new(0.5, -130, 0, 100), "InOut", "Quart", 0.5, true, nil) 
					wait(0.5)
					Exit.MouseButton1Click:Connect(function()
						FRAME:TweenPosition(UDim2.new(0.5, -130, 0, -500), "InOut", "Quart", 0.5, true, nil) 
						wait(0.6)
						FRAME:Destroy()
						canOpenServerinfo = true
					end)
					local Asset = MarketplaceService:GetProductInfo(PlaceId)
					SINFOGUI.name.Text = "Place Name: " .. Asset.Name
					SINFOGUI.playerid.Text = "Player ID: " ..speaker.UserId
					SINFOGUI.maxplayers.Text = Players.MaxPlayers.. " Players Max"
					SINFOGUI.placeid.Text = "Place ID: " ..PlaceId
			
					CopyApp.MouseButton1Click:Connect(function()
						toClipboard(speaker.CharacterAppearanceId)
					end)
					CopyPlrID.MouseButton1Click:Connect(function()
						toClipboard(speaker.UserId)
					end)
					CopyPlcID.MouseButton1Click:Connect(function()
						toClipboard(PlaceId)
					end)
			
					repeat
						players = Players:GetPlayers()
						SINFOGUI.players.Text = #players.. " Player(s)"
						SINFOGUI.appearance.Text = "Appearance: " ..speaker.CharacterAppearanceId
						local seconds = math.floor(workspace.DistributedGameTime)
						local minutes = math.floor(workspace.DistributedGameTime / 60)
						local hours = math.floor(workspace.DistributedGameTime / 60 / 60)
						local seconds = seconds - (minutes * 60)
						local minutes = minutes - (hours * 60)
						if hours < 1 then if minutes < 1 then
								SINFOGUI.Time.Text = seconds .. " Second(s)" else
								SINFOGUI.Time.Text = minutes .. " Minute(s), " .. seconds .. " Second(s)"
							end
						else
							SINFOGUI.Time.Text = hours .. " Hour(s), " .. minutes .. " Minute(s), " .. seconds .. " Second(s)"
						end
						wait(1)
					until SINFOGUI.Parent == nil
				end)
			end)
			
			addcmd('jobid',{},function(args, speaker)
				local jobId = 'Roblox.GameLauncher.joinGameInstance('..PlaceId..', "'..JobId..'")'
				toClipboard(jobId)
			end)
			
			addcmd('notifyjobid',{},function(args, speaker)
				notify('JobId / PlaceId',JobId..' / '..PlaceId)
			end)
			
			addcmd('breakloops',{'break'},function(args, speaker)
				lastBreakTime = tick()
			end)
			
			addcmd('gametp',{'gameteleport'},function(args, speaker)
				TeleportService:Teleport(args[1])
			end)
			
			addcmd('rejoin',{'rj'},function(args, speaker)
				if #Players:GetPlayers() <= 1 then
					Players.LocalPlayer:Kick("\nRejoining...")
					wait()
					TeleportService:Teleport(PlaceId, Players.LocalPlayer)
				else
					TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Players.LocalPlayer)
				end
			end)
			
			addcmd('autorejoin',{'autorj'},function(args, speaker)
				local Dir = COREGUI:FindFirstChild("RobloxPromptGui"):FindFirstChild("promptOverlay")
				Dir.DescendantAdded:Connect(function(Err)
					if Err.Name == "ErrorTitle" then
						Err:GetPropertyChangedSignal("Text"):Connect(function()
							if Err.Text:sub(0, 12) == "Disconnected" then
								if #Players:GetPlayers() <= 1 then
									Players.LocalPlayer:Kick("\nRejoining...")
									wait()
									TeleportService:Teleport(PlaceId, Players.LocalPlayer)
								else
									TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Players.LocalPlayer)
								end
							end
						end)
					end
				end)
				notify('Auto Rejoin','Auto rejoin enabled')
			end)
			
			addcmd('serverhop',{'shop'},function(args, speaker)
				-- thanks to NoobSploit for fixing
				if httprequest then
					local servers = {}
					local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100", PlaceId)})
					local body = HttpService:JSONDecode(req.Body)
					if body and body.data then
						for i, v in next, body.data do
							if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
								table.insert(servers, 1, v.id)
							end
						end
					end
					if #servers > 0 then
						TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
					else
						return notify("Serverhop", "Couldn't find a server.")
					end
				end
			end)
			
			addcmd('joinplayer',{'joinp'},function(args, speaker)
				local retries = 0
				function ToServer(User,Place)	
					if args[2] == nil then Place = PlaceId end
					if not pcall(function()
							local FoundUser, UserId = pcall(function()
								if tonumber(User) then
									return tonumber(User)
								end
			
								return Players:GetUserIdFromNameAsync(User)
							end)
							if not FoundUser then
								notify('Join Error','Username/UserID does not exist')
							else
								notify('Join Player','Loading servers. Hold on a second.')
								local URL2 = ("https://games.roblox.com/v1/games/"..Place.."/servers/Public?sortOrder=Asc&limit=100")
								local Http = HttpService:JSONDecode(game:HttpGet(URL2))
								local GUID
			
								function tablelength(T)
									local count = 0
									for _ in pairs(T) do count = count + 1 end
									return count
								end
			
								for i=1,tonumber(tablelength(Http.data)) do
									for j,k in pairs(Http.data[i].playerIds) do
										if k == UserId then
											GUID = Http.data[i].id
										end
									end
								end
			
								if GUID ~= nil then
									notify('Join Player','Joining '..User)
									TeleportService:TeleportToPlaceInstance(Place,GUID,Players.LocalPlayer)
								else
									notify('Join Error','Unable to join user.')
								end
							end
						end)
					then
						if retries < 3 then
							retries = retries + 1
							print('ERROR retrying '..retries..'/3')
							notify('Join Error','Error while trying to join. Retrying '..retries..'/3.')
							ToServer(User,Place)
						else
							notify('Join Error','Error while trying to join.')
						end
					end
				end
				ToServer(args[1],args[2])
			end)
			
			addcmd('exit',{},function(args, speaker)
				game:shutdown() 
			end)
			
			addcmd('ntool',{},function(args, speaker)
				local script
				do
					local tool = Instance.new("Tool")
					tool.RequiresHandle = false
					tool.CanBeDropped = true
					tool.Name = "Noclip"
					tool.Parent = game.Players.LocalPlayer.Backpack
					local s = Instance.new("LocalScript")
					s.Name = "NoclipScript"
					s.Parent = tool
					script = s
				end
				local UpButton = "Space"
				local DownButton = "LeftControl"
				local SpeedUpButton = "E"
				local SpeedDownButton = "Q"
				local DefaultSpeed = 60
				local RunService = game:GetService("RunService")
				local UserInputService = game:GetService("UserInputService")
				local ContextActionService = game:GetService("ContextActionService")
				local Player = game.Players.LocalPlayer
				local PlayerScripts = Player:WaitForChild("PlayerScripts")
				local PlayerModule = require(PlayerScripts:WaitForChild("PlayerModule"))
				local ControlModule = PlayerModule:GetControls()
				local Equipped = false
				local Speed = type(DefaultSpeed) and DefaultSpeed or 50
				local Connection
				local function OnPress(Name, State, Object)
					if not UserInputService:GetFocusedTextBox() and Equipped then
						if Name == "NoclipSpeedUp" then
							if State == Enum.UserInputState.Begin then
								Speed = Speed + 10
							end
						elseif Name == "NoclipSpeedDown" then
							if State == Enum.UserInputState.Begin then
								Speed = math.max(Speed - 10, 10)
							end
						end
					end
				end
				script.Parent.ToolTip = "Move around like you are playing normally."
				if UpButton and type(UpButton) == "string" and Enum.KeyCode[UpButton] then
					script.Parent.ToolTip = script.Parent.ToolTip .. " Press " .. UpButton .. " to move upwards."
				end
				if DownButton and type(DownButton) == "string" and Enum.KeyCode[DownButton] then
					script.Parent.ToolTip = script.Parent.ToolTip .. " Press " .. UpButton .. " to move downwards."
				end
				if SpeedUpButton and type(SpeedUpButton) == "string" and Enum.KeyCode[SpeedUpButton] then
					ContextActionService:BindAction("NoclipSpeedUp", OnPress, false, Enum.KeyCode[SpeedUpButton])
					script.Parent.ToolTip = script.Parent.ToolTip .. " Press " .. SpeedUpButton .. " to speed up."
				end
				if SpeedDownButton and type(SpeedDownButton) == "string" and Enum.KeyCode[SpeedDownButton] then
					ContextActionService:BindAction("NoclipSpeedDown", OnPress, false, Enum.KeyCode[SpeedDownButton])
					script.Parent.ToolTip = script.Parent.ToolTip .. " Press " .. SpeedDownButton .. " to slow down."
				end
				script.Parent.Equipped:Connect(
					function()
						Equipped = true
						Connection =
							RunService.Heartbeat:Connect(
							function(Step)
								local Character = Player.Character
								if Character then
									local Humanoid = Character:FindFirstChild("Humanoid")
									local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
									local Camera = workspace.CurrentCamera
									if Humanoid then
										Humanoid.PlatformStand = true
									end
									if HumanoidRootPart then
										HumanoidRootPart.Anchored = true
										HumanoidRootPart.Velocity = Vector3.new()
										if Camera then
											local MoveAmount = ControlModule:GetMoveVector() or Vector3.new()
											if not UserInputService:GetFocusedTextBox() then
												if UpButton and type(UpButton) == "string" and Enum.KeyCode[UpButton] then
													if UserInputService:IsKeyDown(Enum.KeyCode[UpButton]) then
														MoveAmount = Vector3.new(MoveAmount.X, 1, MoveAmount.Z)
													end
												end
												if DownButton and type(DownButton) == "string" and Enum.KeyCode[DownButton] then
													if UserInputService:IsKeyDown(Enum.KeyCode[DownButton]) then
														MoveAmount = Vector3.new(MoveAmount.X, MoveAmount.Y - 1, MoveAmount.Z)
													end
												end
											end
											MoveAmount = MoveAmount.Magnitude > 1 and MoveAmount.Unit or MoveAmount
											MoveAmount = MoveAmount * Step * Speed
											HumanoidRootPart.CFrame =
												CFrame.new(
												HumanoidRootPart.Position,
												HumanoidRootPart.Position + Camera.CFrame.LookVector
											) * CFrame.new(MoveAmount)
										end
									end
								end
							end
						)
					end
				)
				script.Parent.Unequipped:Connect(
					function()
						Equipped = false
						local Character = Player.Character
						if Character then
							local Humanoid = Character:FindFirstChild("Humanoid")
							local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
							if Humanoid then
								Humanoid.PlatformStand = false
							end
							if HumanoidRootPart then
								HumanoidRootPart.Anchored = false
							end
						end
						if Connection then
							Connection:Disconnect()
							Connection = nil
						end
					end
				)
			end)
			addcmd('loopntool',{},function(args, speaker)
				pcall(function()
					while task.wait() do
						if not game.Players.LocalPlayer.Backpack:FindFirstChild("Noclip") and not game.Players.LocalPlayer.Character:FindFirstChild("Noclip") then
							local script
							do
								local tool = Instance.new("Tool")
								tool.RequiresHandle = false
								tool.CanBeDropped = true
								tool.Name = "Noclip"
								tool.Parent = game.Players.LocalPlayer.Backpack
								local s = Instance.new("LocalScript")
								s.Name = "NoclipScript"
								s.Parent = tool
								script = s
							end
							local UpButton = "Space"
							local DownButton = "LeftControl"
							local SpeedUpButton = "E"
							local SpeedDownButton = "Q"
							local DefaultSpeed = 60
							local RunService = game:GetService("RunService")
							local UserInputService = game:GetService("UserInputService")
							local ContextActionService = game:GetService("ContextActionService")
							local Player = game.Players.LocalPlayer
							local PlayerScripts = Player:WaitForChild("PlayerScripts")
							local PlayerModule = require(PlayerScripts:WaitForChild("PlayerModule"))
							local ControlModule = PlayerModule:GetControls()
							local Equipped = false
							local Speed = type(DefaultSpeed) and DefaultSpeed or 50
							local Connection
							local function OnPress(Name, State, Object)
								if not UserInputService:GetFocusedTextBox() and Equipped then
									if Name == "NoclipSpeedUp" then
										if State == Enum.UserInputState.Begin then
											Speed = Speed + 10
										end
									elseif Name == "NoclipSpeedDown" then
										if State == Enum.UserInputState.Begin then
											Speed = math.max(Speed - 10, 10)
										end
									end
								end
							end
							script.Parent.ToolTip = "Move around like you are playing normally."
							if UpButton and type(UpButton) == "string" and Enum.KeyCode[UpButton] then
								script.Parent.ToolTip = script.Parent.ToolTip .. " Press " .. UpButton .. " to move upwards."
							end
							if DownButton and type(DownButton) == "string" and Enum.KeyCode[DownButton] then
								script.Parent.ToolTip = script.Parent.ToolTip .. " Press " .. UpButton .. " to move downwards."
							end
							if SpeedUpButton and type(SpeedUpButton) == "string" and Enum.KeyCode[SpeedUpButton] then
								ContextActionService:BindAction("NoclipSpeedUp", OnPress, false, Enum.KeyCode[SpeedUpButton])
								script.Parent.ToolTip = script.Parent.ToolTip .. " Press " .. SpeedUpButton .. " to speed up."
							end
							if SpeedDownButton and type(SpeedDownButton) == "string" and Enum.KeyCode[SpeedDownButton] then
								ContextActionService:BindAction("NoclipSpeedDown", OnPress, false, Enum.KeyCode[SpeedDownButton])
								script.Parent.ToolTip = script.Parent.ToolTip .. " Press " .. SpeedDownButton .. " to slow down."
							end
							script.Parent.Equipped:Connect(
								function()
									Equipped = true
									Connection =
										RunService.Heartbeat:Connect(
										function(Step)
											local Character = Player.Character
											if Character then
												local Humanoid = Character:FindFirstChild("Humanoid")
												local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
												local Camera = workspace.CurrentCamera
												if Humanoid then
													Humanoid.PlatformStand = true
												end
												if HumanoidRootPart then
													HumanoidRootPart.Anchored = true
													HumanoidRootPart.Velocity = Vector3.new()
													if Camera then
														local MoveAmount = ControlModule:GetMoveVector() or Vector3.new()
														if not UserInputService:GetFocusedTextBox() then
															if UpButton and type(UpButton) == "string" and Enum.KeyCode[UpButton] then
																if UserInputService:IsKeyDown(Enum.KeyCode[UpButton]) then
																	MoveAmount = Vector3.new(MoveAmount.X, 1, MoveAmount.Z)
																end
															end
															if DownButton and type(DownButton) == "string" and Enum.KeyCode[DownButton] then
																if UserInputService:IsKeyDown(Enum.KeyCode[DownButton]) then
																	MoveAmount = Vector3.new(MoveAmount.X, MoveAmount.Y - 1, MoveAmount.Z)
																end
															end
														end
														MoveAmount = MoveAmount.Magnitude > 1 and MoveAmount.Unit or MoveAmount
														MoveAmount = MoveAmount * Step * Speed
														HumanoidRootPart.CFrame =
															CFrame.new(
															HumanoidRootPart.Position,
															HumanoidRootPart.Position + Camera.CFrame.LookVector
														) * CFrame.new(MoveAmount)
													end
												end
											end
										end
									)
								end
							)
							script.Parent.Unequipped:Connect(
								function()
									Equipped = false
									local Character = Player.Character
									if Character then
										local Humanoid = Character:FindFirstChild("Humanoid")
										local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
										if Humanoid then
											Humanoid.PlatformStand = false
										end
										if HumanoidRootPart then
											HumanoidRootPart.Anchored = false
										end
									end
									if Connection then
										Connection:Disconnect()
										Connection = nil
									end
								end
							)
						end
					end
				end)
			end)
			
			local Noclipping = nil
			addcmd('noclip',{},function(args, speaker)
				Clip = false
				wait(0.1)
				local function NoclipLoop()
					if Clip == false and speaker.Character ~= nil then
						for _, child in pairs(speaker.Character:GetDescendants()) do
							if child:IsA("BasePart") and child.CanCollide == true and child.Name ~= floatName then
								child.CanCollide = false
							end
						end
					end
				end
				Noclipping = RunService.Stepped:Connect(NoclipLoop)
			end)
			
			addcmd('clip',{'unnoclip'},function(args, speaker)
				if Noclipping then
					Noclipping:Disconnect()
				end
				Clip = true
			end)
			
			addcmd('togglenoclip',{},function(args, speaker)
				if Clip then
					execCmd('noclip')
				else
					execCmd('clip')
				end
			end)
			
			FLYING = false
			QEfly = true
			iyflyspeed = 1
			vehicleflyspeed = 1
			function sFLY(vfly)
				repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
				repeat wait() until IYMouse
				if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
			
				local T = getRoot(Players.LocalPlayer.Character)
				local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
				local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
				local SPEED = 0
			
				local function FLY()
					FLYING = true
					local BG = Instance.new('BodyGyro')
					local BV = Instance.new('BodyVelocity')
					BG.P = 9e4
					BG.Parent = T
					BV.Parent = T
					BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
					BG.cframe = T.CFrame
					BV.velocity = Vector3.new(0, 0, 0)
					BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
					task.spawn(function()
						repeat wait()
							if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
								Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
							end
							if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
								SPEED = 50
							elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
								SPEED = 0
							end
							if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
								BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
								lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
							elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
								BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
							else
								BV.velocity = Vector3.new(0, 0, 0)
							end
							BG.cframe = workspace.CurrentCamera.CoordinateFrame
						until not FLYING
						CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
						lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
						SPEED = 0
						BG:Destroy()
						BV:Destroy()
						if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
							Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
						end
					end)
				end
				flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
					if KEY:lower() == 'w' then
						CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
					elseif KEY:lower() == 's' then
						CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
					elseif KEY:lower() == 'a' then
						CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
					elseif KEY:lower() == 'd' then 
						CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
					elseif QEfly and KEY:lower() == 'e' then
						CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
					elseif QEfly and KEY:lower() == 'q' then
						CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
					end
					pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
				end)
				flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
					if KEY:lower() == 'w' then
						CONTROL.F = 0
					elseif KEY:lower() == 's' then
						CONTROL.B = 0
					elseif KEY:lower() == 'a' then
						CONTROL.L = 0
					elseif KEY:lower() == 'd' then
						CONTROL.R = 0
					elseif KEY:lower() == 'e' then
						CONTROL.Q = 0
					elseif KEY:lower() == 'q' then
						CONTROL.E = 0
					end
				end)
				FLY()
			end
			
			function NOFLY()
				FLYING = false
				if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
				if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
					Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
				end
				pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
			end
			
			local velocityHandlerName = randomString()
			local gyroHandlerName = randomString()
			local mfly1
			local mfly2
			
			local unmobilefly = function(speaker)
				pcall(function()
					FLYING = false
					local root = getRoot(speaker.Character)
					root:FindFirstChild(velocityHandlerName):Destroy()
					root:FindFirstChild(gyroHandlerName):Destroy()
					speaker.Character:FindFirstChildWhichIsA("Humanoid").PlatformStand = false
					mfly1:Disconnect()
					mfly2:Disconnect()
				end)
			end
			
			local mobilefly = function(speaker, vfly)
				unmobilefly(speaker)
				FLYING = true
			
				local root = getRoot(speaker.Character)
				local camera = workspace.CurrentCamera
				local v3none = Vector3.new()
				local v3zero = Vector3.new(0, 0, 0)
				local v3inf = Vector3.new(9e9, 9e9, 9e9)
			
				local controlModule = require(speaker.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
				local bv = Instance.new("BodyVelocity")
				bv.Name = velocityHandlerName
				bv.Parent = root
				bv.MaxForce = v3zero
				bv.Velocity = v3zero
			
				local bg = Instance.new("BodyGyro")
				bg.Name = gyroHandlerName
				bg.Parent = root
				bg.MaxTorque = v3inf
				bg.P = 1000
				bg.D = 50
			
				mfly1 = speaker.CharacterAdded:Connect(function()
					local bv = Instance.new("BodyVelocity")
					bv.Name = velocityHandlerName
					bv.Parent = root
					bv.MaxForce = v3zero
					bv.Velocity = v3zero
			
					local bg = Instance.new("BodyGyro")
					bg.Name = gyroHandlerName
					bg.Parent = root
					bg.MaxTorque = v3inf
					bg.P = 1000
					bg.D = 50
				end)
			
				mfly2 = RunService.RenderStepped:Connect(function()
					root = getRoot(speaker.Character)
					camera = workspace.CurrentCamera
					if speaker.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
						local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
						local VelocityHandler = root:FindFirstChild(velocityHandlerName)
						local GyroHandler = root:FindFirstChild(gyroHandlerName)
			
						VelocityHandler.MaxForce = v3inf
						GyroHandler.MaxTorque = v3inf
						if not vfly then humanoid.PlatformStand = true end
						GyroHandler.CFrame = camera.CoordinateFrame
						VelocityHandler.Velocity = v3none
			
						local direction = controlModule:GetMoveVector()
						if direction.X > 0 then
							VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
						end
						if direction.X < 0 then
							VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
						end
						if direction.Z > 0 then
							VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
						end
						if direction.Z < 0 then
							VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * ((vfly and vehicleflyspeed or iyflyspeed) * 50))
						end
					end
				end)
			end
			
			addcmd('fly',{},function(args, speaker)
				if not IsOnMobile then
					NOFLY()
					wait()
					sFLY()
				else
					mobilefly(speaker)
				end
				if args[1] and isNumber(args[1]) then
					iyflyspeed = args[1]
				end
			end)
			
			addcmd('flyspeed',{'flysp'},function(args, speaker)
				local speed = args[1] or 1
				if isNumber(speed) then
					iyflyspeed = speed
				end
			end)
			
			addcmd('unfly',{'nofly','novfly','unvehiclefly','novehiclefly','unvfly'},function(args, speaker)
				if not IsOnMobile then NOFLY() else unmobilefly(speaker) end
			end)
			
			addcmd('vfly',{'vehiclefly'},function(args, speaker)
				if not IsOnMobile then
					NOFLY()
					wait()
					sFLY(true)
				else
					mobilefly(speaker, true)
				end
				if args[1] and isNumber(args[1]) then
					vehicleflyspeed = args[1]
				end
			end)
			
			addcmd('togglevfly',{},function(args, speaker)
				if FLYING then
					if not IsOnMobile then NOFLY() else unmobilefly(speaker) end
				else
					if not IsOnMobile then sFLY(true) else mobilefly(speaker, true) end
				end
			end)
			
			addcmd('vflyspeed',{'vflysp','vehicleflyspeed','vehicleflysp'},function(args, speaker)
				local speed = args[1] or 1
				if isNumber(speed) then
					vehicleflyspeed = speed
				end
			end)
			
			addcmd('qefly',{'flyqe'},function(args, speaker)
				if args[1] == 'false' then
					QEfly = false
				else
					QEfly = true
				end
			end)
			
			addcmd('togglefly',{},function(args, speaker)
				if FLYING then
					if not IsOnMobile then NOFLY() else unmobilefly(speaker) end
				else
					if not IsOnMobile then sFLY() else mobilefly(speaker) end
				end
			end)
			
			CFspeed = 50
			addcmd('cframefly', {'cfly'}, function(args, speaker)
				-- Full credit to peyton#9148 (apeyton)
				speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
				local Head = speaker.Character:WaitForChild("Head")
				Head.Anchored = true
				if CFloop then CFloop:Disconnect() end
				CFloop = RunService.Heartbeat:Connect(function(deltaTime)
					local moveDirection = speaker.Character:FindFirstChildOfClass('Humanoid').MoveDirection * (CFspeed * deltaTime)
					local headCFrame = Head.CFrame
					local cameraCFrame = workspace.CurrentCamera.CFrame
					local cameraOffset = headCFrame:ToObjectSpace(cameraCFrame).Position
					cameraCFrame = cameraCFrame * CFrame.new(-cameraOffset.X, -cameraOffset.Y, -cameraOffset.Z + 1)
					local cameraPosition = cameraCFrame.Position
					local headPosition = headCFrame.Position
			
					local objectSpaceVelocity = CFrame.new(cameraPosition, Vector3.new(headPosition.X, cameraPosition.Y, headPosition.Z)):VectorToObjectSpace(moveDirection)
					Head.CFrame = CFrame.new(headPosition) * (cameraCFrame - cameraPosition) * CFrame.new(objectSpaceVelocity)
				end)
			end)
			
			addcmd('uncframefly',{'uncfly'},function(args, speaker)
				if CFloop then
					CFloop:Disconnect()
					speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
					local Head = speaker.Character:WaitForChild("Head")
					Head.Anchored = false
				end
			end)
			
			addcmd('cframeflyspeed',{'cflyspeed'},function(args, speaker)
				if isNumber(args[1]) then
					CFspeed = args[1]
				end
			end)
			
			Floating = false
			floatName = randomString()
			addcmd('float', {'platform'},function(args, speaker)
				Floating = true
				local pchar = speaker.Character
				if pchar and not pchar:FindFirstChild(floatName) then
					task.spawn(function()
						local Float = Instance.new('Part')
						Float.Name = floatName
						Float.Parent = pchar
						Float.Transparency = 1
						Float.Size = Vector3.new(2,0.2,1.5)
						Float.Anchored = true
						local FloatValue = -3.1
						Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0,FloatValue,0)
						notify('Float','Float Enabled (Q = down & E = up)')
						qUp = IYMouse.KeyUp:Connect(function(KEY)
							if KEY == 'q' then
								FloatValue = FloatValue + 0.5
							end
						end)
						eUp = IYMouse.KeyUp:Connect(function(KEY)
							if KEY == 'e' then
								FloatValue = FloatValue - 0.5
							end
						end)
						qDown = IYMouse.KeyDown:Connect(function(KEY)
							if KEY == 'q' then
								FloatValue = FloatValue - 0.5
							end
						end)
						eDown = IYMouse.KeyDown:Connect(function(KEY)
							if KEY == 'e' then
								FloatValue = FloatValue + 0.5
							end
						end)
						floatDied = speaker.Character:FindFirstChildOfClass('Humanoid').Died:Connect(function()
							FloatingFunc:Disconnect()
							Float:Destroy()
							qUp:Disconnect()
							eUp:Disconnect()
							qDown:Disconnect()
							eDown:Disconnect()
							floatDied:Disconnect()
						end)
						local function FloatPadLoop()
							if pchar:FindFirstChild(floatName) and getRoot(pchar) then
								Float.CFrame = getRoot(pchar).CFrame * CFrame.new(0,FloatValue,0)
							else
								FloatingFunc:Disconnect()
								Float:Destroy()
								qUp:Disconnect()
								eUp:Disconnect()
								qDown:Disconnect()
								eDown:Disconnect()
								floatDied:Disconnect()
							end
						end			
						FloatingFunc = RunService.Heartbeat:Connect(FloatPadLoop)
					end)
				end
			end)
			
			addcmd('unfloat',{'nofloat','unplatform','noplatform'},function(args, speaker)
				Floating = false
				local pchar = speaker.Character
				notify('Float','Float Disabled')
				if pchar:FindFirstChild(floatName) then
					pchar:FindFirstChild(floatName):Destroy()
				end
				if floatDied then
					FloatingFunc:Disconnect()
					qUp:Disconnect()
					eUp:Disconnect()
					qDown:Disconnect()
					eDown:Disconnect()
					floatDied:Disconnect()
				end
			end)
			
			addcmd('togglefloat',{},function(args, speaker)
				if Floating then
					execCmd('unfloat')
				else
					execCmd('float')
				end
			end)
			
			swimming = false
			local oldgrav = workspace.Gravity
			local swimbeat = nil
			addcmd('swim',{},function(args, speaker)
				if not swimming and speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid") then
					oldgrav = workspace.Gravity
					workspace.Gravity = 0
					local swimDied = function()
						workspace.Gravity = oldgrav
						swimming = false
					end
					local Humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
					gravReset = Humanoid.Died:Connect(swimDied)
					local enums = Enum.HumanoidStateType:GetEnumItems()
					table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
					for i, v in pairs(enums) do
						Humanoid:SetStateEnabled(v, false)
					end
					Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
					swimbeat = RunService.Heartbeat:Connect(function()
						pcall(function()
							speaker.Character.HumanoidRootPart.Velocity = ((Humanoid.MoveDirection ~= Vector3.new() or UserInputService:IsKeyDown(Enum.KeyCode.Space)) and speaker.Character.HumanoidRootPart.Velocity or Vector3.new())
						end)
					end)
					swimming = true
				end
			end)
			
			addcmd('unswim',{'noswim'},function(args, speaker)
				if speaker and speaker.Character and speaker.Character:FindFirstChildWhichIsA("Humanoid") then
					workspace.Gravity = oldgrav
					swimming = false
					if gravReset then
						gravReset:Disconnect()
					end
					if swimbeat ~= nil then
						swimbeat:Disconnect()
						swimbeat = nil
					end
					local Humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
					local enums = Enum.HumanoidStateType:GetEnumItems()
					table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
					for i, v in pairs(enums) do
						Humanoid:SetStateEnabled(v, true)
					end
				end
			end)
			
			addcmd('toggleswim',{},function(args, speaker)
				if swimming then
					execCmd('unswim')
				else
					execCmd('swim')
				end
			end)
			
			addcmd('setwaypoint',{'swp','setwp','spos','saveposition','savepos'},function(args, speaker)
				local WPName = tostring(getstring(1))
				if getRoot(speaker.Character) then
					notify('Modified Waypoints',"Created waypoint: "..getstring(1))
					local torso = getRoot(speaker.Character)
					WayPoints[#WayPoints + 1] = {NAME = WPName, COORD = {math.floor(torso.Position.X), math.floor(torso.Position.Y), math.floor(torso.Position.Z)}, GAME = PlaceId}
					if AllWaypoints ~= nil then
						AllWaypoints[#AllWaypoints + 1] = {NAME = WPName, COORD = {math.floor(torso.Position.X), math.floor(torso.Position.Y), math.floor(torso.Position.Z)}, GAME = PlaceId}
					end
				end	
				refreshwaypoints()
				updatesaves()
			end)
			
			addcmd('waypointpos',{'wpp','setwaypointposition','setpos','setwaypoint','setwaypointpos'},function(args, speaker)
				local WPName = tostring(getstring(1))
				if getRoot(speaker.Character) then
					notify('Modified Waypoints',"Created waypoint: "..getstring(1))
					WayPoints[#WayPoints + 1] = {NAME = WPName, COORD = {args[2], args[3], args[4]}, GAME = PlaceId}
					if AllWaypoints ~= nil then
						AllWaypoints[#AllWaypoints + 1] = {NAME = WPName, COORD = {args[2], args[3], args[4]}, GAME = PlaceId}
					end
				end	
				refreshwaypoints()
				updatesaves()
			end)
			
			addcmd('waypoints',{'positions'},function(args, speaker)
				if SettingsOpen == false then SettingsOpen = true
					Settings:TweenPosition(UDim2.new(0, 0, 0, 45), "InOut", "Quart", 0.5, true, nil)
					CMDsF.Visible = false
				end
				KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
				AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
				PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), "InOut", "Quart", 0.5, true, nil)
				PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), "InOut", "Quart", 0.5, true, nil)
				wait(0.5)
				SettingsHolder.Visible = false
				maximizeHolder()
			end)
			
			waypointParts = {}
			addcmd('showwaypoints',{'showwp','showwps'},function(args, speaker)
				execCmd('hidewaypoints')
				wait()
				for i,_ in pairs(WayPoints) do
					local x = WayPoints[i].COORD[1]
					local y = WayPoints[i].COORD[2]
					local z = WayPoints[i].COORD[3]
					local part = Instance.new("Part")
					part.Size = Vector3.new(5,5,5)
					part.CFrame = CFrame.new(x,y,z)
					part.Parent = workspace
					part.Anchored = true
					part.CanCollide = false
					table.insert(waypointParts,part)
					local view = Instance.new("BoxHandleAdornment")
					view.Adornee = part
					view.AlwaysOnTop = true
					view.ZIndex = 10
					view.Size = part.Size
					view.Parent = part
				end
				for i,v in pairs(pWayPoints) do
					local view = Instance.new("BoxHandleAdornment")
					view.Adornee = pWayPoints[i].COORD[1]
					view.AlwaysOnTop = true
					view.ZIndex = 10
					view.Size = pWayPoints[i].COORD[1].Size
					view.Parent = pWayPoints[i].COORD[1]
					table.insert(waypointParts,view)
				end
			end)
			
			addcmd('hidewaypoints',{'hidewp','hidewps'},function(args, speaker)
				for i,v in pairs(waypointParts) do
					v:Destroy()
				end
				waypointParts = {}
			end)
			
			addcmd('waypoint',{'wp','lpos','loadposition','loadpos'},function(args, speaker)
				local WPName = tostring(getstring(1))
				if speaker.Character then
					for i,_ in pairs(WayPoints) do
						if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
							local x = WayPoints[i].COORD[1]
							local y = WayPoints[i].COORD[2]
							local z = WayPoints[i].COORD[3]
							getRoot(speaker.Character).CFrame = CFrame.new(x,y,z)
						end
					end
					for i,_ in pairs(pWayPoints) do
						if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
							getRoot(speaker.Character).CFrame = CFrame.new(pWayPoints[i].COORD[1].Position)
						end
					end
				end
			end)
			
			tweenSpeed = 1
			addcmd('tweenspeed',{'tspeed'},function(args, speaker)
				local newSpeed = args[1] or 1
				if tonumber(newSpeed) then
					tweenSpeed = tonumber(newSpeed)
				end
			end)
			
			addcmd('tweenwaypoint',{'twp'},function(args, speaker)
				local WPName = tostring(getstring(1))
				if speaker.Character then
					for i,_ in pairs(WayPoints) do
						local x = WayPoints[i].COORD[1]
						local y = WayPoints[i].COORD[2]
						local z = WayPoints[i].COORD[3]
						if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
							TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(x,y,z)}):Play()
						end
					end
					for i,_ in pairs(pWayPoints) do
						if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
							TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(pWayPoints[i].COORD[1].Position)}):Play()
						end
					end
				end
			end)
			
			addcmd('walktowaypoint',{'wtwp'},function(args, speaker)
				local WPName = tostring(getstring(1))
				if speaker.Character then
					for i,_ in pairs(WayPoints) do
						local x = WayPoints[i].COORD[1]
						local y = WayPoints[i].COORD[2]
						local z = WayPoints[i].COORD[3]
						if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
							if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
								speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
								wait(.1)
							end
							speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(x,y,z)
						end
					end
					for i,_ in pairs(pWayPoints) do
						if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
							if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
								speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
								wait(.1)
							end
							speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(pWayPoints[i].COORD[1].Position)
						end
					end
				end
			end)
			
			addcmd('deletewaypoint',{'dwp','dpos','deleteposition','deletepos'},function(args, speaker)
				for i,v in pairs(WayPoints) do
					if v.NAME:lower() == tostring(getstring(1)):lower() then
						notify('Modified Waypoints',"Deleted waypoint: " .. v.NAME)
						table.remove(WayPoints, i)
					end
				end
				if AllWaypoints ~= nil and #AllWaypoints > 0 then
					for i,v in pairs(AllWaypoints) do
						if v.NAME:lower() == tostring(getstring(1)):lower() then
							if not v.GAME or v.GAME == PlaceId then
								table.remove(AllWaypoints, i)
							end
						end
					end
				end
				for i,v in pairs(pWayPoints) do
					if v.NAME:lower() == tostring(getstring(1)):lower() then
						notify('Modified Waypoints',"Deleted waypoint: " .. v.NAME)
						table.remove(pWayPoints, i)
					end
				end
				refreshwaypoints()
				updatesaves()
			end)
			
			addcmd('clearwaypoints',{'cwp','clearpositions','cpos','clearpos'},function(args, speaker)
				WayPoints = {}
				pWayPoints = {}
				refreshwaypoints()
				updatesaves()
				AllWaypoints = {}
				notify('Modified Waypoints','Removed all waypoints')
			end)
			
			addcmd('cleargamewaypoints',{'cgamewp'},function(args, speaker)
				for i,v in pairs(WayPoints) do
					if v.GAME == PlaceId then
						table.remove(WayPoints, i)
					end
				end
				if AllWaypoints ~= nil and #AllWaypoints > 0 then
					for i,v in pairs(AllWaypoints) do
						if v.GAME == PlaceId then
							table.remove(AllWaypoints, i)
						end
					end
				end
				for i,v in pairs(pWayPoints) do
					if v.GAME == PlaceId then
						table.remove(pWayPoints, i)
					end
				end
				refreshwaypoints()
				updatesaves()
				notify('Modified Waypoints','Deleted game waypoints')
			end)
			
			
			local coreGuiTypeNames = {
				-- predefined aliases
				["inventory"] = Enum.CoreGuiType.Backpack,
				["leaderboard"] = Enum.CoreGuiType.PlayerList,
				["emotes"] = Enum.CoreGuiType.EmotesMenu
			}
			
			-- Load the full list of enums
			for _, enumItem in ipairs(Enum.CoreGuiType:GetEnumItems()) do
				coreGuiTypeNames[enumItem.Name:lower()] = enumItem
			end
			
			addcmd('enable',{},function(args, speaker)
				local input = args[1] and args[1]:lower()
				if input then
					if input == "reset" then
						StarterGui:SetCore("ResetButtonCallback", true)
					else
						local coreGuiType = coreGuiTypeNames[input]
						if coreGuiType then
							StarterGui:SetCoreGuiEnabled(coreGuiType, true)
						end
					end
				end
			end)
			
			addcmd('disable',{},function(args, speaker)
				local input = args[1] and args[1]:lower()
				if input then
					if input == "reset" then
						StarterGui:SetCore("ResetButtonCallback", false)
					else
						local coreGuiType = coreGuiTypeNames[input]
						if coreGuiType then
							StarterGui:SetCoreGuiEnabled(coreGuiType, false)
						end
					end
				end
			end)
			
			
			local invisGUIS = {}
			addcmd('showguis',{},function(args, speaker)
				for i,v in pairs(speaker:FindFirstChildWhichIsA("PlayerGui"):GetDescendants()) do
					if (v:IsA("Frame") or v:IsA("ImageLabel") or v:IsA("ScrollingFrame")) and not v.Visible then
						v.Visible = true
						if not FindInTable(invisGUIS,v) then
							table.insert(invisGUIS,v)
						end
					end
				end
			end)
			
			addcmd('unshowguis',{},function(args, speaker)
				for i,v in pairs(invisGUIS) do
					v.Visible = false
				end
				invisGUIS = {}
			end)
			
			local hiddenGUIS = {}
			addcmd('hideguis',{},function(args, speaker)
				for i,v in pairs(speaker:FindFirstChildWhichIsA("PlayerGui"):GetDescendants()) do
					if (v:IsA("Frame") or v:IsA("ImageLabel") or v:IsA("ScrollingFrame")) and v.Visible then
						v.Visible = false
						if not FindInTable(hiddenGUIS,v) then
							table.insert(hiddenGUIS,v)
						end
					end
				end
			end)
			
			addcmd('unhideguis',{},function(args, speaker)
				for i,v in pairs(hiddenGUIS) do
					v.Visible = true
				end
				hiddenGUIS = {}
			end)
			
			function deleteGuisAtPos()
				pcall(function()
					local guisAtPosition = Players.LocalPlayer.PlayerGui:GetGuiObjectsAtPosition(IYMouse.X, IYMouse.Y)
					for _, gui in pairs(guisAtPosition) do
						if gui.Visible == true then
							gui:Destroy()
						end
					end
				end)
			end
			
			local deleteGuiInput
			addcmd('guidelete',{},function(args, speaker)
				deleteGuiInput = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
					if not gameProcessedEvent then
						if input.KeyCode == Enum.KeyCode.Backspace then
							deleteGuisAtPos()
						end
					end
				end)
				notify('GUI Delete Enabled','Hover over a GUI and press backspace to delete it')
			end)
			
			addcmd('unguidelete',{'noguidelete'},function(args, speaker)
				if deleteGuiInput then deleteGuiInput:Disconnect() end
				notify('GUI Delete Disabled','GUI backspace delete has been disabled')
			end)
			
			local wasStayOpen = StayOpen
			addcmd('hideiy',{},function(args, speaker)
				isHidden = true
				wasStayOpen = StayOpen
				if StayOpen == true then
					StayOpen = false
					On.BackgroundTransparency = 1
				end
				minimizeNum = 0
				minimizeHolder()
				if not (args[1] and tostring(args[1]) == 'nonotify') then notify('IY Hidden','You can press the prefix key to access the command bar') end
			end)
			
			addcmd('showiy',{'unhideiy'},function(args, speaker)
				isHidden = false
				minimizeNum = -20
				if wasStayOpen then
					maximizeHolder()
					StayOpen = true
					On.BackgroundTransparency = 0
				else
					minimizeHolder()
				end
			end)
			
			addcmd('rec', {'record'}, function(args, speaker)
				return COREGUI:ToggleRecording()
			end)
			
			addcmd('screenshot', {'scrnshot'}, function(args, speaker)
				return COREGUI:TakeScreenshot()
			end)
			
			addcmd('togglefs', {'togglefullscreen'}, function(args, speaker)
				return GuiService:ToggleFullscreen()
			end)
			
			addcmd('inspect', {'examine'}, function(args, speaker)
				for _, v in ipairs(getPlayer(args[1], speaker)) do
					GuiService:CloseInspectMenu()
					GuiService:InspectPlayerFromUserId(Players[v].UserId)
				end
			end)
			
			addcmd('savegame',{'saveplace'},function(args, speaker)
				if saveinstance then
					notify("Loading","Downloading game. This will take a while")
					if getsynasset then
						saveinstance()
					else
						saveinstance(game)
					end
					notify('Game Saved','Saved place to the workspace folder within your exploit folder.')
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing saveinstance)')
				end
			end)
			
			
			addcmd('clearerror',{'clearerrors'},function(args, speaker)
				GuiService:ClearError()
			end)
			
			addcmd('clientantikick',{'antikick'},function(args, speaker)
				if not hookmetamethod then 
					return notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
				end
				local LocalPlayer = Players.LocalPlayer
				local oldhmmi
				local oldhmmnc
				oldhmmi = hookmetamethod(game, "__index", function(self, method)
					if self == LocalPlayer and method:lower() == "kick" then
						return error("Expected ':' not '.' calling member function Kick", 2)
					end
					return oldhmmi(self, method)
				end)
				oldhmmnc = hookmetamethod(game, "__namecall", function(self, ...)
					if self == LocalPlayer and getnamecallmethod():lower() == "kick" then
						return
					end
					return oldhmmnc(self, ...)
				end)
			
				notify('Client Antikick','Client anti kick is now active (only effective on localscript kick)')
			end)
			
			allow_rj = true
			addcmd('clientantiteleport',{'antiteleport'},function(args, speaker)
				if not hookmetamethod then 
					return notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
				end
				local TeleportService = TeleportService
				local oldhmmi
				local oldhmmnc
				oldhmmi = hookmetamethod(game, "__index", function(self, method)
					if self == TeleportService then
						if method:lower() == "teleport" then
							return error("Expected ':' not '.' calling member function Kick", 2)
						elseif method == "TeleportToPlaceInstance" then
							return error("Expected ':' not '.' calling member function TeleportToPlaceInstance", 2)
						end
					end
					return oldhmmi(self, method)
				end)
				oldhmmnc = hookmetamethod(game, "__namecall", function(self, ...)
					if self == TeleportService and getnamecallmethod():lower() == "teleport" or getnamecallmethod() == "TeleportToPlaceInstance" then
						return
					end
					return oldhmmnc(self, ...)
				end)
			
				notify('Client AntiTP','Client anti teleport is now active (only effective on localscript teleport)')
			end)
			
			addcmd('allowrejoin',{'allowrj'},function(args, speaker)
				if args[1] and args[1] == 'false' then
					allow_rj = false
					notify('Client AntiTP','Allow rejoin set to false')
				else
					allow_rj = true
					notify('Client AntiTP','Allow rejoin set to true')
				end
			end)
			
			addcmd('cancelteleport',{'canceltp'},function(args, speaker)
				TeleportService:TeleportCancel()
			end)
			
			addcmd('volume',{'vol'},function(args, speaker)
				local level = args[1]/10
				UserSettings():GetService("UserGameSettings").MasterVolume = level
			end)
			
			addcmd('antilag',{'boostfps','lowgraphics'},function(args, speaker)
				local Terrain = workspace:FindFirstChildOfClass('Terrain')
				Terrain.WaterWaveSize = 0
				Terrain.WaterWaveSpeed = 0
				Terrain.WaterReflectance = 0
				Terrain.WaterTransparency = 0
				Lighting.GlobalShadows = false
				Lighting.FogEnd = 9e9
				settings().Rendering.QualityLevel = 1
				for i,v in pairs(game:GetDescendants()) do
					if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
						v.Material = "Plastic"
						v.Reflectance = 0
					elseif v:IsA("Decal") then
						v.Transparency = 1
					elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
						v.Lifetime = NumberRange.new(0)
					elseif v:IsA("Explosion") then
						v.BlastPressure = 1
						v.BlastRadius = 1
					end
				end
				for i,v in pairs(Lighting:GetDescendants()) do
					if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
						v.Enabled = false
					end
				end
				workspace.DescendantAdded:Connect(function(child)
					task.spawn(function()
						if child:IsA('ForceField') then
							RunService.Heartbeat:Wait()
							child:Destroy()
						elseif child:IsA('Sparkles') then
							RunService.Heartbeat:Wait()
							child:Destroy()
						elseif child:IsA('Smoke') or child:IsA('Fire') then
							RunService.Heartbeat:Wait()
							child:Destroy()
						end
					end)
				end)
			end)
			
			addcmd('setfpscap', {'fpscap', 'maxfps'}, function(args, speaker)
				if setfpscap and type(setfpscap) == "function" then
					local num = args[1] or 1e6
					if num == 'none' then
						return setfpscap(1e6)
					elseif num > 0 then
						return setfpscap(num)
					else
						return notify('Invalid argument', "Please provide a number above 0 or 'none'.")
					end
				else
					return notify('Incompatible Exploit', 'Your exploit does not support this command (missing setfpscap)')
				end
			end)
			
			addcmd('notify',{},function(args, speaker)
				notify(getstring(1))
			end)
			
			addcmd('lastcommand',{'lastcmd'},function(args, speaker)
				if cmdHistory[1]:sub(1,11) ~= 'lastcommand' and cmdHistory[1]:sub(1,7) ~= 'lastcmd' then
					execCmd(cmdHistory[1])
				end
			end)
			
			addcmd('esp',{},function(args, speaker)
				if not CHMSenabled then
					ESPenabled = true
					for i,v in pairs(Players:GetChildren()) do
						if v.ClassName == "Player" and v.Name ~= speaker.Name then
							ESP(v)
						end
					end
				else
					notify('ESP','Disable chams (nochams) before using esp')
				end
			end)
			
			addcmd('noesp',{'unesp'},function(args, speaker)
				ESPenabled = false
				for i,c in pairs(COREGUI:GetChildren()) do
					if string.sub(c.Name, -4) == '_ESP' then
						c:Destroy()
					end
				end
			end)
			
			addcmd('esptransparency',{},function(args, speaker)
			    espTransparency = (args[1] and isNumber(args[1]) and args[1]) or 0.3
			    updatesaves()
			end)
			
			local espParts = {}
			local partEspTrigger = nil
			function partAdded(part)
				if #espParts > 0 then
					if FindInTable(espParts,part.Name:lower()) then
						local a = Instance.new("BoxHandleAdornment")
						a.Name = part.Name:lower().."_PESP"
						a.Parent = part
						a.Adornee = part
						a.AlwaysOnTop = true
						a.ZIndex = 0
						a.Size = part.Size
						a.Transparency = espTransparency
						a.Color = BrickColor.new("Lime green")
					end
				else
					partEspTrigger:Disconnect()
					partEspTrigger = nil
				end
			end
			
			addcmd('partesp',{},function(args, speaker)
				local partEspName = getstring(1):lower()
				if not FindInTable(espParts,partEspName) then
					table.insert(espParts,partEspName)
					for i,v in pairs(workspace:GetDescendants()) do
						if v:IsA("BasePart") and v.Name:lower() == partEspName then
							local a = Instance.new("BoxHandleAdornment")
							a.Name = partEspName.."_PESP"
							a.Parent = v
							a.Adornee = v
							a.AlwaysOnTop = true
							a.ZIndex = 0
							a.Size = v.Size
							a.Transparency = espTransparency
							a.Color = BrickColor.new("Lime green")
						end
					end
				end
				if partEspTrigger == nil then
					partEspTrigger = workspace.DescendantAdded:Connect(partAdded)
				end
			end)
			
			addcmd('unpartesp',{'nopartesp'},function(args, speaker)
				if args[1] then
					local partEspName = getstring(1):lower()
					if FindInTable(espParts,partEspName) then
						table.remove(espParts, GetInTable(espParts, partEspName))
					end
					for i,v in pairs(workspace:GetDescendants()) do
						if v:IsA("BoxHandleAdornment") and v.Name == partEspName..'_PESP' then
							v:Destroy()
						end
					end
				else
					partEspTrigger:Disconnect()
					partEspTrigger = nil
					espParts = {}
					for i,v in pairs(workspace:GetDescendants()) do
						if v:IsA("BoxHandleAdornment") and v.Name:sub(-5) == '_PESP' then
							v:Destroy()
						end
					end
				end
			end)
			
			addcmd('chams',{},function(args, speaker)
				if not ESPenabled then
					CHMSenabled = true
					for i,v in pairs(Players:GetChildren()) do
						if v.ClassName == "Player" and v.Name ~= speaker.Name then
							CHMS(v)
						end
					end
				else
					notify('Chams','Disable ESP (noesp) before using chams')
				end
			end)
			
			addcmd('nochams',{'unchams'},function(args, speaker)
				CHMSenabled = false
				for i,v in pairs(Players:GetChildren()) do
					local chmsplr = v
					for i,c in pairs(COREGUI:GetChildren()) do
						if c.Name == chmsplr.Name..'_CHMS' then
							c:Destroy()
						end
					end
				end
			end)
			
			addcmd('locate',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					Locate(Players[v])
				end
			end)
			
			addcmd('nolocate',{'unlocate'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				if args[1] then
					for i,v in pairs(players) do
						for i,c in pairs(COREGUI:GetChildren()) do
							if c.Name == Players[v].Name..'_LC' then
								c:Destroy()
							end
						end
					end
				else
					for i,c in pairs(COREGUI:GetChildren()) do
						if string.sub(c.Name, -3) == '_LC' then
							c:Destroy()
						end
					end
				end
			end)
			
			viewing = nil
			addcmd('view',{'spectate'},function(args, speaker)
				StopFreecam()
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					if viewDied then
						viewDied:Disconnect()
						viewChanged:Disconnect()
					end
					viewing = Players[v]
					workspace.CurrentCamera.CameraSubject = viewing.Character
					notify('Spectate','Viewing ' .. Players[v].Name)
					local function viewDiedFunc()
						repeat wait() until Players[v].Character ~= nil and getRoot(Players[v].Character)
						workspace.CurrentCamera.CameraSubject = viewing.Character
					end
					viewDied = Players[v].CharacterAdded:Connect(viewDiedFunc)
					local function viewChangedFunc()
						workspace.CurrentCamera.CameraSubject = viewing.Character
					end
					viewChanged = workspace.CurrentCamera:GetPropertyChangedSignal("CameraSubject"):Connect(viewChangedFunc)
				end
			end)
			
			addcmd('viewpart',{'viewp'},function(args, speaker)
				StopFreecam()
				if args[1] then
					for i,v in pairs(workspace:GetDescendants()) do
						if v.Name:lower() == getstring(1):lower() and v:IsA("BasePart") then
							wait(0.1)
							workspace.CurrentCamera.CameraSubject = v
						end
					end
				end
			end)
			
			addcmd('unview',{'unspectate'},function(args, speaker)
				StopFreecam()
				if viewing ~= nil then
					viewing = nil
					notify('Spectate','View turned off')
				end
				if viewDied then
					viewDied:Disconnect()
					viewChanged:Disconnect()
				end
				workspace.CurrentCamera.CameraSubject = speaker.Character
			end)
			
			
			fcRunning = false
			local Camera = workspace.CurrentCamera
			workspace:GetPropertyChangedSignal("CurrentCamera"):Connect(function()
				local newCamera = workspace.CurrentCamera
				if newCamera then
					Camera = newCamera
				end
			end)
			
			local INPUT_PRIORITY = Enum.ContextActionPriority.High.Value
			
			Spring = {} do
				Spring.__index = Spring
			
				function Spring.new(freq, pos)
					local self = setmetatable({}, Spring)
					self.f = freq
					self.p = pos
					self.v = pos*0
					return self
				end
			
				function Spring:Update(dt, goal)
					local f = self.f*2*math.pi
					local p0 = self.p
					local v0 = self.v
			
					local offset = goal - p0
					local decay = math.exp(-f*dt)
			
					local p1 = goal + (v0*dt - offset*(f*dt + 1))*decay
					local v1 = (f*dt*(offset*f - v0) + v0)*decay
			
					self.p = p1
					self.v = v1
			
					return p1
				end
			
				function Spring:Reset(pos)
					self.p = pos
					self.v = pos*0
				end
			end
			
			local cameraPos = Vector3.new()
			local cameraRot = Vector2.new()
			
			local velSpring = Spring.new(5, Vector3.new())
			local panSpring = Spring.new(5, Vector2.new())
			
			Input = {} do
			
				keyboard = {
					W = 0,
					A = 0,
					S = 0,
					D = 0,
					E = 0,
					Q = 0,
					Up = 0,
					Down = 0,
					LeftShift = 0,
				}
			
				mouse = {
					Delta = Vector2.new(),
				}
			
				NAV_KEYBOARD_SPEED = Vector3.new(1, 1, 1)
				PAN_MOUSE_SPEED = Vector2.new(1, 1)*(math.pi/64)
				NAV_ADJ_SPEED = 0.75
				NAV_SHIFT_MUL = 0.25
			
				navSpeed = 1
			
				function Input.Vel(dt)
					navSpeed = math.clamp(navSpeed + dt*(keyboard.Up - keyboard.Down)*NAV_ADJ_SPEED, 0.01, 4)
			
					local kKeyboard = Vector3.new(
						keyboard.D - keyboard.A,
						keyboard.E - keyboard.Q,
						keyboard.S - keyboard.W
					)*NAV_KEYBOARD_SPEED
			
					local shift = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift)
			
					return (kKeyboard)*(navSpeed*(shift and NAV_SHIFT_MUL or 1))
				end
			
				function Input.Pan(dt)
					local kMouse = mouse.Delta*PAN_MOUSE_SPEED
					mouse.Delta = Vector2.new()
					return kMouse
				end
			
				do
					function Keypress(action, state, input)
						keyboard[input.KeyCode.Name] = state == Enum.UserInputState.Begin and 1 or 0
						return Enum.ContextActionResult.Sink
					end
			
					function MousePan(action, state, input)
						local delta = input.Delta
						mouse.Delta = Vector2.new(-delta.y, -delta.x)
						return Enum.ContextActionResult.Sink
					end
			
					function Zero(t)
						for k, v in pairs(t) do
							t[k] = v*0
						end
					end
			
					function Input.StartCapture()
						ContextActionService:BindActionAtPriority("FreecamKeyboard",Keypress,false,INPUT_PRIORITY,
							Enum.KeyCode.W,
							Enum.KeyCode.A,
							Enum.KeyCode.S,
							Enum.KeyCode.D,
							Enum.KeyCode.E,
							Enum.KeyCode.Q,
							Enum.KeyCode.Up,
							Enum.KeyCode.Down
						)
						ContextActionService:BindActionAtPriority("FreecamMousePan",MousePan,false,INPUT_PRIORITY,Enum.UserInputType.MouseMovement)
					end
			
					function Input.StopCapture()
						navSpeed = 1
						Zero(keyboard)
						Zero(mouse)
						ContextActionService:UnbindAction("FreecamKeyboard")
						ContextActionService:UnbindAction("FreecamMousePan")
					end
				end
			end
			
			function GetFocusDistance(cameraFrame)
				local znear = 0.1
				local viewport = Camera.ViewportSize
				local projy = 2*math.tan(cameraFov/2)
				local projx = viewport.x/viewport.y*projy
				local fx = cameraFrame.rightVector
				local fy = cameraFrame.upVector
				local fz = cameraFrame.lookVector
			
				local minVect = Vector3.new()
				local minDist = 512
			
				for x = 0, 1, 0.5 do
					for y = 0, 1, 0.5 do
						local cx = (x - 0.5)*projx
						local cy = (y - 0.5)*projy
						local offset = fx*cx - fy*cy + fz
						local origin = cameraFrame.p + offset*znear
						local _, hit = workspace:FindPartOnRay(Ray.new(origin, offset.unit*minDist))
						local dist = (hit - origin).magnitude
						if minDist > dist then
							minDist = dist
							minVect = offset.unit
						end
					end
				end
			
				return fz:Dot(minVect)*minDist
			end
			
			local function StepFreecam(dt)
				local vel = velSpring:Update(dt, Input.Vel(dt))
				local pan = panSpring:Update(dt, Input.Pan(dt))
			
				local zoomFactor = math.sqrt(math.tan(math.rad(70/2))/math.tan(math.rad(cameraFov/2)))
			
				cameraRot = cameraRot + pan*Vector2.new(0.75, 1)*8*(dt/zoomFactor)
				cameraRot = Vector2.new(math.clamp(cameraRot.x, -math.rad(90), math.rad(90)), cameraRot.y%(2*math.pi))
			
				local cameraCFrame = CFrame.new(cameraPos)*CFrame.fromOrientation(cameraRot.x, cameraRot.y, 0)*CFrame.new(vel*Vector3.new(1, 1, 1)*64*dt)
				cameraPos = cameraCFrame.p
			
				Camera.CFrame = cameraCFrame
				Camera.Focus = cameraCFrame*CFrame.new(0, 0, -GetFocusDistance(cameraCFrame))
				Camera.FieldOfView = cameraFov
			end
			
			local PlayerState = {} do
				mouseBehavior = ""
				mouseIconEnabled = ""
				cameraType = ""
				cameraFocus = ""
				cameraCFrame = ""
				cameraFieldOfView = ""
			
				function PlayerState.Push()
					cameraFieldOfView = Camera.FieldOfView
					Camera.FieldOfView = 70
			
					cameraType = Camera.CameraType
					Camera.CameraType = Enum.CameraType.Custom
			
					cameraCFrame = Camera.CFrame
					cameraFocus = Camera.Focus
			
					mouseIconEnabled = UserInputService.MouseIconEnabled
					UserInputService.MouseIconEnabled = true
			
					mouseBehavior = UserInputService.MouseBehavior
					UserInputService.MouseBehavior = Enum.MouseBehavior.Default
				end
			
				function PlayerState.Pop()
					Camera.FieldOfView = 70
			
					Camera.CameraType = cameraType
					cameraType = nil
			
					Camera.CFrame = cameraCFrame
					cameraCFrame = nil
			
					Camera.Focus = cameraFocus
					cameraFocus = nil
			
					UserInputService.MouseIconEnabled = mouseIconEnabled
					mouseIconEnabled = nil
			
					UserInputService.MouseBehavior = mouseBehavior
					mouseBehavior = nil
				end
			end
			
			function StartFreecam(pos)
				if fcRunning then
					StopFreecam()
				end
				local cameraCFrame = Camera.CFrame
				if pos then
					cameraCFrame = pos
				end
				cameraRot = Vector2.new()
				cameraPos = cameraCFrame.p
				cameraFov = Camera.FieldOfView
			
				velSpring:Reset(Vector3.new())
				panSpring:Reset(Vector2.new())
			
				PlayerState.Push()
				RunService:BindToRenderStep("Freecam", Enum.RenderPriority.Camera.Value, StepFreecam)
				Input.StartCapture()
				fcRunning = true
			end
			
			function StopFreecam()
				if not fcRunning then return end
				Input.StopCapture()
				RunService:UnbindFromRenderStep("Freecam")
				PlayerState.Pop()
				workspace.Camera.FieldOfView = 70
				fcRunning = false
			end
			
			addcmd('freecam',{'fc'},function(args, speaker)
				StartFreecam()
			end)
			
			addcmd('freecampos',{'fcpos','fcp','freecamposition','fcposition'},function(args, speaker)
				if not args[1] then return end
				local freecamPos = CFrame.new(args[1],args[2],args[3])
				StartFreecam(freecamPos)
			end)
			
			addcmd('freecamwaypoint',{'fcwp'},function(args, speaker)
				local WPName = tostring(getstring(1))
				if speaker.Character then
					for i,_ in pairs(WayPoints) do
						local x = WayPoints[i].COORD[1]
						local y = WayPoints[i].COORD[2]
						local z = WayPoints[i].COORD[3]
						if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
							StartFreecam(CFrame.new(x,y,z))
						end
					end
					for i,_ in pairs(pWayPoints) do
						if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
							StartFreecam(CFrame.new(pWayPoints[i].COORD[1].Position))
						end
					end
				end
			end)
			
			addcmd('freecamgoto',{'fcgoto','freecamtp','fctp'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					StartFreecam(getRoot(Players[v].Character).CFrame)
				end
			end)
			
			addcmd('unfreecam',{'nofreecam','unfc','nofc'},function(args, speaker)
				StopFreecam()
			end)
			
			addcmd('freecamspeed',{'fcspeed'},function(args, speaker)
				local FCspeed = args[1] or 1
				if isNumber(FCspeed) then
					NAV_KEYBOARD_SPEED = Vector3.new(FCspeed, FCspeed, FCspeed)
				end
			end)
			
			addcmd('notifyfreecamposition',{'notifyfcpos'},function(args, speaker)
				if fcRunning then
					local X,Y,Z = workspace.CurrentCamera.CFrame.Position.X,workspace.CurrentCamera.CFrame.Position.Y,workspace.CurrentCamera.CFrame.Position.Z
					local Format, Round = string.format, math.round
					notify("Current Position", Format("%s, %s, %s", Round(X), Round(Y), Round(Z)))
				end
			end)
			
			addcmd('copyfreecamposition',{'copyfcpos'},function(args, speaker)
				if fcRunning then
					local X,Y,Z = workspace.CurrentCamera.CFrame.Position.X,workspace.CurrentCamera.CFrame.Position.Y,workspace.CurrentCamera.CFrame.Position.Z
					local Format, Round = string.format, math.round
					toClipboard(Format("%s, %s, %s", Round(X), Round(Y), Round(Z)))
				end
			end)
			
			addcmd('gotocamera',{'gotocam','tocam'},function(args, speaker)
				getRoot(speaker.Character).CFrame = workspace.Camera.CFrame
			end)
			
			addcmd('tweengotocamera',{'tweengotocam','tgotocam','ttocam'},function(args, speaker)
				TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = workspace.Camera.CFrame}):Play()
			end)
			
			addcmd('fov',{},function(args, speaker)
				local fov = args[1] or 70
				if isNumber(fov) then
					workspace.CurrentCamera.FieldOfView = fov
				end
			end)
			
			local preMaxZoom = Players.LocalPlayer.CameraMaxZoomDistance
			local preMinZoom = Players.LocalPlayer.CameraMinZoomDistance
			addcmd('lookat',{},function(args, speaker)
				if speaker.CameraMaxZoomDistance ~= 0.5 then
					preMaxZoom = speaker.CameraMaxZoomDistance
					preMinZoom = speaker.CameraMinZoomDistance
				end
				speaker.CameraMaxZoomDistance = 0.5
				speaker.CameraMinZoomDistance = 0.5
				wait()
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					local target = Players[v].Character
					if target and target:FindFirstChild('Head') then
						workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.p, target.Head.CFrame.p)
						wait(0.1)
					end
				end
				speaker.CameraMaxZoomDistance = preMaxZoom
				speaker.CameraMinZoomDistance = preMinZoom
			end)
			
			addcmd('fixcam',{'restorecam'},function(args, speaker)
				StopFreecam()
				execCmd('unview')
				workspace.CurrentCamera:remove()
				wait(.1)
				repeat wait() until speaker.Character ~= nil
				workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA('Humanoid')
				workspace.CurrentCamera.CameraType = "Custom"
				speaker.CameraMinZoomDistance = 0.5
				speaker.CameraMaxZoomDistance = 400
				speaker.CameraMode = "Classic"
				speaker.Character.Head.Anchored = false
			end)
			
			addcmd('enableshiftlock',{'enablesl','shiftlock'},function(args, speaker)
				speaker.DevEnableMouseLock = true
				notify('Shiftlock','Shift lock is now available')
			end)
			
			addcmd('firstp',{},function(args, speaker)
				speaker.CameraMode = "LockFirstPerson"
			end)
			
			addcmd('thirdp',{},function(args, speaker)
				speaker.CameraMode = "Classic"
			end)
			
			addcmd('noclipcam', {'nccam'}, function(args, speaker)
				local sc = (debug and debug.setconstant) or setconstant
				local gc = (debug and debug.getconstants) or getconstants
				if not sc or not getgc or not gc then
					return notify('Incompatible Exploit', 'Your exploit does not support this command (missing setconstant or getconstants or getgc)')
				end
				local pop = speaker.PlayerScripts.PlayerModule.CameraModule.ZoomController.Popper
				for _, v in pairs(getgc()) do
					if type(v) == 'function' and getfenv(v).script == pop then
						for i, v1 in pairs(gc(v)) do
							if tonumber(v1) == .25 then
								sc(v, i, 0)
							elseif tonumber(v1) == 0 then
								sc(v, i, .25)
							end
						end
					end
				end
			end)
			
			addcmd('maxzoom',{},function(args, speaker)
				speaker.CameraMaxZoomDistance = args[1]
			end)
			
			addcmd('minzoom',{},function(args, speaker)
				speaker.CameraMinZoomDistance = args[1]
			end)
			
			addcmd('camdistance',{},function(args, speaker)
				local camMax = speaker.CameraMaxZoomDistance
				local camMin = speaker.CameraMinZoomDistance
				if camMax < tonumber(args[1]) then
					camMax = args[1]
				end
				speaker.CameraMaxZoomDistance = args[1]
				speaker.CameraMinZoomDistance = args[1]
				wait()
				speaker.CameraMaxZoomDistance = camMax
				speaker.CameraMinZoomDistance = camMin
			end)
			
			addcmd('unlockws',{'unlockworkspace'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v:IsA("BasePart") then
						v.Locked = false
					end
				end
			end)
			
			addcmd('lockws',{'lockworkspace'},function(args, speaker) 
				for i,v in pairs(workspace:GetDescendants()) do
					if v:IsA("BasePart") then
						v.Locked = true
					end
				end
			end)
			
			addcmd('delete',{'remove'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v.Name:lower() == getstring(1):lower() then
						v:Destroy()
					end
				end
				notify('Item(s) Deleted','Deleted ' ..getstring(1))
			end)
			
			addcmd('deleteclass',{'removeclass','deleteclassname','removeclassname','dc'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v.ClassName:lower() == getstring(1):lower() then
						v:Destroy()
					end
				end
				notify('Item(s) Deleted','Deleted items with ClassName ' ..getstring(1))
			end)
			
			addcmd('chardelete',{'charremove','cd'},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v.Name:lower() == getstring(1):lower() then
						v:Destroy()
					end
				end
				notify('Item(s) Deleted','Deleted ' ..getstring(1))
			end)
			
			addcmd('chardeleteclass',{'charremoveclass','chardeleteclassname','charremoveclassname','cdc'},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v.ClassName:lower() == getstring(1):lower() then
						v:Destroy()
					end
				end
				notify('Item(s) Deleted','Deleted items with ClassName ' ..getstring(1))
			end)
			
			addcmd('deletevelocity',{'dv','removevelocity','removeforces'},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v:IsA("BodyVelocity") or v:IsA("BodyGyro") or v:IsA("RocketPropulsion") or v:IsA("BodyThrust") or v:IsA("BodyAngularVelocity") or v:IsA("AngularVelocity") or v:IsA("BodyForce") or v:IsA("VectorForce") or v:IsA("LineForce") then
						v:Destroy()
					end
				end
			end)
			
			addcmd('deleteinvisparts',{'deleteinvisibleparts','dip'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v:IsA("BasePart") and v.Transparency == 1 and v.CanCollide then
						v:Destroy()
					end
				end
			end)
			
			local shownParts = {}
			addcmd('invisibleparts',{'invisparts'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v:IsA("BasePart") and v.Transparency == 1 then
						if not table.find(shownParts,v) then
							table.insert(shownParts,v)
						end
						v.Transparency = 0
					end
				end
			end)
			
			addcmd('uninvisibleparts',{'uninvisparts'},function(args, speaker)
				for i,v in pairs(shownParts) do
					v.Transparency = 1
				end
				shownParts = {}
			end)
			
			addcmd('btools',{},function(args, speaker)
				for i = 1, 4 do
					local Tool = Instance.new("HopperBin")
					Tool.BinType = i
					Tool.Name = randomString()
					Tool.Parent = speaker:FindFirstChildOfClass("Backpack")
				end
			end)
			
			addcmd('f3x',{'fex'},function(args, speaker)
				loadstring(game:GetObjects("rbxassetid://6695644299")[1].Source)()
			end)
			
			addcmd('partpath',{'partname'},function(args, speaker)
				selectPart()
			end)
			
			addcmd('antiafk',{'antiidle'},function(args, speaker)
				local GC = getconnections or get_signal_cons
				if GC then
					for i,v in pairs(GC(Players.LocalPlayer.Idled)) do
						if v["Disable"] then
							v["Disable"](v)
						elseif v["Disconnect"] then
							v["Disconnect"](v)
						end
					end
				else
					Players.LocalPlayer.Idled:Connect(function()
						local VirtualUser = game:GetService("VirtualUser")
						VirtualUser:CaptureController()
						VirtualUser:ClickButton2(Vector2.new())
					end)
				end
				if not (args[1] and tostring(args[1]) == 'nonotify') then notify('Anti Idle','Anti idle is enabled') end
			end)
			
			addcmd('datalimit',{},function(args, speaker)
				if tonumber(args[1]) then
					NetworkClient:SetOutgoingKBPSLimit(args[1])
				end
			end)
			
			addcmd('replicationlag',{'backtrack'},function(args, speaker)
				if tonumber(args[1]) then
					settings():GetService("NetworkSettings").IncomingReplicationLag = args[1]
				end
			end)
			
			addcmd('noprompts', {'nopurchaseprompts'}, function(args, speaker)
				COREGUI.PurchasePrompt.Enabled = false
			end)
			
			addcmd('showprompts', {'showpurchaseprompts'}, function(args, speaker)
				COREGUI.PurchasePrompt.Enabled = true
			end)
			
			addcmd('age',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				local ages = {}
				for i,v in pairs(players) do
					local p = Players[v]
					table.insert(ages, p.Name.."'s age is: "..p.AccountAge)
				end
				notify('Account Age',table.concat(ages, ',\n'))
			end)
			
			addcmd('chatage',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				local ages = {}
				for i,v in pairs(players) do
					local p = Players[v]
					table.insert(ages, p.Name.."'s age is: "..p.AccountAge)
				end
				local chatString = table.concat(ages, ', ')
				ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(chatString, "All")
			end)
			
			addcmd('joindate',{'jd'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				local dates = {}
				notify("Loading",'Hold on a sec')
				for i,v in pairs(players) do
					local user = game:HttpGet("https://users.roblox.com/v1/users/"..Players[v].UserId)
					local json = HttpService:JSONDecode(user)
					local date = json["created"]:sub(1,10)
					local splitDates = string.split(date,"-")
					table.insert(dates,Players[v].Name.." joined: "..splitDates[2].."/"..splitDates[3].."/"..splitDates[1])
				end
				notify('Join Date (Month/Day/Year)',table.concat(dates, ',\n'))
			end)
			
			addcmd('chatjoindate',{'cjd'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				local dates = {}
				notify("Loading",'Hold on a sec')
				for i,v in pairs(players) do
					local user = game:HttpGet("https://users.roblox.com/v1/users/"..Players[v].UserId)
					local json = HttpService:JSONDecode(user)
					local date = json["created"]:sub(1,10)
					local splitDates = string.split(date,"-")
					table.insert(dates,Players[v].Name.." joined: "..splitDates[2].."/"..splitDates[3].."/"..splitDates[1])
				end
				local chatString = table.concat(dates, ', ')
				ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(chatString, "All")
			end)
			
			addcmd('copyname',{'copyuser'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					local name = tostring(Players[v].Name)
					toClipboard(name)
				end
			end)
			
			addcmd('userid',{'id'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					local id = tostring(Players[v].UserId)
					notify('User ID',id)
				end
			end)
			
			addcmd('copyid',{'copyuserid'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					local id = tostring(Players[v].UserId)
					toClipboard(id)
				end
			end)
			
			addcmd('creatorid',{'creator'},function(args, speaker)
				if game.CreatorType == Enum.CreatorType.User then
					notify('Creator ID',game.CreatorId)
				elseif game.CreatorType == Enum.CreatorType.Group then
					local OwnerID = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id
					speaker.UserId = OwnerID
					notify('Creator ID',OwnerID)
				end
			end)
			
			addcmd('copycreatorid',{'copycreator'},function(args, speaker)
				if game.CreatorType == Enum.CreatorType.User then
					toClipboard(game.CreatorId)
					notify('Copied ID','Copied creator ID to clipboard')
				elseif game.CreatorType == Enum.CreatorType.Group then
					local OwnerID = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id
					toClipboard(OwnerID)
					notify('Copied ID','Copied creator ID to clipboard')
				end
			end)
			
			addcmd('setcreatorid',{'setcreator'},function(args, speaker)
				if game.CreatorType == Enum.CreatorType.User then
					speaker.UserId = game.CreatorId
					notify('Set ID','Set UserId to '..game.CreatorId)
				elseif game.CreatorType == Enum.CreatorType.Group then
					local OwnerID = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id
					speaker.UserId = OwnerID
					notify('Set ID','Set UserId to '..OwnerID)
				end
			end)
			
			addcmd('appearanceid',{'aid'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					local aid = tostring(Players[v].CharacterAppearanceId)
					notify('Appearance ID',aid)
				end
			end)
			
			addcmd('copyappearanceid',{'caid'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					local aid = tostring(Players[v].CharacterAppearanceId)
					toClipboard(aid)
				end
			end)
			
			addcmd('norender',{},function(args, speaker)
				RunService:Set3dRenderingEnabled(false)
			end)
			
			addcmd('render',{},function(args, speaker)
				RunService:Set3dRenderingEnabled(true)
			end)
			
			addcmd('2022materials',{'use2022materials'},function(args, speaker)
				if sethidden then
					sethidden(MaterialService, "Use2022Materials", true)
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing sethiddenproperty)')
				end
			end)
			
			addcmd('un2022materials',{'unuse2022materials'},function(args, speaker)
				if sethidden then
					sethidden(MaterialService, "Use2022Materials", false)
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing sethiddenproperty)')
				end
			end)
			
			addcmd('goto',{'to'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					if Players[v].Character ~= nil then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3,1,0)
					end
				end
				execCmd('breakvelocity')
			end)
			
			addcmd('tweengoto',{'tgoto','tto','tweento'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					if Players[v].Character ~= nil then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3,1,0)}):Play()
					end
				end
				execCmd('breakvelocity')
			end)
			
			addcmd('vehiclegoto',{'vgoto','vtp','vehicletp'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					if Players[v].Character ~= nil then
						local seat = speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart
						local vehicleModel = seat:FindFirstAncestorWhichIsA("Model")
						vehicleModel:MoveTo(getRoot(Players[v].Character).Position)
					end
				end
			end)
			
			addcmd('pulsetp',{'ptp'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					if Players[v].Character ~= nil then
						local startPos = getRoot(speaker.Character).CFrame
						local seconds = args[2] or 1
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(3,1,0)
						wait(seconds)
						getRoot(speaker.Character).CFrame = startPos
					end
				end
				execCmd('breakvelocity')
			end)
			
			local vnoclipParts = {}
			addcmd('vehiclenoclip',{'vnoclip'},function(args, speaker)
				vnoclipParts = {}
				local seat = speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart
				local vehicleModel = seat.Parent
				repeat
					if vehicleModel.ClassName ~= "Model" then
						vehicleModel = vehicleModel.Parent
					end
				until vehicleModel.ClassName == "Model"
				wait(0.1)
				execCmd('noclip')
				for i,v in pairs(vehicleModel:GetDescendants()) do
					if v:IsA("BasePart") and v.CanCollide then
						table.insert(vnoclipParts,v)
						v.CanCollide = false
					end
				end
			end)
			
			addcmd('vehicleclip',{'vclip','unvnoclip','unvehiclenoclip'},function(args, speaker)
				execCmd('clip')
				for i,v in pairs(vnoclipParts) do
					v.CanCollide = true
				end
				vnoclipParts = {}
			end)
			
			addcmd('togglevnoclip',{},function(args, speaker)
				if Clip then
					execCmd('vnoclip')
				else
					execCmd('vclip')
				end
			end)
			
			addcmd('clientbring',{'cbring'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					if Players[v].Character ~= nil then
						if Players[v].Character:FindFirstChildOfClass('Humanoid') then
							Players[v].Character:FindFirstChildOfClass('Humanoid').Sit = false
						end
						wait()
						getRoot(Players[v].Character).CFrame = getRoot(speaker.Character).CFrame + Vector3.new(3,1,0)
					end
				end
			end)
			
			local bringT = {}
			addcmd('loopbring',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					task.spawn(function()
						if Players[v].Name ~= speaker.Name and not FindInTable(bringT, Players[v].Name) then
							table.insert(bringT, Players[v].Name)
							local plrName = Players[v].Name
							local pchar=Players[v].Character
							local distance = 3
							if args[2] and isNumber(args[2]) then
								distance = args[2]
							end
							local lDelay = 0
							if args[3] and isNumber(args[3]) then
								lDelay = args[3]
							end
							repeat
								for i,c in pairs(players) do
									if Players:FindFirstChild(v) then
										pchar = Players[v].Character
										if pchar~= nil and Players[v].Character ~= nil and getRoot(pchar) and speaker.Character ~= nil and getRoot(speaker.Character) then
											getRoot(pchar).CFrame = getRoot(speaker.Character).CFrame + Vector3.new(distance,1,0)
										end
										wait(lDelay)
									else 
										for a,b in pairs(bringT) do if b == plrName then table.remove(bringT, a) end end
									end
								end
							until not FindInTable(bringT, plrName)
						end
					end)
				end
			end)
			
			addcmd('unloopbring',{'noloopbring'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					task.spawn(function()
						for a,b in pairs(bringT) do if b == Players[v].Name then table.remove(bringT, a) end end
					end)
				end
			end)
			
			local walkto = false
			local waypointwalkto = false
			addcmd('walkto',{'follow'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					if Players[v].Character ~= nil then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						walkto = true
						repeat wait()
							speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(getRoot(Players[v].Character).Position)
						until Players[v].Character == nil or not getRoot(Players[v].Character) or walkto == false
					end
				end
			end)
			
			addcmd('pathfindwalkto',{'pathfindfollow'},function(args, speaker)
				walkto = false
				wait()
				local players = getPlayer(args[1], speaker)
				local hum = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
				local path = PathService:CreatePath()
				for i,v in pairs(players)do
					if Players[v].Character ~= nil then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						walkto = true
						repeat wait()
							local success, response = pcall(function()
								path:ComputeAsync(getRoot(speaker.Character).Position, getRoot(Players[v].Character).Position)
								local waypoints = path:GetWaypoints()
								local distance 
								for waypointIndex, waypoint in pairs(waypoints) do
									local waypointPosition = waypoint.Position
									hum:MoveTo(waypointPosition)
									repeat 
										distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude
										wait()
									until
									distance <= 5
								end	 
							end)
							if not success then
								speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(getRoot(Players[v].Character).Position)
							end
						until Players[v].Character == nil or not getRoot(Players[v].Character) or walkto == false
					end
				end
			end)
			
			addcmd('pathfindwalktowaypoint',{'pathfindwalktowp'},function(args, speaker)
				waypointwalkto = false
				wait()
				local WPName = tostring(getstring(1))
				local hum = Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
				local path = PathService:CreatePath()
				if speaker.Character then
					for i,_ in pairs(WayPoints) do
						if tostring(WayPoints[i].NAME):lower() == tostring(WPName):lower() then
							if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
								speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
								wait(.1)
							end
							local TrueCoords = Vector3.new(WayPoints[i].COORD[1], WayPoints[i].COORD[2], WayPoints[i].COORD[3])
							waypointwalkto = true
							repeat wait()
								local success, response = pcall(function()
									path:ComputeAsync(getRoot(speaker.Character).Position, TrueCoords)
									local waypoints = path:GetWaypoints()
									local distance 
									for waypointIndex, waypoint in pairs(waypoints) do
										local waypointPosition = waypoint.Position
										hum:MoveTo(waypointPosition)
										repeat 
											distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude
											wait()
										until
										distance <= 5
									end
								end)
								if not success then
									speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(TrueCoords)
								end
							until not speaker.Character or waypointwalkto == false
						end
					end
					for i,_ in pairs(pWayPoints) do
						if tostring(pWayPoints[i].NAME):lower() == tostring(WPName):lower() then
							if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
								speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
								wait(.1)
							end
							local TrueCoords = pWayPoints[i].COORD[1].Position
							waypointwalkto = true
							repeat wait()
								local success, response = pcall(function()
									path:ComputeAsync(getRoot(speaker.Character).Position, TrueCoords)
									local waypoints = path:GetWaypoints()
									local distance 
									for waypointIndex, waypoint in pairs(waypoints) do
										local waypointPosition = waypoint.Position
										hum:MoveTo(waypointPosition)
										repeat 
											distance = (waypointPosition - hum.Parent.PrimaryPart.Position).magnitude
											wait()
										until
										distance <= 5
									end
								end)
								if not success then
									speaker.Character:FindFirstChildOfClass('Humanoid'):MoveTo(TrueCoords)
								end
							until not speaker.Character or waypointwalkto == false
						end
					end
				end
			end)
			
			addcmd('unwalkto',{'nowalkto','unfollow','nofollow'},function(args, speaker)
				walkto = false
				waypointwalkto = false
			end)
			
			addcmd('freeze',{'fr'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				if players ~= nil then
					for i,v in pairs(players) do
						task.spawn(function()
							for i, x in next, Players[v].Character:GetDescendants() do
								if x:IsA("BasePart") and not x.Anchored then
									x.Anchored = true
								end
							end
						end)
					end
				end
			end)
			
			
			addcmd('thaw',{'unfreeze','unfr'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				if players ~= nil then
					for i,v in pairs(players) do
						task.spawn(function()
							for i, x in next, Players[v].Character:GetDescendants() do
								if x.Name ~= floatName and x:IsA("BasePart") and x.Anchored then
									x.Anchored = false
								end
							end
						end)
					end
				end
			end)
			
			oofing = false
			addcmd('loopoof',{},function(args, speaker)
				oofing = true
				repeat wait(0.1)
					for i,v in pairs(Players:GetPlayers()) do
						if v.Character ~= nil and v.Character:FindFirstChild'Head' then
							for _,x in pairs(v.Character.Head:GetChildren()) do
								if x:IsA'Sound' then x.Playing = true end
							end
						end
					end
				until oofing == false
			end)
			
			addcmd('unloopoof',{},function(args, speaker)
				oofing = false
			end)
			
			local notifiedRespectFiltering = false
			addcmd('muteboombox',{},function(args, speaker)
				if not notifiedRespectFiltering and SoundService.RespectFilteringEnabled then notifiedRespectFiltering = true notify('RespectFilteringEnabled','RespectFilteringEnabled is set to true (the command will still work but may only be clientsided)') end
				local players = getPlayer(args[1], speaker)
				if players ~= nil then
					for i,v in pairs(players) do
						task.spawn(function()
							for i, x in next, Players[v].Character:GetDescendants() do
								if x:IsA("Sound") and x.Playing == true then
									x.Playing = false
								end
							end
							for i, x in next, Players[v]:FindFirstChildOfClass("Backpack"):GetDescendants() do
								if x:IsA("Sound") and x.Playing == true then
									x.Playing = false
								end
							end
						end)
					end
				end
			end)
			
			addcmd('unmuteboombox',{},function(args, speaker)
				if not notifiedRespectFiltering and SoundService.RespectFilteringEnabled then notifiedRespectFiltering = true notify('RespectFilteringEnabled','RespectFilteringEnabled is set to true (the command will still work but may only be clientsided)') end
				local players = getPlayer(args[1], speaker)
				if players ~= nil then
					for i,v in pairs(players) do
						task.spawn(function()
							for i, x in next, Players[v].Character:GetDescendants() do
								if x:IsA("Sound") and x.Playing == false then
									x.Playing = true
								end
							end
						end)
					end
				end
			end)
			
			addcmd('reset',{},function(args, speaker)
				speaker.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
			end)
			
			addcmd('freezeanims',{},function(args, speaker)
				local Humanoid = speaker.Character:FindFirstChildOfClass("Humanoid") or speaker.Character:FindFirstChildOfClass("AnimationController")
				local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
				for _, v in pairs(ActiveTracks) do
					v:AdjustSpeed(0)
				end
			end)
			
			addcmd('unfreezeanims',{},function(args, speaker)
				local Humanoid = speaker.Character:FindFirstChildOfClass("Humanoid") or speaker.Character:FindFirstChildOfClass("AnimationController")
				local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
				for _, v in pairs(ActiveTracks) do
					v:AdjustSpeed(1)
				end
			end)
			
			
			
			
			addcmd('respawn',{},function(args, speaker)
				respawn(speaker)
			end)
			
			addcmd('refresh',{'re'},function(args, speaker)
				refresh(speaker)
			end)
			
			addcmd('god',{},function(args, speaker)
				local Cam = workspace.CurrentCamera
				local Pos, Char = Cam.CFrame, speaker.Character
				local Human = Char and Char.FindFirstChildWhichIsA(Char, "Humanoid")
				local nHuman = Human.Clone(Human)
				nHuman.Parent, speaker.Character = Char, nil
				nHuman.SetStateEnabled(nHuman, 15, false)
				nHuman.SetStateEnabled(nHuman, 1, false)
				nHuman.SetStateEnabled(nHuman, 0, false)
				nHuman.BreakJointsOnDeath, Human = true, Human.Destroy(Human)
				speaker.Character, Cam.CameraSubject, Cam.CFrame = Char, nHuman, wait() and Pos
				nHuman.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
				local Script = Char.FindFirstChild(Char, "Animate")
				if Script then
					Script.Disabled = true
					wait()
					Script.Disabled = false
				end
				nHuman.Health = nHuman.MaxHealth
			end)
			
			invisRunning = false
			addcmd('invisible',{'invis'},function(args, speaker)
				if invisRunning then return end
				invisRunning = true
				-- Full credit to AmokahFox @V3rmillion
				local Player = speaker
				repeat wait(.1) until Player.Character
				local Character = Player.Character
				Character.Archivable = true
				local IsInvis = false
				local IsRunning = true
				local InvisibleCharacter = Character:Clone()
				InvisibleCharacter.Parent = Lighting
				local Void = workspace.FallenPartsDestroyHeight
				InvisibleCharacter.Name = ""
				local CF
			
				local invisFix = RunService.Stepped:Connect(function()
					pcall(function()
						local IsInteger
						if tostring(Void):find'-' then
							IsInteger = true
						else
							IsInteger = false
						end
						local Pos = Player.Character.HumanoidRootPart.Position
						local Pos_String = tostring(Pos)
						local Pos_Seperate = Pos_String:split(', ')
						local X = tonumber(Pos_Seperate[1])
						local Y = tonumber(Pos_Seperate[2])
						local Z = tonumber(Pos_Seperate[3])
						if IsInteger == true then
							if Y <= Void then
								Respawn()
							end
						elseif IsInteger == false then
							if Y >= Void then
								Respawn()
							end
						end
					end)
				end)
			
				for i,v in pairs(InvisibleCharacter:GetDescendants())do
					if v:IsA("BasePart") then
						if v.Name == "HumanoidRootPart" then
							v.Transparency = 1
						else
							v.Transparency = .5
						end
					end
				end
			
				function Respawn()
					IsRunning = false
					if IsInvis == true then
						pcall(function()
							Player.Character = Character
							wait()
							Character.Parent = workspace
							Character:FindFirstChildWhichIsA'Humanoid':Destroy()
							IsInvis = false
							InvisibleCharacter.Parent = nil
							invisRunning = false
						end)
					elseif IsInvis == false then
						pcall(function()
							Player.Character = Character
							wait()
							Character.Parent = workspace
							Character:FindFirstChildWhichIsA'Humanoid':Destroy()
							TurnVisible()
						end)
					end
				end
			
				local invisDied
				invisDied = InvisibleCharacter:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
					Respawn()
					invisDied:Disconnect()
				end)
			
				if IsInvis == true then return end
				IsInvis = true
				CF = workspace.CurrentCamera.CFrame
				local CF_1 = Player.Character.HumanoidRootPart.CFrame
				Character:MoveTo(Vector3.new(0,math.pi*1000000,0))
				workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable
				wait(.2)
				workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
				InvisibleCharacter = InvisibleCharacter
				Character.Parent = Lighting
				InvisibleCharacter.Parent = workspace
				InvisibleCharacter.HumanoidRootPart.CFrame = CF_1
				Player.Character = InvisibleCharacter
				execCmd('fixcam')
				Player.Character.Animate.Disabled = true
				Player.Character.Animate.Disabled = false
			
				function TurnVisible()
					if IsInvis == false then return end
					invisFix:Disconnect()
					invisDied:Disconnect()
					CF = workspace.CurrentCamera.CFrame
					Character = Character
					local CF_1 = Player.Character.HumanoidRootPart.CFrame
					Character.HumanoidRootPart.CFrame = CF_1
					InvisibleCharacter:Destroy()
					Player.Character = Character
					Character.Parent = workspace
					IsInvis = false
					Player.Character.Animate.Disabled = true
					Player.Character.Animate.Disabled = false
					invisDied = Character:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
						Respawn()
						invisDied:Disconnect()
					end)
					invisRunning = false
				end
				notify('Invisible','You now appear invisible to other players')
			end)
			
			addcmd('visible',{'vis'},function(args, speaker)
				TurnVisible()
			end)
			
			addcmd('toggleinvis',{},function(args, speaker)
				if invisRunning then
					execCmd('visible')
				else
					execCmd('invisible')
				end
			end)
			
			addcmd('toolinvisible',{'toolinvis','tinvis'},function(args, speaker)
				local Char  = Players.LocalPlayer.Character
				local touched = false
				local tpdback = false
				local box = Instance.new('Part')
				box.Anchored = true
				box.CanCollide = true
				box.Size = Vector3.new(10,1,10)
				box.Position = Vector3.new(0,10000,0)
				box.Parent = workspace
				local boxTouched = box.Touched:connect(function(part)
					if (part.Parent.Name == Players.LocalPlayer.Name) then
						if touched == false then
							touched = true
							local function apply()
								local no = Char.HumanoidRootPart:Clone()
								wait(.25)
								Char.HumanoidRootPart:Destroy()
								no.Parent = Char
								Char:MoveTo(loc)
								touched = false
							end
							if Char then
								apply()
							end
						end
					end
				end)
				repeat wait() until Char
				local cleanUp
				cleanUp = Players.LocalPlayer.CharacterAdded:connect(function(char)
					boxTouched:Disconnect()
					box:Destroy()
					cleanUp:Disconnect()
				end)
				loc = Char.HumanoidRootPart.Position
				Char:MoveTo(box.Position + Vector3.new(0,.5,0))
			end)
			
			addcmd('strengthen',{},function(args, speaker)
				for _, child in pairs(speaker.Character:GetDescendants()) do
					if child.ClassName == "Part" then
						if args[1] then
							child.CustomPhysicalProperties = PhysicalProperties.new(args[1], 0.3, 0.5)
						else
							child.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)
						end
					end
				end
			end)
			
			addcmd('weaken',{},function(args, speaker)
				for _, child in pairs(speaker.Character:GetDescendants()) do
					if child.ClassName == "Part" then
						if args[1] then
							child.CustomPhysicalProperties = PhysicalProperties.new(-args[1], 0.3, 0.5)
						else
							child.CustomPhysicalProperties = PhysicalProperties.new(0, 0.3, 0.5)
						end
					end
				end
			end)
			
			addcmd('unweaken',{'unstrengthen'},function(args, speaker)
				for _, child in pairs(speaker.Character:GetDescendants()) do
					if child.ClassName == "Part" then
						child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
					end
				end
			end)
			
			addcmd('breakvelocity', {}, function(args, speaker)
				local BeenASecond, V3 = false, Vector3.new(0, 0, 0)
				delay(1, function()
					BeenASecond = true
				end)
				while not BeenASecond do
					for _, v in ipairs(speaker.Character:GetDescendants()) do
						if v.IsA(v, "BasePart") then
							v.Velocity, v.RotVelocity = V3, V3
						end
					end
					wait()
				end
			end)
			
			addcmd('jpower',{'jumppower','jp'},function(args, speaker)
				local jpower = args[1] or 50
				if isNumber(jpower) then
					if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
						speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = jpower
					else
						speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight  = jpower
					end
				end
			end)
			
			addcmd('maxslopeangle',{'msa'},function(args, speaker)
				local sangle = args[1] or 89
				if isNumber(sangle) then
					speaker.Character:FindFirstChildOfClass('Humanoid').MaxSlopeAngle = sangle
				end
			end)
			
			addcmd('gravity',{'grav'},function(args, speaker)
				local grav = args[1] or 196.2
				if isNumber(grav) then
					workspace.Gravity = grav
				end
			end)
			
			addcmd('hipheight',{'hheight'},function(args, speaker)
				speaker.Character:FindFirstChildWhichIsA('Humanoid').HipHeight = args[1] or (r15(speaker) and 2.1 or 0)
			end)
			
			addcmd("dance", {}, function(args, speaker)
				pcall(execCmd, "undance")
				local dances = {"27789359", "30196114", "248263260", "45834924", "33796059", "28488254", "52155728"}
				if r15(speaker) then
					dances = {"3333432454", "4555808220", "4049037604", "4555782893", "10214311282", "10714010337", "10713981723", "10714372526", "10714076981", "10714392151", "11444443576"}
				end
				local animation = Instance.new("Animation")
				animation.AnimationId = "rbxassetid://" .. dances[math.random(1, #dances)]
				danceTrack = speaker.Character:FindFirstChildWhichIsA("Humanoid"):LoadAnimation(animation)
				danceTrack.Looped = true
				danceTrack:Play()
			end)
			
			addcmd("undance", {"nodance"}, function(args, speaker)
				danceTrack:Stop()
				danceTrack:Destroy()
			end)
			
			addcmd('nolimbs',{'rlimbs'},function(args, speaker)
				if r15(speaker) then
					for i,v in pairs(speaker.Character:GetChildren()) do
						if v:IsA("BasePart") and
							v.Name == "RightUpperLeg" or
							v.Name == "LeftUpperLeg" or
							v.Name == "RightUpperArm" or
							v.Name == "LeftUpperArm" then
							v:Destroy()
						end
					end
				else
					for i,v in pairs(speaker.Character:GetChildren()) do
						if v:IsA("BasePart") and
							v.Name == "Right Leg" or
							v.Name == "Left Leg" or
							v.Name == "Right Arm" or
							v.Name == "Left Arm" then
							v:Destroy()
						end
					end
				end
			end)
			
			addcmd('nohead',{'rhead','headless'},function(args, speaker)
				if sethidden then
					-- Full credit to Thomas_Cornez#0272 @Discord
					local lplr = Players.LocalPlayer
					local char = lplr.Character
					local rigType = tostring(char:FindFirstChildOfClass('Humanoid').RigType) == "Enum.HumanoidRigType.R6" and 1 or tostring(char:FindFirstChildOfClass('Humanoid').RigType) == "Enum.HumanoidRigType.R15" and 2
			
					local speaker = Players.LocalPlayer
			
			
					local test = Instance.new("Model")
					local hum  = Instance.new("Humanoid")
					local animation = Instance.new("Model")
					local humanoidanimation = Instance.new("Humanoid")
					test.Parent = workspace
					hum.Parent = test
					animation.Parent = workspace
					humanoidanimation.Parent = animation
			
					lplr.Character = test
					wait(2)
					char:FindFirstChildOfClass('Humanoid').Animator.Parent = humanoidanimation
					char:FindFirstChildOfClass('Humanoid'):Destroy()
			
					char.Head:Destroy()
					wait(5)
					Players.LocalPlayer.Character = char
			
					local hum2 = Instance.new("Humanoid")
					hum2.Parent = char
					char:FindFirstChildOfClass("Humanoid").Jump = true
			
					humanoidanimation.Animator.Parent = hum2
					char.Animate.Disabled = true
					wait()
					char.Animate.Disabled = false
					wait()
			
					if rig == 1 then
						hum2.HipHeight = 0
					elseif rig == 2 then
						hum2.HipHeight = 2.19
					end
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing sethiddenproperty)')
				end
			end)
			
			addcmd('noarms',{'rarms'},function(args, speaker)
				if r15(speaker) then
					for i,v in pairs(speaker.Character:GetChildren()) do
						if v:IsA("BasePart") and
							v.Name == "RightUpperArm" or
							v.Name == "LeftUpperArm" then
							v:Destroy()
						end
					end
				else
					for i,v in pairs(speaker.Character:GetChildren()) do
						if v:IsA("BasePart") and
							v.Name == "Right Arm" or
							v.Name == "Left Arm" then
							v:Destroy()
						end
					end
				end
			end)
			
			addcmd('nolegs',{'rlegs'},function(args, speaker)
				if r15(speaker) then
					for i,v in pairs(speaker.Character:GetChildren()) do
						if v:IsA("BasePart") and
							v.Name == "RightUpperLeg" or
							v.Name == "LeftUpperLeg" then
							v:Destroy()
						end
					end
				else
					for i,v in pairs(speaker.Character:GetChildren()) do
						if v:IsA("BasePart") and
							v.Name == "Right Leg" or
							v.Name == "Left Leg" then
							v:Destroy()
						end
					end
				end
			end)
			
			addcmd("sit", {}, function(args, speaker)
				speaker.Character:FindFirstChildWhichIsA("Humanoid").Sit = true
			end)
			
			addcmd("lay", {"laydown"}, function(args, speaker)
				local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
				humanoid.Sit = true
				task.wait(0.1)
				humanoid.RootPart.CFrame = humanoid.RootPart.CFrame * CFrame.Angles(math.pi * 0.5, 0, 0)
				for _, v in ipairs(humanoid:GetPlayingAnimationTracks()) do
					v:Stop()
				end
			end)
			
			addcmd("sitwalk", {}, function(args, speaker)
				local anims = speaker.Character.Animate
				local sit = anims.sit:FindFirstChildWhichIsA("Animation").AnimationId
				anims.idle:FindFirstChildWhichIsA("Animation").AnimationId = sit
				anims.walk:FindFirstChildWhichIsA("Animation").AnimationId = sit
				anims.run:FindFirstChildWhichIsA("Animation").AnimationId = sit
				anims.jump:FindFirstChildWhichIsA("Animation").AnimationId = sit
				speaker.Character:FindFirstChildWhichIsA("Humanoid").HipHeight = not r15(speaker) and -1.5 or 0.5
			end)
			
			function noSitFunc()
				wait()
				if Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid").Sit then
					Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid").Sit = false
				end
			end
			addcmd('nosit',{},function(args, speaker)
				if noSit then noSit:Disconnect() nositDied:Disconnect() end
				noSit = Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):GetPropertyChangedSignal("Sit"):Connect(noSitFunc)
				local function nositDiedFunc()
					repeat wait() until speaker.Character ~= nil and speaker.Character:FindFirstChildOfClass("Humanoid")
					noSit:Disconnect()
					noSit = Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):GetPropertyChangedSignal("Sit"):Connect(noSitFunc)
				end
				nositDied = speaker.CharacterAdded:Connect(nositDiedFunc)
			end)
			
			addcmd('unnosit',{},function(args, speaker)
				if noSit then noSit:Disconnect() nositDied:Disconnect() end
			end)
			
			addcmd('jump',{},function(args, speaker)
				speaker.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
			end)
			
			local infJump
			local infJumpDebounce = false
			addcmd('infjump',{'infinitejump'},function(args, speaker)
			    if infJump then infJump:Disconnect() end
			    infJumpDebounce = false
			    infJump = UserInputService.JumpRequest:Connect(function()
				  if not infJumpDebounce then
					infJumpDebounce = true
					speaker.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
					wait()
					infJumpDebounce = false
				  end
			    end)
			end)
			
			addcmd('uninfjump',{'uninfinitejump','noinfjump','noinfinitejump'},function(args, speaker)
			    if infJump then infJump:Disconnect() end
			    infJumpDebounce = false
			end)
			
			local flyjump
			addcmd('flyjump',{},function(args, speaker)
				if flyjump then flyjump:Disconnect() end
				flyjump = UserInputService.JumpRequest:Connect(function()
					speaker.Character:FindFirstChildWhichIsA("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
				end)
			end)
			
			addcmd('unflyjump',{'noflyjump'},function(args, speaker)
				if flyjump then flyjump:Disconnect() end
			end)
			
			local HumanModCons = {}
			addcmd('autojump',{'ajump'},function(args, speaker)
				local Char = speaker.Character
				local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
				local function autoJump()
					if Char and Human then
						local check1 = workspace:FindPartOnRay(Ray.new(Human.RootPart.Position-Vector3.new(0,1.5,0), Human.RootPart.CFrame.lookVector*3), Human.Parent)
						local check2 = workspace:FindPartOnRay(Ray.new(Human.RootPart.Position+Vector3.new(0,1.5,0), Human.RootPart.CFrame.lookVector*3), Human.Parent)
						if check1 or check2 then
							Human.Jump = true
						end
					end
				end
				autoJump()
				HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or RunService.RenderStepped:Connect(autoJump)
				HumanModCons.ajCA = (HumanModCons.ajCA and HumanModCons.ajCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
					Char, Human = nChar, nChar:WaitForChild("Humanoid")
					autoJump()
					HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or RunService.RenderStepped:Connect(autoJump)
				end)
			end)
			
			addcmd('unautojump',{'noautojump', 'noajump', 'unajump'},function(args, speaker)
				HumanModCons.ajLoop = (HumanModCons.ajLoop and HumanModCons.ajLoop:Disconnect() and false) or nil
				HumanModCons.ajCA = (HumanModCons.ajCA and HumanModCons.ajCA:Disconnect() and false) or nil
			end)
			
			addcmd('edgejump',{'ejump'},function(args, speaker)
				local Char = speaker.Character
				local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
				-- Full credit to NoelGamer06 @V3rmillion
				local state
				local laststate
				local lastcf
				local function edgejump()
					if Char and Human then
						laststate = state
						state = Human:GetState()
						if laststate ~= state and state == Enum.HumanoidStateType.Freefall and laststate ~= Enum.HumanoidStateType.Jumping then
							Char.HumanoidRootPart.CFrame = lastcf
							Char.HumanoidRootPart.Velocity = Vector3.new(Char.HumanoidRootPart.Velocity.X, Human.JumpPower or Human.JumpHeight, Char.HumanoidRootPart.Velocity.Z)
						end
						lastcf = Char.HumanoidRootPart.CFrame
					end
				end
				edgejump()
				HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)
				HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
					Char, Human = nChar, nChar:WaitForChild("Humanoid")
					edgejump()
					HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)
				end)
			end)
			
			addcmd('unedgejump',{'noedgejump', 'noejump', 'unejump'},function(args, speaker)
				HumanModCons.ejLoop = (HumanModCons.ejLoop and HumanModCons.ejLoop:Disconnect() and false) or nil
				HumanModCons.ejCA = (HumanModCons.ejCA and HumanModCons.ejCA:Disconnect() and false) or nil
			end)
			
			addcmd('team',{},function(args, speaker)
				local teamname = nil
				for a,b in pairs(Teams:GetChildren()) do
					local L_name = b.Name:lower()
					local F = L_name:find(getstring(1))
					if F == 1 then
						teamname = b 
					end
				end
				speaker.Team = teamname
			end)
			
			addcmd('nobgui',{'unbgui','nobillboardgui','unbillboardgui','noname','rohg'},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants())do
					if v:IsA("BillboardGui") or v:IsA("SurfaceGui") then
						v:Destroy()
					end
				end
			end)
			
			addcmd('loopnobgui',{'loopunbgui','loopnobillboardgui','loopunbillboardgui','loopnoname','looprohg'},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants())do
					if v:IsA("BillboardGui") or v:IsA("SurfaceGui") then
						v:Destroy()
					end
				end
				local function charPartAdded(part)
					if part:IsA("BillboardGui") or part:IsA("SurfaceGui") then
						wait()
						part:Destroy()
					end
				end
				charPartTrigger = speaker.Character.DescendantAdded:Connect(charPartAdded)
			end)
			
			addcmd('unloopnobgui',{'unloopunbgui','unloopnobillboardgui','unloopunbillboardgui','unloopnoname','unlooprohg'},function(args, speaker)
				if charPartTrigger then
					charPartTrigger:Disconnect()
				end
			end)
			
			addcmd('spasm',{},function(args, speaker)
				if not r15(speaker) then
					local pchar=speaker.Character
					local AnimationId = "33796059"
					SpasmAnim = Instance.new("Animation")
					SpasmAnim.AnimationId = "rbxassetid://"..AnimationId
					Spasm = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(SpasmAnim)
					Spasm:Play()
					Spasm:AdjustSpeed(99)
				else
					notify('R6 Required','This command requires the r6 rig type')
				end
			end)
			
			addcmd('unspasm',{'nospasm'},function(args, speaker)
				Spasm:Stop()
				SpasmAnim:Destroy()
			end)
			
			addcmd('headthrow',{},function(args, speaker)
				if not r15(speaker) then
					local AnimationId = "35154961"
					local Anim = Instance.new("Animation")
					Anim.AnimationId = "rbxassetid://"..AnimationId
					local k = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
					k:Play(0)
					k:AdjustSpeed(1)
				else
					notify('R6 Required','This command requires the r6 rig type')
				end
			end)
			
			addcmd('animation',{'anim'},function(args, speaker)
				if not r15(speaker) then
					local pchar=speaker.Character
					local AnimationId = tostring(args[1])
					local Anim = Instance.new("Animation")
					Anim.AnimationId = "rbxassetid://"..AnimationId
					local k = pchar:FindFirstChildOfClass('Humanoid'):LoadAnimation(Anim)
					k:Play()
					if args[2] then
						k:AdjustSpeed(tostring(args[2]))
					end
				else
					notify('R6 Required','This command requires the r6 rig type')
				end
			end)
			
			addcmd('noanim',{},function(args, speaker)
				speaker.Character.Animate.Disabled = true
			end)
			
			addcmd('reanim',{},function(args, speaker)
				speaker.Character.Animate.Disabled = false
			end)
			
			addcmd('animspeed',{},function(args, speaker)
				local Char = speaker.Character
				local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")
			
				for i,v in next, Hum:GetPlayingAnimationTracks() do
					v:AdjustSpeed(tonumber(args[1] or 1))
				end
			end)
			
			addcmd('copyanimation',{'copyanim','copyemote'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for _,v in ipairs(players)do
					local char = Players[v].Character
					for _, v1 in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetPlayingAnimationTracks()) do
						v1:Stop()
					end
					for _, v1 in pairs(Players[v].Character:FindFirstChildOfClass('Humanoid'):GetPlayingAnimationTracks()) do
						if not string.find(v1.Animation.AnimationId, "507768375") then
							local ANIM = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(v1.Animation)
							ANIM:Play(.1, 1, v1.Speed)
							ANIM.TimePosition = v1.TimePosition
							task.spawn(function()
								v1.Stopped:Wait()
								ANIM:Stop()
								ANIM:Destroy()
							end)
						end
					end
				end
			end)
			
			addcmd('stopanimations',{'stopanims','stopanim'},function(args, speaker)
				local Char = speaker.Character
				local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")
			
				for i,v in next, Hum:GetPlayingAnimationTracks() do
					v:Stop()
				end
			end)
			
			addcmd('refreshanimations', {'refreshanimation', 'refreshanims', 'refreshanim'}, function(args, speaker)
				local Char = speaker.Character or speaker.CharacterAdded:Wait()
				local Human = Char and Char:WaitForChild('Humanoid', 15)
				local Animate = Char and Char:WaitForChild('Animate', 15)
				if not Human or not Animate then
					return notify('Refresh Animations', 'Failed to get Animate/Humanoid')
				end
				Animate.Disabled = true
				for _, v in ipairs(Human:GetPlayingAnimationTracks()) do
					v:Stop()
				end
				Animate.Disabled = false
			end)
			
			addcmd('allowcustomanim', {'allowcustomanimations'}, function(args, speaker)
				StarterPlayer.AllowCustomAnimations = true
				execCmd('refreshanimations')
			end)
			
			addcmd('unallowcustomanim', {'unallowcustomanimations'}, function(args, speaker)
				StarterPlayer.AllowCustomAnimations = false
				execCmd('refreshanimations')
			end)
			
			addcmd('loopanimation', {'loopanim'},function(args, speaker)
				local Char = speaker.Character
				local Human = Char and Char.FindFirstChildWhichIsA(Char, "Humanoid")
				for _, v in ipairs(Human.GetPlayingAnimationTracks(Human)) do
					v.Looped = true
				end
			end)
			
			addcmd('tpposition',{'tppos'},function(args, speaker)
				if #args < 3 then return end
				local tpX,tpY,tpZ = tonumber(args[1]),tonumber(args[2]),tonumber(args[3])
				local char = speaker.Character
				if char and getRoot(char) then
					getRoot(char).CFrame = CFrame.new(tpX,tpY,tpZ)
				end
			end)
			
			addcmd('tweentpposition',{'ttppos'},function(args, speaker)
				if #args < 3 then return end
				local tpX,tpY,tpZ = tonumber(args[1]),tonumber(args[2]),tonumber(args[3])
				local char = speaker.Character
				if char and getRoot(char) then
					TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(tpX,tpY,tpZ)}):Play()
				end
			end)
			
			addcmd('offset',{},function(args, speaker)
				if #args < 3 then
					return 
				end
				if speaker.Character then
					speaker.Character:TranslateBy(Vector3.new(tonumber(args[1]) or 0, tonumber(args[2]) or 0, tonumber(args[3]) or 0))
				end
			end)
			
			addcmd('tweenoffset',{'toffset'},function(args, speaker)
				if #args < 3 then return end
				local tpX,tpY,tpZ = tonumber(args[1]),tonumber(args[2]),tonumber(args[3])
				local char = speaker.Character
				if char and getRoot(char) then
					TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(tpX,tpY,tpZ)}):Play()
				end
			end)
			
			addcmd('clickteleport',{},function(args, speaker)
				if speaker == Players.LocalPlayer then
					notify('Click TP','Go to Settings>Keybinds>Add to set up click tp')
				end
			end)
			
			addcmd('tptool', {'teleporttool'}, function(args, speaker)
				local TpTool = Instance.new("Tool")
				TpTool.Name = "Teleport Tool"
				TpTool.RequiresHandle = false
				TpTool.Parent = speaker.Backpack
				TpTool.Activated:Connect(function()
					local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
					local HRP = Char and Char:FindFirstChild("HumanoidRootPart")
					if not Char or not HRP then
						return warn("Failed to find HumanoidRootPart")
					end
					HRP.CFrame = CFrame.new(IYMouse.Hit.X, IYMouse.Hit.Y + 3, IYMouse.Hit.Z, select(4, HRP.CFrame:components()))
				end)
			end)
			
			addcmd('clickdelete',{},function(args, speaker)
				if speaker == Players.LocalPlayer then
					notify('Click Delete','Go to Settings>Keybinds>Add to set up click delete')
				end
			end)
			
			addcmd('getposition',{'getpos','notifypos','notifyposition'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					local char = Players[v].Character
					local pos = char and (getRoot(char) or char:FindFirstChildWhichIsA("BasePart"))
					pos = pos and pos.Position
					if not pos then
						return notify('Getposition Error','Missing character')
					end
					local roundedPos = math.round(pos.X) .. ", " .. math.round(pos.Y) .. ", " .. math.round(pos.Z)
					notify('Current Position',roundedPos)
				end
			end)
			
			addcmd('copyposition',{'copypos'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					local char = Players[v].Character
					local pos = char and (getRoot(char) or char:FindFirstChildWhichIsA("BasePart"))
					pos = pos and pos.Position
					if not pos then
						return notify('Getposition Error','Missing character')
					end
					local roundedPos = math.round(pos.X) .. ", " .. math.round(pos.Y) .. ", " .. math.round(pos.Z)
					toClipboard(roundedPos)
				end
			end)
			
			addcmd('walktopos',{'walktoposition'},function(args, speaker)
				if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
					speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
					wait(.1)
				end
				speaker.Character:FindFirstChildOfClass('Humanoid').WalkToPoint = Vector3.new(args[1],args[2],args[3])
			end)
			
			addcmd('speed',{'ws','walkspeed'},function(args, speaker)
				if args[2] then
					local speed = args[2] or 16
					if isNumber(speed) then
						speaker.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = speed
					end
				else
					local speed = args[1] or 16
					if isNumber(speed) then
						speaker.Character:FindFirstChildOfClass('Humanoid').WalkSpeed = speed
					end
				end
			end)
			
			addcmd('spoofspeed',{'spoofws','spoofwalkspeed'},function(args, speaker)
				if args[1] and isNumber(args[1]) then
					if hookmetamethod then
						local char = speaker.Character
						local setspeed;
						local index; index = hookmetamethod(game, "__index", function(self, key)
							local keyclean = key:gsub("\0", "")
							if (keyclean == "WalkSpeed" or keyclean == "walkSpeed") and self:IsA("Humanoid") and self:IsDescendantOf(char) and not checkcaller() then
								return setspeed or args[1]
							end
							return index(self, key)
						end)
						local newindex; newindex = hookmetamethod(game, "__newindex", function(self, key, value)
							local keyclean = string.gsub(key, "\0", "")
							if (keyclean == "WalkSpeed" or keyclean == "walkSpeed") and self:IsA("Humanoid") and self:IsDescendantOf(char) and not checkcaller() then
								setspeed = tonumber(value)
								return setspeed
							end
							return newindex(self, key, value)
						end)
					else
						notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
					end
				end
			end)
			
			addcmd('loopspeed',{'loopws'},function(args, speaker)
				local speed = args[1] or 16
				if args[2] then
					speed = args[2] or 16
				end
				if isNumber(speed) then
					local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
					local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
					local function WalkSpeedChange()
						if Char and Human then
							Human.WalkSpeed = speed
						end
					end
					WalkSpeedChange()
					HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
					HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
						Char, Human = nChar, nChar:WaitForChild("Humanoid")
						WalkSpeedChange()
						HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("WalkSpeed"):Connect(WalkSpeedChange)
					end)
				end
			end)
			
			addcmd('unloopspeed',{'unloopws'},function(args, speaker)
				HumanModCons.wsLoop = (HumanModCons.wsLoop and HumanModCons.wsLoop:Disconnect() and false) or nil
				HumanModCons.wsCA = (HumanModCons.wsCA and HumanModCons.wsCA:Disconnect() and false) or nil
			end)
			
			addcmd('spoofjumppower',{'spoofjp'},function(args, speaker)
				if args[1] and isNumber(args[1]) then
					if hookmetamethod then
						local char = speaker.Character
						local setpower;
						local index; index = hookmetamethod(game, "__index", function(self, key)
							local keyclean = key:gsub("\0", "")
							if (keyclean == "JumpPower" or keyclean == "jumpPower") and self:IsA("Humanoid") and self:IsDescendantOf(char) and not checkcaller() then
								return setpower or args[1]
							end
							return index(self, key)
						end)
						local newindex; newindex = hookmetamethod(game, "__newindex", function(self, key, value)
							local keyclean = string.gsub(key, "\0", "")
							if (keyclean == "JumpPower" or keyclean == "jumpPower") and self:IsA("Humanoid") and self:IsDescendantOf(char) and not checkcaller() then
								setpower = tonumber(value)
								return setpower
							end
							return newindex(self, key, value)
						end)
					else
						notify('Incompatible Exploit','Your exploit does not support this command (missing hookmetamethod)')
					end
				end
			end)
			
			addcmd('loopjumppower',{'loopjp','loopjpower'},function(args, speaker)
				local jpower = args[1] or 50
				if isNumber(jpower) then
					local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
					local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
					local function JumpPowerChange()
						if Char and Human then
							if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
								speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = jpower
							else
								speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight  = jpower
							end
						end
					end
					JumpPowerChange()
					HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("JumpPower"):Connect(JumpPowerChange)
					HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or speaker.CharacterAdded:Connect(function(nChar)
						Char, Human = nChar, nChar:WaitForChild("Humanoid")
						JumpPowerChange()
						HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or Human:GetPropertyChangedSignal("JumpPower"):Connect(JumpPowerChange)
					end)
				end
			end)
			
			addcmd('unloopjumppower',{'unloopjp','unloopjpower'},function(args, speaker)
				local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
				local Human = Char and Char:FindFirstChildWhichIsA("Humanoid")
				HumanModCons.jpLoop = (HumanModCons.jpLoop and HumanModCons.jpLoop:Disconnect() and false) or nil
				HumanModCons.jpCA = (HumanModCons.jpCA and HumanModCons.jpCA:Disconnect() and false) or nil
				if Char and Human then
					if speaker.Character:FindFirstChildOfClass('Humanoid').UseJumpPower then
						speaker.Character:FindFirstChildOfClass('Humanoid').JumpPower = 50
					else
						speaker.Character:FindFirstChildOfClass('Humanoid').JumpHeight  = 50
					end
				end
			end)
			
			addcmd('tools',{'gears'},function(args, speaker)
				local function copy(instance)
					for i,c in pairs(instance:GetChildren())do
						if c:IsA('Tool') or c:IsA('HopperBin') then
							c:Clone().Parent = speaker:FindFirstChildOfClass("Backpack")
						end
						copy(c)
					end
				end
				copy(Lighting)
				local function copy(instance)
					for i,c in pairs(instance:GetChildren())do
						if c:IsA('Tool') or c:IsA('HopperBin') then
							c:Clone().Parent = speaker:FindFirstChildOfClass("Backpack")
						end
						copy(c)
					end
				end
				copy(ReplicatedStorage)
				notify('Tools','Copied tools from ReplicatedStorage and Lighting')
			end)
			
			addcmd('notools',{'rtools','clrtools','removetools','deletetools','dtools'},function(args, speaker)
				for i,v in pairs(speaker:FindFirstChildOfClass("Backpack"):GetDescendants()) do
					if v:IsA('Tool') or v:IsA('HopperBin') then
						v:Destroy()
					end
				end
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v:IsA('Tool') or v:IsA('HopperBin') then
						v:Destroy()
					end
				end
			end)
			
			addcmd('deleteselectedtool',{'dst'},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v:IsA('Tool') or v:IsA('HopperBin') then
						v:Destroy()
					end
				end
			end)
			
			addcmd('console',{},function(args, speaker)
				-- Thanks wally!!
				notify("Loading",'Hold on a sec')
				local _, str = pcall(function()
					return game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/console.lua", true)
				end)
			
				local s, e = loadstring(str)
				if typeof(s) ~= "function" then
					return
				end
			
				local success, message = pcall(s)
				if (not success) then
					if printconsole then
						printconsole(message)
					elseif printoutput then
						printoutput(message)
					end
				end
				wait(1)
				notify('Console','Press F9 to open the console')
			end)
			
			addcmd('explorer', {'dex'}, function(args, speaker)
			    notify('Loading', 'Hold on a sec')
			    loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
			end)
			
			addcmd('olddex', {'odex'}, function(args, speaker)
			    notify('Loading old explorer', 'Hold on a sec')
			    
			    local getobjects = function(a)
				  local Objects = {}
				  if a then
					local b = InsertService:LoadLocalAsset(a)
					if b then 
					    table.insert(Objects, b) 
					end
				  end
				  return Objects
			    end
			
			    local Dex = getobjects("rbxassetid://10055842438")[1]
			    Dex.Parent = PARENT
			
			    local function Load(Obj, Url)
				  local function GiveOwnGlobals(Func, Script)
					-- Fix for this edit of dex being poorly made
					-- I (Alex) would like to commemorate whoever added this dex in somehow finding the worst dex to ever exist
					local Fenv, RealFenv, FenvMt = {}, {
					    script = Script,
					    getupvalue = function(a, b)
						  return nil -- force it to use globals
					    end,
					    getreg = function() -- It loops registry for some idiotic reason so stop it from doing that and just use a global
						  return {} -- force it to use globals
					    end,
					    getprops = getprops or function(inst)
						  if getproperties then
							local props = getproperties(inst)
							if props[1] and gethiddenproperty then
							    local results = {}
							    for _,name in pairs(props) do
								  local success, res = pcall(gethiddenproperty, inst, name)
								  if success then
									results[name] = res
								  end
							    end
							    
							    return results
							end
							
							return props
						  end
						  
						  return {}
					    end
					}, {}
					FenvMt.__index = function(a,b)
					    return RealFenv[b] == nil and getgenv()[b] or RealFenv[b]
					end
					FenvMt.__newindex = function(a, b, c)
					    if RealFenv[b] == nil then 
						  getgenv()[b] = c 
					    else 
						  RealFenv[b] = c 
					    end
					end
					setmetatable(Fenv, FenvMt)
					pcall(setfenv, Func, Fenv)
					return Func
				  end
			
				  local function LoadScripts(_, Script)
					if Script:IsA("LocalScript") then
					    task.spawn(function()
						  GiveOwnGlobals(loadstring(Script.Source,"="..Script:GetFullName()), Script)()
					    end)
					end
					table.foreach(Script:GetChildren(), LoadScripts)
				  end
						  
				  LoadScripts(nil, Obj)
			    end
			
			    Load(Dex)
			end)
			
			addcmd('remotespy',{'rspy'},function(args, speaker)
				notify("Loading",'Hold on a sec')
				-- Full credit to exx, creator of SimpleSpy
				-- also thanks to NoobSploit for fixing
				loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua"))()
			end)
			
			addcmd('audiologger',{'alogger'},function(args, speaker)
				notify("Loading",'Hold on a sec')
				loadstring(game:HttpGet(('https://raw.githubusercontent.com/infyiff/backup/main/audiologger.lua'),true))()
			end)
			
			local loopgoto = nil
			addcmd('loopgoto',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					loopgoto = nil
					if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
						speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
						wait(.1)
					end
					loopgoto = Players[v]
					local distance = 3
					if args[2] and isNumber(args[2]) then
						distance = args[2]
					end
					local lDelay = 0
					if args[3] and isNumber(args[3]) then
						lDelay = args[3]
					end
					repeat
						if Players:FindFirstChild(v) then
							if Players[v].Character ~= nil then
								getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame + Vector3.new(distance,1,0)
							end
							wait(lDelay)
						else
							loopgoto = nil
						end
					until loopgoto ~= Players[v]
				end
			end)
			
			addcmd('unloopgoto',{'noloopgoto'},function(args, speaker)
				loopgoto = nil
			end)
			
			addcmd('headsit',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				if headSit then headSit:Disconnect() end
				for i,v in pairs(players)do
					speaker.Character:FindFirstChildOfClass('Humanoid').Sit = true
					headSit = RunService.Heartbeat:Connect(function()
						if Players:FindFirstChild(Players[v].Name) and Players[v].Character ~= nil and getRoot(Players[v].Character) and getRoot(speaker.Character) and speaker.Character:FindFirstChildOfClass('Humanoid').Sit == true then
							getRoot(speaker.Character).CFrame = getRoot(Players[v].Character).CFrame * CFrame.Angles(0,math.rad(0),0)* CFrame.new(0,1.6,0.4)
						else
							headSit:Disconnect()
						end
					end)
				end
			end)
			
			addcmd('chat',{'say'},function(args, speaker)
				local cString = getstring(1)
				ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(cString, "All")
			end)
			
			
			spamming = false
			spamspeed = 1
			addcmd('spam',{},function(args, speaker)
				spamming = true
				local spamstring = getstring(1)
				repeat wait(spamspeed)
					ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(spamstring, "All")
				until spamming == false
			end)
			
			addcmd('nospam',{'unspam'},function(args, speaker)
				spamming = false
			end)
			
			addcmd('whisper',{'pm'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					task.spawn(function()
						local plrName = Players[v].Name
						local pmstring = getstring(2)
						ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("/w "..plrName.." "..pmstring, "All")
					end)
				end
			end)
			
			pmspamming = {}
			addcmd('pmspam',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					task.spawn(function()
						local plrName = Players[v].Name
						if FindInTable(pmspamming, plrName) then return end
						table.insert(pmspamming, plrName)
						local pmspamstring = getstring(2)
						repeat
							if Players:FindFirstChild(v) then
								wait(spamspeed)
								ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("/w "..plrName.." "..pmspamstring, "All")
							else
								for a,b in pairs(pmspamming) do if b == plrName then table.remove(pmspamming, a) end end
							end
						until not FindInTable(pmspamming, plrName)
					end)
				end
			end)
			
			addcmd('nopmspam',{'unpmspam'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					task.spawn(function()
						for a,b in pairs(pmspamming) do
							if b == Players[v].Name then
								table.remove(pmspamming, a)
							end
						end
					end)
				end
			end)
			
			addcmd('spamspeed',{},function(args, speaker)
				local speed = args[1] or 1
				if isNumber(speed) then
					spamspeed = speed
				end
			end)
			
			addcmd('bubblechat',{},function(args, speaker)
				ChatService.BubbleChatEnabled = true
			end)
			
			addcmd('unbubblechat',{'nobubblechat'},function(args, speaker)
				ChatService.BubbleChatEnabled = false
			end)
			
			addcmd('safechat',{},function(args, speaker)
				speaker:SetSuperSafeChat(true)
			end)
			
			addcmd('nosafechat',{'disablesafechat','unsafechat'},function(args, speaker)
				speaker:SetSuperSafeChat(false)
			end)
			
			addcmd('blockhead',{},function(args, speaker)
				speaker.Character.Head:FindFirstChildOfClass("SpecialMesh"):Destroy()
			end)
			
			addcmd('blockhats',{},function(args, speaker)
				for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
					for i,c in pairs(v:GetDescendants()) do
						if c:IsA("SpecialMesh") then
							c:Destroy()
						end
					end
				end
			end)
			
			addcmd('blocktool',{},function(args, speaker)
				for _,v in pairs(speaker.Character:GetChildren()) do
					if v:IsA("Tool") or v:IsA("HopperBin") then
						for i,c in pairs(v:GetDescendants()) do
							if c:IsA("SpecialMesh") then
								c:Destroy()
							end
						end
					end
				end
			end)
			
			addcmd('creeper',{},function(args, speaker)
				if r15(speaker) then
					speaker.Character.Head:FindFirstChildOfClass("SpecialMesh"):Destroy()
					speaker.Character.LeftUpperArm:Destroy()
					speaker.Character.RightUpperArm:Destroy()
					speaker.Character:FindFirstChildOfClass("Humanoid"):RemoveAccessories()
				else
					speaker.Character.Head:FindFirstChildOfClass("SpecialMesh"):Destroy()
					speaker.Character["Left Arm"]:Destroy()
					speaker.Character["Right Arm"]:Destroy()
					speaker.Character:FindFirstChildOfClass("Humanoid"):RemoveAccessories()
				end
			end)
			
			function getTorso(x)
				x = x or Players.LocalPlayer.Character
				return x:FindFirstChild("Torso") or x:FindFirstChild("UpperTorso") or x:FindFirstChild("LowerTorso") or x:FindFirstChild("HumanoidRootPart")
			end
			
			addcmd("bang", {"rape"}, function(args, speaker)
				execCmd("unbang")
				wait()
				local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
				bangAnim = Instance.new("Animation")
				bangAnim.AnimationId = not r15(speaker) and "rbxassetid://148840371" or "rbxassetid://5918726674"
				bang = humanoid:LoadAnimation(bangAnim)
				bang:Play(0.1, 1, 1)
				bang:AdjustSpeed(args[2] or 3)
				bangDied = humanoid.Died:Connect(function()
					bang:Stop()
					bangAnim:Destroy()
					bangDied:Disconnect()
					bangLoop:Disconnect()
				end)
				if args[1] then
					local players = getPlayer(args[1], speaker)
					for _, v in pairs(players) do
						local bangplr = Players[v].Name
						local bangOffet = CFrame.new(0, 0, 1.1)
						bangLoop = RunService.Stepped:Connect(function()
							pcall(function()
								local otherRoot = getTorso(Players[bangplr].Character)
								getRoot(speaker.Character).CFrame = otherRoot.CFrame * bangOffet
							end)
						end)
					end
				end
			end)
			
			addcmd("unbang", {"unrape"}, function(args, speaker)
				if bangDied then
					bangDied:Disconnect()
					bang:Stop()
					bangAnim:Destroy()
					bangLoop:Disconnect()
				end
			end)
			
			addcmd('carpet',{},function(args, speaker)
				if not r15(speaker) then
					execCmd('uncarpet')
					wait()
					local players = getPlayer(args[1], speaker)
					for i,v in pairs(players)do
						carpetAnim = Instance.new("Animation")
						carpetAnim.AnimationId = "rbxassetid://282574440"
						carpet = speaker.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(carpetAnim)
						carpet:Play(.1, 1, 1)
						local carpetplr = Players[v].Name
						carpetDied = speaker.Character:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
							carpetLoop:Disconnect()
							carpet:Stop()
							carpetAnim:Destroy()
							carpetDied:Disconnect()
						end)
						carpetLoop = RunService.Heartbeat:Connect(function()
							pcall(function()
								getRoot(Players.LocalPlayer.Character).CFrame = getRoot(Players[carpetplr].Character).CFrame
							end)
						end)
					end
				else
					notify('R6 Required','This command requires the r6 rig type')
				end
			end)
			
			addcmd('uncarpet',{'nocarpet'},function(args, speaker)
				if carpetLoop then
					carpetLoop:Disconnect()
					carpetDied:Disconnect()
					carpet:Stop()
					carpetAnim:Destroy()
				end
			end)
			
			addcmd('friend',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					speaker:RequestFriendship(v)
				end
			end)
			
			addcmd('unfriend',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					speaker:RevokeFriendship(v)
				end
			end)
			
			addcmd('bringpart',{},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v.Name:lower() == getstring(1):lower() and v:IsA("BasePart") then
						v.CFrame = getRoot(speaker.Character).CFrame
					end
				end
			end)
			
			addcmd('bringpartclass',{'bpc'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v.ClassName:lower() == getstring(1):lower() and v:IsA("BasePart") then
						v.CFrame = getRoot(speaker.Character).CFrame
					end
				end
			end)
			
			gotopartDelay = 0.1
			addcmd('gotopart',{'topart'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v.Name:lower() == getstring(1):lower() and v:IsA("BasePart") then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						wait(gotopartDelay)
						getRoot(speaker.Character).CFrame = v.CFrame
					end
				end
			end)
			
			addcmd('tweengotopart',{'tgotopart','ttopart'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v.Name:lower() == getstring(1):lower() and v:IsA("BasePart") then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						wait(gotopartDelay)
						TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = v.CFrame}):Play()
					end
				end
			end)
			
			addcmd('gotopartclass',{'gpc'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v.ClassName:lower() == getstring(1):lower() and v:IsA("BasePart") then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						wait(gotopartDelay)
						getRoot(speaker.Character).CFrame = v.CFrame
					end
				end
			end)
			
			addcmd('tweengotopartclass',{'tgpc'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v.ClassName:lower() == getstring(1):lower() and v:IsA("BasePart") then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						wait(gotopartDelay)
						TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = v.CFrame}):Play()
					end
				end
			end)
			
			addcmd('gotomodel',{'tomodel'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v.Name:lower() == getstring(1):lower() and v:IsA("Model") then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						wait(gotopartDelay)
						getRoot(speaker.Character).CFrame = v:GetModelCFrame()
					end
				end
			end)
			
			addcmd('tweengotomodel',{'tgotomodel','ttomodel'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v.Name:lower() == getstring(1):lower() and v:IsA("Model") then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						wait(gotopartDelay)
						TweenService:Create(getRoot(speaker.Character), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = v:GetModelCFrame()}):Play()
					end
				end
			end)
			
			addcmd('gotopartdelay',{},function(args, speaker)
				local gtpDelay = args[1] or 0.1
				if isNumber(gtpDelay) then
					gotopartDelay = gtpDelay
				end
			end)
			
			addcmd('noclickdetectorlimits',{'nocdlimits','removecdlimits'},function(args, speaker)
				for i,v in ipairs(workspace:GetDescendants()) do
					if v:IsA("ClickDetector") then
						v.MaxActivationDistance = math.huge
					end
				end
			end)
			
			addcmd('fireclickdetectors',{'firecd','firecds'}, function(args, speaker)
			    if fireclickdetector then
				  if args[1] then
					local name = getstring(1)
					for _, descendant in ipairs(workspace:GetDescendants()) do
					    if descendant:IsA("ClickDetector") and descendant.Name == name then
						  fireclickdetector(descendant)
					    end
					end
				  else
					for _, descendant in ipairs(workspace:GetDescendants()) do
					    if descendant:IsA("ClickDetector") then
						  fireclickdetector(descendant)
					    end
					end
				  end
			    else
				  notify("Incompatible Exploit", "Your exploit does not support this command (missing fireclickdetector)")
			    end
			end)
			
			addcmd('noproximitypromptlimits',{'nopplimits','removepplimits'},function(args, speaker)
				for i,v in pairs(workspace:GetDescendants()) do
					if v:IsA("ProximityPrompt") then
						v.MaxActivationDistance = math.huge
					end
				end
			end)
			
			addcmd('fireproximityprompts',{'firepp'},function(args, speaker)
			    if fireclickdetector then
				  if args[1] then
					local name = getstring(1)
					for _, descendant in ipairs(workspace:GetDescendants()) do
					    if descendant:IsA("ProximityPrompt") and descendant.Name == name then
						  fireproximityprompt(descendant)
					    end
					end
				  else
					for _, descendant in ipairs(workspace:GetDescendants()) do
					    if descendant:IsA("ProximityPrompt") then
						  fireproximityprompt(descendant)
					    end
					end
				  end
			    else
				  notify("Incompatible Exploit", "Your exploit does not support this command (missing fireproximityprompt)")
			    end
			end)
			
			local PromptButtonHoldBegan = nil
			addcmd('instantproximityprompts',{'instantpp'},function(args, speaker)
				if fireproximityprompt then
					execCmd("uninstantproximityprompts")
					wait(0.1)
					PromptButtonHoldBegan = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
						fireproximityprompt(prompt)
					end)
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing fireproximityprompt)')
				end
			end)
			
			addcmd('uninstantproximityprompts',{'uninstantpp'},function(args, speaker)
				if PromptButtonHoldBegan ~= nil then
					PromptButtonHoldBegan:Disconnect()
					PromptButtonHoldBegan = nil
				end
			end)
			
			addcmd('notifyping',{'ping'},function(args, speaker)
			    notify("Ping", math.round(speaker:GetNetworkPing() * 1000) .. "ms")
			end)
			
			addcmd('grabtools', {}, function(args, speaker)
				local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
				for _, child in ipairs(workspace:GetChildren()) do
					if speaker.Character and child:IsA("BackpackItem") and child:FindFirstChild("Handle") then
						humanoid:EquipTool(child)
					end
				end
			
				if grabtoolsFunc then 
					grabtoolsFunc:Disconnect() 
				end
			
				grabtoolsFunc = workspace.ChildAdded:Connect(function(child)
					if speaker.Character and child:IsA("BackpackItem") and child:FindFirstChild("Handle") then
						humanoid:EquipTool(child)
					end
				end)
			
				notify("Grabtools", "Picking up any dropped tools")
			end)
			
			addcmd('nograbtools',{'ungrabtools'},function(args, speaker)
				if grabtoolsFunc then 
					grabtoolsFunc:Disconnect() 
				end
			
				notify("Grabtools", "Grabtools has been disabled")
			end)
			
			local specifictoolremoval = {}
			addcmd('removespecifictool',{},function(args, speaker)
				if args[1] and speaker:FindFirstChildOfClass("Backpack") then
					local tool = string.lower(getstring(1))
					local RST = RunService.RenderStepped:Connect(function()
						if speaker:FindFirstChildOfClass("Backpack") then
							for i,v in pairs(speaker:FindFirstChildOfClass("Backpack"):GetChildren()) do
								if v.Name:lower() == tool then
									v:Remove()
								end
							end
						end
					end)
					specifictoolremoval[tool] = RST
				end
			end)
			
			addcmd('unremovespecifictool',{},function(args, speaker)
				if args[1] then
					local tool = string.lower(getstring(1))
					if specifictoolremoval[tool] ~= nil then
						specifictoolremoval[tool]:Disconnect()
						specifictoolremoval[tool] = nil
					end
				end
			end)
			
			addcmd('clearremovespecifictool',{},function(args, speaker)
				for obj in pairs(specifictoolremoval) do
					specifictoolremoval[obj]:Disconnect()
					specifictoolremoval[obj] = nil
				end
			end)
			
			addcmd('light',{},function(args, speaker)
				local light = Instance.new("PointLight")
				light.Parent = getRoot(speaker.Character)
				light.Range = 30
				if args[1] then
					light.Brightness = args[2]
					light.Range = args[1]
				else
					light.Brightness = 5
				end
			end)
			
			addcmd('unlight',{'nolight'},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v.ClassName == "PointLight" then
						v:Destroy()
					end
				end
			end)
			
			addcmd('copytools',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players)do
					task.spawn(function()
						for i,v in pairs(Players[v]:FindFirstChildOfClass("Backpack"):GetChildren()) do
							if v:IsA('Tool') or v:IsA('HopperBin') then
								v:Clone().Parent = speaker:FindFirstChildOfClass("Backpack")
							end
						end
					end)
				end
			end)
			
			addcmd('naked',{},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v:IsA("Clothing") or v:IsA("ShirtGraphic") then
						v:Destroy()
					end
				end
			end)
			
			addcmd('noface',{'removeface'},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v:IsA("Decal") and v.Name == 'face' then
						v:Destroy()
					end
				end
			end)
			
			addcmd('spawnpoint',{'spawn'},function(args, speaker)
				spawnpos = getRoot(speaker.Character).CFrame
				spawnpoint = true
				spDelay = tonumber(args[1]) or 0.1
				notify('Spawn Point','Spawn point created at '..tostring(spawnpos))
			end)
			
			addcmd('nospawnpoint',{'nospawn','removespawnpoint'},function(args, speaker)
				spawnpoint = false
				notify('Spawn Point','Removed spawn point')
			end)
			
			addcmd('flashback',{'diedtp'},function(args, speaker)
				if lastDeath ~= nil then
					if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
						speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
						wait(.1)
					end
					getRoot(speaker.Character).CFrame = lastDeath
				end
			end)
			
			addcmd('hatspin',{'spinhats'},function(args, speaker)
				execCmd('unhatspin')
				wait(.5)
				for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
					local keep = Instance.new("BodyPosition") keep.Name = randomString() keep.Parent = v.Handle
					local spin = Instance.new("BodyAngularVelocity") spin.Name = randomString() spin.Parent = v.Handle
					v.Handle:FindFirstChildOfClass("Weld"):Destroy()
					if args[1] then
						spin.AngularVelocity = Vector3.new(0, args[1], 0)
						spin.MaxTorque = Vector3.new(0, args[1] * 2, 0)
					else
						spin.AngularVelocity = Vector3.new(0, 100, 0)
						spin.MaxTorque = Vector3.new(0, 200, 0)
					end
					keep.P = 30000
					keep.D = 50
					spinhats = RunService.Stepped:Connect(function()
						pcall(function()
							keep.Position = Players.LocalPlayer.Character.Head.Position
						end)
					end)
				end
			end)
			
			addcmd('unhatspin',{'unspinhats'},function(args, speaker)
				if spinhats then
					spinhats:Disconnect()
				end
				for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
					v.Parent = workspace
					for i,c in pairs(v.Handle) do
						if c:IsA("BodyPosition") or c:IsA("BodyAngularVelocity") then
							c:Destroy()
						end
					end
					wait()
					v.Parent = speaker.Character
				end
			end)
			
			addcmd('clearhats',{'cleanhats'},function(args, speaker)
				if firetouchinterest then
					local Player = Players.LocalPlayer
					local Character = Player.Character
					local Old = Character:FindFirstChild("HumanoidRootPart").CFrame
					local Hats = {}
					
					for _, child in ipairs(workspace:GetChildren()) do
						if child:IsA("Accessory") then
							table.insert(Hats, child)
						end
					end
					
					for _, accessory in ipairs(Character:FindFirstChildOfClass("Humanoid"):GetAccessories()) do
						accessory:Destroy()
					end
					
					for i = 1, #Hats do
						repeat RunService.Heartbeat:wait() until Hats[i]
						firetouchinterest(Hats[i].Handle,Character:FindFirstChild("HumanoidRootPart"),0)
						repeat RunService.Heartbeat:wait() until Character:FindFirstChildOfClass("Accessory")
						Character:FindFirstChildOfClass("Accessory"):Destroy()
						repeat RunService.Heartbeat:wait() until not Character:FindFirstChildOfClass("Accessory")
					end
					
					execCmd("reset")
					
					Player.CharacterAdded:Wait()
					
					for i = 1,20 do 
						RunService.Heartbeat:Wait()
						if Player.Character:FindFirstChild("HumanoidRootPart") then
							Player.Character:FindFirstChild("HumanoidRootPart").CFrame = Old
						end
					end
				else
					notify("Incompatible Exploit","Your exploit does not support this command (missing firetouchinterest)")
				end
			end)
			
			addcmd('vr',{},function(args, speaker)
				-- Full credit to Abacaxl @V3rmillion
				notify("Loading", "Hold on a sec")
				loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/vr.lua"))()
			end)
			
			addcmd('split',{},function(args, speaker)
				if r15(speaker) then
					speaker.Character.UpperTorso.Waist:Destroy()
				else
					notify('R15 Required','This command requires the r15 rig type')
				end
			end)
			
			addcmd('nilchar',{},function(args, speaker)
				if speaker.Character ~= nil then
					speaker.Character.Parent = nil
				end
			end)
			
			addcmd('unnilchar',{'nonilchar'},function(args, speaker)
				if speaker.Character ~= nil then
					speaker.Character.Parent = workspace
				end
			end)
			
			addcmd('noroot',{'removeroot','rroot'},function(args, speaker)
				if speaker.Character ~= nil then
					local char = Players.LocalPlayer.Character
					char.Parent = nil
					char.HumanoidRootPart:Destroy()
					char.Parent = workspace
				end
			end)
			
			addcmd('replaceroot',{'replacerootpart'},function(args, speaker)
				if speaker.Character ~= nil and speaker.Character:FindFirstChild("HumanoidRootPart") then
					local Char = speaker.Character
					local OldParent = Char.Parent
					local HRP = Char and Char:FindFirstChild("HumanoidRootPart")
					local OldPos = HRP.CFrame
					Char.Parent = game
					local HRP1 = HRP:Clone()
					HRP1.Parent = Char
					HRP = HRP:Destroy()
					HRP1.CFrame = OldPos
					Char.Parent = OldParent
				end
			end)
			
			addcmd('clearcharappearance',{'clearchar','clrchar'},function(args, speaker)
				speaker:ClearCharacterAppearance()
			end)
			
			addcmd('equiptools',{},function(args, speaker)
				for i,v in pairs(speaker:FindFirstChildOfClass("Backpack"):GetChildren()) do
					if v:IsA("Tool") or v:IsA("HopperBin") then
						v.Parent = speaker.Character
					end
				end
			end)
			
			addcmd('unequiptools',{},function(args, speaker)
				speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
			end)
			
			local function GetHandleTools(p)
				p = p or Players.LocalPlayer
				local r = {}
				for _, v in ipairs(p.Character and p.Character:GetChildren() or {}) do
					if v.IsA(v, "BackpackItem") and v.FindFirstChild(v, "Handle") then
						r[#r + 1] = v
					end
				end
				for _, v in ipairs(p.Backpack:GetChildren()) do
					if v.IsA(v, "BackpackItem") and v.FindFirstChild(v, "Handle") then
						r[#r + 1] = v
					end
				end
				return r
			end
			addcmd('dupetools', {'clonetools'}, function(args, speaker)
				local LOOP_NUM = tonumber(args[1]) or 1
				local OrigPos = speaker.Character.HumanoidRootPart.Position
				local Tools, TempPos = {}, Vector3.new(math.random(-2e5, 2e5), 2e5, math.random(-2e5, 2e5))
				for i = 1, LOOP_NUM do
					local Human = speaker.Character:WaitForChild("Humanoid")
					wait(.1, Human.Parent:MoveTo(TempPos))
					Human.RootPart.Anchored = speaker:ClearCharacterAppearance(wait(.1)) or true
					local t = GetHandleTools(speaker)
					while #t > 0 do
						for _, v in ipairs(t) do
							task.spawn(function()
								for _ = 1, 25 do
									v.Parent = speaker.Character
									v.Handle.Anchored = true
								end
								for _ = 1, 5 do
									v.Parent = workspace
								end
								table.insert(Tools, v.Handle)
							end)
						end
						t = GetHandleTools(speaker)
					end
					wait(.1)
					speaker.Character = speaker.Character:Destroy()
					speaker.CharacterAdded:Wait():WaitForChild("Humanoid").Parent:MoveTo(LOOP_NUM == i and OrigPos or TempPos, wait(.1))
					if i == LOOP_NUM or i % 5 == 0 then
						local HRP = speaker.Character.HumanoidRootPart
						if type(firetouchinterest) == "function" then
							for _, v in ipairs(Tools) do
								v.Anchored = not firetouchinterest(v, HRP, 1, firetouchinterest(v, HRP, 0)) and false or false
							end
						else
							for _, v in ipairs(Tools) do
								task.spawn(function()
									local x = v.CanCollide
									v.CanCollide = false
									v.Anchored = false
									for _ = 1, 10 do
										v.CFrame = HRP.CFrame
										wait()
									end
									v.CanCollide = x
								end)
							end
						end
						wait(.1)
						Tools = {}
					end
					TempPos = TempPos + Vector3.new(10, math.random(-5, 5), 0)
				end
			end)
			
			local RS = RunService.RenderStepped
			addcmd('givetool', {'givetools'}, function(args, speaker)
				local v = Players[getPlayer(args[1], speaker)[1]].Character
				workspace.CurrentCamera.CameraSubject = v
				local Char = speaker.Character or workspace:FindFirstChild(speaker.Name)
				local hum = Char and Char:FindFirstChildWhichIsA('Humanoid')
				local hrp = hum and hum.RootPart
				local hrppos = hrp.CFrame
				hum = hum:Destroy() or hum:Clone()
				hum.Parent = Char
				hum:ClearAllChildren()
				speaker:ClearCharacterAppearance()
				task.spawn(function()
					speaker.CharacterAdded:Wait():WaitForChild('Humanoid').RootPart.CFrame = wait() and hrppos
				end)
				local vHRP = getRoot(v)
				while Char and Char.Parent and vHRP and vHRP.Parent do
					local Tools = false
					for _, v in ipairs(Char:GetChildren()) do
						if v:IsA('BackpackItem') and v:FindFirstChild('Handle') then
							Tools = true
							firetouchinterest(v.Handle, vHRP, 0)
							firetouchinterest(v.Handle, vHRP, 1)
						end
					end
					if not Tools then
						break
					end
					hrp.CFrame = vHRP.CFrame
					RS:Wait()
				end
				execCmd('re')
			end)
			
			addcmd('touchinterests', {'touchinterest', 'firetouchinterests', 'firetouchinterest'}, function(args, speaker)
				if not firetouchinterest then
					notify("Incompatible Exploit", "Your exploit does not support this command (missing firetouchinterest)")
					return
				end
			
				local root = getRoot(speaker.Character) or speaker.Character:FindFirstChildWhichIsA("BasePart")
				
				local function touch(x)
					x = x:FindFirstAncestorWhichIsA("Part")
					if x then
						if firetouchinterest then
							task.spawn(function()
								firetouchinterest(x, root, 1)
								wait()
								firetouchinterest(x, root, 0)
							end)
						end
						x.CFrame = root.CFrame
					end
				end
			
			    if args[1] then
				  local name = getstring(1)
				  for _, descendant in ipairs(workspace:GetDescendants()) do
					if descendant:IsA("TouchTransmitter") and descendant.Name == name then
					    touch(descendant)
					end
				  end
			    else
				  for _, descendant in ipairs(workspace:GetDescendants()) do
					if descendant:IsA("TouchTransmitter") then
					    touch(descendant)
					end
				  end
			    end
			end)
			
			addcmd('fullbright',{'fb','fullbrightness'},function(args, speaker)
				Lighting.Brightness = 2
				Lighting.ClockTime = 14
				Lighting.FogEnd = 100000
				Lighting.GlobalShadows = false
				Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
			end)
			
			addcmd('loopfullbright',{'loopfb'},function(args, speaker)
				if brightLoop then
					brightLoop:Disconnect()
				end
				local function brightFunc()
					Lighting.Brightness = 2
					Lighting.ClockTime = 14
					Lighting.FogEnd = 100000
					Lighting.GlobalShadows = false
					Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
				end
			
				brightLoop = RunService.RenderStepped:Connect(brightFunc)
			end)
			
			addcmd('unloopfullbright',{'unloopfb'},function(args, speaker)
				if brightLoop then
					brightLoop:Disconnect()
				end
			end)
			
			addcmd('ambient',{},function(args, speaker)
				Lighting.Ambient = Color3.new(args[1],args[2],args[3])
				Lighting.OutdoorAmbient = Color3.new(args[1],args[2],args[3])
			end)
			
			addcmd('day',{},function(args, speaker)
				Lighting.ClockTime = 14
			end)
			
			addcmd('night',{},function(args, speaker)
				Lighting.ClockTime = 0
			end)
			
			addcmd('nofog',{},function(args, speaker)
				Lighting.FogEnd = 100000
				for i,v in pairs(Lighting:GetDescendants()) do
					if v:IsA("Atmosphere") then
						v:Destroy()
					end
				end
			end)
			
			addcmd('brightness',{},function(args, speaker)
				Lighting.Brightness = args[1]
			end)
			
			addcmd('globalshadows',{'gshadows'},function(args, speaker)
				Lighting.GlobalShadows = true
			end)
			
			addcmd('unglobalshadows',{'nogshadows','ungshadows','noglobalshadows'},function(args, speaker)
				Lighting.GlobalShadows = false
			end)
			
			origsettings = {abt = Lighting.Ambient, oabt = Lighting.OutdoorAmbient, brt = Lighting.Brightness, time = Lighting.ClockTime, fe = Lighting.FogEnd, fs = Lighting.FogStart, gs = Lighting.GlobalShadows}
			
			addcmd('restorelighting',{'rlighting'},function(args, speaker)
				Lighting.Ambient = origsettings.abt
				Lighting.OutdoorAmbient = origsettings.oabt
				Lighting.Brightness = origsettings.brt
				Lighting.ClockTime = origsettings.time
				Lighting.FogEnd = origsettings.fe
				Lighting.FogStart = origsettings.fs
				Lighting.GlobalShadows = origsettings.gs
			end)
			
			addcmd('stun',{'platformstand'},function(args, speaker)
				speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
			end)
			
			addcmd('unstun',{'nostun','unplatformstand','noplatformstand'},function(args, speaker)
				speaker.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
			end)
			
			addcmd('norotate',{'noautorotate'},function(args, speaker)
				speaker.Character:FindFirstChildOfClass('Humanoid').AutoRotate  = false
			end)
			
			addcmd('unnorotate',{'autorotate'},function(args, speaker)
				speaker.Character:FindFirstChildOfClass('Humanoid').AutoRotate  = true
			end)
			
			addcmd('enablestate',{},function(args, speaker)
				local x = args[1]
				if not tonumber(x) then
					local x = Enum.HumanoidStateType[args[1]]
				end
				speaker.Character:FindFirstChildOfClass("Humanoid"):SetStateEnabled(x, true)
			end)
			
			addcmd('disablestate',{},function(args, speaker)
				local x = args[1]
				if not tonumber(x) then
					local x = Enum.HumanoidStateType[args[1]]
				end
				speaker.Character:FindFirstChildOfClass("Humanoid"):SetStateEnabled(x, false)
			end)
			
			addcmd('drophats',{'drophat'},function(args, speaker)
				if speaker.Character then
					for _,v in pairs(speaker.Character:FindFirstChildOfClass('Humanoid'):GetAccessories()) do
						v.Parent = workspace
					end
				end
			end)
			
			addcmd('deletehats',{'nohats','rhats'},function(args, speaker)
				for i,v in next, speaker.Character:GetDescendants() do
					if v:IsA("Accessory") then
						for i,p in next, v:GetDescendants() do
							if p:IsA("Weld") then
								p:Destroy()
							end
						end
					end
				end
			end)
			
			addcmd('droptools',{'droptool'},function(args, speaker)
				for i,v in pairs(Players.LocalPlayer.Backpack:GetChildren()) do
					if v:IsA("Tool") then
						v.Parent = Players.LocalPlayer.Character
					end
				end
				wait()
				for i,v in pairs(Players.LocalPlayer.Character:GetChildren()) do
					if v:IsA("Tool") then
						v.Parent = workspace
					end
				end
			end)
			
			addcmd('droppabletools',{},function(args, speaker)
				if speaker.Character then
					for _,obj in pairs(speaker.Character:GetChildren()) do
						if obj:IsA("Tool") then
							obj.CanBeDropped = true
						end
					end
				end
				if speaker:FindFirstChildOfClass("Backpack") then
					for _,obj in pairs(speaker:FindFirstChildOfClass("Backpack"):GetChildren()) do
						if obj:IsA("Tool") then
							obj.CanBeDropped = true
						end
					end
				end
			end)
			
			local currentToolSize = ""
			local currentGripPos = ""
			addcmd('reach',{},function(args, speaker)
				execCmd('unreach')
				wait()
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v:IsA("Tool") then
						if args[1] then
							currentToolSize = v.Handle.Size
							currentGripPos = v.GripPos
							local a = Instance.new("SelectionBox")
							a.Name = "SelectionBoxCreated"
							a.Parent = v.Handle
							a.Adornee = v.Handle
							v.Handle.Massless = true
							v.Handle.Size = Vector3.new(0.5,0.5,args[1])
							v.GripPos = Vector3.new(0,0,0)
							speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
						else
							currentToolSize = v.Handle.Size
							currentGripPos = v.GripPos
							local a = Instance.new("SelectionBox")
							a.Name = "SelectionBoxCreated"
							a.Parent = v.Handle
							a.Adornee = v.Handle
							v.Handle.Massless = true
							v.Handle.Size = Vector3.new(0.5,0.5,60)
							v.GripPos = Vector3.new(0,0,0)
							speaker.Character:FindFirstChildOfClass('Humanoid'):UnequipTools()
						end
					end
				end
			end)
			
			addcmd('unreach',{'noreach'},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v:IsA("Tool") then
						v.Handle.Size = currentToolSize
						v.GripPos = currentGripPos
						v.Handle.SelectionBoxCreated:Destroy()
					end
				end
			end)
			
			addcmd('grippos',{},function(args, speaker)
				for i,v in pairs(speaker.Character:GetDescendants()) do
					if v:IsA("Tool") then
						v.Parent = speaker:FindFirstChildOfClass("Backpack")
						v.GripPos = Vector3.new(args[1],args[2],args[3])
						v.Parent = speaker.Character
					end
				end
			end)
			
			addcmd('usetools', {}, function(args, speaker)
				local Backpack = speaker:FindFirstChildOfClass("Backpack")
				local ammount = tonumber(args[1]) or 1
				local delay_ = tonumber(args[2]) or false
				for _, v in ipairs(Backpack:GetChildren()) do
					v.Parent = speaker.Character
					task.spawn(function()
						for _ = 1, ammount do
							v:Activate()
							if delay_ then
								wait(delay_)
							end
						end
						v.Parent = Backpack
					end)
				end
			end)
			
			addcmd('logs',{},function(args, speaker)
				logs:TweenPosition(UDim2.new(0, 0, 1, -265), "InOut", "Quart", 0.3, true, nil)
			end)
			
			addcmd('chatlogs',{'clogs'},function(args, speaker)
				join.Visible = false
				chat.Visible = true
				table.remove(shade3,table.find(shade3,selectChat))
				table.remove(shade2,table.find(shade2,selectJoin))
				table.insert(shade2,selectChat)
				table.insert(shade3,selectJoin)
				selectJoin.BackgroundColor3 = currentShade3
				selectChat.BackgroundColor3 = currentShade2
				logs:TweenPosition(UDim2.new(0, 0, 1, -265), "InOut", "Quart", 0.3, true, nil)
			end)
			
			addcmd('joinlogs',{'jlogs'},function(args, speaker)
				chat.Visible = false
				join.Visible = true	
				table.remove(shade3,table.find(shade3,selectJoin))
				table.remove(shade2,table.find(shade2,selectChat))
				table.insert(shade2,selectJoin)
				table.insert(shade3,selectChat)
				selectChat.BackgroundColor3 = currentShade3
				selectJoin.BackgroundColor3 = currentShade2
				logs:TweenPosition(UDim2.new(0, 0, 1, -265), "InOut", "Quart", 0.3, true, nil)
			end)
			
			flinging = false
			addcmd('fling',{},function(args, speaker)
				flinging = false
				for _, child in pairs(speaker.Character:GetDescendants()) do
					if child:IsA("BasePart") then
						child.CustomPhysicalProperties = PhysicalProperties.new(math.huge, 0.3, 0.5)
					end
				end
				execCmd('noclip')
				wait(.1)
				local bambam = Instance.new("BodyAngularVelocity")
				bambam.Name = randomString()
				bambam.Parent = getRoot(speaker.Character)
				bambam.AngularVelocity = Vector3.new(0,99999,0)
				bambam.MaxTorque = Vector3.new(0,math.huge,0)
				bambam.P = math.huge
				local Char = speaker.Character:GetChildren()
				for i, v in next, Char do
					if v:IsA("BasePart") then
						v.CanCollide = false
						v.Massless = true
						v.Velocity = Vector3.new(0, 0, 0)
					end
				end
				flinging = true
				local function flingDiedF()
					execCmd('unfling')
				end
				flingDied = speaker.Character:FindFirstChildOfClass('Humanoid').Died:Connect(flingDiedF)
				repeat
					bambam.AngularVelocity = Vector3.new(0,99999,0)
					wait(.2)
					bambam.AngularVelocity = Vector3.new(0,0,0)
					wait(.1)
				until flinging == false
			end)
			
			addcmd('unfling',{'nofling'},function(args, speaker)
				execCmd('clip')
				if flingDied then
					flingDied:Disconnect()
				end
				flinging = false
				wait(.1)
				local speakerChar = speaker.Character
				if not speakerChar or not getRoot(speakerChar) then return end
				for i,v in pairs(getRoot(speakerChar):GetChildren()) do
					if v.ClassName == 'BodyAngularVelocity' then
						v:Destroy()
					end
				end
				for _, child in pairs(speakerChar:GetDescendants()) do
					if child.ClassName == "Part" or child.ClassName == "MeshPart" then
						child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
					end
				end
			end)
			
			addcmd('togglefling',{},function(args, speaker)
				if flinging then
					execCmd('unfling')
				else
					execCmd('fling')
				end
			end)
			
			addcmd('invisfling',{},function(args, speaker)
				local ch = speaker.Character
				local prt=Instance.new("Model")
				prt.Parent = speaker.Character
				local z1 = Instance.new("Part")
				z1.Name="Torso"
				z1.CanCollide = false
				z1.Anchored = true
				local z2 = Instance.new("Part")
				z2.Name="Head"
				z2.Parent = prt
				z2.Anchored = true
				z2.CanCollide = false
				local z3 =Instance.new("Humanoid")
				z3.Name="Humanoid"
				z3.Parent = prt
				z1.Position = Vector3.new(0,9999,0)
				speaker.Character=prt
				wait(3)
				speaker.Character=ch
				wait(3)
				local Hum = Instance.new("Humanoid")
				z2:Clone()
				Hum.Parent = speaker.Character
				local root =  getRoot(speaker.Character)
				for i,v in pairs(speaker.Character:GetChildren()) do
					if v ~= root and  v.Name ~= "Humanoid" then
						v:Destroy()
					end
				end
				root.Transparency = 0
				root.Color = Color3.new(1, 1, 1)
				local invisflingStepped
				invisflingStepped = RunService.Stepped:Connect(function()
					if speaker.Character and getRoot(speaker.Character) then
						getRoot(speaker.Character).CanCollide = false
					else
						invisflingStepped:Disconnect()
					end
				end)
				sFLY()
				workspace.CurrentCamera.CameraSubject = root
				local bambam = Instance.new("BodyThrust")
				bambam.Parent = getRoot(speaker.Character)
				bambam.Force = Vector3.new(99999,99999*10,99999)
				bambam.Location = getRoot(speaker.Character).Position
			end)
			
			function attach(speaker,target)
				if tools(speaker) then
					local char = speaker.Character
					local tchar = target.Character
					local hum = speaker.Character:FindFirstChildOfClass("Humanoid")
					local hrp = getRoot(speaker.Character)
					local hrp2 = getRoot(target.Character)
					hum.Name = "1"
					local newHum = hum:Clone()
					newHum.Parent = char
					newHum.Name = "Humanoid"
					wait()
					hum:Destroy()
					workspace.CurrentCamera.CameraSubject = char
					newHum.DisplayDistanceType = "None"
					local tool = speaker:FindFirstChildOfClass("Backpack"):FindFirstChildOfClass("Tool") or speaker.Character:FindFirstChildOfClass("Tool")
					tool.Parent = char
					hrp.CFrame = hrp2.CFrame * CFrame.new(0, 0, 0) * CFrame.new(math.random(-100, 100)/200,math.random(-100, 100)/200,math.random(-100, 100)/200)
					local n = 0
					repeat
						wait(.1)
						n = n + 1
						hrp.CFrame = hrp2.CFrame
					until (tool.Parent ~= char or not hrp or not hrp2 or not hrp.Parent or not hrp2.Parent or n > 250) and n > 2
				else
					notify('Tool Required','You need to have an item in your inventory to use this command')
				end
			end
			
			addcmd('attach',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					attach(speaker,Players[v])
				end
			end)
			
			function kill(speaker,target,fast)
				if tools(speaker) then
					if target ~= nil then
						local NormPos = getRoot(speaker.Character).CFrame
						if not fast then
							refresh(speaker)
							wait()
							repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
							wait(0.3)
						end
						local hrp = getRoot(speaker.Character)
						attach(speaker,target)
						repeat
							wait()
							hrp.CFrame = CFrame.new(999999, workspace.FallenPartsDestroyHeight + 5,999999)
						until not getRoot(target.Character) or not getRoot(speaker.Character)
						speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
					end
				else
					notify('Tool Required','You need to have an item in your inventory to use this command')
				end
			end
			
			addcmd('kill',{'fekill'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					kill(speaker,Players[v])
				end
			end)
			
			addcmd('handlekill', {'hkill'}, function(args, speaker)
				if not firetouchinterest then
					return notify('Incompatible Exploit', 'Your exploit does not support this command (missing firetouchinterest)')
				end
				local RS = RunService.RenderStepped
				local Tool = speaker.Character.FindFirstChildWhichIsA(speaker.Character, "Tool")
				local Handle = Tool and Tool.FindFirstChild(Tool, "Handle")
				if not Tool or not Handle then
					return notify("Handle Kill", "You need to hold a \"Tool\" that does damage on touch. For example the default \"Sword\" tool.")
				end
				for _, v in ipairs(getPlayer(args[1], speaker)) do
					v = Players[v]
					task.spawn(function()
						while Tool and speaker.Character and v.Character and Tool.Parent == speaker.Character do
							local Human = v.Character.FindFirstChildWhichIsA(v.Character, "Humanoid")
							if not Human or Human.Health <= 0 then
								break
							end
							for _, v1 in ipairs(v.Character.GetChildren(v.Character)) do
								v1 = ((v1.IsA(v1, "BasePart") and firetouchinterest(Handle, v1, 1, (RS.Wait(RS) and nil) or firetouchinterest(Handle, v1, 0)) and nil) or v1) or v1
							end
						end
						notify("Handle Kill Stopped!", v.Name .. " died/left or you unequipped the tool!")
					end)
				end
			end)
			
			local hb = RunService.Heartbeat
			addcmd('tpwalk', {'teleportwalk'}, function(args, speaker)
				tpwalking = true
				local chr = speaker.Character
				local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
				while tpwalking and chr and hum and hum.Parent do
					local delta = hb:Wait()
					if hum.MoveDirection.Magnitude > 0 then
						if args[1] and isNumber(args[1]) then
							chr:TranslateBy(hum.MoveDirection * tonumber(args[1]) * delta * 10)
						else
							chr:TranslateBy(hum.MoveDirection * delta * 10)
						end
					end
				end
			end)
			addcmd('untpwalk', {'unteleportwalk'}, function(args, speaker)
				tpwalking = false
			end)
			
			addcmd('fastkill',{'fastfekill'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					kill(speaker,Players[v],true)
				end
			end)
			
			function bring(speaker,target,fast)
				if tools(speaker) then
					if target ~= nil then
						local NormPos = getRoot(speaker.Character).CFrame
						if not fast then
							refresh(speaker)
							wait()
							repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
							wait(0.3)
						end
						local hrp = getRoot(speaker.Character)
						attach(speaker,target)
						repeat
							wait()
							hrp.CFrame = NormPos
						until not getRoot(target.Character) or not getRoot(speaker.Character)
						speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
					end
				else
					notify('Tool Required','You need to have an item in your inventory to use this command')
				end
			end
			
			addcmd('bring',{'febring'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					bring(speaker,Players[v])
				end
			end)
			
			addcmd('fastbring',{'fastfebring'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					bring(speaker,Players[v],true)
				end
			end)
			
			function teleport(speaker,target,target2,fast)
				if tools(speaker) then
					if target ~= nil then
						local NormPos = getRoot(speaker.Character).CFrame
						if not fast then
							refresh(speaker)
							wait()
							repeat wait() until speaker.Character ~= nil and getRoot(speaker.Character)
							wait(0.3)
						end
						local hrp = getRoot(speaker.Character)
						local hrp2 = getRoot(target2.Character)
						attach(speaker,target)
						repeat
							wait()
							hrp.CFrame = hrp2.CFrame
						until not getRoot(target.Character) or not getRoot(speaker.Character)
						wait(1)
						speaker.CharacterAdded:Wait():WaitForChild("HumanoidRootPart").CFrame = NormPos
					end
				else
					notify('Tool Required','You need to have an item in your inventory to use this command')
				end
			end
			
			addcmd('tp',{'teleport'},function(args, speaker)
				local players1=getPlayer(args[1], speaker)
				local players2=getPlayer(args[2], speaker)
				for i,v in pairs(players1)do
					if getRoot(Players[v].Character) and getRoot(Players[players2[1]].Character) then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						teleport(speaker,Players[v],Players[players2[1]])
					end
				end
			end)
			
			addcmd('fasttp',{'fastteleport'},function(args, speaker)
				local players1=getPlayer(args[1], speaker)
				local players2=getPlayer(args[2], speaker)
				for i,v in pairs(players1)do
					if getRoot(Players[v].Character) and getRoot(Players[players2[1]].Character) then
						if speaker.Character:FindFirstChildOfClass('Humanoid') and speaker.Character:FindFirstChildOfClass('Humanoid').SeatPart then
							speaker.Character:FindFirstChildOfClass('Humanoid').Sit = false
							wait(.1)
						end
						teleport(speaker,Players[v],Players[players2[1]],true)
					end
				end
			end)
			
			addcmd('spin',{},function(args, speaker)
				local spinSpeed = 20
				if args[1] and isNumber(args[1]) then
					spinSpeed = args[1]
				end
				for i,v in pairs(getRoot(speaker.Character):GetChildren()) do
					if v.Name == "Spinning" then
						v:Destroy()
					end
				end
				local Spin = Instance.new("BodyAngularVelocity")
				Spin.Name = "Spinning"
				Spin.Parent = getRoot(speaker.Character)
				Spin.MaxTorque = Vector3.new(0, math.huge, 0)
				Spin.AngularVelocity = Vector3.new(0,spinSpeed,0)
			end)
			
			addcmd('unspin',{},function(args, speaker)
				for i,v in pairs(getRoot(speaker.Character):GetChildren()) do
					if v.Name == "Spinning" then
						v:Destroy()
					end
				end
			end)
			
			local transparent = false
			function x(v)
				if v then
					for _,i in pairs(workspace:GetDescendants()) do
						if i:IsA("BasePart") and not i.Parent:FindFirstChildOfClass('Humanoid') and not i.Parent.Parent:FindFirstChildOfClass('Humanoid') then
							i.LocalTransparencyModifier = 0.5
						end
					end
				else
					for _,i in pairs(workspace:GetDescendants()) do
						if i:IsA("BasePart") and not i.Parent:FindFirstChildOfClass('Humanoid') and not i.Parent.Parent:FindFirstChildOfClass('Humanoid') then
							i.LocalTransparencyModifier = 0
						end
					end
				end
			end
			
			addcmd('xray',{},function(args, speaker)
				transparent = true
				x(transparent)
			end)
			
			addcmd('unxray',{'noxray'},function(args, speaker)
				transparent = false
				x(transparent)
			end)
			
			addcmd('togglexray',{},function(args, speaker)
				transparent=not transparent
				x(transparent)
			end)
			
			local walltpTouch = nil
			addcmd('walltp',{},function(args, speaker)
				local torso
				if r15(speaker) then
					torso = speaker.Character.UpperTorso
				else
					torso = speaker.Character.Torso
				end
				local function touchedFunc(hit)
					local Root = getRoot(speaker.Character)
					if hit:IsA("BasePart") and hit.Position.Y > Root.Position.Y - speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight then
						local hitP = getRoot(hit.Parent)
						if hitP ~= nil then
							Root.CFrame = hit.CFrame * CFrame.new(Root.CFrame.lookVector.X,hitP.Size.Z/2 + speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight,Root.CFrame.lookVector.Z)
						elseif hitP == nil then
							Root.CFrame = hit.CFrame * CFrame.new(Root.CFrame.lookVector.X,hit.Size.Y/2 + speaker.Character:FindFirstChildOfClass('Humanoid').HipHeight,Root.CFrame.lookVector.Z)
						end
					end
				end
				walltpTouch = torso.Touched:Connect(touchedFunc)
			end)
			
			addcmd('unwalltp',{'nowalltp'},function(args, speaker)
				if walltpTouch then
					walltpTouch:Disconnect()
				end
			end)
			
			autoclicking = false
			addcmd('autoclick',{},function(args, speaker)
				if mouse1press and mouse1release then
					execCmd('unautoclick')
					wait()
					local clickDelay = 0.1
					local releaseDelay = 0.1
					if args[1] and isNumber(args[1]) then clickDelay = args[1] end
					if args[2] and isNumber(args[2]) then releaseDelay = args[2] end
					autoclicking = true
					cancelAutoClick = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
						if not gameProcessedEvent then
							if (input.KeyCode == Enum.KeyCode.Backspace and UserInputService:IsKeyDown(Enum.KeyCode.Equals)) or (input.KeyCode == Enum.KeyCode.Equals and UserInputService:IsKeyDown(Enum.KeyCode.Backspace)) then
								autoclicking = false
								cancelAutoClick:Disconnect()
							end
						end
					end)
					notify('Auto Clicker',"Press [backspace] and [=] at the same time to stop")
					repeat wait(clickDelay)
						mouse1press()
						wait(releaseDelay)
						mouse1release()
					until autoclicking == false
				else
					notify('Auto Clicker',"Your exploit doesn't have the ability to use the autoclick")
				end
			end)
			
			addcmd('unautoclick',{'noautoclick'},function(args, speaker)
				autoclicking = false
				if cancelAutoClick then cancelAutoClick:Disconnect() end
			end)
			
			addcmd('mousesensitivity',{'ms'},function(args, speaker)
				UserInputService.MouseDeltaSensitivity = args[1]
			end)
			
			local nameBox = nil
			local nbSelection = nil
			addcmd('hovername',{},function(args, speaker)
				execCmd('unhovername')
				wait()
				nameBox = Instance.new("TextLabel")
				nameBox.Name = randomString()
				nameBox.Parent = PARENT
				nameBox.BackgroundTransparency = 1
				nameBox.Size = UDim2.new(0,200,0,30)
				nameBox.Font = Enum.Font.Code
				nameBox.TextSize = 16
				nameBox.Text = ""
				nameBox.TextColor3 = Color3.new(1, 1, 1)
				nameBox.TextStrokeTransparency = 0
				nameBox.TextXAlignment = Enum.TextXAlignment.Left
				nameBox.ZIndex = 10
				nbSelection = Instance.new('SelectionBox')
				nbSelection.Name = randomString()
				nbSelection.LineThickness = 0.03
				nbSelection.Color3 = Color3.new(1, 1, 1)
				local function updateNameBox()
					local t
					local target = IYMouse.Target
			
					if target then
						local humanoid = target.Parent:FindFirstChildOfClass("Humanoid") or target.Parent.Parent:FindFirstChildOfClass("Humanoid")
						if humanoid then
							t = humanoid.Parent
						end
					end
			
					if t ~= nil then
						local x = IYMouse.X
						local y = IYMouse.Y
						local xP
						local yP
						if IYMouse.X > 200 then
							xP = x - 205
							nameBox.TextXAlignment = Enum.TextXAlignment.Right
						else
							xP = x + 25
							nameBox.TextXAlignment = Enum.TextXAlignment.Left
						end
						nameBox.Position = UDim2.new(0, xP, 0, y)
						nameBox.Text = t.Name
						nameBox.Visible = true
						nbSelection.Parent = t
						nbSelection.Adornee = t
					else
						nameBox.Visible = false
						nbSelection.Parent = nil
						nbSelection.Adornee = nil
					end
				end
				nbUpdateFunc = IYMouse.Move:Connect(updateNameBox)
			end)
			
			addcmd('unhovername',{'nohovername'},function(args, speaker)
				if nbUpdateFunc then
					nbUpdateFunc:Disconnect()
					nameBox:Destroy()
					nbSelection:Destroy()
				end
			end)
			
			addcmd('headsize',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					if Players[v] ~= speaker and Players[v].Character:FindFirstChild('Head') then
						local sizeArg = tonumber(args[2])
						local Size = Vector3.new(sizeArg,sizeArg,sizeArg)
						local Head = Players[v].Character:FindFirstChild('Head')
						if Head:IsA("BasePart") then
							if not args[2] or sizeArg == 1 then
								Head.Size = Vector3.new(2,1,1)
							else
								Head.Size = Size
							end
						end
					end
				end
			end)
			
			addcmd('hitbox',{},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					if Players[v] ~= speaker and Players[v].Character:FindFirstChild('HumanoidRootPart') then
						local sizeArg = tonumber(args[2])
						local Size = Vector3.new(sizeArg,sizeArg,sizeArg)
						local Root = Players[v].Character:FindFirstChild('HumanoidRootPart')
						if Root:IsA("BasePart") then
							if not args[2] or sizeArg == 1 then
								Root.Size = Vector3.new(2,1,1)
								Root.Transparency = 0.4
							else
								Root.Size = Size
								Root.Transparency = 0.4
							end
						end
					end
				end
			end)
			
			addcmd('stareat',{'stare'},function(args, speaker)
				local players = getPlayer(args[1], speaker)
				for i,v in pairs(players) do
					if stareLoop then
						stareLoop:Disconnect()
					end
					if not Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and Players[v].Character:FindFirstChild("HumanoidRootPart") then return end
					local function stareFunc()
						if Players.LocalPlayer.Character.PrimaryPart and Players:FindFirstChild(v) and Players[v].Character ~= nil and Players[v].Character:FindFirstChild("HumanoidRootPart") then
							local chrPos=Players.LocalPlayer.Character.PrimaryPart.Position
							local tPos=Players[v].Character:FindFirstChild("HumanoidRootPart").Position
							local modTPos=Vector3.new(tPos.X,chrPos.Y,tPos.Z)
							local newCF=CFrame.new(chrPos,modTPos)
							Players.LocalPlayer.Character:SetPrimaryPartCFrame(newCF)
						elseif not Players:FindFirstChild(v) then
							stareLoop:Disconnect()
						end
					end
			
					stareLoop = RunService.RenderStepped:Connect(stareFunc)
				end
			end)
			
			addcmd('unstareat',{'unstare','nostare','nostareat'},function(args, speaker)
				if stareLoop then
					stareLoop:Disconnect()
				end
			end)
			
			local RolewatchData = {["Group"]=0,["Role"]="",["Leave"]=false}
			local RolewatchConnection = Players.PlayerAdded:Connect(function(player)
				if RolewatchData.Group == 0 then return end
				if player:IsInGroup(RolewatchData.Group) then
					if tostring(player:GetRoleInGroup(RolewatchData.Group)):lower() == RolewatchData.Role:lower() then
						if RolewatchData.Leave == true then
							Players.LocalPlayer:Kick("\n\nRolewatch\nPlayer \"" .. tostring(player.Name) .. "\" has joined with the Role \"" .. RolewatchData.Role .. "\"\n")
						else
							notify("Rolewatch", "Player \"" .. tostring(player.Name) .. "\" has joined with the Role \"" .. RolewatchData.Role .. "\"")
						end
					end
				end
			end)
			
			addcmd('rolewatch',{},function(args, speaker)
				local groupid = args[1] or 0
				if isNumber(groupid) then
					if args[2] then
						local rolename = tostring(getstring(2))
						RolewatchData.Group = tonumber(groupid)
						RolewatchData.Role = rolename
						notify("Rolewatch", "Watching Group ID \"" .. tostring(groupid) .. "\" for Role \"" .. rolename .. "\"")
					end
				end
			end)
			
			addcmd('rolewatchstop',{},function(args, speaker)
				RolewatchData = {["Group"]=0,["Role"]="",["Leave"]=false}
			end)
			
			addcmd('rolewatchleave',{'unrolewatch'},function(args, speaker)
				RolewatchData.Leave = not RolewatchData.Leave
				notify("Rolewatch", RolewatchData.Leave and "Leave has been Enabled" or "Leave has been Disabled")
			end)
			
			addcmd('removeterrain',{'rterrain','noterrain'},function(args, speaker)
				workspace:FindFirstChildOfClass('Terrain'):Clear()
			end)
			
			addcmd('clearnilinstances',{'nonilinstances','cni'},function(args, speaker)
				if getnilinstances then
					for i,v in pairs(getnilinstances()) do
						v:Destroy()
					end
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing getnilinstances)')
				end
			end)
			
			addcmd('destroyheight',{'dh'},function(args, speaker)
				local dh = args[1] or -500
				if isNumber(dh) then
					workspace.FallenPartsDestroyHeight = dh
				end
			end)
			
			addcmd('trip',{},function(args, speaker)
				if speaker and speaker.Character and speaker.Character:FindFirstChildOfClass("Humanoid") and getRoot(speaker.Character) then
					local hum = speaker.Character:FindFirstChildOfClass("Humanoid")
					local root = getRoot(speaker.Character)
					hum:ChangeState(0)
					root.Velocity = root.CFrame.LookVector * 30
				end
			end)
			
			local freezingua = nil
			frozenParts = {}
			addcmd('freezeunanchored',{'freezeua'},function(args, speaker)
				if sethidden then
					local badnames = {
						"Head",
						"UpperTorso",
						"LowerTorso",
						"RightUpperArm",
						"LeftUpperArm",
						"RightLowerArm",
						"LeftLowerArm",
						"RightHand",
						"LeftHand",
						"RightUpperLeg",
						"LeftUpperLeg",
						"RightLowerLeg",
						"LeftLowerLeg",
						"RightFoot",
						"LeftFoot",
						"Torso",
						"Right Arm",
						"Left Arm",
						"Right Leg",
						"Left Leg",
						"HumanoidRootPart"
					}
					local function FREEZENOOB(v)
						if v:IsA("BasePart" or "UnionOperation") and v.Anchored == false then
							local BADD = false
							for i = 1,#badnames do
								if v.Name == badnames[i] then
									BADD = true
								end
							end
							if speaker.Character and v:IsDescendantOf(speaker.Character) then
								BADD = true
							end
							if BADD == false then
								for i,c in pairs(v:GetChildren()) do
									if c:IsA("BodyPosition") or c:IsA("BodyGyro") then
										c:Destroy()
									end
								end
								local bodypos = Instance.new("BodyPosition")
								bodypos.Parent = v
								bodypos.Position = v.Position
								bodypos.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
								local bodygyro = Instance.new("BodyGyro")
								bodygyro.Parent = v
								bodygyro.CFrame = v.CFrame
								bodygyro.MaxTorque = Vector3.new(math.huge,math.huge,math.huge)
								if not table.find(frozenParts,v) then
									table.insert(frozenParts,v)
								end
							end
						end
					end
					for i,v in pairs(workspace:GetDescendants()) do
						FREEZENOOB(v)
					end
					freezingua = workspace.DescendantAdded:Connect(FREEZENOOB)
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing sethiddenproperty)')
				end
			end)
			
			addcmd('thawunanchored',{'thawua','unfreezeunanchored','unfreezeua'},function(args, speaker)
				if sethidden then
					if freezingua then
						freezingua:Disconnect()
					end
					for i,v in pairs(frozenParts) do
						for i,c in pairs(v:GetChildren()) do
							if c:IsA("BodyPosition") or c:IsA("BodyGyro") then
								c:Destroy()
							end
						end
					end
					frozenParts = {}
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing sethiddenproperty)')
				end
			end)
			
			addcmd('tpunanchored',{'tpua'},function(args, speaker)
				if sethidden then
					local players = getPlayer(args[1], speaker)
					for i,v in pairs(players) do
						local Forces = {}
						for _,part in pairs(workspace:GetDescendants()) do
							if Players[v].Character:FindFirstChild('Head') and part:IsA("BasePart" or "UnionOperation" or "Model") and part.Anchored == false and not part:IsDescendantOf(speaker.Character) and part.Name == "Torso" == false and part.Name == "Head" == false and part.Name == "Right Arm" == false and part.Name == "Left Arm" == false and part.Name == "Right Leg" == false and part.Name == "Left Leg" == false and part.Name == "HumanoidRootPart" == false then
								for i,c in pairs(part:GetChildren()) do
									if c:IsA("BodyPosition") or c:IsA("BodyGyro") then
										c:Destroy()
									end
								end
								local ForceInstance = Instance.new("BodyPosition")
								ForceInstance.Parent = part
								ForceInstance.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
								table.insert(Forces, ForceInstance)
								if not table.find(frozenParts,part) then
									table.insert(frozenParts,part)
								end
							end
						end
						for i,c in pairs(Forces) do
							c.Position = Players[v].Character.Head.Position
						end
					end
				else
					notify('Incompatible Exploit','Your exploit does not support this command (missing sethiddenproperty)')
				end
			end)
			
			keycodeMap = {
				["0"] = 0x30,
				["1"] = 0x31,
				["2"] = 0x32,
				["3"] = 0x33,
				["4"] = 0x34,
				["5"] = 0x35,
				["6"] = 0x36,
				["7"] = 0x37,
				["8"] = 0x38,
				["9"] = 0x39,
				["a"] = 0x41,
				["b"] = 0x42,
				["c"] = 0x43,
				["d"] = 0x44,
				["e"] = 0x45,
				["f"] = 0x46,
				["g"] = 0x47,
				["h"] = 0x48,
				["i"] = 0x49,
				["j"] = 0x4A,
				["k"] = 0x4B,
				["l"] = 0x4C,
				["m"] = 0x4D,
				["n"] = 0x4E,
				["o"] = 0x4F,
				["p"] = 0x50,
				["q"] = 0x51,
				["r"] = 0x52,
				["s"] = 0x53,
				["t"] = 0x54,
				["u"] = 0x55,
				["v"] = 0x56,
				["w"] = 0x57,
				["x"] = 0x58,
				["y"] = 0x59,
				["z"] = 0x5A,
				["enter"] = 0x0D,
				["shift"] = 0x10,
				["ctrl"] = 0x11,
				["alt"] = 0x12,
				["pause"] = 0x13,
				["capslock"] = 0x14,
				["spacebar"] = 0x20,
				["space"] = 0x20,
				["pageup"] = 0x21,
				["pagedown"] = 0x22,
				["end"] = 0x23,
				["home"] = 0x24,
				["left"] = 0x25,
				["up"] = 0x26,
				["right"] = 0x27,
				["down"] = 0x28,
				["insert"] = 0x2D,
				["delete"] = 0x2E,
				["f1"] = 0x70,
				["f2"] = 0x71,
				["f3"] = 0x72,
				["f4"] = 0x73,
				["f5"] = 0x74,
				["f6"] = 0x75,
				["f7"] = 0x76,
				["f8"] = 0x77,
				["f9"] = 0x78,
				["f10"] = 0x79,
				["f11"] = 0x7A,
				["f12"] = 0x7B,
			}
			autoKeyPressing = false
			cancelAutoKeyPress = nil
			
			addcmd('autokeypress',{'keypress'},function(args, speaker)
				if keypress and keyrelease and args[1] then
					local code = keycodeMap[args[1]:lower()]
					if not code then notify('Auto Key Press',"Invalid key") return end
					execCmd('unautokeypress')
					wait()
					local clickDelay = 0.1
					local releaseDelay = 0.1
					if args[2] and isNumber(args[2]) then clickDelay = args[2] end
					if args[3] and isNumber(args[3]) then releaseDelay = args[3] end
					autoKeyPressing = true
					cancelAutoKeyPress = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
						if not gameProcessedEvent then
							if (input.KeyCode == Enum.KeyCode.Backspace and UserInputService:IsKeyDown(Enum.KeyCode.Equals)) or (input.KeyCode == Enum.KeyCode.Equals and UserInputService:IsKeyDown(Enum.KeyCode.Backspace)) then
								autoKeyPressing = false
								cancelAutoKeyPress:Disconnect()
							end
						end
					end)
					notify('Auto Key Press',"Press [backspace] and [=] at the same time to stop")
					repeat wait(clickDelay)
						keypress(code)
						wait(releaseDelay)
						keyrelease(code)
					until autoKeyPressing == false
					if cancelAutoKeyPress then cancelAutoKeyPress:Disconnect() keyrelease(code) end
				else
					notify('Auto Key Press',"Your exploit doesn't have the ability to use auto key press")
				end
			end)
			
			addcmd('unautokeypress',{'noautokeypress','unkeypress','nokeypress'},function(args, speaker)
				autoKeyPressing = false
				if cancelAutoKeyPress then cancelAutoKeyPress:Disconnect() end
			end)
			
			addcmd('addplugin',{'plugin'},function(args, speaker)
				addPlugin(getstring(1))
			end)
			
			addcmd('removeplugin',{'deleteplugin'},function(args, speaker)
				deletePlugin(getstring(1))
			end)
			
			addcmd('reloadplugin',{},function(args, speaker)
				local pluginName = getstring(1)
				deletePlugin(pluginName)
				wait(1)
				addPlugin(pluginName)
			end)
			
			addcmd('removecmd',{'deletecmd'},function(args, speaker)
				removecmd(args[1])
			end)
			
			if IsOnMobile then
				local QuickCapture = Instance.new("TextButton")
				local UICorner = Instance.new("UICorner")
				QuickCapture.Name = randomString()
				QuickCapture.Parent = PARENT
				QuickCapture.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
				QuickCapture.BackgroundTransparency = 0.14
				QuickCapture.Position = UDim2.new(0.489, 0, 0, 0)
				QuickCapture.Size = UDim2.new(0, 32, 0, 33)
				QuickCapture.Font = Enum.Font.SourceSansBold
				QuickCapture.Text = "IY"
				QuickCapture.TextColor3 = Color3.fromRGB(255, 255, 255)
				QuickCapture.TextSize = 20.000
				QuickCapture.TextWrapped = true
				QuickCapture.Draggable = true
				UICorner.Name = randomString()
				UICorner.CornerRadius = UDim.new(0.5, 0)
				UICorner.Parent = QuickCapture
				QuickCapture.MouseButton1Click:Connect(function()
					Cmdbar:CaptureFocus()
					maximizeHolder()
				end)
				table.insert(shade1, QuickCapture)
				table.insert(text1, QuickCapture)
			end
			
			updateColors(currentShade1,shade1)
			updateColors(currentShade2,shade2)
			updateColors(currentShade3,shade3)
			updateColors(currentText1,text1)
			updateColors(currentText2,text2)
			updateColors(currentScroll,scroll)
			
			if PluginsTable ~= nil or PluginsTable ~= {} then
				FindPlugins(PluginsTable)
			end
			
			-- Events
			eventEditor.RegisterEvent("OnExecute")
			eventEditor.RegisterEvent("OnSpawn",{
				{Type="Player",Name="Player Filter ($1)"}
			})
			eventEditor.RegisterEvent("OnDied",{
				{Type="Player",Name="Player Filter ($1)"}
			})
			eventEditor.RegisterEvent("OnDamage",{
				{Type="Player",Name="Player Filter ($1)"},
				{Type="Number",Name="Below Health ($2)"}
			})
			eventEditor.RegisterEvent("OnKilled",{
				{Type="Player",Name="Victim Player ($1)"},
				{Type="Player",Name="Killer Player ($2)",Default = 1}
			})
			eventEditor.RegisterEvent("OnJoin",{
				{Type="Player",Name="Player Filter ($1)",Default = 1}
			})
			eventEditor.RegisterEvent("OnChatted",{
				{Type="Player",Name="Player Filter ($1)",Default = 1},
				{Type="String",Name="Message Filter ($2)"}
			})
			
			function hookCharEvents(plr,instant)
				task.spawn(function()
					local char = plr.Character
					if not char then return end
			
					local humanoid = char:WaitForChild("Humanoid",10)
					if not humanoid then return end
			
					local oldHealth = humanoid.Health
					humanoid.HealthChanged:Connect(function(health)
						local change = math.abs(oldHealth - health)
						if oldHealth > health then
							eventEditor.FireEvent("OnDamage",plr.Name,tonumber(health))
						end
						oldHealth = health
					end)
			
					humanoid.Died:Connect(function()
						eventEditor.FireEvent("OnDied",plr.Name)
			
						local killedBy = humanoid:FindFirstChild("creator")
						if killedBy and killedBy.Value and killedBy.Value.Parent then
							eventEditor.FireEvent("OnKilled",plr.Name,killedBy.Name)
						end
					end)
				end)
			end
			
			Players.PlayerAdded:Connect(function(plr)
				eventEditor.FireEvent("OnJoin",plr.Name)
				plr.Chatted:Connect(function(msg) eventEditor.FireEvent("OnChatted",tostring(plr),msg) end)
				plr.CharacterAdded:Connect(function() eventEditor.FireEvent("OnSpawn",tostring(plr)) hookCharEvents(plr) end)
				JoinLog(plr)
				ChatLog(plr)
				if ESPenabled then
					repeat wait(1) until plr.Character and getRoot(plr.Character)
					ESP(plr)
				end
				if CHMSenabled then
					repeat wait(1) until plr.Character and getRoot(plr.Character)
					CHMS(plr)
				end
			end)
			
			for _,plr in pairs(Players:GetPlayers()) do
				pcall(function()
					plr.CharacterAdded:Connect(function() eventEditor.FireEvent("OnSpawn",tostring(plr)) hookCharEvents(plr) end)
					hookCharEvents(plr)
				end)
			end
			
			if spawnCmds and #spawnCmds > 0 then
				for i,v in pairs(spawnCmds) do
					eventEditor.AddCmd("OnSpawn",{v.COMMAND or "",{0},v.DELAY or 0})
				end
				updatesaves()
			end
			
			if loadedEventData then eventEditor.LoadData(loadedEventData) end
			eventEditor.Refresh()
			
			eventEditor.FireEvent("OnExecute")
			
			if aliases and #aliases > 0 then
				local cmdMap = {}
				for i,v in pairs(cmds) do
					cmdMap[v.NAME:lower()] = v
					for _,alias in pairs(v.ALIAS) do
						cmdMap[alias:lower()] = v
					end
				end
				for i = 1, #aliases do
					local cmd = string.lower(aliases[i].CMD)
					local alias = string.lower(aliases[i].ALIAS)
					if cmdMap[cmd] then
						customAlias[alias] = cmdMap[cmd]
					end
				end
				refreshaliases()
			end
			
			IYMouse.Move:Connect(checkTT)
			
			task.spawn(function()
				local success, latestVersionInfo = pcall(function() 
					local versionJson = game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/version')
					return HttpService:JSONDecode(versionJson)
				end)
				
				if success then
					if currentVersion ~= latestVersionInfo.Version then
						notify('Outdated','Get the new version at infyiff.github.io')
					end
					
					if latestVersionInfo.Announcement and latestVersionInfo.Announcement ~= '' then
						local AnnGUI = Instance.new("Frame")
						local background = Instance.new("Frame")
						local TextBox = Instance.new("TextLabel")
						local shadow = Instance.new("Frame")
						local PopupText = Instance.new("TextLabel")
						local Exit = Instance.new("TextButton")
						local ExitImage = Instance.new("ImageLabel")
			
						AnnGUI.Name = randomString()
						AnnGUI.Parent = PARENT
						AnnGUI.Active = true
						AnnGUI.BackgroundTransparency = 1
						AnnGUI.Position = UDim2.new(0.5, -180, 0, -500)
						AnnGUI.Size = UDim2.new(0, 360, 0, 20)
						AnnGUI.ZIndex = 10
			
						background.Name = "background"
						background.Parent = AnnGUI
						background.Active = true
						background.BackgroundColor3 = currentShade1
						background.BorderSizePixel = 0
						background.Position = UDim2.new(0, 0, 0, 20)
						background.Size = UDim2.new(0, 360, 0, 150)
						background.ZIndex = 10
			
						TextBox.Parent = background
						TextBox.BackgroundTransparency = 1
						TextBox.Position = UDim2.new(0, 5, 0, 5)
						TextBox.Size = UDim2.new(0, 350, 0, 140)
						TextBox.Font = Enum.Font.SourceSans
						TextBox.TextSize = 18
						TextBox.TextWrapped = true
						TextBox.Text = Announcement
						TextBox.TextColor3 = currentText1
						TextBox.TextXAlignment = Enum.TextXAlignment.Left
						TextBox.TextYAlignment = Enum.TextYAlignment.Top
						TextBox.ZIndex = 10
			
						shadow.Name = "shadow"
						shadow.Parent = AnnGUI
						shadow.BackgroundColor3 = currentShade2
						shadow.BorderSizePixel = 0
						shadow.Size = UDim2.new(0, 360, 0, 20)
						shadow.ZIndex = 10
			
						PopupText.Name = "PopupText"
						PopupText.Parent = shadow
						PopupText.BackgroundTransparency = 1
						PopupText.Size = UDim2.new(1, 0, 0.95, 0)
						PopupText.ZIndex = 10
						PopupText.Font = Enum.Font.SourceSans
						PopupText.TextSize = 14
						PopupText.Text = "Server Announcement"
						PopupText.TextColor3 = currentText1
						PopupText.TextWrapped = true
			
						Exit.Name = "Exit"
						Exit.Parent = shadow
						Exit.BackgroundTransparency = 1
						Exit.Position = UDim2.new(1, -20, 0, 0)
						Exit.Size = UDim2.new(0, 20, 0, 20)
						Exit.Text = ""
						Exit.ZIndex = 10
			
						ExitImage.Parent = Exit
						ExitImage.BackgroundColor3 = Color3.new(1, 1, 1)
						ExitImage.BackgroundTransparency = 1
						ExitImage.Position = UDim2.new(0, 5, 0, 5)
						ExitImage.Size = UDim2.new(0, 10, 0, 10)
						ExitImage.Image = "rbxassetid://5054663650"
						ExitImage.ZIndex = 10
			
						wait(1)
						AnnGUI:TweenPosition(UDim2.new(0.5, -180, 0, 150), "InOut", "Quart", 0.5, true, nil)
			
						Exit.MouseButton1Click:Connect(function()
							AnnGUI:TweenPosition(UDim2.new(0.5, -180, 0, -500), "InOut", "Quart", 0.5, true, nil)
							wait(0.6)
							AnnGUI:Destroy()
						end)
					end
				end
			end)
			
			task.spawn(function()
				wait()
				Credits:TweenPosition(UDim2.new(0, 0, 0.9, 0), "Out", "Quart", 0.2)
				Logo:TweenSizeAndPosition(UDim2.new(0, 175, 0, 175), UDim2.new(0, 37, 0, 45), "Out", "Quart", 0.3)
				wait(1)
				local OutInfo = TweenInfo.new(1.6809, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0)
				TweenService:Create(Logo, OutInfo, {ImageTransparency = 1}):Play()
				TweenService:Create(IntroBackground, OutInfo, {BackgroundTransparency = 1}):Play()
				Credits:TweenPosition(UDim2.new(0, 0, 0.9, 30), "Out", "Quart", 0.2)
				wait(0.2)
				Logo:Destroy()
				Credits:Destroy()
				IntroBackground:Destroy()
				minimizeHolder()
				if IsOnMobile then notify("Unstable Device", "On mobile, Infinite Yield may have issues or features that are not functioning correctly.") end
			end)
		end)()
	elseif TextBox.ContentText == "dex" then
		coroutine.wrap(function()
			--[[
	DEX Main Script
	
	Created by: Moon and Courtney
	
	RASPBERRY PI IS A SKIDDY SKID AF
--]]

-- Metas
local Services = setmetatable({},{
	__index = function(self, ind)
		if ypcall(function()game:GetService(ind)end) then
			return game:GetService(ind)
		else
			return nil
		end
	end
})

function CreateInstance(cls,props)
	local inst = Instance.new(cls)
	for i,v in pairs(props) do
		inst[i] = v
	end
	return inst
end

function createDexGui()
	local DexGui = CreateInstance("ScreenGui",{DisplayOrder=0,Enabled=true,ResetOnSpawn=true,Name="Dex",})
	local DexGui2 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.39215689897537,0.39215689897537,0.39215689897537),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-300,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,300,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="ContentFrameR",Parent = DexGui})
	local DexGui3 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.39215689897537,0.39215689897537,0.39215689897537),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,-300,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,300,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="ContentFrameL",Parent = DexGui})
	local DexGui4 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.11764706671238,0.11764706671238,0.11764706671238),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0.5,-150,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,300,0,36),SizeConstraint=0,Visible=false,ZIndex=10,Name="TopMenu",Parent = DexGui})
	local DexGui5 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="1.1.0",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=true,TextXAlignment=2,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,16),Rotation=0,Selectable=false,Size=UDim2.new(0,30,0,18),SizeConstraint=0,Visible=true,ZIndex=10,Name="Version",Parent = DexGui4})
	local DexGui6 = CreateInstance("ImageLabel",{Image="rbxassetid://474172996",ImageColor3=Color3.new(0.11764706671238,0.11764706671238,0.11764706671238),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-9,0,9),Rotation=90,Selectable=false,Size=UDim2.new(0,36,0,18),SizeConstraint=0,Visible=true,ZIndex=10,Name="Slant",Parent = DexGui4})
	local DexGui7 = CreateInstance("TextLabel",{Font=4,FontSize=5,Text="DEX",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=true,TextXAlignment=2,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,2),Rotation=0,Selectable=false,Size=UDim2.new(0,30,0,18),SizeConstraint=0,Visible=true,ZIndex=10,Name="Title",Parent = DexGui4})
	local DexGui8 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,120,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,120,1,0),SizeConstraint=0,Visible=true,ZIndex=10,Name="Content",Parent = DexGui4})
	local DexGui9 = CreateInstance("TextButton",{Font=3,FontSize=7,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=24,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=false,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.039215687662363,0.039215687662363,0.039215687662363),BackgroundTransparency=0,BorderColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,30,0,4),Rotation=0,Selectable=true,Size=UDim2.new(0,112,0,28),SizeConstraint=0,Visible=true,ZIndex=10,Name="SlideSelect",Parent = DexGui4})
	local DexGui10 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Window Views",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=true,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,20,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-28,0,28),SizeConstraint=0,Visible=true,ZIndex=10,Name="SlideName",Parent = DexGui9})
	local DexGui11 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="V",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=true,TextXAlignment=2,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.11764706671238,0.11764706671238,0.11764706671238),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-8,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,8,0,28),SizeConstraint=0,Visible=true,ZIndex=10,Name="DropDown",Parent = DexGui9})
	local DexGui12 = CreateInstance("ImageLabel",{Image="rbxassetid://588745174",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,6),Rotation=0,Selectable=false,Size=UDim2.new(0,16,0,16),SizeConstraint=0,Visible=true,ZIndex=10,Name="Icon",Parent = DexGui9})
	local DexGui13 = CreateInstance("ImageLabel",{Image="rbxassetid://474172996",ImageColor3=Color3.new(0.11764706671238,0.11764706671238,0.11764706671238),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,-18,0,0),Rotation=180,Selectable=false,Size=UDim2.new(0,18,0,36),SizeConstraint=0,Visible=true,ZIndex=10,Name="Slant",Parent = DexGui4})
	local DexGui14 = CreateInstance("TextButton",{Font=3,FontSize=7,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=24,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=false,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-30,0,0),Rotation=0,Selectable=true,Size=UDim2.new(0,30,0,36),SizeConstraint=0,Visible=true,ZIndex=10,Name="About",Parent = DexGui4})
	local DexGui15 = CreateInstance("ImageLabel",{Image="rbxassetid://476354004",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,3,0,6),Rotation=0,Selectable=false,Size=UDim2.new(0,24,0,24),SizeConstraint=0,Visible=true,ZIndex=10,Name="Icon",Parent = DexGui14})
	local DexGui16 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,100,0,100),SizeConstraint=0,Visible=false,ZIndex=1,Name="Resources",Parent = DexGui})
	local DexGui17 = CreateInstance("TextButton",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=false,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.37647062540054,0.54901963472366,0.82745105028152),BackgroundTransparency=1,BorderColor3=Color3.new(0.33725491166115,0.49019610881805,0.73725491762161),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,1,0,2),Rotation=0,Selectable=true,Size=UDim2.new(1,-18,0,18),SizeConstraint=0,Visible=true,ZIndex=1,Name="Entry",Parent = DexGui16})
	local DexGui18 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0,0,0),BackgroundTransparency=1,BorderColor3=Color3.new(0.14509804546833,0.20784315466881,0.21176472306252),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,18,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-18,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Indent",Parent = DexGui17})
	local DexGui19 = CreateInstance("ImageButton",{Image="",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),AutoButtonColor=true,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=true,Draggable=false,Position=UDim2.new(0,-16,0.5,-8),Rotation=0,Selectable=true,Size=UDim2.new(0,16,0,16),SizeConstraint=0,Visible=true,ZIndex=1,Name="Expand",Parent = DexGui18})
	local DexGui20 = CreateInstance("ImageLabel",{Image="rbxassetid://529659138",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(-12.562000274658,0,-12.562000274658,0),Rotation=0,Selectable=false,Size=UDim2.new(16,0,16,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Icon",Parent = DexGui19})
	local DexGui21 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Item",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,22,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-22,0,18),SizeConstraint=0,Visible=true,ZIndex=1,Name="EntryName",Parent = DexGui18})
	local DexGui22 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=true,Draggable=false,Position=UDim2.new(0,2,0.5,-8),Rotation=0,Selectable=false,Size=UDim2.new(0,16,0,16),SizeConstraint=0,Visible=true,ZIndex=1,Name="IconFrame",Parent = DexGui18})
	local DexGui23 = CreateInstance("ImageLabel",{Image="rbxassetid://529659138",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(-5.811999797821,0,-1.3120000362396,0),Rotation=0,Selectable=false,Size=UDim2.new(16,0,16,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Icon",Parent = DexGui22})
	local DexGui24 = CreateInstance("Folder",{Name="PropControls",Parent = DexGui16})
	local DexGui25 = CreateInstance("TextBox",{ClearTextOnFocus=true,Font=3,FontSize=5,MultiLine=false,Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,0),Rotation=0,Selectable=true,Size=UDim2.new(1,-4,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="String",Parent = DexGui24})
	local DexGui26 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.56470590829849,0.56470590829849,0.56470590829849),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-4,1,0),SizeConstraint=0,Visible=false,ZIndex=1,Name="ReadOnly",Parent = DexGui25})
	local DexGui27 = CreateInstance("TextBox",{ClearTextOnFocus=true,Font=3,FontSize=5,MultiLine=false,Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,0),Rotation=0,Selectable=true,Size=UDim2.new(1,-2,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Number",Parent = DexGui24})
	local DexGui28 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-16,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,16,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="ArrowFrame",Parent = DexGui27})
	local DexGui29 = CreateInstance("TextButton",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=true,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,3),Rotation=0,Selectable=true,Size=UDim2.new(1,0,0,8),SizeConstraint=0,Visible=true,ZIndex=1,Name="Up",Parent = DexGui28})
	local DexGui30 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.63921570777893,0.63529413938522,0.64705884456635),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,16,0,8),SizeConstraint=0,Visible=true,ZIndex=1,Name="Arrow",Parent = DexGui29})
	local DexGui31 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,8,0,3),Rotation=0,Selectable=false,Size=UDim2.new(0,1,0,1),SizeConstraint=0,Visible=true,ZIndex=1,Name="Frame",Parent = DexGui30})
	local DexGui32 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,7,0,4),Rotation=0,Selectable=false,Size=UDim2.new(0,3,0,1),SizeConstraint=0,Visible=true,ZIndex=1,Name="Frame",Parent = DexGui30})
	local DexGui33 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,6,0,5),Rotation=0,Selectable=false,Size=UDim2.new(0,5,0,1),SizeConstraint=0,Visible=true,ZIndex=1,Name="Frame",Parent = DexGui30})
	local DexGui34 = CreateInstance("TextButton",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=true,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,11),Rotation=0,Selectable=true,Size=UDim2.new(1,0,0,8),SizeConstraint=0,Visible=true,ZIndex=1,Name="Down",Parent = DexGui28})
	local DexGui35 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.63921570777893,0.63529413938522,0.64705884456635),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,16,0,8),SizeConstraint=0,Visible=true,ZIndex=1,Name="Arrow",Parent = DexGui34})
	local DexGui36 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,8,0,5),Rotation=0,Selectable=false,Size=UDim2.new(0,1,0,1),SizeConstraint=0,Visible=true,ZIndex=1,Name="Frame",Parent = DexGui35})
	local DexGui37 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,7,0,4),Rotation=0,Selectable=false,Size=UDim2.new(0,3,0,1),SizeConstraint=0,Visible=true,ZIndex=1,Name="Frame",Parent = DexGui35})
	local DexGui38 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.86274510622025,0.86274510622025,0.86274510622025),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,6,0,3),Rotation=0,Selectable=false,Size=UDim2.new(0,5,0,1),SizeConstraint=0,Visible=true,ZIndex=1,Name="Frame",Parent = DexGui35})
	local DexGui39 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.39215689897537,0.39215689897537,0.39215689897537),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0.5,0),Rotation=0,Selectable=false,Size=UDim2.new(0,300,0.5,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="PropertiesPanel",Parent = DexGui16})
	local DexGui40 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=0,BorderColor3=Color3.new(0.14509804546833,0.20784315466881,0.21176472306252),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,1,0,50),Rotation=0,Selectable=false,Size=UDim2.new(1,-2,1,-50),SizeConstraint=0,Visible=true,ZIndex=1,Name="Content",Parent = DexGui39})
	local DexGui41 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.20784315466881,0.27058824896812,0.27450981736183),BackgroundTransparency=1,BorderColor3=Color3.new(0.14509804546833,0.20784315466881,0.21176472306252),BorderSizePixel=1,ClipsDescendants=true,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,0,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="List",Parent = DexGui40})
	local DexGui42 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.18823531270027,0.18823531270027,0.18823531270027),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,0,0,50),SizeConstraint=0,Visible=true,ZIndex=1,Name="TopBar",Parent = DexGui39})
	local DexGui43 = CreateInstance("TextButton",{Font=4,FontSize=5,Text="X",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=true,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-27,0,0),Rotation=0,Selectable=true,Size=UDim2.new(0,25,0,25),SizeConstraint=0,Visible=true,ZIndex=1,Name="Close",Parent = DexGui42})
	local DexGui44 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Properties",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,25,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-50,0,25),SizeConstraint=0,Visible=true,ZIndex=1,Name="WindowTitle",Parent = DexGui42})
	local DexGui45 = CreateInstance("TextButton",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=true,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.21960785984993,0.21960785984993,0.21960785984993),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-25,0,25),Rotation=0,Selectable=true,Size=UDim2.new(0,25,0,25),SizeConstraint=0,Visible=true,ZIndex=1,Name="Settings",Parent = DexGui42})
	local DexGui46 = CreateInstance("ImageLabel",{Image="rbxassetid://530240903",ImageColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,5,0,5),Rotation=0,Selectable=false,Size=UDim2.new(1,-10,1,-10),SizeConstraint=0,Visible=true,ZIndex=1,Name="ImageLabel",Parent = DexGui45})
	local DexGui47 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BackgroundTransparency=0,BorderColor3=Color3.new(0.4588235616684,0.52156865596771,0.52549022436142),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,45),Rotation=0,Selectable=false,Size=UDim2.new(1,-27,0,2),SizeConstraint=0,Visible=true,ZIndex=1,Name="SearchFrame",Parent = DexGui42})
	local DexGui48 = CreateInstance("TextBox",{ClearTextOnFocus=false,Font=3,FontSize=5,MultiLine=false,Text="",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BackgroundTransparency=1,BorderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,-20),Rotation=0,Selectable=true,Size=UDim2.new(1,-4,1,20),SizeConstraint=0,Visible=true,ZIndex=1,Name="Search",Parent = DexGui47})
	local DexGui49 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Search Properties",TextColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,0,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Empty",Parent = DexGui48})
	local DexGui50 = CreateInstance("ImageLabel",{Image="rbxassetid://527318112",ImageColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,4,0,-15),Rotation=0,Selectable=false,Size=UDim2.new(0,16,0,16),SizeConstraint=0,Visible=false,ZIndex=1,Name="ImageLabel",Parent = DexGui47})
	local DexGui51 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.13333334028721,0.65490198135376,0.94117653369904),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0.5,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,0,0,2),SizeConstraint=0,Visible=true,ZIndex=1,Name="Entering",Parent = DexGui47})
	local DexGui52 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.39215689897537,0.39215689897537,0.39215689897537),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,300,0.5,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="ExplorerPanel",Parent = DexGui16})
	local DexGui53 = CreateInstance("Frame",{Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=0,BorderColor3=Color3.new(0.14509804546833,0.20784315466881,0.21176472306252),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,1,0,50),Rotation=0,Selectable=false,Size=UDim2.new(1,-2,1,-50),SizeConstraint=0,Visible=true,ZIndex=1,Name="Content",Parent = DexGui52})
	local DexGui54 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.20784315466881,0.27058824896812,0.27450981736183),BackgroundTransparency=1,BorderColor3=Color3.new(0.14509804546833,0.20784315466881,0.21176472306252),BorderSizePixel=1,ClipsDescendants=true,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,0,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="List",Parent = DexGui53})
	local DexGui55 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.18823531270027,0.18823531270027,0.18823531270027),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,0,0,50),SizeConstraint=0,Visible=true,ZIndex=1,Name="TopBar",Parent = DexGui52})
	local DexGui56 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BackgroundTransparency=0,BorderColor3=Color3.new(0.4588235616684,0.52156865596771,0.52549022436142),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,45),Rotation=0,Selectable=false,Size=UDim2.new(1,-27,0,2),SizeConstraint=0,Visible=true,ZIndex=1,Name="SearchFrame",Parent = DexGui55})
	local DexGui57 = CreateInstance("TextBox",{ClearTextOnFocus=false,Font=3,FontSize=5,MultiLine=false,Text="",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BackgroundTransparency=1,BorderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,-20),Rotation=0,Selectable=true,Size=UDim2.new(1,-4,1,20),SizeConstraint=0,Visible=true,ZIndex=1,Name="Search",Parent = DexGui56})
	local DexGui58 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Search Workspace",TextColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,0,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Empty",Parent = DexGui57})
	local DexGui59 = CreateInstance("ImageLabel",{Image="rbxassetid://527318112",ImageColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,4,0,-15),Rotation=0,Selectable=false,Size=UDim2.new(0,16,0,16),SizeConstraint=0,Visible=false,ZIndex=1,Name="ImageLabel",Parent = DexGui56})
	local DexGui60 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.13333334028721,0.65490198135376,0.94117653369904),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0.5,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,0,0,2),SizeConstraint=0,Visible=true,ZIndex=1,Name="Entering",Parent = DexGui56})
	local DexGui61 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Explorer",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,25,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-50,0,25),SizeConstraint=0,Visible=true,ZIndex=1,Name="WindowTitle",Parent = DexGui55})
	local DexGui62 = CreateInstance("TextButton",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=true,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.21960785984993,0.21960785984993,0.21960785984993),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-25,0,25),Rotation=0,Selectable=true,Size=UDim2.new(0,25,0,25),SizeConstraint=0,Visible=true,ZIndex=1,Name="Settings",Parent = DexGui55})
	local DexGui63 = CreateInstance("ImageLabel",{Image="rbxassetid://530240903",ImageColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,5,0,5),Rotation=0,Selectable=false,Size=UDim2.new(1,-10,1,-10),SizeConstraint=0,Visible=true,ZIndex=1,Name="ImageLabel",Parent = DexGui62})
	local DexGui64 = CreateInstance("TextButton",{Font=4,FontSize=5,Text="X",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=true,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-27,0,0),Rotation=0,Selectable=true,Size=UDim2.new(0,25,0,25),SizeConstraint=0,Visible=true,ZIndex=1,Name="Close",Parent = DexGui55})
	local DexGui65 = CreateInstance("TextButton",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=false,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.28235295414925,0.28235295414925,0.28235295414925),BackgroundTransparency=0,BorderColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,1,0,134),Rotation=0,Selectable=true,Size=UDim2.new(0,300,0,22),SizeConstraint=0,Visible=true,ZIndex=1,Name="PEntry",Parent = DexGui16})
	local DexGui66 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.37647062540054,0.54901963472366,0.82745105028152),BackgroundTransparency=1,BorderColor3=Color3.new(0.33725491166115,0.49019610881805,0.73725491762161),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,18,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-18,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Indent",Parent = DexGui65})
	local DexGui67 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Name",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-2,0,22),SizeConstraint=0,Visible=true,ZIndex=1,Name="EntryName",Parent = DexGui66})
	local DexGui68 = CreateInstance("TextButton",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=true,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=true,Draggable=false,Position=UDim2.new(0,-16,0.5,-8),Rotation=0,Selectable=true,Size=UDim2.new(0,16,0,16),SizeConstraint=0,Visible=false,ZIndex=1,Name="Expand",Parent = DexGui66})
	local DexGui69 = CreateInstance("ImageLabel",{Image="rbxassetid://529659138",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(-13.6875,0,-12.5625,0),Rotation=0,Selectable=false,Size=UDim2.new(16,0,16,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Icon",Parent = DexGui68})
	local DexGui70 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BackgroundTransparency=1,BorderColor3=Color3.new(0.43921571969986,0.43921571969986,0.43921571969986),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0.5,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0.5,0,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Control",Parent = DexGui66})
	local DexGui71 = CreateInstance("TextBox",{ClearTextOnFocus=true,Font=3,FontSize=5,MultiLine=false,Text="0",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,0),Rotation=0,Selectable=true,Size=UDim2.new(1,-4,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="String",Parent = DexGui70})
	local DexGui72 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.37647062540054,0.37647062540054,0.37647062540054),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0.5,-1,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,1,0,22),SizeConstraint=0,Visible=true,ZIndex=1,Name="Sep",Parent = DexGui66})
	local DexGui73 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0.5,-250,0.5,-150),Rotation=0,Selectable=false,Size=UDim2.new(0,500,0,300),SizeConstraint=0,Visible=false,ZIndex=1,Name="WelcomeFrame",Parent = DexGui})
	local DexGui74 = CreateInstance("ImageLabel",{Image="rbxassetid://503289231",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=1,SliceCenter=Rect.new(20,20,460,260),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,-20,0,-20),Rotation=0,Selectable=false,Size=UDim2.new(0,540,0,340),SizeConstraint=0,Visible=true,ZIndex=1,Name="Outline",Parent = DexGui73})
	local DexGui75 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=true,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,0,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Content",Parent = DexGui73})
	local DexGui76 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.18823531270027,0.18823531270027,0.18823531270027),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0.60000002384186,0,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Main",Parent = DexGui75})
	local DexGui77 = CreateInstance("TextLabel",{Font=4,FontSize=9,Text="DEX",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=48,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,0,0,100),SizeConstraint=0,Visible=true,ZIndex=1,Name="Title",Parent = DexGui76})
	local DexGui78 = CreateInstance("TextLabel",{Font=4,FontSize=6,Text="V1.1.0 ALPHA",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=18,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=1,TextYAlignment=2,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-105,1,-20),Rotation=0,Selectable=false,Size=UDim2.new(0,100,0,20),SizeConstraint=0,Visible=true,ZIndex=1,Name="Version",Parent = DexGui76})
	local DexGui79 = CreateInstance("TextLabel",{Font=4,FontSize=6,Text="Made by Moon & Courtney",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=18,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=2,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,5,1,-20),Rotation=0,Selectable=false,Size=UDim2.new(0,100,0,20),SizeConstraint=0,Visible=true,ZIndex=1,Name="Creator",Parent = DexGui76})
	local DexGui80 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.039215687662363,0.039215687662363,0.039215687662363),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,50,0,120),Rotation=0,Selectable=false,Size=UDim2.new(0,200,0,80),SizeConstraint=0,Visible=true,ZIndex=1,Name="Progress",Parent = DexGui76})
	local DexGui81 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,2,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Line",Parent = DexGui80})
	local DexGui82 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Fetching latest API...",TextColor3=Color3.new(0.78431379795074,0.78431379795074,0.78431379795074),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,10,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-10,0,15),SizeConstraint=0,Visible=true,ZIndex=1,Name="Progress1",Parent = DexGui80})
	local DexGui83 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Fetching latest Reflection Metadata...",TextColor3=Color3.new(0.78431379795074,0.78431379795074,0.78431379795074),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,10,0,15),Rotation=0,Selectable=false,Size=UDim2.new(1,-10,0,15),SizeConstraint=0,Visible=true,ZIndex=1,Name="Progress2",Parent = DexGui80})
	local DexGui84 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Importing DexStorage items...",TextColor3=Color3.new(0.78431379795074,0.78431379795074,0.78431379795074),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,10,0,30),Rotation=0,Selectable=false,Size=UDim2.new(1,-10,0,15),SizeConstraint=0,Visible=true,ZIndex=1,Name="Progress3",Parent = DexGui80})
	local DexGui85 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Indexing tree list...",TextColor3=Color3.new(0.78431379795074,0.78431379795074,0.78431379795074),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,10,0,45),Rotation=0,Selectable=false,Size=UDim2.new(1,-10,0,15),SizeConstraint=0,Visible=true,ZIndex=1,Name="Progress4",Parent = DexGui80})
	local DexGui86 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Starting up...",TextColor3=Color3.new(0.78431379795074,0.78431379795074,0.78431379795074),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,10,0,60),Rotation=0,Selectable=false,Size=UDim2.new(1,-10,0,15),SizeConstraint=0,Visible=true,ZIndex=1,Name="Progress5",Parent = DexGui80})
	local DexGui87 = CreateInstance("TextButton",{Font=4,FontSize=6,Text="X",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=18,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=true,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=true,Size=UDim2.new(0,20,0,20),SizeConstraint=0,Visible=true,ZIndex=1,Name="Closer",Parent = DexGui76})
	local DexGui88 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0.60000002384186,0,1,-50),Rotation=0,Selectable=false,Size=UDim2.new(0.40000000596046,0,0,50),SizeConstraint=0,Visible=true,ZIndex=1,Name="Bottom",Parent = DexGui75})
	local DexGui89 = CreateInstance("ImageLabel",{Image="rbxassetid://493608750",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,5,0,5),Rotation=0,Selectable=false,Size=UDim2.new(0,40,0,40),SizeConstraint=0,Visible=true,ZIndex=1,Name="Logo",Parent = DexGui88})
	local DexGui90 = CreateInstance("TextLabel",{Font=3,FontSize=6,Text="Powerful and light",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=18,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=true,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,50,0,5),Rotation=0,Selectable=false,Size=UDim2.new(1,-55,0,25),SizeConstraint=0,Visible=true,ZIndex=1,Name="Desc",Parent = DexGui88})
	local DexGui91 = CreateInstance("TextLabel",{Font=4,FontSize=4,Text="Image by KrystalTeam",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=12,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=2,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,50,1,-20),Rotation=0,Selectable=false,Size=UDim2.new(1,-55,0,15),SizeConstraint=0,Visible=true,ZIndex=1,Name="Credit",Parent = DexGui88})
	local DexGui92 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.25098040699959,0.25098040699959,0.25098040699959),BackgroundTransparency=0,BorderColor3=Color3.new(0.43921571969986,0.43921571969986,0.43921571969986),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0.60000002384186,5,0,20),Rotation=0,Selectable=false,Size=UDim2.new(0.40000000596046,-10,1,-75),SizeConstraint=0,Visible=true,ZIndex=1,Name="Changelog",Parent = DexGui75})
	local DexGui93 = CreateInstance("TextLabel",{Font=10,FontSize=5,Text="Changelog",TextColor3=Color3.new(1,1,1),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,-20),Rotation=0,Selectable=false,Size=UDim2.new(1,0,0,20),SizeConstraint=0,Visible=true,ZIndex=1,Name="Title",Parent = DexGui92})
	return DexGui
end

-- Main Gui References
local gui = createDexGui()
gui.Parent = game.Players.LocalPlayer.PlayerGui
local contentL = gui:WaitForChild("ContentFrameL")
local contentR = gui:WaitForChild("ContentFrameR")
local resources = gui:WaitForChild("Resources")

-- Welcome Gui References
local welcomeFrame = gui:WaitForChild("WelcomeFrame")
local welcomeOutline = welcomeFrame:WaitForChild("Outline")
local welcomeContents = welcomeFrame:WaitForChild("Content")
local welcomeMain = welcomeContents:WaitForChild("Main")
local welcomeChangelog = welcomeContents:WaitForChild("Changelog")
local welcomeBottom = welcomeContents:WaitForChild("Bottom")
local welcomeProgress = welcomeMain:WaitForChild("Progress")

-- Explorer Stuff
local explorerTree = nil
local updateDebounce = false
local rightClickContext = nil
local rightEntry = nil
local clipboard = {}
local lastSearch = 0
local nodeWidth = 0

-- Properties Stuff
local propertiesTree = nil
local propWidth = 0

-- Settings
local explorerSettings = {
	LPaneWidth = 300,
	RPaneWidth = 300
}

-- JSON Stuff
local API
local RMD

-- Main Variables
local mouse = Services.Players.LocalPlayer:GetMouse()
local mouseWindow = nil
local LPaneItems = {}
local RPaneItems = {}
local setPane = "None"
local activeWindows = {}
local f = {}
local API = {}
local RMD = {}

-- ScrollBar
function f.buttonArrows(size,num,dir)
	local max = num
	local arrowFrame = CreateInstance("Frame",{
		BackgroundTransparency = 1,
		Name = "Arrow",
		Size = UDim2.new(0,size,0,size)
	})
	if dir == "up" then
		for i = 1,num do
			local newLine = CreateInstance("Frame",{
				BackgroundColor3 = Color3.new(220/255,220/255,220/255),
				BorderSizePixel = 0,
				Position = UDim2.new(0,math.floor(size/2)-(i-1),0,math.floor(size/2)+i-math.floor(max/2)-1),
				Size = UDim2.new(0,i+(i-1),0,1),
				Parent = arrowFrame
			})
		end
		return arrowFrame
	elseif dir == "down" then
		for i = 1,num do
			local newLine = CreateInstance("Frame",{
				BackgroundColor3 = Color3.new(220/255,220/255,220/255),
				BorderSizePixel = 0,
				Position = UDim2.new(0,math.floor(size/2)-(i-1),0,math.floor(size/2)-i+math.floor(max/2)+1),
				Size = UDim2.new(0,i+(i-1),0,1),
				Parent = arrowFrame
			})
		end
		return arrowFrame
	elseif dir == "left" then
		for i = 1,num do
			local newLine = CreateInstance("Frame",{
				BackgroundColor3 = Color3.new(220/255,220/255,220/255),
				BorderSizePixel = 0,
				Position = UDim2.new(0,math.floor(size/2)+i-math.floor(max/2)-1,0,math.floor(size/2)-(i-1)),
				Size = UDim2.new(0,1,0,i+(i-1)),
				Parent = arrowFrame
			})
		end
		return arrowFrame
	elseif dir == "right" then
		for i = 1,num do
			local newLine = CreateInstance("Frame",{
				BackgroundColor3 = Color3.new(220/255,220/255,220/255),
				BorderSizePixel = 0,
				Position = UDim2.new(0,math.floor(size/2)-i+math.floor(max/2)+1,0,math.floor(size/2)-(i-1)),
				Size = UDim2.new(0,1,0,i+(i-1)),
				Parent = arrowFrame
			})
		end
		return arrowFrame
	end
	error("r u ok")
end

local ScrollBar do
	ScrollBar = {}

	local user = game:GetService("UserInputService")
	local mouse = game:GetService("Players").LocalPlayer:GetMouse()

	ScrollMt = {
		__index = {
			AddMarker = function(self,ind,color)
				self.Markers[ind] = color or Color3.new(0,0,0)
			end,
			ScrollTo = function(self,ind)
				self.Index = ind
				self:Update()
			end,
			ScrollUp = function(self)
				self.Index = self.Index - self.Increment
				self:Update()
			end,
			ScrollDown = function(self)
				self.Index = self.Index + self.Increment
				self:Update()
			end,
			CanScrollUp = function(self)
				return self.Index > 0
			end,
			CanScrollDown = function(self)
				return self.Index + self.VisibleSpace < self.TotalSpace
			end,
			GetScrollPercent = function(self)
				return self.Index/(self.TotalSpace-self.VisibleSpace)
			end,
			SetScrollPercent = function(self,perc)
				self.Index = math.floor(perc*(self.TotalSpace-self.VisibleSpace))
				self:Update()
			end
		}
	}

	function ScrollBar.new(hor)
		local newFrame = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.35294118523598,0.35294118523598,0.35294118523598),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(1,-16,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,16,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="ScrollBar",})
		local button1 = nil
		local button2 = nil

		local lastTotalSpace = 0

		if hor then
			newFrame.Size = UDim2.new(1,0,0,16)
			button1 = CreateInstance("ImageButton",{
				Parent = newFrame,
				Name = "Left",
				Size = UDim2.new(0,16,0,16),
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				AutoButtonColor = false
			})
			f.buttonArrows(16,4,"left").Parent = button1
			button2 = CreateInstance("ImageButton",{
				Parent = newFrame,
				Name = "Right",
				Position = UDim2.new(1,-16,0,0),
				Size = UDim2.new(0,16,0,16),
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				AutoButtonColor = false
			})
			f.buttonArrows(16,4,"right").Parent = button2
		else
			newFrame.Size = UDim2.new(0,16,1,0)
			button1 = CreateInstance("ImageButton",{
				Parent = newFrame,
				Name = "Up",
				Size = UDim2.new(0,16,0,16),
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				AutoButtonColor = false
			})
			f.buttonArrows(16,4,"up").Parent = button1
			button2 = CreateInstance("ImageButton",{
				Parent = newFrame,
				Name = "Down",
				Position = UDim2.new(0,0,1,-16),
				Size = UDim2.new(0,16,0,16),
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				AutoButtonColor = false
			})
			f.buttonArrows(16,4,"down").Parent = button2
		end

		local scrollThumbFrame = CreateInstance("Frame",{
			BackgroundTransparency = 1,
			Parent = newFrame
		})
		if hor then
			scrollThumbFrame.Position = UDim2.new(0,16,0,0)
			scrollThumbFrame.Size = UDim2.new(1,-32,1,0)
		else
			scrollThumbFrame.Position = UDim2.new(0,0,0,16)
			scrollThumbFrame.Size = UDim2.new(1,0,1,-32)
		end

		local scrollThumb = CreateInstance("Frame",{
			BackgroundColor3 = Color3.new(120/255,120/255,120/255),
			BorderSizePixel = 0,
			Parent = scrollThumbFrame
		})

		local markerFrame = CreateInstance("Frame",{
			BackgroundTransparency = 1,
			Name = "Markers",
			Size = UDim2.new(1,0,1,0),
			Parent = scrollThumbFrame
		})

		local newMt = setmetatable({
			Gui = newFrame,
			Index = 0,
			VisibleSpace = 0,
			TotalSpace = 0,
			Increment = 1,
			Markers = {}
		},ScrollMt)

		local function drawThumb()
			local total = newMt.TotalSpace
			local visible = newMt.VisibleSpace
			local index = newMt.Index

			if not (newMt:CanScrollUp()	or newMt:CanScrollDown()) then
				scrollThumb.Visible = false
			else
				scrollThumb.Visible = true
			end

			if hor then
				scrollThumb.Size = UDim2.new(visible/total,0,1,0)
				if scrollThumb.AbsoluteSize.X < 16 then
					scrollThumb.Size = UDim2.new(0,16,1,0)
				end
				local fs = scrollThumbFrame.AbsoluteSize.X
				local bs = scrollThumb.AbsoluteSize.X
				scrollThumb.Position = UDim2.new(newMt:GetScrollPercent()*(fs-bs)/fs,0,0,0)
			else
				scrollThumb.Size = UDim2.new(1,0,visible/total,0)
				if scrollThumb.AbsoluteSize.Y < 16 then
					scrollThumb.Size = UDim2.new(1,0,0,16)
				end
				local fs = scrollThumbFrame.AbsoluteSize.Y
				local bs = scrollThumb.AbsoluteSize.Y
				scrollThumb.Position = UDim2.new(0,0,newMt:GetScrollPercent()*(fs-bs)/fs,0)
			end
		end

		local function updateMarkers()
			markerFrame:ClearAllChildren()

			for i,v in pairs(newMt.Markers) do
				if i < newMt.TotalSpace then
					CreateInstance("Frame",{
						BackgroundTransparency = 0,
						BackgroundColor3 = v,
						BorderSizePixel = 0,
						Position = hor and UDim2.new(i/newMt.TotalSpace,0,1,-6) or UDim2.new(1,-6,i/newMt.TotalSpace,0),
						Size = hor and UDim2.new(0,1,0,6) or UDim2.new(0,6,0,1),
						Name = "Marker"..tostring(i),
						Parent = markerFrame
					})
				end
			end
		end
		newMt.UpdateMarkers = updateMarkers

		local function update()
			local total = newMt.TotalSpace
			local visible = newMt.VisibleSpace
			local index = newMt.Index

			if visible <= total then
				if index > 0 then
					if index + visible > total then
						newMt.Index = total - visible
					end
				else
					newMt.Index = 0
				end
			else
				newMt.Index = 0
			end

			if lastTotalSpace ~= newMt.TotalSpace then
				lastTotalSpace = newMt.TotalSpace
				updateMarkers()
			end

			if newMt.OnUpdate then newMt:OnUpdate() end

			if newMt:CanScrollUp() then
				for i,v in pairs(button1.Arrow:GetChildren()) do
					v.BackgroundTransparency = 0
				end
			else
				button1.BackgroundTransparency = 1
				for i,v in pairs(button1.Arrow:GetChildren()) do
					v.BackgroundTransparency = 0.5
				end
			end
			if newMt:CanScrollDown() then
				for i,v in pairs(button2.Arrow:GetChildren()) do
					v.BackgroundTransparency = 0
				end
			else
				button2.BackgroundTransparency = 1
				for i,v in pairs(button2.Arrow:GetChildren()) do
					v.BackgroundTransparency = 0.5
				end
			end

			drawThumb()
		end

		local buttonPress = false
		local thumbPress = false
		local thumbFramePress = false

		local thumbColor = Color3.new(120/255,120/255,120/255)
		local thumbSelectColor = Color3.new(140/255,140/255,140/255)
		button1.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement and not buttonPress and newMt:CanScrollUp() then button1.BackgroundTransparency = 0.8 end
			if input.UserInputType ~= Enum.UserInputType.MouseButton1 or not newMt:CanScrollUp() then return end
			buttonPress = true
			button1.BackgroundTransparency = 0.5
			if newMt:CanScrollUp() then newMt:ScrollUp() end
			local buttonTick = tick()
			local releaseEvent
			releaseEvent = user.InputEnded:Connect(function(input)
				if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
				releaseEvent:Disconnect()
				if f.checkMouseInGui(button1) and newMt:CanScrollUp() then button1.BackgroundTransparency = 0.8 else button1.BackgroundTransparency = 1 end
				buttonPress = false
			end)
			while buttonPress do
				if tick() - buttonTick >= 0.3 and newMt:CanScrollUp() then
					newMt:ScrollUp()
				end
				wait()
			end
		end)
		button1.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement and not buttonPress then button1.BackgroundTransparency = 1 end
		end)
		button2.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement and not buttonPress and newMt:CanScrollDown() then button2.BackgroundTransparency = 0.8 end
			if input.UserInputType ~= Enum.UserInputType.MouseButton1 or not newMt:CanScrollDown() then return end
			buttonPress = true
			button2.BackgroundTransparency = 0.5
			if newMt:CanScrollDown() then newMt:ScrollDown() end
			local buttonTick = tick()
			local releaseEvent
			releaseEvent = user.InputEnded:Connect(function(input)
				if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
				releaseEvent:Disconnect()
				if f.checkMouseInGui(button2) and newMt:CanScrollDown() then button2.BackgroundTransparency = 0.8 else button2.BackgroundTransparency = 1 end
				buttonPress = false
			end)
			while buttonPress do
				if tick() - buttonTick >= 0.3 and newMt:CanScrollDown() then
					newMt:ScrollDown()
				end
				wait()
			end
		end)
		button2.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement and not buttonPress then button2.BackgroundTransparency = 1 end
		end)

		scrollThumb.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement and not thumbPress then scrollThumb.BackgroundTransparency = 0.2 scrollThumb.BackgroundColor3 = thumbSelectColor end
			if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end

			local dir = hor and "X" or "Y"
			local lastThumbPos = nil

			buttonPress = false
			thumbFramePress = false			
			thumbPress = true
			scrollThumb.BackgroundTransparency = 0
			local mouseOffset = mouse[dir] - scrollThumb.AbsolutePosition[dir]
			local mouseStart = mouse[dir]
			local releaseEvent
			local mouseEvent
			releaseEvent = user.InputEnded:Connect(function(input)
				if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
				releaseEvent:Disconnect()
				if mouseEvent then mouseEvent:Disconnect() end
				if f.checkMouseInGui(scrollThumb) then scrollThumb.BackgroundTransparency = 0.2 else scrollThumb.BackgroundTransparency = 0 scrollThumb.BackgroundColor3 = thumbColor end
				thumbPress = false
			end)
			newMt:Update()
			--while math.abs(mouse[dir] - mouseStart) == 0 do wait() end
			mouseEvent = user.InputChanged:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement and thumbPress and releaseEvent.Connected then
					local thumbFrameSize = scrollThumbFrame.AbsoluteSize[dir]-scrollThumb.AbsoluteSize[dir]
					local pos = mouse[dir] - scrollThumbFrame.AbsolutePosition[dir] - mouseOffset
					if pos > thumbFrameSize then
						pos = thumbFrameSize
					elseif pos < 0 then
						pos = 0
					end
					if lastThumbPos ~= pos then
						lastThumbPos = pos
						newMt:ScrollTo(math.floor(pos/thumbFrameSize*(newMt.TotalSpace-newMt.VisibleSpace)))
					end
					wait()
				end
			end)
		end)
		scrollThumb.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement and not thumbPress then scrollThumb.BackgroundTransparency = 0 scrollThumb.BackgroundColor3 = thumbColor end
		end)
		scrollThumbFrame.InputBegan:Connect(function(input)
			if input.UserInputType ~= Enum.UserInputType.MouseButton1 or f.checkMouseInGui(scrollThumb) then return end

			local dir = hor and "X" or "Y"

			local function doTick()
				local thumbFrameSize = scrollThumbFrame.AbsoluteSize[dir]-scrollThumb.AbsoluteSize[dir]
				local thumbFrameDist = scrollThumb.AbsolutePosition[dir] - scrollThumbFrame.AbsolutePosition[dir]
				local pos = thumbFrameDist + (mouse[dir] < scrollThumb.AbsolutePosition[dir] + math.floor(scrollThumb.AbsoluteSize[dir]/2) and -50 or 50)
				if pos > thumbFrameSize then
					pos = thumbFrameSize
				elseif pos < 0 then
					pos = 0
				end
				if pos < thumbFrameDist and scrollThumbFrame.AbsolutePosition[dir] + pos + math.floor(scrollThumb.AbsoluteSize[dir]/2) <= mouse[dir] then
					pos = mouse[dir] - scrollThumbFrame.AbsolutePosition[dir] - math.floor(scrollThumb.AbsoluteSize[dir]/2)
				elseif pos > thumbFrameDist and scrollThumbFrame.AbsolutePosition[dir] + pos + math.floor(scrollThumb.AbsoluteSize[dir]/2) >= mouse[dir] then
					pos = mouse[dir] - scrollThumbFrame.AbsolutePosition[dir] - math.floor(scrollThumb.AbsoluteSize[dir]/2)
				end
				newMt:ScrollTo(math.floor(pos/thumbFrameSize*(newMt.TotalSpace-newMt.VisibleSpace)))
			end

			thumbPress = false			
			thumbFramePress = true
			doTick()
			local thumbFrameTick = tick()
			local releaseEvent
			releaseEvent = user.InputEnded:Connect(function(input)
				if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
				releaseEvent:Disconnect()
				thumbFramePress = false
			end)
			while thumbFramePress and not f.checkMouseInGui(scrollThumb) do
				if tick() - thumbFrameTick >= 0.3 then
					doTick()
				end
				wait()
			end
		end)

		local function texture(self,data)
			thumbColor = data.ThumbColor or Color3.new(0,0,0)
			thumbSelectColor = data.ThumbSelectColor or Color3.new(0,0,0)
			scrollThumb.BackgroundColor3 = data.ThumbColor or Color3.new(0,0,0)
			newFrame.BackgroundColor3 = data.FrameColor or Color3.new(0,0,0)
			button1.BackgroundColor3 = data.ButtonColor or Color3.new(0,0,0)
			button2.BackgroundColor3 = data.ButtonColor or Color3.new(0,0,0)
			for i,v in pairs(button1.Arrow:GetChildren()) do
				v.BackgroundColor3 = data.ArrowColor or Color3.new(0,0,0)
			end
			for i,v in pairs(button2.Arrow:GetChildren()) do
				v.BackgroundColor3 = data.ArrowColor or Color3.new(0,0,0)
			end
		end
		newMt.Texture = texture

		local wheelIncrement = 1
		local scrollOverlay = Instance.new("ScrollingFrame")
		scrollOverlay.BackgroundTransparency = 1
		scrollOverlay.Size = UDim2.new(1,0,1,0)
		scrollOverlay.ScrollBarThickness = 0
		scrollOverlay.CanvasSize = UDim2.new(0,0,0,0)
		local scrollOverlayFrame = Instance.new("Frame",scrollOverlay)
		scrollOverlayFrame.BackgroundTransparency = 1
		scrollOverlayFrame.Size = UDim2.new(1,0,1,0)
		scrollOverlayFrame.MouseWheelForward:Connect(function()newMt:ScrollTo(newMt.Index - wheelIncrement)end)
		scrollOverlayFrame.MouseWheelBackward:Connect(function()newMt:ScrollTo(newMt.Index + wheelIncrement)end)

		local scrollUpEvent,scrollDownEvent

		local function setScrollFrame(self,frame,inc)
			wheelIncrement = inc or self.Increment
			if scrollUpEvent then scrollUpEvent:Disconnect() scrollUpEvent = nil end
			if scrollDownEvent then scrollDownEvent:Disconnect() scrollDownEvent = nil end
			scrollUpEvent = frame.MouseWheelForward:Connect(function()newMt:ScrollTo(newMt.Index - wheelIncrement)end)
			scrollDownEvent = frame.MouseWheelBackward:Connect(function()newMt:ScrollTo(newMt.Index + wheelIncrement)end)
			--scrollOverlay.Parent = frame
		end
		newMt.SetScrollFrame = setScrollFrame

		newMt.Update = update

		update()
		return newMt
	end
end

local TreeView do
	TreeView = {}

	local treeMt = {
		__index = {
			Length = function(self)
				return #self.Tree
			end
		}
	}

	function TreeView.new()
		local function createDNodeTemplate()
			local DNodeTemplate = CreateInstance("TextButton",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=false,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.37647062540054,0.54901963472366,0.82745105028152),BackgroundTransparency=1,BorderColor3=Color3.new(0.33725491166115,0.49019610881805,0.73725491762161),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,1,0,2),Rotation=0,Selectable=true,Size=UDim2.new(1,-18,0,18),SizeConstraint=0,Visible=true,ZIndex=1,Name="Entry",})
			local DNodeTemplate2 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0,0,0),BackgroundTransparency=1,BorderColor3=Color3.new(0.14509804546833,0.20784315466881,0.21176472306252),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,18,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-18,1,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Indent",Parent = DNodeTemplate})
			local DNodeTemplate3 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Item",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,22,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-22,0,18),SizeConstraint=0,Visible=true,ZIndex=1,Name="EntryName",Parent = DNodeTemplate2})
			local DNodeTemplate4 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=true,Draggable=false,Position=UDim2.new(0,2,0.5,-8),Rotation=0,Selectable=false,Size=UDim2.new(0,16,0,16),SizeConstraint=0,Visible=true,ZIndex=1,Name="IconFrame",Parent = DNodeTemplate2})
			local DNodeTemplate5 = CreateInstance("ImageLabel",{Image="rbxassetid://529659138",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(-5.811999797821,0,-1.3120000362396,0),Rotation=0,Selectable=false,Size=UDim2.new(16,0,16,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Icon",Parent = DNodeTemplate4})
			local DNodeTemplate6 = CreateInstance("TextButton",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=true,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=true,Draggable=false,Position=UDim2.new(0,-16,0.5,-8),Rotation=0,Selectable=true,Size=UDim2.new(0,16,0,16),SizeConstraint=0,Visible=true,ZIndex=1,Name="Expand",Parent = DNodeTemplate2})
			local DNodeTemplate7 = CreateInstance("ImageLabel",{Image="rbxassetid://529659138",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(-12.562000274658,0,-12.562000274658,0),Rotation=0,Selectable=false,Size=UDim2.new(16,0,16,0),SizeConstraint=0,Visible=true,ZIndex=1,Name="Icon",Parent = DNodeTemplate6})
			return DNodeTemplate
		end
		local dNodeTemplate = createDNodeTemplate()		

		local newMt = setmetatable({
			Index = 0,
			Tree = {},
			Expanded = {},
			NodeTemplate = dNodeTemplate,
			DisplayFrame = nil,
			Entries = {},
			Height = 18,
			OffX = 1,
			OffY = 1
		},treeMt)

		local function refresh(self)
			if not self.DisplayFrame then warn("Tree: No Display Frame") return end

			if self.PreUpdate then self:PreUpdate() end

			local displayFrame = self.DisplayFrame
			local entrySpace = math.ceil(displayFrame.AbsoluteSize.Y / (self.Height + 1))

			for i = 1,entrySpace do
				local node = self.Tree[i + self.Index]
				if node then
					local entry = self.Entries[i]
					if not entry then
						entry = self.NodeTemplate:Clone()
						entry.Position = UDim2.new(0,self.OffX,0,self.OffY + (self.Height + 1) * #displayFrame:GetChildren())
						entry.Parent = displayFrame
						self.Entries[i] = entry
						if self.NodeCreate then self:NodeCreate(entry,i) end
					end
					entry.Visible = true
					if self.NodeDraw then self:NodeDraw(entry,node) end
				else
					local entry = self.Entries[i]
					if entry then
						entry.Visible = false
					end
				end
			end

			for i = entrySpace+1,#self.Entries do
				if self.Entries[i] then
					self.Entries[i]:Destroy()
					self.Entries[i] = nil
				end
			end

			if self.OnUpdate then self:OnUpdate() end
			if self.RefreshNeeded then self.RefreshNeeded = false self:Refresh() end
		end
		newMt.Refresh = refresh

		local function expand(self,item)
			self.Expanded[item] = not self.Expanded[item]
			if self.TreeUpdate then self:TreeUpdate() end
			self:Refresh()
		end
		newMt.Expand = expand

		local Selection do
			Selection = {
				List = {},
				Selected = {}
			}

			function Selection:Add(obj)
				if Selection.Selected[obj] then return end

				Selection.Selected[obj] = true
				table.insert(Selection.List,obj)
			end

			function Selection:Set(objs)
				for i,v in pairs(Selection.List) do
					Selection.Selected[v] = nil
				end
				Selection.List = {}

				for i,v in pairs(objs) do
					if not Selection.Selected[v] then
						Selection.Selected[v] = true
						table.insert(Selection.List,v)
					end
				end
			end

			function Selection:Remove(obj)
				if not Selection.Selected[obj] then return end

				Selection.Selected[obj] = false
				for i,v in pairs(Selection.List) do
					if v == obj then table.remove(Selection.List,i) break end
				end
			end
		end
		newMt.Selection = Selection

		return newMt
	end
end

local ContextMenu do
	ContextMenu = {}

	local function createContextEntry()
		local ContextEntry = CreateInstance("TextButton",{Font=3,FontSize=5,Text="",TextColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=2,TextYAlignment=1,AutoButtonColor=false,Modal=false,Selected=false,Style=0,Active=true,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.37647062540054,0.54901963472366,0.82745105028152),BackgroundTransparency=1,BorderColor3=Color3.new(0.33725491166115,0.49019610881805,0.73725491762161),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,2),Rotation=0,Selectable=true,Size=UDim2.new(1,0,0,20),SizeConstraint=0,Visible=true,ZIndex=1,Name="Entry",})
		local ContextEntry2 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=true,Draggable=false,Position=UDim2.new(0,2,0.5,-8),Rotation=0,Selectable=false,Size=UDim2.new(0,16,0,16),SizeConstraint=0,Visible=true,ZIndex=1,Name="IconFrame",Parent = ContextEntry})
		local ContextEntry3 = CreateInstance("ImageLabel",{Image="rbxassetid://529659138",ImageColor3=Color3.new(1,1,1),ImageRectOffset=Vector2.new(0,0),ImageRectSize=Vector2.new(0,0),ImageTransparency=0,ScaleType=0,SliceCenter=Rect.new(0,0,0,0),Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=false,Size=UDim2.new(0,16,0,16),SizeConstraint=0,Visible=true,ZIndex=1,Name="Icon",Parent = ContextEntry2})
		local ContextEntry4 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Item",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=0,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,24,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-24,0,20),SizeConstraint=0,Visible=true,ZIndex=1,Name="EntryName",Parent = ContextEntry})
		local ContextEntry5 = CreateInstance("TextLabel",{Font=3,FontSize=5,Text="Ctrl+C",TextColor3=Color3.new(0.86274516582489,0.86274516582489,0.86274516582489),TextScaled=false,TextSize=14,TextStrokeColor3=Color3.new(0,0,0),TextStrokeTransparency=1,TextTransparency=0,TextWrapped=false,TextXAlignment=1,TextYAlignment=1,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=1,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,24,0,0),Rotation=0,Selectable=false,Size=UDim2.new(1,-30,0,20),SizeConstraint=0,Visible=true,ZIndex=1,Name="Shortcut",Parent = ContextEntry})
		return ContextEntry
	end

	local function createContextDivider()
		local ContextDivider = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.18823531270027,0.18823531270027,0.18823531270027),BackgroundTransparency=1,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,0,0,20),Rotation=0,Selectable=false,Size=UDim2.new(1,0,0,12),SizeConstraint=0,Visible=true,ZIndex=1,Name="Divider",})
		local ContextDivider2 = CreateInstance("Frame",{Style=0,Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.43921571969986,0.43921571969986,0.43921571969986),BackgroundTransparency=0,BorderColor3=Color3.new(0.10588236153126,0.16470588743687,0.20784315466881),BorderSizePixel=0,ClipsDescendants=false,Draggable=false,Position=UDim2.new(0,2,0,5),Rotation=0,Selectable=false,Size=UDim2.new(1,-4,0,1),SizeConstraint=0,Visible=true,ZIndex=1,Name="Line",Parent = ContextDivider})
		return ContextDivider
	end

	local contextFrame = CreateInstance("ScrollingFrame",{BottomImage="rbxasset://textures/ui/Scroll/scroll-bottom.png",CanvasPosition=Vector2.new(0,0),CanvasSize=UDim2.new(0,0,2,0),MidImage="rbxasset://textures/ui/Scroll/scroll-middle.png",ScrollBarThickness=0,ScrollingEnabled=true,TopImage="rbxasset://textures/ui/Scroll/scroll-top.png",Active=false,AnchorPoint=Vector2.new(0,0),BackgroundColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BackgroundTransparency=0,BorderColor3=Color3.new(0.43921571969986,0.43921571969986,0.43921571969986),BorderSizePixel=1,ClipsDescendants=true,Draggable=false,Position=UDim2.new(0,0,0,0),Rotation=0,Selectable=true,Size=UDim2.new(0,200,0,100),SizeConstraint=0,Visible=true,ZIndex=1,Name="ContextFrame",})
	local contextEntry = createContextEntry()
	local contextDivider = createContextDivider()

	function ContextMenu.new()
		local newMt = setmetatable({
			Width = 200,
			Height = 20,
			Items = {},
			Frame = contextFrame:Clone()
		},{})

		local mainFrame = newMt.Frame
		local entryFrame = contextEntry:Clone()
		local dividerFrame = contextDivider:Clone()

		mainFrame.ScrollingEnabled = false

		local function add(self,item)
			local newItem = {
				Name = item.Name or "Item",
				Icon = item.Icon or "",
				Shortcut = item.Shortcut or "",
				OnClick = item.OnClick,
				OnHover = item.OnHover,
				Disabled = item.Disabled or false,
				DisabledIcon = item.DisabledIcon or ""
			}
			table.insert(self.Items,newItem)
		end
		newMt.Add = add

		local function addDivider(self)
			table.insert(self.Items,"Divider")
		end
		newMt.AddDivider = addDivider

		local function clear(self)
			self.Items = {}
		end
		newMt.Clear = clear

		local function refresh(self)
			mainFrame:ClearAllChildren()

			local currentPos = 2
			for _,item in pairs(self.Items) do
				if item == "Divider" then
					local newDivider = dividerFrame:Clone()
					newDivider.Position = UDim2.new(0,0,0,currentPos)
					newDivider.Parent = mainFrame
					currentPos = currentPos + 12
				else
					local newEntry = entryFrame:Clone()
					newEntry.Position = UDim2.new(0,0,0,currentPos)
					newEntry.EntryName.Text = item.Name
					newEntry.Shortcut.Text = item.Shortcut
					if item.Disabled then
						newEntry.EntryName.TextColor3 = Color3.new(150/255,150/255,150/255)
						newEntry.Shortcut.TextColor3 = Color3.new(150/255,150/255,150/255)
					end

					local useIcon = item.Disabled and item.DisabledIcon or item.Icon
					if type(useIcon) == "string" then
						newEntry.IconFrame.Icon.Image = useIcon
					else
						newEntry.IconFrame:Destroy()
						local newIcon = useIcon:Clone()
						newIcon.Position = UDim2.new(0,2,0.5,-8)
						newIcon.Parent = newEntry
					end

					if item.OnClick and not item.Disabled then newEntry.MouseButton1Click:Connect(item.OnClick) end

					newEntry.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							newEntry.BackgroundTransparency = 0.5
						end
					end)

					newEntry.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseMovement then
							newEntry.BackgroundTransparency = 1
						end
					end)

					newEntry.Parent = mainFrame
					currentPos = currentPos + self.Height
				end
			end

			mainFrame.Size = UDim2.new(0,self.Width,0,currentPos+2)
		end
		newMt.Refresh = refresh

		local function show(self,displayFrame,x,y)
			local toSize = mainFrame.Size.Y.Offset
			local reverseY = false

			local maxX,maxY = gui.AbsoluteSize.X,gui.AbsoluteSize.Y

			if x + self.Width > maxX then x = x - self.Width end
			if y + toSize > maxY then reverseY = true end

			mainFrame.Position = UDim2.new(0,x,0,y)
			mainFrame.Size = UDim2.new(0,self.Width,0,0)
			mainFrame.Parent = displayFrame

			local closeEvent = Services.UserInputService.InputBegan:Connect(function(input)
				if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end

				if not f.checkMouseInGui(mainFrame) then
					self:Hide()
				end
			end)

			if reverseY then
				if y - toSize < 0 then y = toSize end
				mainFrame:TweenSizeAndPosition(UDim2.new(0,self.Width,0,toSize),UDim2.new(0,x,0,y - toSize),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.2,true)
			else
				mainFrame:TweenSize(UDim2.new(0,self.Width,0,toSize),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.2,true)
			end
		end
		newMt.Show = show

		local function hide(self)
			mainFrame.Parent = nil
		end
		newMt.Hide = hide

		return newMt
	end
end

-- Explorer
local workspaces = {
	["Default"] = {
		Data = {"Default"},
		IsDefault = true
	}
}
local nodes = {}

local explorerPanel
local propertiesPanel

local entryTemplate = resources:WaitForChild("Entry")

local iconMap = "rbxassetid://765660635"
local iconIndex = {
	-- Core
	NodeCollapsed = 165;
	NodeExpanded = 166;
	NodeCollapsedOver = 179;
	NodeExpandedOver = 180;

	-- Buttons
	CUT_ICON = 174;
	COPY_ICON = 175;
	PASTE_ICON = 176;
	DELETE_ICON = 177;
	GROUP_ICON = 150;
	UNGROUP_ICON = 151;
	SELECTCHILDREN_ICON = 152;

	CUT_D_ICON = 160;
	COPY_D_ICON = 161;
	PASTE_D_ICON = 162;
	DELETE_D_ICON = 163;
	GROUP_D_ICON = 136;
	UNGROUP_D_ICON = 137;
	SELECTCHILDREN_D_ICON = 138;

	-- Classes
	["Accessory"] = 32;
	["Accoutrement"] = 32;
	["AdvancedDragger"] = 41;
	["AdService"] = 73;
	["AlignOrientation"] = 110;
	["AlignPosition"] = 111;
	["Animation"] = 60;
	["AnimationController"] = 60;
	["AnimationTrack"] = 60;
	["Animator"] = 60;
	["ArcHandles"] = 56;
	["AssetService"] = 72;
	["Attachment"] = 92;
	["Backpack"] = 20;
	["BadgeService"] = 75;
	["BallSocketConstraint"] = 97;
	["BillboardGui"] = 64;
	["BinaryStringValue"] = 4;
	["BindableEvent"] = 67;
	["BindableFunction"] = 66;
	["BlockMesh"] = 8;
	["BloomEffect"] = 90;
	["BlurEffect"] = 90;
	["BodyAngularVelocity"] = 14;
	["BodyForce"] = 14;
	["BodyGyro"] = 14;
	["BodyPosition"] = 14;
	["BodyThrust"] = 14;
	["BodyVelocity"] = 14;
	["BoolValue"] = 4;
	["BoxHandleAdornment"] = 54;
	["BrickColorValue"] = 4;
	["Camera"] = 5;
	["CFrameValue"] = 4;
	["ChangeHistoryService"] = 118;
	["CharacterMesh"] = 60;
	["Chat"] = 33;
	["ClickDetector"] = 41;
	["CollectionService"] = 30;
	["Color3Value"] = 4;
	["ColorCorrectionEffect"] = 90;
	["ConeHandleAdornment"] = 54;
	["Configuration"] = 58;
	["ContentProvider"] = 72;
	["ContextActionService"] = 41;
	["ControllerService"] = 84;
	["CookiesService"] = 119;
	["CoreGui"] = 46;
	["CoreScript"] = 91;
	["CornerWedgePart"] = 1;
	["CustomEvent"] = 4;
	["CustomEventReceiver"] = 4;
	["CylinderHandleAdornment"] = 54;
	["CylinderMesh"] = 8;
	["CylindricalConstraint"] = 89;
	["Debris"] = 30;
	["Decal"] = 7;
	["Dialog"] = 62;
	["DialogChoice"] = 63;
	["DoubleConstrainedValue"] = 4;
	["Explosion"] = 36;
	["FileMesh"] = 8;
	["Fire"] = 61;
	["Flag"] = 38;
	["FlagStand"] = 39;
	["FloorWire"] = 4;
	["Folder"] = 70;
	["ForceField"] = 37;
	["Frame"] = 48;
	["FriendService"] = 121;
	["GamepadService"] = 84;
	["GamePassService"] = 19;
	["Geometry"] = 120;
	["Glue"] = 34;
	["GuiButton"] = 52;
	["GuiMain"] = 47;
	["GuiService"] = 47;
	["Handles"] = 53;
	["HapticService"] = 84;
	["Hat"] = 45;
	["HingeConstraint"] = 89;
	["Hint"] = 33;
	["HopperBin"] = 22;
	["HttpRbxApiService"] = 76;
	["HttpService"] = 76;
	["Humanoid"] = 9;
	["HumanoidController"] = 9;
	["ImageButton"] = 52;
	["ImageLabel"] = 49;
	["InsertService"] = 72;
	["IntConstrainedValue"] = 4;
	["IntValue"] = 4;
	["JointInstance"] = 34;
	["JointsService"] = 34;
	["Keyframe"] = 60;
	["KeyframeSequence"] = 60;
	["KeyframeSequenceProvider"] = 60;
	["Lighting"] = 13;
	["LineForce"] = 112;
	["LineHandleAdornment"] = 54;
	["LocalScript"] = 18;
	["LogService"] = 87;
	["LuaWebService"] = 91;
	["MarketplaceService"] = 106;
	["MeshContentProvider"] = 8;
	["MeshPart"] = 77;
	["Message"] = 33;
	["Model"] = 2;
	["ModuleScript"] = 71;
	["Motor"] = 34;
	["Motor6D"] = 34;
	["MoveToConstraint"] = 89;
	["NegateOperation"] = 78;
	["NetworkClient"] = 16;
	["NetworkReplicator"] = 29;
	["NetworkServer"] = 15;
	["NotificationService"] = 117;
	["NumberValue"] = 4;
	["ObjectValue"] = 4;
	["Pants"] = 44;
	["ParallelRampPart"] = 1;
	["Part"] = 1;
	["ParticleEmitter"] = 69;
	["PartPairLasso"] = 57;
	["PathfindingService"] = 37;
	["PersonalServerService"] = 121;
	["PhysicsService"] = 30;
	["Platform"] = 35;
	["Player"] = 12;
	["PlayerGui"] = 46;
	["Players"] = 21;
	["PlayerScripts"] = 82;
	["PointLight"] = 13;
	["PointsService"] = 83;
	["Pose"] = 60;
	["PrismaticConstraint"] = 89;
	["PrismPart"] = 1;
	["PyramidPart"] = 1;
	["RayValue"] = 4;
	["ReflectionMetadata"] = 86;
	["ReflectionMetadataCallbacks"] = 86;
	["ReflectionMetadataClass"] = 86;
	["ReflectionMetadataClasses"] = 86;
	["ReflectionMetadataEnum"] = 86;
	["ReflectionMetadataEnumItem"] = 86;
	["ReflectionMetadataEnums"] = 86;
	["ReflectionMetadataEvents"] = 86;
	["ReflectionMetadataFunctions"] = 86;
	["ReflectionMetadataMember"] = 86;
	["ReflectionMetadataProperties"] = 86;
	["ReflectionMetadataYieldFunctions"] = 86;
	["RemoteEvent"] = 80;
	["RemoteFunction"] = 79;
	["RenderHooksService"] = 122;
	["ReplicatedFirst"] = 72;
	["ReplicatedStorage"] = 72;
	["RightAngleRampPart"] = 1;
	["RocketPropulsion"] = 14;
	["RodConstraint"] = 89;
	["RopeConstraint"] = 89;
	["Rotate"] = 34;
	["RotateP"] = 34;
	["RotateV"] = 34;
	["RunService"] = 124;
	["RuntimeScriptService"] = 91;
	["ScreenGui"] = 47;
	["Script"] = 6;
	["ScriptContext"] = 82;
	["ScriptService"] = 91;
	["ScrollingFrame"] = 48;
	["Seat"] = 35;
	["Selection"] = 55;
	["SelectionBox"] = 54;
	["SelectionPartLasso"] = 57;
	["SelectionPointLasso"] = 57;
	["SelectionSphere"] = 54;
	["ServerScriptService"] = 115;
	["ServerStorage"] = 74;
	["Shirt"] = 43;
	["ShirtGraphic"] = 40;
	["SkateboardPlatform"] = 35;
	["Sky"] = 28;
	["SlidingBallConstraint"] = 89;
	["Smoke"] = 59;
	["Snap"] = 34;
	["SolidModelContentProvider"] = 77;
	["Sound"] = 11;
	["SoundGroup"] = 93;
	["SoundService"] = 31;
	["Sparkles"] = 42;
	["SpawnLocation"] = 25;
	["SpecialMesh"] = 8;
	["SphereHandleAdornment"] = 54;
	["SpotLight"] = 13;
	["SpringConstraint"] = 89;
	["StarterCharacterScripts"] = 82;
	["StarterGear"] = 20;
	["StarterGui"] = 46;
	["StarterPack"] = 20;
	["StarterPlayer"] = 88;
	["StarterPlayerScripts"] = 82;
	["Status"] = 2;
	["StringValue"] = 4;
	["SunRaysEffect"] = 90;
	["SurfaceGui"] = 64;
	["SurfaceLight"] = 13;
	["SurfaceSelection"] = 55;
	["Team"] = 24;
	["Teams"] = 23;
	["TeleportService"] = 81;
	["Terrain"] = 65;
	["TerrainRegion"] = 65;
	["TestService"] = 68;
	["TextBox"] = 51;
	["TextButton"] = 51;
	["TextLabel"] = 50;
	["TextService"] = 50;
	["Texture"] = 10;
	["TextureTrail"] = 4;
	["TimerService"] = 118;
	["Tool"] = 17;
	["Torque"] = 113;
	["TouchInputService"] = 84;
	["TouchTransmitter"] = 37;
	["TrussPart"] = 1;
	["TweenService"] = 109;
	["UnionOperation"] = 77;
	["UserInputService"] = 84;
	["Vector3Value"] = 4;
	["VehicleSeat"] = 35;
	["VelocityMotor"] = 34;
	["Visit"] = 123;
	["VRService"] = 95;
	["WedgePart"] = 1;
	["Weld"] = 34;
	["Workspace"] = 19;
	[""] = 116;
}

entryTemplate.Indent.IconFrame.Icon.Image = iconMap

-- Properties
local propCategories = {
	["Instance"] = {
		["Archivable"] = "Behavior",
		["ClassName"] = "Data",
		["DataCost"] = "Data",
		["Name"] = "Data",
		["Parent"] = "Data",
		["RobloxLocked"] = "Data"
	},
	["BasePart"] = {
		["Anchored"] = "Behavior",
		["BackParamA"] = "Surface Inputs",
		["BackParamB"] = "Surface Inputs",
		["BackSurface"] = "Surface",
		["BackSurfaceInput"] = "Surface Inputs",
		["BottomParamA"] = "Surface Inputs",
		["BottomParamB"] = "Surface Inputs",
		["BottomSurface"] = "Surface",
		["BottomSurfaceInput"] = "Surface Inputs",
		["BrickColor"] = "Appearance",
		["CFrame"] = "Data",
		["CanCollide"] = "Behavior",
		["CollisionGroupId"] = "Data",
		["CustomPhysicalProperties"] = "Part",
		["DraggingV1"] = "Behavior",
		["Elasticity"] = "Part",
		["Friction"] = "Part",
		["FrontParamA"] = "Surface Inputs",
		["FrontParamB"] = "Surface Inputs",
		["FrontSurface"] = "Surface",
		["FrontSurfaceInput"] = "Surface Inputs",
		["LeftParamA"] = "Surface Inputs",
		["LeftParamB"] = "Surface Inputs",
		["LeftSurface"] = "Surface",
		["LeftSurfaceInput"] = "Surface Inputs",
		["LocalTransparencyModifier"] = "Data",
		["Locked"] = "Behavior",
		["Material"] = "Appearance",
		["NetworkIsSleeping"] = "Data",
		["NetworkOwnerV3"] = "Data",
		["NetworkOwnershipRule"] = "Behavior",
		["NetworkOwnershipRuleBool"] = "Behavior",
		["Position"] = "Data",
		["ReceiveAge"] = "Part",
		["Reflectance"] = "Appearance",
		["ResizeIncrement"] = "Behavior",
		["ResizeableFaces"] = "Behavior",
		["RightParamA"] = "Surface Inputs",
		["RightParamB"] = "Surface Inputs",
		["RightSurface"] = "Surface",
		["RightSurfaceInput"] = "Surface Inputs",
		["RotVelocity"] = "Data",
		["Rotation"] = "Data",
		["Size"] = "Part",
		["TopParamA"] = "Surface Inputs",
		["TopParamB"] = "Surface Inputs",
		["TopSurface"] = "Surface",
		["TopSurfaceInput"] = "Surface Inputs",
		["Transparency"] = "Appearance",
		["Velocity"] = "Data"
	},
	["Part"] = {
		["Shape"] = "Part"
	},
	["Message"] = {
		["Text"] = "Appearance"
	},
	["Camera"] = {
		["CFrame"] = "Data",
		["CameraSubject"] = "Camera",
		["CameraType"] = "Camera",
		["FieldOfView"] = "Data",
		["Focus"] = "Data",
		["HeadLocked"] = "Data",
		["HeadScale"] = "Data",
		["ViewportSize"] = "Data"
	},
	["Animation"] = {
		["AnimationId"] = "Data",
		["Loop"] = "Data",
		["Priority"] = "Data"
	},
	["PVAdornment"] = {
		["Adornee"] = "Data"
	},
	["PartAdornment"] = {
		["Adornee"] = "Data"
	},
	["Decal"] = {
		["Color3"] = "Appearance",
		["LocalTransparencyModifier"] = "Appearance",
		["Shiny"] = "Appearance",
		["Specular"] = "Appearance",
		["Texture"] = "Appearance",
		["Transparency"] = "Appearance"
	},
	["Texture"] = {
		["StudsPerTileU"] = "Appearance",
		["StudsPerTileV"] = "Appearance"
	},
	["Feature"] = {
		["FaceId"] = "Data",
		["InOut"] = "Data",
		["LeftRight"] = "Data",
		["TopBottom"] = "Data"
	},
	["VelocityMotor"] = {
		["CurrentAngle"] = "Data",
		["DesiredAngle"] = "Data",
		["Hole"] = "Data",
		["MaxVelocity"] = "Data",
	},
	["JointInstance"] = {
		["C0"] = "Data",
		["C1"] = "Data",
		["Part0"] = "Data",
		["Part1"] = "Data"
	},
	["DynamicRotate"] = {
		["BaseAngle"] = "Data"
	},
	["Motor"] = {
		["CurrentAngle"] = "Data",
		["DesiredAngle"] = "Data",
		["MaxVelocity"] = "Data"
	},
	["Glue"] = {
		["F0"] = "Data",
		["F1"] = "Data",
		["F2"] = "Data",
		["F3"] = "Data"
	},
	["ManualSurfaceJointInstance"] = {
		["Surface0"] = "Data",
		["Surface1"] = "Data"
	},
	["Explosion"] = {
		["BlastPressure"] = "Data",
		["BlastRadius"] = "Data",
		["DestroyJointRadiusPercent"] = "Data",
		["ExplosionType"] = "Data",
		["Position"] = "Data",
		["Visible"] = "Data"
	},
	["Sparkles"] = {
		["Enabled"] = "Data",
		["SparkleColor"] = "Data"
	},
	["Fire"] = {
		["Color"] = "Data",
		["Enabled"] = "Data",
		["Heat"] = "Data",
		["SecondaryColor"] = "Data",
		["Size"] = "Data"
	},
	["Smoke"] = {
		["Color"] = "Data",
		["Enabled"] = "Data",
		["Opacity"] = "Data",
		["RiseVelocity"] = "Data",
		["Size"] = "Data"
	},
	["ParticleEmitter"] = {
		["Acceleration"] = "Motion",
		["Color"] = "Appearance",
		["Drag"] = "Particles",
		["EmissionDirection"] = "Emission",
		["Enabled"] = "Emission",
		["Lifetime"] = "Emission",
		["LightEmission"] = "Appearance",
		["LockedToPart"] = "Particles",
		["Rate"] = "Emission",
		["RotSpeed"] = "Emission",
		["Rotation"] = "Emission",
		["Size"] = "Appearance",
		["Speed"] = "Emission",
		["Texture"] = "Appearance",
		["Transparency"] = "Appearance",
		["VelocityInheritance"] = "Particles",
		["VelocitySpread"] = "Emission",
		["ZOffset"] = "Appearance"
	},
	["Sky"] = {
		["CelestialBodiesShown"] = "Appearance",
		["SkyboxBk"] = "Appearance",
		["SkyboxDn"] = "Appearance",
		["SkyboxFt"] = "Appearance",
		["SkyboxLf"] = "Appearance",
		["SkyboxRt"] = "Appearance",
		["SkyboxUp"] = "Appearance",
		["StarCount"] = "Appearance"
	},
	["Stats"] = {
		["MinReportInterval"] = "Reporting",
		["ReporterType"] = "Reporting"
	},
	["StarterPlayer"] = {
		["AutoJumpEnabled"] = "Mobile",
		["CameraMaxZoomDistance"] = "Camera",
		["CameraMinZoomDistance"] = "Camera",
		["CameraMode"] = "Camera",
		["DevCameraOcclusionMode"] = "Camera",
		["DevComputerCameraMovementMode"] = "Camera",
		["DevComputerMovementMode"] = "Controls",
		["DevTouchCameraMovementMode"] = "Camera",
		["DevTouchMovementMode"] = "Controls",
		["EnableMouseLockOption"] = "Controls",
		["HealthDisplayDistance"] = "Data",
		["LoadCharacterAppearance"] = "Character",
		["NameDisplayDistance"] = "Data",
		["ScreenOrientation"] = "Mobile"
	},
	["Lighting"] = {
		["Ambient"] = "Appearance",
		["Brightness"] = "Appearance",
		["ColorShift_Bottom"] = "Appearance",
		["ColorShift_Top"] = "Appearance",
		["FogColor"] = "Fog",
		["FogEnd"] = "Fog",
		["FogStart"] = "Fog",
		["GeographicLatitude"] = "Data",
		["GlobalShadows"] = "Appearance",
		["OutdoorAmbient"] = "Appearance",
		["Outlines"] = "Appearance",
		["TimeOfDay"] = "Data"
	},
	["LocalizationService"] = {
		["LocaleId"] = "Behavior",
		["PreferredLanguage"] = "Behavior"
	},
	["Light"] = {
		["Brightness"] = "Appearance",
		["Color"] = "Appearance",
		["Enabled"] = "Appearance",
		["Shadows"] = "Appearance"
	},
	["PointLight"] = {
		["Range"] = "Appearance"
	},
	["SpotLight"] = {
		["Angle"] = "Appearance",
		["Face"] = "Appearance",
		["Range"] = "Appearance"
	},
	["SurfaceLight"] = {
		["Angle"] = "Appearance",
		["Face"] = "Appearance",
		["Range"] = "Appearance"
	},
	["TrussPart"] = {
		["Style"] = "Part"
	},
	["Attachment"] = {
		["Axis"] = "Derived Data",
		["CFrame"] = "Data",
		["Position"] = "Data",
		["Rotation"] = "Data",
		["SecondaryAxis"] = "Derived Data",
		["Visible"] = "Appearance",
		["WorldAxis"] = "Derived Data",
		["WorldPosition"] = "Derived Data",
		["WorldRotation"] = "Derived Data",
		["WorldSecondaryAxis"] = "Derived Data"
	},
	["Humanoid"] = {
		["AutoJumpEnabled"] = "Control",
		["AutoRotate"] = "Control",
		["CameraMaxDistance"] = "Data",
		["CameraMinDistance"] = "Data",
		["CameraMode"] = "Data",
		["CameraOffset"] = "Data",
		["DisplayDistanceType"] = "Data",
		["Health"] = "Game",
		["HealthDisplayDistance"] = "Data",
		["Health_XML"] = "Game",
		["HipHeight"] = "Game",
		["Jump"] = "Control",
		["JumpPower"] = "Game",
		["JumpReplicate"] = "Control",
		["LeftLeg"] = "Data",
		["MaxHealth"] = "Game",
		["MaxSlopeAngle"] = "Game",
		["MoveDirection"] = "Control",
		["MoveDirectionInternal"] = "Control",
		["NameDisplayDistance"] = "Data",
		["NameOcclusion"] = "Data",
		["PlatformStand"] = "Control",
		["RigType"] = "Data",
		["RightLeg"] = "Data",
		["SeatPart"] = "Control",
		["Sit"] = "Control",
		["Strafe"] = "Control",
		["TargetPoint"] = "Control",
		["Torso"] = "Data",
		["WalkAngleError"] = "Control",
		["WalkDirection"] = "Control",
		["WalkSpeed"] = "Game",
		["WalkToPart"] = "Control",
		["WalkToPoint"] = "Control"
	}
}

local categoryOrder = {["Appearance"] = 1,["Data"] = 2,["Goals"] = 3,["Thrust"] = 4,["Turn"] = 5,["Camera"] = 6,["Behavior"] = 7,["Compliance"] = 8,["AlignOrientation"] = 9,["AlignPosition"] = 10,["Derived"] = 11,["LineForce"] = 12,["Rod"] = 13,["Constraint"] = 14,["Spring"] = 15,["Torque"] = 16,["VectorForce"] = 17,["Attachments"] = 18,["Axes"] = 19,["Image"] = 20,["Text"] = 21,["Scrolling"] = 22,["State"] = 23,["Control"] = 24,["Game"] = 25,["Fog"] = 26,["Settings"] = 27,["Physics"] = 28,["Teams"] = 29,["Forcefield"] = 30,["Part"] = 31,["Surface Inputs"] = 32,["Surface"] = 33,["Motion"] = 34,["Particles"] = 35,["Emission"] = 36,["Reflection"] = 37,["Mobile"] = 38,["Controls"] = 39,["Character"] = 40,["Results"] = 41,["Other"] = 42}

-- Gui Functions
local function getResource(name)
	return resources:WaitForChild(name):Clone()
end

function f.prevProportions(t,ind)
	local count = 0	
	for i = ind,1,-1 do
		count = count + t[i].Proportion
	end
	return count
end

function f.buildPanes()
	--print("\n-----\n")
	--for i,v in pairs(RPaneItems) do print(v.Window) end
	--print("\n-----")

	for i,v in pairs(RPaneItems) do
		v.Window:TweenSizeAndPosition(UDim2.new(0,explorerSettings.RPaneWidth,v.Proportion,0),UDim2.new(0,0,f.prevProportions(RPaneItems,i-1),0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
		--v.Window.Position = UDim2.new(0,0,prevProportions(RPaneItems,i-1),0)
		--v.Window.Size = UDim2.new(0,explorerSettings.RPaneWidth,v.Proportion,0)
	end
end

function f.distance(x1,y1,x2,y2)
	return math.sqrt((x2-x1)^2+(y2-y1)^2)
end

function f.checkMouseInGui(gui)
	if gui == nil then return false end
	local guiPosition = gui.AbsolutePosition
	local guiSize = gui.AbsoluteSize	

	if mouse.X >= guiPosition.x and mouse.X <= guiPosition.x + guiSize.x and mouse.Y >= guiPosition.y and mouse.Y <= guiPosition.y + guiSize.y then
		return true
	else
		return false
	end
end

function f.addToPane(window,pane)
	if pane == "Right" then
		for i,v in pairs(RPaneItems) do if v.Window == window then return end end
		for i,v in pairs(RPaneItems) do
			RPaneItems[i].Proportion = v.Proportion / 100 * 80
		end
		window.Parent = contentR
		if #RPaneItems == 0 then
			table.insert(RPaneItems,{Window = window, Proportion = 1})
		else
			table.insert(RPaneItems,{Window = window, Proportion = 0.2})
		end
	end
	f.buildPanes()
end

function f.removeFromPane(window)
	local pane
	local windowIndex

	for i,v in pairs(LPaneItems) do if v.Window == window then pane = LPaneItems windowIndex = i end end
	for i,v in pairs(RPaneItems) do if v.Window == window then pane = RPaneItems windowIndex = i end end	

	if pane and #pane > 0 then
		local weightTop,weightBottom,weightTopN,weightBottomN = 0,0			

		for i = windowIndex-1,1,-1 do weightTop = weightTop + RPaneItems[i].Proportion end	
		for i = windowIndex+1,#RPaneItems do weightBottom = weightBottom + RPaneItems[i].Proportion end	

		if weightTop > 0 and weightBottom == 0 then
			weightTopN = weightTop + RPaneItems[windowIndex].Proportion
		elseif weightTop == 0 and weightBottom > 0 then
			weightBottomN = weightBottom + RPaneItems[windowIndex].Proportion
		else
			weightTopN = weightTop + RPaneItems[windowIndex].Proportion/2
			weightBottomN = weightBottom + RPaneItems[windowIndex].Proportion/2
		end

		for i = 1,windowIndex-1 do
			RPaneItems[i].Proportion = RPaneItems[i].Proportion / weightTop * weightTopN
		end
		for i = windowIndex+1,#RPaneItems do
			RPaneItems[i].Proportion = RPaneItems[i].Proportion / weightBottom * weightBottomN
		end

		table.remove(RPaneItems,windowIndex)
		f.buildPanes()
	end
end

function f.resizePaneItem(window,pane,size)
	local windowIndex = 0
	local sizeWeight = 0
	size = math.max(0.2,size)
	if pane == "Right" then
		for i,v in pairs(RPaneItems) do
			if v.Window == window then windowIndex = i break end
		end

		for i = windowIndex+1,#RPaneItems do
			sizeWeight = sizeWeight + RPaneItems[i].Proportion
		end

		local oldSize = 1-(sizeWeight+RPaneItems[windowIndex].Proportion)

		RPaneItems[windowIndex].Proportion = size

		for i = 1,windowIndex-1 do
			RPaneItems[i].Proportion = RPaneItems[i].Proportion / oldSize * (1-(sizeWeight+size))
		end

		for i,v in pairs(RPaneItems) do
			print(v.Window, v.Proportion)
		end
	end
	f.buildPanes()
end

f.fetchAPI = function()
	local classes,enums,rawAPI = {},{},nil
	if script and script:FindFirstChild("API") then
		rawAPI = require(script.API)
	else
		rawAPI = [==[[{"Superclass":null,"type":"Class","Name":"Instance","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Archivable","tags":[],"Class":"Instance"},{"ValueType":"string","type":"Property","Name":"ClassName","tags":["readonly"],"Class":"Instance"},{"ValueType":"int","type":"Property","Name":"DataCost","tags":["LocalUserSecurity","readonly"],"Class":"Instance"},{"ValueType":"string","type":"Property","Name":"Name","tags":[],"Class":"Instance"},{"ValueType":"Object","type":"Property","Name":"Parent","tags":[],"Class":"Instance"},{"ValueType":"bool","type":"Property","Name":"RobloxLocked","tags":["PluginSecurity"],"Class":"Instance"},{"ValueType":"bool","type":"Property","Name":"archivable","tags":["deprecated","hidden"],"Class":"Instance"},{"ValueType":"string","type":"Property","Name":"className","tags":["deprecated","readonly"],"Class":"Instance"},{"ReturnType":"void","Arguments":[],"Name":"ClearAllChildren","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"Clone","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Destroy","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"FindFirstAncestor","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"FindFirstAncestorOfClass","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"FindFirstAncestorWhichIsA","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"FindFirstChild","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"FindFirstChildOfClass","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null},{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"FindFirstChildWhichIsA","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetChildren","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"scopeLength","Default":"4"}],"Name":"GetDebugId","tags":["PluginSecurity","notbrowsable"],"Class":"Instance","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetDescendants","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetFullName","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"EventInstance","Arguments":[{"Type":"string","Name":"property","Default":null}],"Name":"GetPropertyChangedSignal","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"IsA","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"descendant","Default":null}],"Name":"IsAncestorOf","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"ancestor","Default":null}],"Name":"IsDescendantOf","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Remove","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"childName","Default":null},{"Type":"double","Name":"timeOut","Default":null}],"Name":"WaitForChild","tags":[],"Class":"Instance","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"children","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"clone","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"destroy","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"findFirstChild","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"getChildren","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"isA","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"ancestor","Default":null}],"Name":"isDescendantOf","tags":["deprecated"],"Class":"Instance","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"remove","tags":["deprecated"],"Class":"Instance","type":"Function"},{"Arguments":[{"Name":"child","Type":"Instance"},{"Name":"parent","Type":"Instance"}],"Name":"AncestryChanged","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"property","Type":"Property"}],"Name":"Changed","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"child","Type":"Instance"}],"Name":"ChildAdded","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"child","Type":"Instance"}],"Name":"ChildRemoved","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"descendant","Type":"Instance"}],"Name":"DescendantAdded","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"descendant","Type":"Instance"}],"Name":"DescendantRemoving","tags":[],"Class":"Instance","type":"Event"},{"Arguments":[{"Name":"child","Type":"Instance"}],"Name":"childAdded","tags":["deprecated"],"Class":"Instance","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Accoutrement","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"AttachmentForward","tags":[],"Class":"Accoutrement"},{"ValueType":"CoordinateFrame","type":"Property","Name":"AttachmentPoint","tags":[],"Class":"Accoutrement"},{"ValueType":"Vector3","type":"Property","Name":"AttachmentPos","tags":[],"Class":"Accoutrement"},{"ValueType":"Vector3","type":"Property","Name":"AttachmentRight","tags":[],"Class":"Accoutrement"},{"ValueType":"Vector3","type":"Property","Name":"AttachmentUp","tags":[],"Class":"Accoutrement"},{"Superclass":"Accoutrement","type":"Class","Name":"Accessory","tags":[]},{"Superclass":"Accoutrement","type":"Class","Name":"Hat","tags":["deprecated"]},{"Superclass":"Instance","type":"Class","Name":"AdService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"ShowVideoAd","tags":["deprecated"],"Class":"AdService","type":"Function"},{"Arguments":[{"Name":"adShown","Type":"bool"}],"Name":"VideoAdClosed","tags":["deprecated"],"Class":"AdService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"AdvancedDragger","tags":[]},{"Superclass":"Instance","type":"Class","Name":"AnalyticsService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"counterName","Default":null},{"Type":"int","Name":"amount","Default":"1"}],"Name":"ReportCounter","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"seriesName","Default":null},{"Type":"Dictionary","Name":"points","Default":null},{"Type":"int","Name":"throttlingPercentage","Default":null}],"Name":"ReportInfluxSeries","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"category","Default":null},{"Type":"float","Name":"value","Default":null}],"Name":"ReportStats","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"target","Default":null},{"Type":"string","Name":"eventContext","Default":null},{"Type":"string","Name":"eventName","Default":null},{"Type":"Dictionary","Name":"additionalArgs","Default":null}],"Name":"SetRBXEvent","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"target","Default":null},{"Type":"string","Name":"eventContext","Default":null},{"Type":"string","Name":"eventName","Default":null},{"Type":"Dictionary","Name":"additionalArgs","Default":null}],"Name":"SetRBXEventStream","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"category","Default":null},{"Type":"string","Name":"action","Default":null},{"Type":"string","Name":"label","Default":null}],"Name":"TrackEvent","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Dictionary","Name":"args","Default":null}],"Name":"UpdateHeartbeatObject","tags":["RobloxScriptSecurity"],"Class":"AnalyticsService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Animation","tags":[]},{"ValueType":"Content","type":"Property","Name":"AnimationId","tags":[],"Class":"Animation"},{"Superclass":"Instance","type":"Class","Name":"AnimationController","tags":[]},{"ReturnType":"Array","Arguments":[],"Name":"GetPlayingAnimationTracks","tags":[],"Class":"AnimationController","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"LoadAnimation","tags":[],"Class":"AnimationController","type":"Function"},{"Arguments":[{"Name":"animationTrack","Type":"Instance"}],"Name":"AnimationPlayed","tags":[],"Class":"AnimationController","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"AnimationTrack","tags":[]},{"ValueType":"Object","type":"Property","Name":"Animation","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"bool","type":"Property","Name":"IsPlaying","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"Length","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"bool","type":"Property","Name":"Looped","tags":[],"Class":"AnimationTrack"},{"ValueType":"AnimationPriority","type":"Property","Name":"Priority","tags":[],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"Speed","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"TimePosition","tags":[],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"WeightCurrent","tags":["readonly"],"Class":"AnimationTrack"},{"ValueType":"float","type":"Property","Name":"WeightTarget","tags":["readonly"],"Class":"AnimationTrack"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"speed","Default":"1"}],"Name":"AdjustSpeed","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"weight","Default":"1"},{"Type":"float","Name":"fadeTime","Default":"0.100000001"}],"Name":"AdjustWeight","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"keyframeName","Default":null}],"Name":"GetTimeOfKeyframe","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"fadeTime","Default":"0.100000001"},{"Type":"float","Name":"weight","Default":"1"},{"Type":"float","Name":"speed","Default":"1"}],"Name":"Play","tags":[],"Class":"AnimationTrack","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"fadeTime","Default":"0.100000001"}],"Name":"Stop","tags":[],"Class":"AnimationTrack","type":"Function"},{"Arguments":[],"Name":"DidLoop","tags":[],"Class":"AnimationTrack","type":"Event"},{"Arguments":[{"Name":"keyframeName","Type":"string"}],"Name":"KeyframeReached","tags":[],"Class":"AnimationTrack","type":"Event"},{"Arguments":[],"Name":"Stopped","tags":[],"Class":"AnimationTrack","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Animator","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"LoadAnimation","tags":[],"Class":"Animator","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"deltaTime","Default":null}],"Name":"StepAnimations","tags":["PluginSecurity"],"Class":"Animator","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"AssetService","tags":[]},{"ReturnType":"int","Arguments":[{"Type":"string","Name":"placeName","Default":null},{"Type":"int64","Name":"templatePlaceID","Default":null},{"Type":"string","Name":"description","Default":""}],"Name":"CreatePlaceAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"placeName","Default":null},{"Type":"int64","Name":"templatePlaceID","Default":null},{"Type":"string","Name":"description","Default":""}],"Name":"CreatePlaceInPlayerInventoryAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int64","Name":"packageAssetId","Default":null}],"Name":"GetAssetIdsForPackage","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"int64","Name":"assetId","Default":null},{"Type":"Vector2","Name":"thumbnailSize","Default":null},{"Type":"int","Name":"assetType","Default":"0"}],"Name":"GetAssetThumbnailAsync","tags":["RobloxScriptSecurity"],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"int","Name":"pageNum","Default":"1"}],"Name":"GetAssetVersions","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"creationID","Default":null}],"Name":"GetCreatorAssetID","tags":["deprecated"],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[],"Name":"GetGamePlacesAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int","Name":"placeId","Default":null}],"Name":"GetPlacePermissions","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"int","Name":"versionNumber","Default":null}],"Name":"RevertAsset","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"void","Arguments":[],"Name":"SavePlaceAsync","tags":[],"Class":"AssetService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"AccessType","Name":"accessType","Default":"Everyone"},{"Type":"Array","Name":"inviteList","Default":"{}"}],"Name":"SetPlacePermissions","tags":[],"Class":"AssetService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Attachment","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Axis","tags":[],"Class":"Attachment"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"Orientation","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"Rotation","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"SecondaryAxis","tags":[],"Class":"Attachment"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldAxis","tags":["readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldOrientation","tags":["readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldPosition","tags":["readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldRotation","tags":["deprecated","readonly"],"Class":"Attachment"},{"ValueType":"Vector3","type":"Property","Name":"WorldSecondaryAxis","tags":["readonly"],"Class":"Attachment"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetAxis","tags":[],"Class":"Attachment","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetSecondaryAxis","tags":[],"Class":"Attachment","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"axis","Default":null}],"Name":"SetAxis","tags":[],"Class":"Attachment","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"axis","Default":null}],"Name":"SetSecondaryAxis","tags":[],"Class":"Attachment","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"BadgeService","tags":["notCreatable"]},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"badgeId","Default":null}],"Name":"AwardBadge","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"badgeId","Default":null}],"Name":"IsDisabled","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"badgeId","Default":null}],"Name":"IsLegal","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"badgeId","Default":null}],"Name":"UserHasBadge","tags":[],"Class":"BadgeService","type":"YieldFunction"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"userId","Type":"int"},{"Name":"badgeId","Type":"int"}],"Name":"BadgeAwarded","tags":["RobloxScriptSecurity"],"Class":"BadgeService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BasePlayerGui","tags":[]},{"Superclass":"BasePlayerGui","type":"Class","Name":"CoreGui","tags":["notCreatable"]},{"ValueType":"Object","type":"Property","Name":"SelectionImageObject","tags":["RobloxScriptSecurity"],"Class":"CoreGui"},{"ValueType":"int","type":"Property","Name":"Version","tags":["readonly"],"Class":"CoreGui"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enabled","Default":null},{"Type":"Instance","Name":"guiAdornee","Default":null},{"Type":"NormalId","Name":"faceId","Default":null}],"Name":"SetUserGuiRendering","tags":["RobloxScriptSecurity"],"Class":"CoreGui","type":"Function"},{"Superclass":"BasePlayerGui","type":"Class","Name":"PlayerGui","tags":["notCreatable"]},{"ValueType":"ScreenOrientation","type":"Property","Name":"CurrentScreenOrientation","tags":["readonly"],"Class":"PlayerGui"},{"ValueType":"ScreenOrientation","type":"Property","Name":"ScreenOrientation","tags":[],"Class":"PlayerGui"},{"ValueType":"Object","type":"Property","Name":"SelectionImageObject","tags":[],"Class":"PlayerGui"},{"ReturnType":"float","Arguments":[],"Name":"GetTopbarTransparency","tags":[],"Class":"PlayerGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"transparency","Default":null}],"Name":"SetTopbarTransparency","tags":[],"Class":"PlayerGui","type":"Function"},{"Arguments":[{"Name":"transparency","Type":"float"}],"Name":"TopbarTransparencyChangedSignal","tags":[],"Class":"PlayerGui","type":"Event"},{"Superclass":"BasePlayerGui","type":"Class","Name":"StarterGui","tags":[]},{"ValueType":"bool","type":"Property","Name":"ResetPlayerGuiOnSpawn","tags":["deprecated"],"Class":"StarterGui"},{"ValueType":"ScreenOrientation","type":"Property","Name":"ScreenOrientation","tags":[],"Class":"StarterGui"},{"ValueType":"bool","type":"Property","Name":"ShowDevelopmentGui","tags":[],"Class":"StarterGui"},{"ReturnType":"bool","Arguments":[{"Type":"CoreGuiType","Name":"coreGuiType","Default":null}],"Name":"GetCoreGuiEnabled","tags":[],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"parameterName","Default":null},{"Type":"Function","Name":"getFunction","Default":null}],"Name":"RegisterGetCore","tags":["RobloxScriptSecurity"],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"parameterName","Default":null},{"Type":"Function","Name":"setFunction","Default":null}],"Name":"RegisterSetCore","tags":["RobloxScriptSecurity"],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"parameterName","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetCore","tags":[],"Class":"StarterGui","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoreGuiType","Name":"coreGuiType","Default":null},{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetCoreGuiEnabled","tags":[],"Class":"StarterGui","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"parameterName","Default":null}],"Name":"GetCore","tags":[],"Class":"StarterGui","type":"YieldFunction"},{"Arguments":[{"Name":"coreGuiType","Type":"CoreGuiType"},{"Name":"enabled","Type":"bool"}],"Name":"CoreGuiChangedSignal","tags":["RobloxScriptSecurity"],"Class":"StarterGui","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Beam","tags":[]},{"ValueType":"Object","type":"Property","Name":"Attachment0","tags":[],"Class":"Beam"},{"ValueType":"Object","type":"Property","Name":"Attachment1","tags":[],"Class":"Beam"},{"ValueType":"ColorSequence","type":"Property","Name":"Color","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"CurveSize0","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"CurveSize1","tags":[],"Class":"Beam"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Beam"},{"ValueType":"bool","type":"Property","Name":"FaceCamera","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"LightEmission","tags":[],"Class":"Beam"},{"ValueType":"int","type":"Property","Name":"Segments","tags":[],"Class":"Beam"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"TextureLength","tags":[],"Class":"Beam"},{"ValueType":"TextureMode","type":"Property","Name":"TextureMode","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"TextureSpeed","tags":[],"Class":"Beam"},{"ValueType":"NumberSequence","type":"Property","Name":"Transparency","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"Width0","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"Width1","tags":[],"Class":"Beam"},{"ValueType":"float","type":"Property","Name":"ZOffset","tags":[],"Class":"Beam"},{"Superclass":"Instance","type":"Class","Name":"BinaryStringValue","tags":[]},{"Arguments":[{"Name":"value","Type":"BinaryString"}],"Name":"Changed","tags":[],"Class":"BinaryStringValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BindableEvent","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"Fire","tags":[],"Class":"BindableEvent","type":"Function"},{"Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"Event","tags":[],"Class":"BindableEvent","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BindableFunction","tags":[]},{"ReturnType":"Tuple","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"Invoke","tags":[],"Class":"BindableFunction","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"OnInvoke","tags":[],"Class":"BindableFunction","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"BodyMover","tags":[]},{"Superclass":"BodyMover","type":"Class","Name":"BodyAngularVelocity","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"AngularVelocity","tags":[],"Class":"BodyAngularVelocity"},{"ValueType":"Vector3","type":"Property","Name":"MaxTorque","tags":[],"Class":"BodyAngularVelocity"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyAngularVelocity"},{"ValueType":"Vector3","type":"Property","Name":"angularvelocity","tags":["deprecated"],"Class":"BodyAngularVelocity"},{"ValueType":"Vector3","type":"Property","Name":"maxTorque","tags":["deprecated"],"Class":"BodyAngularVelocity"},{"Superclass":"BodyMover","type":"Class","Name":"BodyForce","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Force","tags":[],"Class":"BodyForce"},{"ValueType":"Vector3","type":"Property","Name":"force","tags":["deprecated"],"Class":"BodyForce"},{"Superclass":"BodyMover","type":"Class","Name":"BodyGyro","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"BodyGyro"},{"ValueType":"float","type":"Property","Name":"D","tags":[],"Class":"BodyGyro"},{"ValueType":"Vector3","type":"Property","Name":"MaxTorque","tags":[],"Class":"BodyGyro"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyGyro"},{"ValueType":"CoordinateFrame","type":"Property","Name":"cframe","tags":["deprecated"],"Class":"BodyGyro"},{"ValueType":"Vector3","type":"Property","Name":"maxTorque","tags":["deprecated"],"Class":"BodyGyro"},{"Superclass":"BodyMover","type":"Class","Name":"BodyPosition","tags":[]},{"ValueType":"float","type":"Property","Name":"D","tags":[],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"MaxForce","tags":[],"Class":"BodyPosition"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"maxForce","tags":["deprecated"],"Class":"BodyPosition"},{"ValueType":"Vector3","type":"Property","Name":"position","tags":["deprecated"],"Class":"BodyPosition"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetLastForce","tags":[],"Class":"BodyPosition","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"lastForce","tags":["deprecated"],"Class":"BodyPosition","type":"Function"},{"Arguments":[],"Name":"ReachedTarget","tags":[],"Class":"BodyPosition","type":"Event"},{"Superclass":"BodyMover","type":"Class","Name":"BodyThrust","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Force","tags":[],"Class":"BodyThrust"},{"ValueType":"Vector3","type":"Property","Name":"Location","tags":[],"Class":"BodyThrust"},{"ValueType":"Vector3","type":"Property","Name":"force","tags":["deprecated"],"Class":"BodyThrust"},{"ValueType":"Vector3","type":"Property","Name":"location","tags":["deprecated"],"Class":"BodyThrust"},{"Superclass":"BodyMover","type":"Class","Name":"BodyVelocity","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"MaxForce","tags":[],"Class":"BodyVelocity"},{"ValueType":"float","type":"Property","Name":"P","tags":[],"Class":"BodyVelocity"},{"ValueType":"Vector3","type":"Property","Name":"Velocity","tags":[],"Class":"BodyVelocity"},{"ValueType":"Vector3","type":"Property","Name":"maxForce","tags":["deprecated"],"Class":"BodyVelocity"},{"ValueType":"Vector3","type":"Property","Name":"velocity","tags":["deprecated"],"Class":"BodyVelocity"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetLastForce","tags":[],"Class":"BodyVelocity","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"lastForce","tags":[],"Class":"BodyVelocity","type":"Function"},{"Superclass":"BodyMover","type":"Class","Name":"RocketPropulsion","tags":[]},{"ValueType":"float","type":"Property","Name":"CartoonFactor","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"MaxSpeed","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"MaxThrust","tags":[],"Class":"RocketPropulsion"},{"ValueType":"Vector3","type":"Property","Name":"MaxTorque","tags":[],"Class":"RocketPropulsion"},{"ValueType":"Object","type":"Property","Name":"Target","tags":[],"Class":"RocketPropulsion"},{"ValueType":"Vector3","type":"Property","Name":"TargetOffset","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"TargetRadius","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"ThrustD","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"ThrustP","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"TurnD","tags":[],"Class":"RocketPropulsion"},{"ValueType":"float","type":"Property","Name":"TurnP","tags":[],"Class":"RocketPropulsion"},{"ReturnType":"void","Arguments":[],"Name":"Abort","tags":[],"Class":"RocketPropulsion","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Fire","tags":[],"Class":"RocketPropulsion","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"fire","tags":["deprecated"],"Class":"RocketPropulsion","type":"Function"},{"Arguments":[],"Name":"ReachedTarget","tags":[],"Class":"RocketPropulsion","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BoolValue","tags":[]},{"ValueType":"bool","type":"Property","Name":"Value","tags":[],"Class":"BoolValue"},{"Arguments":[{"Name":"value","Type":"bool"}],"Name":"Changed","tags":[],"Class":"BoolValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"bool"}],"Name":"changed","tags":["deprecated"],"Class":"BoolValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"BrickColorValue","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"Value","tags":[],"Class":"BrickColorValue"},{"Arguments":[{"Name":"value","Type":"BrickColor"}],"Name":"Changed","tags":[],"Class":"BrickColorValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"BrickColor"}],"Name":"changed","tags":["deprecated"],"Class":"BrickColorValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Button","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"active","Default":null}],"Name":"SetActive","tags":["PluginSecurity"],"Class":"Button","type":"Function"},{"Arguments":[],"Name":"Click","tags":["PluginSecurity"],"Class":"Button","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CFrameValue","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"Value","tags":[],"Class":"CFrameValue"},{"Arguments":[{"Name":"value","Type":"CoordinateFrame"}],"Name":"Changed","tags":[],"Class":"CFrameValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"CoordinateFrame"}],"Name":"changed","tags":["deprecated"],"Class":"CFrameValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CacheableContentProvider","tags":[]},{"Superclass":"CacheableContentProvider","type":"Class","Name":"MeshContentProvider","tags":[]},{"Superclass":"CacheableContentProvider","type":"Class","Name":"SolidModelContentProvider","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Camera","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"Camera"},{"ValueType":"Object","type":"Property","Name":"CameraSubject","tags":[],"Class":"Camera"},{"ValueType":"CameraType","type":"Property","Name":"CameraType","tags":[],"Class":"Camera"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CoordinateFrame","tags":["deprecated","hidden"],"Class":"Camera"},{"ValueType":"float","type":"Property","Name":"FieldOfView","tags":[],"Class":"Camera"},{"ValueType":"CoordinateFrame","type":"Property","Name":"Focus","tags":[],"Class":"Camera"},{"ValueType":"bool","type":"Property","Name":"HeadLocked","tags":[],"Class":"Camera"},{"ValueType":"float","type":"Property","Name":"HeadScale","tags":[],"Class":"Camera"},{"ValueType":"Vector2","type":"Property","Name":"ViewportSize","tags":["readonly"],"Class":"Camera"},{"ValueType":"CoordinateFrame","type":"Property","Name":"focus","tags":["deprecated"],"Class":"Camera"},{"ReturnType":"float","Arguments":[{"Type":"Objects","Name":"ignoreList","Default":null}],"Name":"GetLargestCutoffDistance","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetPanSpeed","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Array","Name":"castPoints","Default":null},{"Type":"Objects","Name":"ignoreList","Default":null}],"Name":"GetPartsObscuringTarget","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetRenderCFrame","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetRoll","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetTiltSpeed","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"endPos","Default":null},{"Type":"CoordinateFrame","Name":"endFocus","Default":null},{"Type":"float","Name":"duration","Default":null}],"Name":"Interpolate","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"units","Default":null}],"Name":"PanUnits","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Ray","Arguments":[{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"float","Name":"depth","Default":"0"}],"Name":"ScreenPointToRay","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CameraPanMode","Name":"mode","Default":"Classic"}],"Name":"SetCameraPanMode","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"rollAngle","Default":null}],"Name":"SetRoll","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"units","Default":null}],"Name":"TiltUnits","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Ray","Arguments":[{"Type":"float","Name":"x","Default":null},{"Type":"float","Name":"y","Default":null},{"Type":"float","Name":"depth","Default":"0"}],"Name":"ViewportPointToRay","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Vector3","Name":"worldPoint","Default":null}],"Name":"WorldToScreenPoint","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Vector3","Name":"worldPoint","Default":null}],"Name":"WorldToViewportPoint","tags":[],"Class":"Camera","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"float","Name":"distance","Default":null}],"Name":"Zoom","tags":["RobloxScriptSecurity"],"Class":"Camera","type":"Function"},{"Arguments":[{"Name":"entering","Type":"bool"}],"Name":"FirstPersonTransition","tags":["LocalUserSecurity"],"Class":"Camera","type":"Event"},{"Arguments":[],"Name":"InterpolationFinished","tags":[],"Class":"Camera","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ChangeHistoryService","tags":["notCreatable"]},{"ReturnType":"Tuple","Arguments":[],"Name":"GetCanRedo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetCanUndo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Redo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ResetWaypoints","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"state","Default":null}],"Name":"SetEnabled","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"SetWaypoint","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Undo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Function"},{"Arguments":[{"Name":"waypoint","Type":"string"}],"Name":"OnRedo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Event"},{"Arguments":[{"Name":"waypoint","Type":"string"}],"Name":"OnUndo","tags":["PluginSecurity"],"Class":"ChangeHistoryService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CharacterAppearance","tags":[]},{"Superclass":"CharacterAppearance","type":"Class","Name":"BodyColors","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"HeadColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"HeadColor3","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"LeftArmColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"LeftArmColor3","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"LeftLegColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"LeftLegColor3","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"RightArmColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"RightArmColor3","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"RightLegColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"RightLegColor3","tags":[],"Class":"BodyColors"},{"ValueType":"BrickColor","type":"Property","Name":"TorsoColor","tags":[],"Class":"BodyColors"},{"ValueType":"Color3","type":"Property","Name":"TorsoColor3","tags":[],"Class":"BodyColors"},{"Superclass":"CharacterAppearance","type":"Class","Name":"CharacterMesh","tags":[]},{"ValueType":"int","type":"Property","Name":"BaseTextureId","tags":[],"Class":"CharacterMesh"},{"ValueType":"BodyPart","type":"Property","Name":"BodyPart","tags":[],"Class":"CharacterMesh"},{"ValueType":"int","type":"Property","Name":"MeshId","tags":[],"Class":"CharacterMesh"},{"ValueType":"int","type":"Property","Name":"OverlayTextureId","tags":[],"Class":"CharacterMesh"},{"Superclass":"CharacterAppearance","type":"Class","Name":"Clothing","tags":[]},{"Superclass":"Clothing","type":"Class","Name":"Pants","tags":[]},{"ValueType":"Content","type":"Property","Name":"PantsTemplate","tags":[],"Class":"Pants"},{"Superclass":"Clothing","type":"Class","Name":"Shirt","tags":[]},{"ValueType":"Content","type":"Property","Name":"ShirtTemplate","tags":[],"Class":"Shirt"},{"Superclass":"CharacterAppearance","type":"Class","Name":"ShirtGraphic","tags":[]},{"ValueType":"Content","type":"Property","Name":"Graphic","tags":[],"Class":"ShirtGraphic"},{"Superclass":"CharacterAppearance","type":"Class","Name":"Skin","tags":["deprecated"]},{"ValueType":"BrickColor","type":"Property","Name":"SkinColor","tags":[],"Class":"Skin"},{"Superclass":"Instance","type":"Class","Name":"Chat","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"LoadDefaultChat","tags":["ScriptWriteRestricted: [NotAccessibleSecurity]"],"Class":"Chat"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"partOrCharacter","Default":null},{"Type":"string","Name":"message","Default":null},{"Type":"ChatColor","Name":"color","Default":"Blue"}],"Name":"Chat","tags":[],"Class":"Chat","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"partOrCharacter","Default":null},{"Type":"string","Name":"message","Default":null},{"Type":"ChatColor","Name":"color","Default":"Blue"}],"Name":"ChatLocal","tags":["RobloxScriptSecurity"],"Class":"Chat","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetShouldUseLuaChat","tags":["RobloxScriptSecurity"],"Class":"Chat","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"CanUserChatAsync","tags":[],"Class":"Chat","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userIdFrom","Default":null},{"Type":"int","Name":"userIdTo","Default":null}],"Name":"CanUsersChatAsync","tags":[],"Class":"Chat","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"stringToFilter","Default":null},{"Type":"Instance","Name":"playerFrom","Default":null},{"Type":"Instance","Name":"playerTo","Default":null}],"Name":"FilterStringAsync","tags":[],"Class":"Chat","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"stringToFilter","Default":null},{"Type":"Instance","Name":"playerFrom","Default":null}],"Name":"FilterStringForBroadcast","tags":[],"Class":"Chat","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"stringToFilter","Default":null},{"Type":"Instance","Name":"playerToFilterFor","Default":null}],"Name":"FilterStringForPlayerAsync","tags":["deprecated"],"Class":"Chat","type":"YieldFunction"},{"Arguments":[{"Name":"part","Type":"Instance"},{"Name":"message","Type":"string"},{"Name":"color","Type":"ChatColor"}],"Name":"Chatted","tags":[],"Class":"Chat","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ClickDetector","tags":[]},{"ValueType":"Content","type":"Property","Name":"CursorIcon","tags":[],"Class":"ClickDetector"},{"ValueType":"float","type":"Property","Name":"MaxActivationDistance","tags":[],"Class":"ClickDetector"},{"Arguments":[{"Name":"playerWhoClicked","Type":"Instance"}],"Name":"MouseClick","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoHovered","Type":"Instance"}],"Name":"MouseHoverEnter","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoHovered","Type":"Instance"}],"Name":"MouseHoverLeave","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoClicked","Type":"Instance"}],"Name":"RightMouseClick","tags":[],"Class":"ClickDetector","type":"Event"},{"Arguments":[{"Name":"playerWhoClicked","Type":"Instance"}],"Name":"mouseClick","tags":["deprecated"],"Class":"ClickDetector","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CollectionService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"instance","Default":null},{"Type":"string","Name":"tag","Default":null}],"Name":"AddTag","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"string","Name":"class","Default":null}],"Name":"GetCollection","tags":["deprecated"],"Class":"CollectionService","type":"Function"},{"ReturnType":"EventInstance","Arguments":[{"Type":"string","Name":"tag","Default":null}],"Name":"GetInstanceAddedSignal","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"EventInstance","Arguments":[{"Type":"string","Name":"tag","Default":null}],"Name":"GetInstanceRemovedSignal","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"string","Name":"tag","Default":null}],"Name":"GetTagged","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"Instance","Name":"instance","Default":null}],"Name":"GetTags","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"instance","Default":null},{"Type":"string","Name":"tag","Default":null}],"Name":"HasTag","tags":[],"Class":"CollectionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"instance","Default":null},{"Type":"string","Name":"tag","Default":null}],"Name":"RemoveTag","tags":[],"Class":"CollectionService","type":"Function"},{"Arguments":[{"Name":"instance","Type":"Instance"}],"Name":"ItemAdded","tags":["deprecated"],"Class":"CollectionService","type":"Event"},{"Arguments":[{"Name":"instance","Type":"Instance"}],"Name":"ItemRemoved","tags":["deprecated"],"Class":"CollectionService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Color3Value","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Value","tags":[],"Class":"Color3Value"},{"Arguments":[{"Name":"value","Type":"Color3"}],"Name":"Changed","tags":[],"Class":"Color3Value","type":"Event"},{"Arguments":[{"Name":"value","Type":"Color3"}],"Name":"changed","tags":["deprecated"],"Class":"Color3Value","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Configuration","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Constraint","tags":[]},{"ValueType":"Object","type":"Property","Name":"Attachment0","tags":[],"Class":"Constraint"},{"ValueType":"Object","type":"Property","Name":"Attachment1","tags":[],"Class":"Constraint"},{"ValueType":"BrickColor","type":"Property","Name":"Color","tags":[],"Class":"Constraint"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Constraint"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"Constraint"},{"Superclass":"Constraint","type":"Class","Name":"AlignOrientation","tags":[]},{"ValueType":"float","type":"Property","Name":"MaxAngularVelocity","tags":[],"Class":"AlignOrientation"},{"ValueType":"float","type":"Property","Name":"MaxTorque","tags":[],"Class":"AlignOrientation"},{"ValueType":"bool","type":"Property","Name":"PrimaryAxisOnly","tags":[],"Class":"AlignOrientation"},{"ValueType":"bool","type":"Property","Name":"ReactionTorqueEnabled","tags":[],"Class":"AlignOrientation"},{"ValueType":"float","type":"Property","Name":"Responsiveness","tags":[],"Class":"AlignOrientation"},{"ValueType":"bool","type":"Property","Name":"RigidityEnabled","tags":[],"Class":"AlignOrientation"},{"Superclass":"Constraint","type":"Class","Name":"AlignPosition","tags":[]},{"ValueType":"bool","type":"Property","Name":"ApplyAtCenterOfMass","tags":[],"Class":"AlignPosition"},{"ValueType":"float","type":"Property","Name":"MaxForce","tags":[],"Class":"AlignPosition"},{"ValueType":"float","type":"Property","Name":"MaxVelocity","tags":[],"Class":"AlignPosition"},{"ValueType":"bool","type":"Property","Name":"ReactionForceEnabled","tags":[],"Class":"AlignPosition"},{"ValueType":"float","type":"Property","Name":"Responsiveness","tags":[],"Class":"AlignPosition"},{"ValueType":"bool","type":"Property","Name":"RigidityEnabled","tags":[],"Class":"AlignPosition"},{"Superclass":"Constraint","type":"Class","Name":"BallSocketConstraint","tags":[]},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"bool","type":"Property","Name":"TwistLimitsEnabled","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"TwistLowerAngle","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"TwistUpperAngle","tags":[],"Class":"BallSocketConstraint"},{"ValueType":"float","type":"Property","Name":"UpperAngle","tags":[],"Class":"BallSocketConstraint"},{"Superclass":"Constraint","type":"Class","Name":"HingeConstraint","tags":[]},{"ValueType":"ActuatorType","type":"Property","Name":"ActuatorType","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"AngularSpeed","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"AngularVelocity","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":["readonly"],"Class":"HingeConstraint"},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"LowerAngle","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxAcceleration","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxTorque","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"ServoMaxTorque","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"TargetAngle","tags":[],"Class":"HingeConstraint"},{"ValueType":"float","type":"Property","Name":"UpperAngle","tags":[],"Class":"HingeConstraint"},{"Superclass":"Constraint","type":"Class","Name":"LineForce","tags":[]},{"ValueType":"bool","type":"Property","Name":"ApplyAtCenterOfMass","tags":[],"Class":"LineForce"},{"ValueType":"bool","type":"Property","Name":"InverseSquareLaw","tags":[],"Class":"LineForce"},{"ValueType":"float","type":"Property","Name":"Magnitude","tags":[],"Class":"LineForce"},{"ValueType":"float","type":"Property","Name":"MaxForce","tags":[],"Class":"LineForce"},{"ValueType":"bool","type":"Property","Name":"ReactionForceEnabled","tags":[],"Class":"LineForce"},{"Superclass":"Constraint","type":"Class","Name":"RodConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentDistance","tags":["readonly"],"Class":"RodConstraint"},{"ValueType":"float","type":"Property","Name":"Length","tags":[],"Class":"RodConstraint"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":[],"Class":"RodConstraint"},{"Superclass":"Constraint","type":"Class","Name":"RopeConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentDistance","tags":["readonly"],"Class":"RopeConstraint"},{"ValueType":"float","type":"Property","Name":"Length","tags":[],"Class":"RopeConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"RopeConstraint"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":[],"Class":"RopeConstraint"},{"Superclass":"Constraint","type":"Class","Name":"SlidingBallConstraint","tags":[]},{"ValueType":"ActuatorType","type":"Property","Name":"ActuatorType","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"CurrentPosition","tags":["readonly"],"Class":"SlidingBallConstraint"},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"LowerLimit","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxAcceleration","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxForce","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Restitution","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"ServoMaxForce","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Speed","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"TargetPosition","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"UpperLimit","tags":[],"Class":"SlidingBallConstraint"},{"ValueType":"float","type":"Property","Name":"Velocity","tags":[],"Class":"SlidingBallConstraint"},{"Superclass":"SlidingBallConstraint","type":"Class","Name":"CylindricalConstraint","tags":[]},{"ValueType":"ActuatorType","type":"Property","Name":"AngularActuatorType","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"bool","type":"Property","Name":"AngularLimitsEnabled","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"AngularRestitution","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"AngularSpeed","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"AngularVelocity","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":["readonly"],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"InclinationAngle","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"LowerAngle","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxAngularAcceleration","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"MotorMaxTorque","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"bool","type":"Property","Name":"RotationAxisVisible","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"ServoMaxTorque","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"TargetAngle","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"float","type":"Property","Name":"UpperAngle","tags":[],"Class":"CylindricalConstraint"},{"ValueType":"Vector3","type":"Property","Name":"WorldRotationAxis","tags":["readonly"],"Class":"CylindricalConstraint"},{"Superclass":"SlidingBallConstraint","type":"Class","Name":"PrismaticConstraint","tags":[]},{"Superclass":"Constraint","type":"Class","Name":"SpringConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"Coils","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"CurrentLength","tags":["readonly"],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"Damping","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"FreeLength","tags":[],"Class":"SpringConstraint"},{"ValueType":"bool","type":"Property","Name":"LimitsEnabled","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"MaxForce","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"MaxLength","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"MinLength","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"Stiffness","tags":[],"Class":"SpringConstraint"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":[],"Class":"SpringConstraint"},{"Superclass":"Constraint","type":"Class","Name":"Torque","tags":[]},{"ValueType":"ActuatorRelativeTo","type":"Property","Name":"RelativeTo","tags":[],"Class":"Torque"},{"ValueType":"Vector3","type":"Property","Name":"Torque","tags":[],"Class":"Torque"},{"Superclass":"Constraint","type":"Class","Name":"VectorForce","tags":[]},{"ValueType":"bool","type":"Property","Name":"ApplyAtCenterOfMass","tags":[],"Class":"VectorForce"},{"ValueType":"Vector3","type":"Property","Name":"Force","tags":[],"Class":"VectorForce"},{"ValueType":"ActuatorRelativeTo","type":"Property","Name":"RelativeTo","tags":[],"Class":"VectorForce"},{"Superclass":"Instance","type":"Class","Name":"ContentProvider","tags":[]},{"ValueType":"string","type":"Property","Name":"BaseUrl","tags":["readonly"],"Class":"ContentProvider"},{"ValueType":"int","type":"Property","Name":"RequestQueueSize","tags":["readonly"],"Class":"ContentProvider"},{"ReturnType":"void","Arguments":[{"Type":"Content","Name":"contentId","Default":null}],"Name":"Preload","tags":["deprecated"],"Class":"ContentProvider","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"SetBaseUrl","tags":["LocalUserSecurity"],"Class":"ContentProvider","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Array","Name":"contentIdList","Default":null}],"Name":"PreloadAsync","tags":[],"Class":"ContentProvider","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"ContextActionService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindAction","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"int","Name":"priorityLevel","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindActionAtPriority","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindActionToInputTypes","tags":["deprecated"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"userInputTypeForActivation","Default":null},{"Type":"KeyCode","Name":"keyCodeForActivation","Default":"Unknown"}],"Name":"BindActivate","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindCoreAction","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Function","Name":"functionToBind","Default":null},{"Type":"bool","Name":"createTouchButton","Default":null},{"Type":"int","Name":"priorityLevel","Default":null},{"Type":"Tuple","Name":"inputTypes","Default":null}],"Name":"BindCoreActionAtPriority","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"UserInputState","Name":"state","Default":null},{"Type":"Instance","Name":"inputObject","Default":null}],"Name":"CallFunction","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"Instance","Name":"actionButton","Default":null}],"Name":"FireActionButtonFoundSignal","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetAllBoundActionInfo","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetAllBoundCoreActionInfo","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"GetBoundActionInfo","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"GetBoundCoreActionInfo","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetCurrentLocalToolIcon","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"string","Name":"description","Default":null}],"Name":"SetDescription","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"string","Name":"image","Default":null}],"Name":"SetImage","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"UDim2","Name":"position","Default":null}],"Name":"SetPosition","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null},{"Type":"string","Name":"title","Default":null}],"Name":"SetTitle","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"UnbindAction","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"userInputTypeForActivation","Default":null},{"Type":"KeyCode","Name":"keyCodeForActivation","Default":"Unknown"}],"Name":"UnbindActivate","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"UnbindAllActions","tags":[],"Class":"ContextActionService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"UnbindCoreAction","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"actionName","Default":null}],"Name":"GetButton","tags":[],"Class":"ContextActionService","type":"YieldFunction"},{"Arguments":[{"Name":"actionAdded","Type":"string"},{"Name":"createTouchButton","Type":"bool"},{"Name":"functionInfoTable","Type":"Dictionary"},{"Name":"isCore","Type":"bool"}],"Name":"BoundActionAdded","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"actionChanged","Type":"string"},{"Name":"changeName","Type":"string"},{"Name":"changeTable","Type":"Dictionary"}],"Name":"BoundActionChanged","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"actionRemoved","Type":"string"},{"Name":"functionInfoTable","Type":"Dictionary"},{"Name":"isCore","Type":"bool"}],"Name":"BoundActionRemoved","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"actionName","Type":"string"}],"Name":"GetActionButtonEvent","tags":["RobloxScriptSecurity"],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"toolEquipped","Type":"Instance"}],"Name":"LocalToolEquipped","tags":[],"Class":"ContextActionService","type":"Event"},{"Arguments":[{"Name":"toolUnequipped","Type":"Instance"}],"Name":"LocalToolUnequipped","tags":[],"Class":"ContextActionService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Controller","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Button","Name":"button","Default":null},{"Type":"string","Name":"caption","Default":null}],"Name":"BindButton","tags":[],"Class":"Controller","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Button","Name":"button","Default":null}],"Name":"GetButton","tags":[],"Class":"Controller","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Button","Name":"button","Default":null}],"Name":"UnbindButton","tags":[],"Class":"Controller","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Button","Name":"button","Default":null},{"Type":"string","Name":"caption","Default":null}],"Name":"bindButton","tags":["deprecated"],"Class":"Controller","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Button","Name":"button","Default":null}],"Name":"getButton","tags":["deprecated"],"Class":"Controller","type":"Function"},{"Arguments":[{"Name":"button","Type":"Button"}],"Name":"ButtonChanged","tags":[],"Class":"Controller","type":"Event"},{"Superclass":"Controller","type":"Class","Name":"HumanoidController","tags":[]},{"Superclass":"Controller","type":"Class","Name":"SkateboardController","tags":[]},{"ValueType":"float","type":"Property","Name":"Steer","tags":["readonly"],"Class":"SkateboardController"},{"ValueType":"float","type":"Property","Name":"Throttle","tags":["readonly"],"Class":"SkateboardController"},{"Arguments":[{"Name":"axis","Type":"string"}],"Name":"AxisChanged","tags":[],"Class":"SkateboardController","type":"Event"},{"Superclass":"Controller","type":"Class","Name":"VehicleController","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ControllerService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"CookiesService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"CustomEvent","tags":["deprecated"]},{"ReturnType":"Objects","Arguments":[],"Name":"GetAttachedReceivers","tags":[],"Class":"CustomEvent","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"newValue","Default":null}],"Name":"SetValue","tags":[],"Class":"CustomEvent","type":"Function"},{"Arguments":[{"Name":"receiver","Type":"Instance"}],"Name":"ReceiverConnected","tags":[],"Class":"CustomEvent","type":"Event"},{"Arguments":[{"Name":"receiver","Type":"Instance"}],"Name":"ReceiverDisconnected","tags":[],"Class":"CustomEvent","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"CustomEventReceiver","tags":["deprecated"]},{"ValueType":"Object","type":"Property","Name":"Source","tags":[],"Class":"CustomEventReceiver"},{"ReturnType":"float","Arguments":[],"Name":"GetCurrentValue","tags":[],"Class":"CustomEventReceiver","type":"Function"},{"Arguments":[{"Name":"event","Type":"Instance"}],"Name":"EventConnected","tags":[],"Class":"CustomEventReceiver","type":"Event"},{"Arguments":[{"Name":"event","Type":"Instance"}],"Name":"EventDisconnected","tags":[],"Class":"CustomEventReceiver","type":"Event"},{"Arguments":[{"Name":"newValue","Type":"float"}],"Name":"SourceValueChanged","tags":[],"Class":"CustomEventReceiver","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"DataModelMesh","tags":["notbrowsable"]},{"ValueType":"Vector3","type":"Property","Name":"Offset","tags":[],"Class":"DataModelMesh"},{"ValueType":"Vector3","type":"Property","Name":"Scale","tags":[],"Class":"DataModelMesh"},{"ValueType":"Vector3","type":"Property","Name":"VertexColor","tags":[],"Class":"DataModelMesh"},{"Superclass":"DataModelMesh","type":"Class","Name":"BevelMesh","tags":["deprecated","notbrowsable"]},{"Superclass":"BevelMesh","type":"Class","Name":"BlockMesh","tags":[]},{"Superclass":"BevelMesh","type":"Class","Name":"CylinderMesh","tags":[]},{"Superclass":"DataModelMesh","type":"Class","Name":"FileMesh","tags":[]},{"ValueType":"Content","type":"Property","Name":"MeshId","tags":[],"Class":"FileMesh"},{"ValueType":"Content","type":"Property","Name":"TextureId","tags":[],"Class":"FileMesh"},{"Superclass":"FileMesh","type":"Class","Name":"SpecialMesh","tags":[]},{"ValueType":"MeshType","type":"Property","Name":"MeshType","tags":[],"Class":"SpecialMesh"},{"Superclass":"Instance","type":"Class","Name":"DataStoreService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AutomaticRetry","tags":["LocalUserSecurity"],"Class":"DataStoreService"},{"ValueType":"bool","type":"Property","Name":"LegacyNamingScheme","tags":["LocalUserSecurity","deprecated"],"Class":"DataStoreService"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"string","Name":"scope","Default":"global"}],"Name":"GetDataStore","tags":[],"Class":"DataStoreService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetGlobalDataStore","tags":[],"Class":"DataStoreService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"string","Name":"scope","Default":"global"}],"Name":"GetOrderedDataStore","tags":[],"Class":"DataStoreService","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"DataStoreRequestType","Name":"requestType","Default":null}],"Name":"GetRequestBudgetForRequestType","tags":[],"Class":"DataStoreService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Debris","tags":[]},{"ValueType":"int","type":"Property","Name":"MaxItems","tags":["deprecated"],"Class":"Debris"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"item","Default":null},{"Type":"double","Name":"lifetime","Default":"10"}],"Name":"AddItem","tags":[],"Class":"Debris","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetLegacyMaxItems","tags":["LocalUserSecurity"],"Class":"Debris","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"item","Default":null},{"Type":"double","Name":"lifetime","Default":"10"}],"Name":"addItem","tags":["deprecated"],"Class":"Debris","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"DebugSettings","tags":["notbrowsable"]},{"ValueType":"int","type":"Property","Name":"DataModel","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"ErrorReporting","type":"Property","Name":"ErrorReporting","tags":[],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"GfxCard","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"InstanceCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"IsFmodProfilingEnabled","tags":[],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"IsScriptStackTracingEnabled","tags":[],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"JobCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"LuaRamLimit","tags":[],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"OsIs64Bit","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"OsPlatform","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"OsPlatformId","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"OsVer","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"PlayerCount","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"bool","type":"Property","Name":"ReportSoundWarnings","tags":[],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"RobloxProductName","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"RobloxVersion","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"SIMD","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"string","type":"Property","Name":"SystemProductName","tags":["readonly"],"Class":"DebugSettings"},{"ValueType":"TickCountSampleMethod","type":"Property","Name":"TickCountPreciseOverride","tags":[],"Class":"DebugSettings"},{"ValueType":"int","type":"Property","Name":"VideoMemory","tags":["readonly"],"Class":"DebugSettings"},{"Superclass":"Instance","type":"Class","Name":"DebuggerBreakpoint","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"Condition","tags":[],"Class":"DebuggerBreakpoint"},{"ValueType":"bool","type":"Property","Name":"IsEnabled","tags":[],"Class":"DebuggerBreakpoint"},{"ValueType":"int","type":"Property","Name":"Line","tags":["readonly"],"Class":"DebuggerBreakpoint"},{"Superclass":"Instance","type":"Class","Name":"DebuggerManager","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"DebuggingEnabled","tags":["readonly"],"Class":"DebuggerManager"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"script","Default":null}],"Name":"AddDebugger","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"EnableDebugging","tags":["LocalUserSecurity"],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetDebuggers","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Resume","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepIn","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOut","tags":[],"Class":"DebuggerManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOver","tags":[],"Class":"DebuggerManager","type":"Function"},{"Arguments":[{"Name":"debugger","Type":"Instance"}],"Name":"DebuggerAdded","tags":[],"Class":"DebuggerManager","type":"Event"},{"Arguments":[{"Name":"debugger","Type":"Instance"}],"Name":"DebuggerRemoved","tags":[],"Class":"DebuggerManager","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"DebuggerWatch","tags":[]},{"ValueType":"string","type":"Property","Name":"Expression","tags":[],"Class":"DebuggerWatch"},{"ReturnType":"void","Arguments":[],"Name":"CheckSyntax","tags":[],"Class":"DebuggerWatch","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Dialog","tags":[]},{"ValueType":"DialogBehaviorType","type":"Property","Name":"BehaviorType","tags":[],"Class":"Dialog"},{"ValueType":"float","type":"Property","Name":"ConversationDistance","tags":[],"Class":"Dialog"},{"ValueType":"bool","type":"Property","Name":"GoodbyeChoiceActive","tags":[],"Class":"Dialog"},{"ValueType":"string","type":"Property","Name":"GoodbyeDialog","tags":[],"Class":"Dialog"},{"ValueType":"bool","type":"Property","Name":"InUse","tags":[],"Class":"Dialog"},{"ValueType":"string","type":"Property","Name":"InitialPrompt","tags":[],"Class":"Dialog"},{"ValueType":"DialogPurpose","type":"Property","Name":"Purpose","tags":[],"Class":"Dialog"},{"ValueType":"DialogTone","type":"Property","Name":"Tone","tags":[],"Class":"Dialog"},{"ValueType":"float","type":"Property","Name":"TriggerDistance","tags":[],"Class":"Dialog"},{"ValueType":"Vector3","type":"Property","Name":"TriggerOffset","tags":[],"Class":"Dialog"},{"ReturnType":"Objects","Arguments":[],"Name":"GetCurrentPlayers","tags":[],"Class":"Dialog","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"bool","Name":"isUsing","Default":null}],"Name":"SetPlayerIsUsing","tags":["RobloxScriptSecurity"],"Class":"Dialog","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"Instance","Name":"dialogChoice","Default":null}],"Name":"SignalDialogChoiceSelected","tags":["RobloxScriptSecurity"],"Class":"Dialog","type":"Function"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"dialogChoice","Type":"Instance"}],"Name":"DialogChoiceSelected","tags":[],"Class":"Dialog","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"DialogChoice","tags":[]},{"ValueType":"bool","type":"Property","Name":"GoodbyeChoiceActive","tags":[],"Class":"DialogChoice"},{"ValueType":"string","type":"Property","Name":"GoodbyeDialog","tags":[],"Class":"DialogChoice"},{"ValueType":"string","type":"Property","Name":"ResponseDialog","tags":[],"Class":"DialogChoice"},{"ValueType":"string","type":"Property","Name":"UserDialog","tags":[],"Class":"DialogChoice"},{"Superclass":"Instance","type":"Class","Name":"DoubleConstrainedValue","tags":["deprecated"]},{"ValueType":"double","type":"Property","Name":"ConstrainedValue","tags":["hidden"],"Class":"DoubleConstrainedValue"},{"ValueType":"double","type":"Property","Name":"MaxValue","tags":[],"Class":"DoubleConstrainedValue"},{"ValueType":"double","type":"Property","Name":"MinValue","tags":[],"Class":"DoubleConstrainedValue"},{"ValueType":"double","type":"Property","Name":"Value","tags":[],"Class":"DoubleConstrainedValue"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"Changed","tags":[],"Class":"DoubleConstrainedValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"changed","tags":["deprecated"],"Class":"DoubleConstrainedValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Dragger","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Axis","Name":"axis","Default":"X"}],"Name":"AxisRotate","tags":[],"Class":"Dragger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"mousePart","Default":null},{"Type":"Vector3","Name":"pointOnMousePart","Default":null},{"Type":"Objects","Name":"parts","Default":null}],"Name":"MouseDown","tags":[],"Class":"Dragger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Ray","Name":"mouseRay","Default":null}],"Name":"MouseMove","tags":[],"Class":"Dragger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"MouseUp","tags":[],"Class":"Dragger","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Explosion","tags":[]},{"ValueType":"float","type":"Property","Name":"BlastPressure","tags":[],"Class":"Explosion"},{"ValueType":"float","type":"Property","Name":"BlastRadius","tags":[],"Class":"Explosion"},{"ValueType":"float","type":"Property","Name":"DestroyJointRadiusPercent","tags":[],"Class":"Explosion"},{"ValueType":"ExplosionType","type":"Property","Name":"ExplosionType","tags":[],"Class":"Explosion"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"Explosion"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"Explosion"},{"Arguments":[{"Name":"part","Type":"Instance"},{"Name":"distance","Type":"float"}],"Name":"Hit","tags":[],"Class":"Explosion","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"FaceInstance","tags":["notbrowsable"]},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"FaceInstance"},{"Superclass":"FaceInstance","type":"Class","Name":"Decal","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color3","tags":[],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"LocalTransparencyModifier","tags":["hidden"],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"Shiny","tags":["deprecated"],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"Specular","tags":["deprecated"],"Class":"Decal"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"Decal"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":[],"Class":"Decal"},{"Superclass":"Decal","type":"Class","Name":"Texture","tags":[]},{"ValueType":"float","type":"Property","Name":"StudsPerTileU","tags":[],"Class":"Texture"},{"ValueType":"float","type":"Property","Name":"StudsPerTileV","tags":[],"Class":"Texture"},{"Superclass":"Instance","type":"Class","Name":"Feature","tags":[]},{"ValueType":"NormalId","type":"Property","Name":"FaceId","tags":[],"Class":"Feature"},{"ValueType":"InOut","type":"Property","Name":"InOut","tags":[],"Class":"Feature"},{"ValueType":"LeftRight","type":"Property","Name":"LeftRight","tags":[],"Class":"Feature"},{"ValueType":"TopBottom","type":"Property","Name":"TopBottom","tags":[],"Class":"Feature"},{"Superclass":"Feature","type":"Class","Name":"Hole","tags":["deprecated"]},{"Superclass":"Feature","type":"Class","Name":"MotorFeature","tags":["deprecated"]},{"Superclass":"Instance","type":"Class","Name":"Fire","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"Fire"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Fire"},{"ValueType":"float","type":"Property","Name":"Heat","tags":[],"Class":"Fire"},{"ValueType":"Color3","type":"Property","Name":"SecondaryColor","tags":[],"Class":"Fire"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"Fire"},{"ValueType":"float","type":"Property","Name":"size","tags":["deprecated"],"Class":"Fire"},{"Superclass":"Instance","type":"Class","Name":"FlagStandService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"FlyweightService","tags":[]},{"Superclass":"FlyweightService","type":"Class","Name":"CSGDictionaryService","tags":[]},{"Superclass":"FlyweightService","type":"Class","Name":"NonReplicatedCSGDictionaryService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Folder","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ForceField","tags":[]},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"ForceField"},{"Superclass":"Instance","type":"Class","Name":"FriendService","tags":["notCreatable"]},{"ReturnType":"Array","Arguments":[],"Name":"GetPlatformFriends","tags":["RobloxScriptSecurity"],"Class":"FriendService","type":"YieldFunction"},{"Arguments":[{"Name":"friendData","Type":"Array"}],"Name":"FriendsUpdated","tags":["RobloxScriptSecurity"],"Class":"FriendService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"FunctionalTest","tags":["deprecated"]},{"ValueType":"string","type":"Property","Name":"Description","tags":[],"Class":"FunctionalTest"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Error","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Failed","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Pass","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Passed","tags":[],"Class":"FunctionalTest","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Warn","tags":[],"Class":"FunctionalTest","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"GamePassService","tags":[]},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"gamePassId","Default":null}],"Name":"PlayerHasPass","tags":[],"Class":"GamePassService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"GameSettings","tags":["notbrowsable"]},{"ValueType":"string","type":"Property","Name":"AdditionalCoreIncludeDirs","tags":[],"Class":"GameSettings"},{"ValueType":"float","type":"Property","Name":"BubbleChatLifetime","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"BubbleChatMaxBubbles","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"ChatHistory","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"ChatScrollLength","tags":[],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"CollisionSoundEnabled","tags":["deprecated"],"Class":"GameSettings"},{"ValueType":"float","type":"Property","Name":"CollisionSoundVolume","tags":["deprecated"],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"HardwareMouse","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"MaxCollisionSounds","tags":["deprecated"],"Class":"GameSettings"},{"ValueType":"string","type":"Property","Name":"OverrideStarterScript","tags":[],"Class":"GameSettings"},{"ValueType":"int","type":"Property","Name":"ReportAbuseChatHistory","tags":[],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"SoftwareSound","tags":[],"Class":"GameSettings"},{"ValueType":"bool","type":"Property","Name":"VideoCaptureEnabled","tags":[],"Class":"GameSettings"},{"ValueType":"VideoQualitySettings","type":"Property","Name":"VideoQuality","tags":[],"Class":"GameSettings"},{"Arguments":[{"Name":"recording","Type":"bool"}],"Name":"VideoRecordingChangeRequest","tags":["RobloxScriptSecurity"],"Class":"GameSettings","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"GamepadService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Geometry","tags":[]},{"Superclass":"Instance","type":"Class","Name":"GlobalDataStore","tags":[]},{"ReturnType":"Connection","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Function","Name":"callback","Default":null}],"Name":"OnUpdate","tags":[],"Class":"GlobalDataStore","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"GetAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"int","Name":"delta","Default":"1"}],"Name":"IncrementAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"RemoveAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Function","Name":"transformFunction","Default":null}],"Name":"UpdateAsync","tags":[],"Class":"GlobalDataStore","type":"YieldFunction"},{"Superclass":"GlobalDataStore","type":"Class","Name":"OrderedDataStore","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"bool","Name":"ascending","Default":null},{"Type":"int","Name":"pagesize","Default":null},{"Type":"Variant","Name":"minValue","Default":null},{"Type":"Variant","Name":"maxValue","Default":null}],"Name":"GetSortedAsync","tags":[],"Class":"OrderedDataStore","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"GoogleAnalyticsConfiguration","tags":[]},{"Superclass":"Instance","type":"Class","Name":"GroupService","tags":["notCreatable"]},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"GetAlliesAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"GetEnemiesAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"ReturnType":"Variant","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"GetGroupInfoAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetGroupsAsync","tags":[],"Class":"GroupService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"GuiBase","tags":[]},{"Superclass":"GuiBase","type":"Class","Name":"GuiBase2d","tags":["notbrowsable"]},{"ValueType":"Vector2","type":"Property","Name":"AbsolutePosition","tags":["readonly"],"Class":"GuiBase2d"},{"ValueType":"float","type":"Property","Name":"AbsoluteRotation","tags":["readonly"],"Class":"GuiBase2d"},{"ValueType":"Vector2","type":"Property","Name":"AbsoluteSize","tags":["readonly"],"Class":"GuiBase2d"},{"ValueType":"bool","type":"Property","Name":"Localize","tags":["hidden"],"Class":"GuiBase2d"},{"Superclass":"GuiBase2d","type":"Class","Name":"GuiObject","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"GuiObject"},{"ValueType":"Vector2","type":"Property","Name":"AnchorPoint","tags":[],"Class":"GuiObject"},{"ValueType":"BrickColor","type":"Property","Name":"BackgroundColor","tags":["deprecated","hidden"],"Class":"GuiObject"},{"ValueType":"Color3","type":"Property","Name":"BackgroundColor3","tags":[],"Class":"GuiObject"},{"ValueType":"float","type":"Property","Name":"BackgroundTransparency","tags":[],"Class":"GuiObject"},{"ValueType":"BrickColor","type":"Property","Name":"BorderColor","tags":["deprecated","hidden"],"Class":"GuiObject"},{"ValueType":"Color3","type":"Property","Name":"BorderColor3","tags":[],"Class":"GuiObject"},{"ValueType":"int","type":"Property","Name":"BorderSizePixel","tags":[],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"ClipsDescendants","tags":[],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"Draggable","tags":[],"Class":"GuiObject"},{"ValueType":"int","type":"Property","Name":"LayoutOrder","tags":[],"Class":"GuiObject"},{"ValueType":"Object","type":"Property","Name":"NextSelectionDown","tags":[],"Class":"GuiObject"},{"ValueType":"Object","type":"Property","Name":"NextSelectionLeft","tags":[],"Class":"GuiObject"},{"ValueType":"Object","type":"Property","Name":"NextSelectionRight","tags":[],"Class":"GuiObject"},{"ValueType":"Object","type":"Property","Name":"NextSelectionUp","tags":[],"Class":"GuiObject"},{"ValueType":"UDim2","type":"Property","Name":"Position","tags":[],"Class":"GuiObject"},{"ValueType":"float","type":"Property","Name":"Rotation","tags":[],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"Selectable","tags":[],"Class":"GuiObject"},{"ValueType":"Object","type":"Property","Name":"SelectionImageObject","tags":[],"Class":"GuiObject"},{"ValueType":"UDim2","type":"Property","Name":"Size","tags":[],"Class":"GuiObject"},{"ValueType":"SizeConstraint","type":"Property","Name":"SizeConstraint","tags":[],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"SizeFromContents","tags":[],"Class":"GuiObject"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":["hidden"],"Class":"GuiObject"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"GuiObject"},{"ValueType":"int","type":"Property","Name":"ZIndex","tags":[],"Class":"GuiObject"},{"ReturnType":"bool","Arguments":[{"Type":"UDim2","Name":"endPosition","Default":null},{"Type":"EasingDirection","Name":"easingDirection","Default":"Out"},{"Type":"EasingStyle","Name":"easingStyle","Default":"Quad"},{"Type":"float","Name":"time","Default":"1"},{"Type":"bool","Name":"override","Default":"false"},{"Type":"Function","Name":"callback","Default":"nil"}],"Name":"TweenPosition","tags":[],"Class":"GuiObject","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UDim2","Name":"endSize","Default":null},{"Type":"EasingDirection","Name":"easingDirection","Default":"Out"},{"Type":"EasingStyle","Name":"easingStyle","Default":"Quad"},{"Type":"float","Name":"time","Default":"1"},{"Type":"bool","Name":"override","Default":"false"},{"Type":"Function","Name":"callback","Default":"nil"}],"Name":"TweenSize","tags":[],"Class":"GuiObject","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UDim2","Name":"endSize","Default":null},{"Type":"UDim2","Name":"endPosition","Default":null},{"Type":"EasingDirection","Name":"easingDirection","Default":"Out"},{"Type":"EasingStyle","Name":"easingStyle","Default":"Quad"},{"Type":"float","Name":"time","Default":"1"},{"Type":"bool","Name":"override","Default":"false"},{"Type":"Function","Name":"callback","Default":"nil"}],"Name":"TweenSizeAndPosition","tags":[],"Class":"GuiObject","type":"Function"},{"Arguments":[{"Name":"initialPosition","Type":"UDim2"}],"Name":"DragBegin","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"DragStopped","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"}],"Name":"InputBegan","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"}],"Name":"InputChanged","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"}],"Name":"InputEnded","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseEnter","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseLeave","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseMoved","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseWheelBackward","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseWheelForward","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[],"Name":"SelectionGained","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[],"Name":"SelectionLost","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchLongPress","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"totalTranslation","Type":"Vector2"},{"Name":"velocity","Type":"Vector2"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchPan","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"scale","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchPinch","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"rotation","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"}],"Name":"TouchRotate","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"swipeDirection","Type":"SwipeDirection"},{"Name":"numberOfTouches","Type":"int"}],"Name":"TouchSwipe","tags":[],"Class":"GuiObject","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"}],"Name":"TouchTap","tags":[],"Class":"GuiObject","type":"Event"},{"Superclass":"GuiObject","type":"Class","Name":"Frame","tags":[]},{"ValueType":"FrameStyle","type":"Property","Name":"Style","tags":[],"Class":"Frame"},{"Superclass":"GuiObject","type":"Class","Name":"GuiButton","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"AutoButtonColor","tags":[],"Class":"GuiButton"},{"ValueType":"bool","type":"Property","Name":"Modal","tags":[],"Class":"GuiButton"},{"ValueType":"bool","type":"Property","Name":"Selected","tags":[],"Class":"GuiButton"},{"ValueType":"ButtonStyle","type":"Property","Name":"Style","tags":[],"Class":"GuiButton"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"verb","Default":null}],"Name":"SetVerb","tags":["RobloxScriptSecurity"],"Class":"GuiButton","type":"Function"},{"Arguments":[{"Name":"inputObject","Type":"Instance"}],"Name":"Activated","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[],"Name":"MouseButton1Click","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton1Down","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton1Up","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[],"Name":"MouseButton2Click","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton2Down","tags":[],"Class":"GuiButton","type":"Event"},{"Arguments":[{"Name":"x","Type":"int"},{"Name":"y","Type":"int"}],"Name":"MouseButton2Up","tags":[],"Class":"GuiButton","type":"Event"},{"Superclass":"GuiButton","type":"Class","Name":"ImageButton","tags":[]},{"ValueType":"Content","type":"Property","Name":"Image","tags":[],"Class":"ImageButton"},{"ValueType":"Color3","type":"Property","Name":"ImageColor3","tags":[],"Class":"ImageButton"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectOffset","tags":[],"Class":"ImageButton"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectSize","tags":[],"Class":"ImageButton"},{"ValueType":"float","type":"Property","Name":"ImageTransparency","tags":[],"Class":"ImageButton"},{"ValueType":"bool","type":"Property","Name":"IsLoaded","tags":["readonly"],"Class":"ImageButton"},{"ValueType":"ScaleType","type":"Property","Name":"ScaleType","tags":[],"Class":"ImageButton"},{"ValueType":"Rect2D","type":"Property","Name":"SliceCenter","tags":[],"Class":"ImageButton"},{"ValueType":"UDim2","type":"Property","Name":"TileSize","tags":[],"Class":"ImageButton"},{"Superclass":"GuiButton","type":"Class","Name":"TextButton","tags":[]},{"ValueType":"Font","type":"Property","Name":"Font","tags":[],"Class":"TextButton"},{"ValueType":"FontSize","type":"Property","Name":"FontSize","tags":["deprecated"],"Class":"TextButton"},{"ValueType":"float","type":"Property","Name":"LineHeight","tags":[],"Class":"TextButton"},{"ValueType":"string","type":"Property","Name":"LocalizedText","tags":["hidden","readonly"],"Class":"TextButton"},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"TextButton"},{"ValueType":"Vector2","type":"Property","Name":"TextBounds","tags":["readonly"],"Class":"TextButton"},{"ValueType":"BrickColor","type":"Property","Name":"TextColor","tags":["deprecated","hidden"],"Class":"TextButton"},{"ValueType":"Color3","type":"Property","Name":"TextColor3","tags":[],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextFits","tags":["readonly"],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextScaled","tags":[],"Class":"TextButton"},{"ValueType":"float","type":"Property","Name":"TextSize","tags":[],"Class":"TextButton"},{"ValueType":"Color3","type":"Property","Name":"TextStrokeColor3","tags":[],"Class":"TextButton"},{"ValueType":"float","type":"Property","Name":"TextStrokeTransparency","tags":[],"Class":"TextButton"},{"ValueType":"float","type":"Property","Name":"TextTransparency","tags":[],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextWrap","tags":["deprecated"],"Class":"TextButton"},{"ValueType":"bool","type":"Property","Name":"TextWrapped","tags":[],"Class":"TextButton"},{"ValueType":"TextXAlignment","type":"Property","Name":"TextXAlignment","tags":[],"Class":"TextButton"},{"ValueType":"TextYAlignment","type":"Property","Name":"TextYAlignment","tags":[],"Class":"TextButton"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null}],"Name":"SetTextFromInput","tags":["RobloxScriptSecurity"],"Class":"TextButton","type":"Function"},{"Superclass":"GuiObject","type":"Class","Name":"GuiLabel","tags":[]},{"Superclass":"GuiLabel","type":"Class","Name":"ImageLabel","tags":[]},{"ValueType":"Content","type":"Property","Name":"Image","tags":[],"Class":"ImageLabel"},{"ValueType":"Color3","type":"Property","Name":"ImageColor3","tags":[],"Class":"ImageLabel"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectOffset","tags":[],"Class":"ImageLabel"},{"ValueType":"Vector2","type":"Property","Name":"ImageRectSize","tags":[],"Class":"ImageLabel"},{"ValueType":"float","type":"Property","Name":"ImageTransparency","tags":[],"Class":"ImageLabel"},{"ValueType":"bool","type":"Property","Name":"IsLoaded","tags":["readonly"],"Class":"ImageLabel"},{"ValueType":"ScaleType","type":"Property","Name":"ScaleType","tags":[],"Class":"ImageLabel"},{"ValueType":"Rect2D","type":"Property","Name":"SliceCenter","tags":[],"Class":"ImageLabel"},{"ValueType":"UDim2","type":"Property","Name":"TileSize","tags":[],"Class":"ImageLabel"},{"Superclass":"GuiLabel","type":"Class","Name":"TextLabel","tags":[]},{"ValueType":"Font","type":"Property","Name":"Font","tags":[],"Class":"TextLabel"},{"ValueType":"FontSize","type":"Property","Name":"FontSize","tags":["deprecated"],"Class":"TextLabel"},{"ValueType":"float","type":"Property","Name":"LineHeight","tags":[],"Class":"TextLabel"},{"ValueType":"string","type":"Property","Name":"LocalizedText","tags":["hidden","readonly"],"Class":"TextLabel"},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"TextLabel"},{"ValueType":"Vector2","type":"Property","Name":"TextBounds","tags":["readonly"],"Class":"TextLabel"},{"ValueType":"BrickColor","type":"Property","Name":"TextColor","tags":["deprecated","hidden"],"Class":"TextLabel"},{"ValueType":"Color3","type":"Property","Name":"TextColor3","tags":[],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextFits","tags":["readonly"],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextScaled","tags":[],"Class":"TextLabel"},{"ValueType":"float","type":"Property","Name":"TextSize","tags":[],"Class":"TextLabel"},{"ValueType":"Color3","type":"Property","Name":"TextStrokeColor3","tags":[],"Class":"TextLabel"},{"ValueType":"float","type":"Property","Name":"TextStrokeTransparency","tags":[],"Class":"TextLabel"},{"ValueType":"float","type":"Property","Name":"TextTransparency","tags":[],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextWrap","tags":["deprecated"],"Class":"TextLabel"},{"ValueType":"bool","type":"Property","Name":"TextWrapped","tags":[],"Class":"TextLabel"},{"ValueType":"TextXAlignment","type":"Property","Name":"TextXAlignment","tags":[],"Class":"TextLabel"},{"ValueType":"TextYAlignment","type":"Property","Name":"TextYAlignment","tags":[],"Class":"TextLabel"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null}],"Name":"SetTextFromInput","tags":["RobloxScriptSecurity"],"Class":"TextLabel","type":"Function"},{"Superclass":"GuiObject","type":"Class","Name":"Scale9Frame","tags":[]},{"ValueType":"Vector2int16","type":"Property","Name":"ScaleEdgeSize","tags":[],"Class":"Scale9Frame"},{"ValueType":"string","type":"Property","Name":"SlicePrefix","tags":[],"Class":"Scale9Frame"},{"Superclass":"GuiObject","type":"Class","Name":"ScrollingFrame","tags":[]},{"ValueType":"Vector2","type":"Property","Name":"AbsoluteWindowSize","tags":["readonly"],"Class":"ScrollingFrame"},{"ValueType":"Content","type":"Property","Name":"BottomImage","tags":[],"Class":"ScrollingFrame"},{"ValueType":"Vector2","type":"Property","Name":"CanvasPosition","tags":[],"Class":"ScrollingFrame"},{"ValueType":"UDim2","type":"Property","Name":"CanvasSize","tags":[],"Class":"ScrollingFrame"},{"ValueType":"ScrollBarInset","type":"Property","Name":"HorizontalScrollBarInset","tags":[],"Class":"ScrollingFrame"},{"ValueType":"Content","type":"Property","Name":"MidImage","tags":[],"Class":"ScrollingFrame"},{"ValueType":"int","type":"Property","Name":"ScrollBarThickness","tags":[],"Class":"ScrollingFrame"},{"ValueType":"bool","type":"Property","Name":"ScrollingEnabled","tags":[],"Class":"ScrollingFrame"},{"ValueType":"Content","type":"Property","Name":"TopImage","tags":[],"Class":"ScrollingFrame"},{"ValueType":"ScrollBarInset","type":"Property","Name":"VerticalScrollBarInset","tags":[],"Class":"ScrollingFrame"},{"ValueType":"VerticalScrollBarPosition","type":"Property","Name":"VerticalScrollBarPosition","tags":[],"Class":"ScrollingFrame"},{"Superclass":"GuiObject","type":"Class","Name":"TextBox","tags":[]},{"ValueType":"bool","type":"Property","Name":"ClearTextOnFocus","tags":[],"Class":"TextBox"},{"ValueType":"Font","type":"Property","Name":"Font","tags":[],"Class":"TextBox"},{"ValueType":"FontSize","type":"Property","Name":"FontSize","tags":["deprecated"],"Class":"TextBox"},{"ValueType":"float","type":"Property","Name":"LineHeight","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"ManualFocusRelease","tags":["RobloxScriptSecurity"],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"MultiLine","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"OverlayNativeInput","tags":["RobloxScriptSecurity"],"Class":"TextBox"},{"ValueType":"Color3","type":"Property","Name":"PlaceholderColor3","tags":[],"Class":"TextBox"},{"ValueType":"string","type":"Property","Name":"PlaceholderText","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"ShowNativeInput","tags":[],"Class":"TextBox"},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"TextBox"},{"ValueType":"Vector2","type":"Property","Name":"TextBounds","tags":["readonly"],"Class":"TextBox"},{"ValueType":"BrickColor","type":"Property","Name":"TextColor","tags":["deprecated","hidden"],"Class":"TextBox"},{"ValueType":"Color3","type":"Property","Name":"TextColor3","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextFits","tags":["readonly"],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextScaled","tags":[],"Class":"TextBox"},{"ValueType":"float","type":"Property","Name":"TextSize","tags":[],"Class":"TextBox"},{"ValueType":"Color3","type":"Property","Name":"TextStrokeColor3","tags":[],"Class":"TextBox"},{"ValueType":"float","type":"Property","Name":"TextStrokeTransparency","tags":[],"Class":"TextBox"},{"ValueType":"float","type":"Property","Name":"TextTransparency","tags":[],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextWrap","tags":["deprecated"],"Class":"TextBox"},{"ValueType":"bool","type":"Property","Name":"TextWrapped","tags":[],"Class":"TextBox"},{"ValueType":"TextXAlignment","type":"Property","Name":"TextXAlignment","tags":[],"Class":"TextBox"},{"ValueType":"TextYAlignment","type":"Property","Name":"TextYAlignment","tags":[],"Class":"TextBox"},{"ReturnType":"void","Arguments":[],"Name":"CaptureFocus","tags":[],"Class":"TextBox","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsFocused","tags":[],"Class":"TextBox","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"submitted","Default":"false"}],"Name":"ReleaseFocus","tags":[],"Class":"TextBox","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null}],"Name":"SetTextFromInput","tags":["RobloxScriptSecurity"],"Class":"TextBox","type":"Function"},{"Arguments":[{"Name":"enterPressed","Type":"bool"},{"Name":"inputThatCausedFocusLoss","Type":"Instance"}],"Name":"FocusLost","tags":[],"Class":"TextBox","type":"Event"},{"Arguments":[],"Name":"Focused","tags":[],"Class":"TextBox","type":"Event"},{"Superclass":"GuiBase2d","type":"Class","Name":"LayerCollector","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"LayerCollector"},{"ValueType":"ZIndexBehavior","type":"Property","Name":"ZIndexBehavior","tags":[],"Class":"LayerCollector"},{"Superclass":"LayerCollector","type":"Class","Name":"BillboardGui","tags":[]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"BillboardGui"},{"ValueType":"Object","type":"Property","Name":"Adornee","tags":[],"Class":"BillboardGui"},{"ValueType":"bool","type":"Property","Name":"AlwaysOnTop","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector3","type":"Property","Name":"ExtentsOffset","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector3","type":"Property","Name":"ExtentsOffsetWorldSpace","tags":[],"Class":"BillboardGui"},{"ValueType":"float","type":"Property","Name":"LightInfluence","tags":[],"Class":"BillboardGui"},{"ValueType":"float","type":"Property","Name":"MaxDistance","tags":[],"Class":"BillboardGui"},{"ValueType":"Object","type":"Property","Name":"PlayerToHideFrom","tags":[],"Class":"BillboardGui"},{"ValueType":"UDim2","type":"Property","Name":"Size","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector2","type":"Property","Name":"SizeOffset","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector3","type":"Property","Name":"StudsOffset","tags":[],"Class":"BillboardGui"},{"ValueType":"Vector3","type":"Property","Name":"StudsOffsetWorldSpace","tags":[],"Class":"BillboardGui"},{"Superclass":"LayerCollector","type":"Class","Name":"ScreenGui","tags":[]},{"ValueType":"int","type":"Property","Name":"DisplayOrder","tags":[],"Class":"ScreenGui"},{"ValueType":"bool","type":"Property","Name":"ResetOnSpawn","tags":[],"Class":"ScreenGui"},{"Superclass":"ScreenGui","type":"Class","Name":"GuiMain","tags":["deprecated"]},{"Superclass":"LayerCollector","type":"Class","Name":"SurfaceGui","tags":[]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"SurfaceGui"},{"ValueType":"Object","type":"Property","Name":"Adornee","tags":[],"Class":"SurfaceGui"},{"ValueType":"bool","type":"Property","Name":"AlwaysOnTop","tags":[],"Class":"SurfaceGui"},{"ValueType":"Vector2","type":"Property","Name":"CanvasSize","tags":[],"Class":"SurfaceGui"},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"SurfaceGui"},{"ValueType":"float","type":"Property","Name":"LightInfluence","tags":[],"Class":"SurfaceGui"},{"ValueType":"float","type":"Property","Name":"ToolPunchThroughDistance","tags":[],"Class":"SurfaceGui"},{"ValueType":"float","type":"Property","Name":"ZOffset","tags":[],"Class":"SurfaceGui"},{"Superclass":"GuiBase","type":"Class","Name":"GuiBase3d","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"Color","tags":["deprecated","hidden"],"Class":"GuiBase3d"},{"ValueType":"Color3","type":"Property","Name":"Color3","tags":[],"Class":"GuiBase3d"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":[],"Class":"GuiBase3d"},{"ValueType":"bool","type":"Property","Name":"Visible","tags":[],"Class":"GuiBase3d"},{"Superclass":"GuiBase3d","type":"Class","Name":"FloorWire","tags":["deprecated"]},{"ValueType":"float","type":"Property","Name":"CycleOffset","tags":[],"Class":"FloorWire"},{"ValueType":"Object","type":"Property","Name":"From","tags":[],"Class":"FloorWire"},{"ValueType":"float","type":"Property","Name":"StudsBetweenTextures","tags":[],"Class":"FloorWire"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"FloorWire"},{"ValueType":"Vector2","type":"Property","Name":"TextureSize","tags":[],"Class":"FloorWire"},{"ValueType":"Object","type":"Property","Name":"To","tags":[],"Class":"FloorWire"},{"ValueType":"float","type":"Property","Name":"Velocity","tags":[],"Class":"FloorWire"},{"ValueType":"float","type":"Property","Name":"WireRadius","tags":[],"Class":"FloorWire"},{"Superclass":"GuiBase3d","type":"Class","Name":"PVAdornment","tags":[]},{"ValueType":"Object","type":"Property","Name":"Adornee","tags":[],"Class":"PVAdornment"},{"Superclass":"PVAdornment","type":"Class","Name":"HandleAdornment","tags":[]},{"ValueType":"bool","type":"Property","Name":"AlwaysOnTop","tags":[],"Class":"HandleAdornment"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"HandleAdornment"},{"ValueType":"Vector3","type":"Property","Name":"SizeRelativeOffset","tags":[],"Class":"HandleAdornment"},{"ValueType":"int","type":"Property","Name":"ZIndex","tags":[],"Class":"HandleAdornment"},{"Arguments":[],"Name":"MouseButton1Down","tags":[],"Class":"HandleAdornment","type":"Event"},{"Arguments":[],"Name":"MouseButton1Up","tags":[],"Class":"HandleAdornment","type":"Event"},{"Arguments":[],"Name":"MouseEnter","tags":[],"Class":"HandleAdornment","type":"Event"},{"Arguments":[],"Name":"MouseLeave","tags":[],"Class":"HandleAdornment","type":"Event"},{"Superclass":"HandleAdornment","type":"Class","Name":"BoxHandleAdornment","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Size","tags":[],"Class":"BoxHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"ConeHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Height","tags":[],"Class":"ConeHandleAdornment"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"ConeHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"CylinderHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Height","tags":[],"Class":"CylinderHandleAdornment"},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"CylinderHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"ImageHandleAdornment","tags":[]},{"ValueType":"Content","type":"Property","Name":"Image","tags":[],"Class":"ImageHandleAdornment"},{"ValueType":"Vector2","type":"Property","Name":"Size","tags":[],"Class":"ImageHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"LineHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Length","tags":[],"Class":"LineHandleAdornment"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":[],"Class":"LineHandleAdornment"},{"Superclass":"HandleAdornment","type":"Class","Name":"SphereHandleAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"Radius","tags":[],"Class":"SphereHandleAdornment"},{"Superclass":"PVAdornment","type":"Class","Name":"ParabolaAdornment","tags":[]},{"ValueType":"float","type":"Property","Name":"A","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment"},{"ValueType":"float","type":"Property","Name":"B","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment"},{"ValueType":"float","type":"Property","Name":"C","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment"},{"ValueType":"float","type":"Property","Name":"Range","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment"},{"ValueType":"float","type":"Property","Name":"Thickness","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment"},{"ReturnType":"Tuple","Arguments":[{"Type":"Objects","Name":"ignoreDescendentsTable","Default":null}],"Name":"FindPartOnParabola","tags":["RobloxScriptSecurity"],"Class":"ParabolaAdornment","type":"Function"},{"Superclass":"PVAdornment","type":"Class","Name":"SelectionBox","tags":[]},{"ValueType":"float","type":"Property","Name":"LineThickness","tags":[],"Class":"SelectionBox"},{"ValueType":"BrickColor","type":"Property","Name":"SurfaceColor","tags":["deprecated","hidden"],"Class":"SelectionBox"},{"ValueType":"Color3","type":"Property","Name":"SurfaceColor3","tags":[],"Class":"SelectionBox"},{"ValueType":"float","type":"Property","Name":"SurfaceTransparency","tags":[],"Class":"SelectionBox"},{"Superclass":"PVAdornment","type":"Class","Name":"SelectionSphere","tags":[]},{"ValueType":"BrickColor","type":"Property","Name":"SurfaceColor","tags":["deprecated","hidden"],"Class":"SelectionSphere"},{"ValueType":"Color3","type":"Property","Name":"SurfaceColor3","tags":[],"Class":"SelectionSphere"},{"ValueType":"float","type":"Property","Name":"SurfaceTransparency","tags":[],"Class":"SelectionSphere"},{"Superclass":"GuiBase3d","type":"Class","Name":"PartAdornment","tags":[]},{"ValueType":"Object","type":"Property","Name":"Adornee","tags":[],"Class":"PartAdornment"},{"Superclass":"PartAdornment","type":"Class","Name":"HandlesBase","tags":[]},{"Superclass":"HandlesBase","type":"Class","Name":"ArcHandles","tags":[]},{"ValueType":"Axes","type":"Property","Name":"Axes","tags":[],"Class":"ArcHandles"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseButton1Down","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseButton1Up","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"},{"Name":"relativeAngle","Type":"float"},{"Name":"deltaRadius","Type":"float"}],"Name":"MouseDrag","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseEnter","tags":[],"Class":"ArcHandles","type":"Event"},{"Arguments":[{"Name":"axis","Type":"Axis"}],"Name":"MouseLeave","tags":[],"Class":"ArcHandles","type":"Event"},{"Superclass":"HandlesBase","type":"Class","Name":"Handles","tags":[]},{"ValueType":"Faces","type":"Property","Name":"Faces","tags":[],"Class":"Handles"},{"ValueType":"HandlesStyle","type":"Property","Name":"Style","tags":[],"Class":"Handles"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseButton1Down","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseButton1Up","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"},{"Name":"distance","Type":"float"}],"Name":"MouseDrag","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseEnter","tags":[],"Class":"Handles","type":"Event"},{"Arguments":[{"Name":"face","Type":"NormalId"}],"Name":"MouseLeave","tags":[],"Class":"Handles","type":"Event"},{"Superclass":"PartAdornment","type":"Class","Name":"SurfaceSelection","tags":[]},{"ValueType":"NormalId","type":"Property","Name":"TargetSurface","tags":[],"Class":"SurfaceSelection"},{"Superclass":"GuiBase3d","type":"Class","Name":"SelectionLasso","tags":[]},{"ValueType":"Object","type":"Property","Name":"Humanoid","tags":[],"Class":"SelectionLasso"},{"Superclass":"SelectionLasso","type":"Class","Name":"SelectionPartLasso","tags":["deprecated"]},{"ValueType":"Object","type":"Property","Name":"Part","tags":[],"Class":"SelectionPartLasso"},{"Superclass":"SelectionLasso","type":"Class","Name":"SelectionPointLasso","tags":["deprecated"]},{"ValueType":"Vector3","type":"Property","Name":"Point","tags":[],"Class":"SelectionPointLasso"},{"Superclass":"Instance","type":"Class","Name":"GuiItem","tags":[]},{"Superclass":"GuiItem","type":"Class","Name":"Backpack","tags":[]},{"Superclass":"GuiItem","type":"Class","Name":"BackpackItem","tags":[]},{"ValueType":"Content","type":"Property","Name":"TextureId","tags":[],"Class":"BackpackItem"},{"Superclass":"BackpackItem","type":"Class","Name":"HopperBin","tags":["deprecated"]},{"ValueType":"bool","type":"Property","Name":"Active","tags":[],"Class":"HopperBin"},{"ValueType":"BinType","type":"Property","Name":"BinType","tags":[],"Class":"HopperBin"},{"ReturnType":"void","Arguments":[],"Name":"Disable","tags":["RobloxScriptSecurity"],"Class":"HopperBin","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ToggleSelect","tags":["RobloxScriptSecurity"],"Class":"HopperBin","type":"Function"},{"Arguments":[],"Name":"Deselected","tags":[],"Class":"HopperBin","type":"Event"},{"Arguments":[{"Name":"mouse","Type":"Instance"}],"Name":"Selected","tags":[],"Class":"HopperBin","type":"Event"},{"Superclass":"BackpackItem","type":"Class","Name":"Tool","tags":[]},{"ValueType":"bool","type":"Property","Name":"CanBeDropped","tags":[],"Class":"Tool"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Tool"},{"ValueType":"CoordinateFrame","type":"Property","Name":"Grip","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripForward","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripPos","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripRight","tags":[],"Class":"Tool"},{"ValueType":"Vector3","type":"Property","Name":"GripUp","tags":[],"Class":"Tool"},{"ValueType":"bool","type":"Property","Name":"ManualActivationOnly","tags":[],"Class":"Tool"},{"ValueType":"bool","type":"Property","Name":"RequiresHandle","tags":[],"Class":"Tool"},{"ValueType":"string","type":"Property","Name":"ToolTip","tags":[],"Class":"Tool"},{"ReturnType":"void","Arguments":[],"Name":"Activate","tags":[],"Class":"Tool","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Deactivate","tags":[],"Class":"Tool","type":"Function"},{"Arguments":[],"Name":"Activated","tags":[],"Class":"Tool","type":"Event"},{"Arguments":[],"Name":"Deactivated","tags":[],"Class":"Tool","type":"Event"},{"Arguments":[{"Name":"mouse","Type":"Instance"}],"Name":"Equipped","tags":[],"Class":"Tool","type":"Event"},{"Arguments":[],"Name":"Unequipped","tags":[],"Class":"Tool","type":"Event"},{"Superclass":"Tool","type":"Class","Name":"Flag","tags":["deprecated"]},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"Flag"},{"Superclass":"GuiItem","type":"Class","Name":"ButtonBindingWidget","tags":[]},{"Superclass":"GuiItem","type":"Class","Name":"GuiRoot","tags":["notCreatable"]},{"Superclass":"GuiItem","type":"Class","Name":"Hopper","tags":["deprecated"]},{"Superclass":"GuiItem","type":"Class","Name":"StarterPack","tags":[]},{"Superclass":"Instance","type":"Class","Name":"GuiService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AutoSelectGuiEnabled","tags":[],"Class":"GuiService"},{"ValueType":"Object","type":"Property","Name":"CoreEffectFolder","tags":["RobloxScriptSecurity","hidden"],"Class":"GuiService"},{"ValueType":"Object","type":"Property","Name":"CoreGuiFolder","tags":["RobloxScriptSecurity","hidden"],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"CoreGuiNavigationEnabled","tags":[],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"GuiNavigationEnabled","tags":[],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"IsModalDialog","tags":["deprecated","readonly"],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"IsWindows","tags":["deprecated","readonly"],"Class":"GuiService"},{"ValueType":"bool","type":"Property","Name":"MenuIsOpen","tags":["readonly"],"Class":"GuiService"},{"ValueType":"Object","type":"Property","Name":"SelectedCoreObject","tags":["RobloxScriptSecurity"],"Class":"GuiService"},{"ValueType":"Object","type":"Property","Name":"SelectedObject","tags":[],"Class":"GuiService"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"dialog","Default":null},{"Type":"CenterDialogType","Name":"centerDialogType","Default":null},{"Type":"Function","Name":"showFunction","Default":null},{"Type":"Function","Name":"hideFunction","Default":null}],"Name":"AddCenterDialog","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"AddKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"selectionName","Default":null},{"Type":"Instance","Name":"selectionParent","Default":null}],"Name":"AddSelectionParent","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"selectionName","Default":null},{"Type":"Tuple","Name":"selections","Default":null}],"Name":"AddSelectionTuple","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"SpecialKey","Name":"key","Default":null}],"Name":"AddSpecialKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"data","Default":null},{"Type":"int","Name":"notificationType","Default":null}],"Name":"BroadcastNotification","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"CloseStatsBasedOnInputString","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetBrickCount","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"GetClosestDialogToPosition","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetErrorMessage","tags":["RobloxScriptSecurity","deprecated"],"Class":"GuiService","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetGuiInset","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetNotificationTypeList","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetResolutionScale","tags":["LocalUserSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetUiMessage","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsMemoryTrackerEnabled","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsTenFootInterface","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"OpenBrowserWindow","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"title","Default":null},{"Type":"string","Name":"url","Default":null}],"Name":"OpenNativeOverlay","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"dialog","Default":null}],"Name":"RemoveCenterDialog","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"RemoveKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"selectionName","Default":null}],"Name":"RemoveSelectionGroup","tags":[],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"SpecialKey","Name":"key","Default":null}],"Name":"RemoveSpecialKey","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"x1","Default":null},{"Type":"int","Name":"y1","Default":null},{"Type":"int","Name":"x2","Default":null},{"Type":"int","Name":"y2","Default":null}],"Name":"SetGlobalGuiInset","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"open","Default":null}],"Name":"SetMenuIsOpen","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UiMessageType","Name":"msgType","Default":null},{"Type":"string","Name":"uiMessage","Default":null}],"Name":"SetUiMessage","tags":["LocalUserSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"ShowStatsBasedOnInputString","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ToggleFullscreen","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Function"},{"ReturnType":"Vector2","Arguments":[],"Name":"GetScreenResolution","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"YieldFunction"},{"Arguments":[],"Name":"BrowserWindowClosed","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"newErrorMessage","Type":"string"}],"Name":"ErrorMessageChanged","tags":["RobloxScriptSecurity","deprecated"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"},{"Name":"modifiers","Type":"string"}],"Name":"KeyPressed","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"MenuClosed","tags":[],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"MenuOpened","tags":[],"Class":"GuiService","type":"Event"},{"Arguments":[],"Name":"ShowLeaveConfirmation","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"key","Type":"SpecialKey"},{"Name":"modifiers","Type":"string"}],"Name":"SpecialKeyPressed","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"Arguments":[{"Name":"msgType","Type":"UiMessageType"},{"Name":"newUiMessage","Type":"string"}],"Name":"UiMessageChanged","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Event"},{"ReturnType":"void","Arguments":[{"Name":"title","Type":"string"},{"Name":"text","Type":"string"}],"Name":"SendCoreUiNotification","tags":["RobloxScriptSecurity"],"Class":"GuiService","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"GuidRegistryService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"HapticService","tags":["notCreatable"]},{"ReturnType":"Tuple","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null},{"Type":"VibrationMotor","Name":"vibrationMotor","Default":null}],"Name":"GetMotor","tags":[],"Class":"HapticService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null},{"Type":"VibrationMotor","Name":"vibrationMotor","Default":null}],"Name":"IsMotorSupported","tags":[],"Class":"HapticService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null}],"Name":"IsVibrationSupported","tags":[],"Class":"HapticService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"inputType","Default":null},{"Type":"VibrationMotor","Name":"vibrationMotor","Default":null},{"Type":"Tuple","Name":"vibrationValues","Default":null}],"Name":"SetMotor","tags":[],"Class":"HapticService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"HttpRbxApiService","tags":["notCreatable"]},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"apiUrlPath","Default":null},{"Type":"ThrottlingPriority","Name":"priority","Default":"Default"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"GetAsync","tags":["RobloxScriptSecurity"],"Class":"HttpRbxApiService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"apiUrlPath","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"ThrottlingPriority","Name":"priority","Default":"Default"},{"Type":"HttpContentType","Name":"content_type","Default":"ApplicationJson"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"PostAsync","tags":["RobloxScriptSecurity"],"Class":"HttpRbxApiService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"HttpService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"HttpEnabled","tags":["LocalUserSecurity"],"Class":"HttpService"},{"ReturnType":"string","Arguments":[{"Type":"bool","Name":"wrapInCurlyBraces","Default":"true"}],"Name":"GenerateGUID","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"JSONDecode","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"Variant","Name":"input","Default":null}],"Name":"JSONEncode","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"input","Default":null}],"Name":"UrlEncode","tags":[],"Class":"HttpService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"bool","Name":"nocache","Default":"false"},{"Type":"Variant","Name":"headers","Default":null}],"Name":"GetAsync","tags":[],"Class":"HttpService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"HttpContentType","Name":"content_type","Default":"ApplicationJson"},{"Type":"bool","Name":"compress","Default":"false"},{"Type":"Variant","Name":"headers","Default":null}],"Name":"PostAsync","tags":[],"Class":"HttpService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Humanoid","tags":[]},{"ValueType":"bool","type":"Property","Name":"AutoJumpEnabled","tags":[],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"AutoRotate","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"CameraOffset","tags":[],"Class":"Humanoid"},{"ValueType":"HumanoidDisplayDistanceType","type":"Property","Name":"DisplayDistanceType","tags":[],"Class":"Humanoid"},{"ValueType":"Material","type":"Property","Name":"FloorMaterial","tags":["readonly"],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"Health","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"HealthDisplayDistance","tags":[],"Class":"Humanoid"},{"ValueType":"HumanoidHealthDisplayType","type":"Property","Name":"HealthDisplayType","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"HipHeight","tags":[],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"Jump","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"JumpPower","tags":[],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"LeftLeg","tags":["deprecated","hidden"],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"MaxHealth","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"MaxSlopeAngle","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"MoveDirection","tags":["readonly"],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"NameDisplayDistance","tags":[],"Class":"Humanoid"},{"ValueType":"NameOcclusion","type":"Property","Name":"NameOcclusion","tags":[],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"PlatformStand","tags":[],"Class":"Humanoid"},{"ValueType":"HumanoidRigType","type":"Property","Name":"RigType","tags":[],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"RightLeg","tags":["deprecated","hidden"],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"RootPart","tags":["readonly"],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"SeatPart","tags":["readonly"],"Class":"Humanoid"},{"ValueType":"bool","type":"Property","Name":"Sit","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"TargetPoint","tags":[],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"Torso","tags":["deprecated","hidden"],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"WalkSpeed","tags":[],"Class":"Humanoid"},{"ValueType":"Object","type":"Property","Name":"WalkToPart","tags":[],"Class":"Humanoid"},{"ValueType":"Vector3","type":"Property","Name":"WalkToPoint","tags":[],"Class":"Humanoid"},{"ValueType":"float","type":"Property","Name":"maxHealth","tags":["deprecated"],"Class":"Humanoid"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"accessory","Default":null}],"Name":"AddAccessory","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"status","Default":null}],"Name":"AddCustomStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Status","Name":"status","Default":"Poison"}],"Name":"AddStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"BuildRigFromAttachments","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"HumanoidStateType","Name":"state","Default":"None"}],"Name":"ChangeState","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"tool","Default":null}],"Name":"EquipTool","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetAccessories","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Limb","Arguments":[{"Type":"Instance","Name":"part","Default":null}],"Name":"GetLimb","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetPlayingAnimationTracks","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"HumanoidStateType","Arguments":[],"Name":"GetState","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"HumanoidStateType","Name":"state","Default":null}],"Name":"GetStateEnabled","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetStatuses","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"status","Default":null}],"Name":"HasCustomStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Status","Name":"status","Default":"Poison"}],"Name":"HasStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"LoadAnimation","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"moveDirection","Default":null},{"Type":"bool","Name":"relativeToCamera","Default":"false"}],"Name":"Move","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"location","Default":null},{"Type":"Instance","Name":"part","Default":"nil"}],"Name":"MoveTo","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RemoveAccessories","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"status","Default":null}],"Name":"RemoveCustomStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Status","Name":"status","Default":"Poison"}],"Name":"RemoveStatus","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetClickToWalkEnabled","tags":["RobloxScriptSecurity"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"HumanoidStateType","Name":"state","Default":null},{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetStateEnabled","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"amount","Default":null}],"Name":"TakeDamage","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"UnequipTools","tags":[],"Class":"Humanoid","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"animation","Default":null}],"Name":"loadAnimation","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"amount","Default":null}],"Name":"takeDamage","tags":["deprecated"],"Class":"Humanoid","type":"Function"},{"Arguments":[{"Name":"animationTrack","Type":"Instance"}],"Name":"AnimationPlayed","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"speed","Type":"float"}],"Name":"Climbing","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"string"}],"Name":"CustomStatusAdded","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"string"}],"Name":"CustomStatusRemoved","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[],"Name":"Died","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"FallingDown","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"FreeFalling","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"GettingUp","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"health","Type":"float"}],"Name":"HealthChanged","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"Jumping","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"reached","Type":"bool"}],"Name":"MoveToFinished","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"PlatformStanding","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"Ragdoll","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"speed","Type":"float"}],"Name":"Running","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"},{"Name":"currentSeatPart","Type":"Instance"}],"Name":"Seated","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"old","Type":"HumanoidStateType"},{"Name":"new","Type":"HumanoidStateType"}],"Name":"StateChanged","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"state","Type":"HumanoidStateType"},{"Name":"isEnabled","Type":"bool"}],"Name":"StateEnabledChanged","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"Status"}],"Name":"StatusAdded","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"status","Type":"Status"}],"Name":"StatusRemoved","tags":["deprecated"],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"active","Type":"bool"}],"Name":"Strafing","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"speed","Type":"float"}],"Name":"Swimming","tags":[],"Class":"Humanoid","type":"Event"},{"Arguments":[{"Name":"touchingPart","Type":"Instance"},{"Name":"humanoidPart","Type":"Instance"}],"Name":"Touched","tags":[],"Class":"Humanoid","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"InputObject","tags":["notCreatable"]},{"ValueType":"Vector3","type":"Property","Name":"Delta","tags":[],"Class":"InputObject"},{"ValueType":"KeyCode","type":"Property","Name":"KeyCode","tags":[],"Class":"InputObject"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"InputObject"},{"ValueType":"UserInputState","type":"Property","Name":"UserInputState","tags":[],"Class":"InputObject"},{"ValueType":"UserInputType","type":"Property","Name":"UserInputType","tags":[],"Class":"InputObject"},{"Superclass":"Instance","type":"Class","Name":"InsertService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AllowInsertFreeModels","tags":["deprecated","notbrowsable"],"Class":"InsertService"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"assetId","Default":null}],"Name":"ApproveAssetId","tags":["deprecated"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"assetVersionId","Default":null}],"Name":"ApproveAssetVersionId","tags":["deprecated"],"Class":"InsertService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"instance","Default":null}],"Name":"Insert","tags":["deprecated"],"Class":"InsertService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetBaseCategories","tags":["deprecated"],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[],"Name":"GetBaseSets","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"categoryId","Default":null}],"Name":"GetCollection","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"string","Name":"searchText","Default":null},{"Type":"int","Name":"pageNum","Default":null}],"Name":"GetFreeDecals","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"string","Name":"searchText","Default":null},{"Type":"int","Name":"pageNum","Default":null}],"Name":"GetFreeModels","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"assetId","Default":null}],"Name":"GetLatestAssetVersionAsync","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetUserCategories","tags":["deprecated"],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetUserSets","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"assetId","Default":null}],"Name":"LoadAsset","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"assetVersionId","Default":null}],"Name":"LoadAssetVersion","tags":[],"Class":"InsertService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"assetId","Default":null}],"Name":"loadAsset","tags":["deprecated"],"Class":"InsertService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"InstancePacketCache","tags":[]},{"Superclass":"Instance","type":"Class","Name":"IntConstrainedValue","tags":["deprecated"]},{"ValueType":"int","type":"Property","Name":"ConstrainedValue","tags":["hidden"],"Class":"IntConstrainedValue"},{"ValueType":"int","type":"Property","Name":"MaxValue","tags":[],"Class":"IntConstrainedValue"},{"ValueType":"int","type":"Property","Name":"MinValue","tags":[],"Class":"IntConstrainedValue"},{"ValueType":"int","type":"Property","Name":"Value","tags":[],"Class":"IntConstrainedValue"},{"Arguments":[{"Name":"value","Type":"int"}],"Name":"Changed","tags":[],"Class":"IntConstrainedValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"int"}],"Name":"changed","tags":["deprecated"],"Class":"IntConstrainedValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"IntValue","tags":[]},{"ValueType":"int","type":"Property","Name":"Value","tags":[],"Class":"IntValue"},{"Arguments":[{"Name":"value","Type":"int"}],"Name":"Changed","tags":[],"Class":"IntValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"int"}],"Name":"changed","tags":["deprecated"],"Class":"IntValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"JointInstance","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"C0","tags":[],"Class":"JointInstance"},{"ValueType":"CoordinateFrame","type":"Property","Name":"C1","tags":[],"Class":"JointInstance"},{"ValueType":"Object","type":"Property","Name":"Part0","tags":[],"Class":"JointInstance"},{"ValueType":"Object","type":"Property","Name":"Part1","tags":[],"Class":"JointInstance"},{"ValueType":"Object","type":"Property","Name":"part1","tags":["deprecated","hidden"],"Class":"JointInstance"},{"Superclass":"JointInstance","type":"Class","Name":"DynamicRotate","tags":[]},{"ValueType":"float","type":"Property","Name":"BaseAngle","tags":[],"Class":"DynamicRotate"},{"Superclass":"DynamicRotate","type":"Class","Name":"RotateP","tags":[]},{"Superclass":"DynamicRotate","type":"Class","Name":"RotateV","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"Glue","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"F0","tags":[],"Class":"Glue"},{"ValueType":"Vector3","type":"Property","Name":"F1","tags":[],"Class":"Glue"},{"ValueType":"Vector3","type":"Property","Name":"F2","tags":[],"Class":"Glue"},{"ValueType":"Vector3","type":"Property","Name":"F3","tags":[],"Class":"Glue"},{"Superclass":"JointInstance","type":"Class","Name":"ManualSurfaceJointInstance","tags":[]},{"Superclass":"ManualSurfaceJointInstance","type":"Class","Name":"ManualGlue","tags":[]},{"Superclass":"ManualSurfaceJointInstance","type":"Class","Name":"ManualWeld","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"Motor","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":[],"Class":"Motor"},{"ValueType":"float","type":"Property","Name":"DesiredAngle","tags":[],"Class":"Motor"},{"ValueType":"float","type":"Property","Name":"MaxVelocity","tags":[],"Class":"Motor"},{"ReturnType":"void","Arguments":[{"Type":"float","Name":"value","Default":null}],"Name":"SetDesiredAngle","tags":[],"Class":"Motor","type":"Function"},{"Superclass":"Motor","type":"Class","Name":"Motor6D","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"Transform","tags":["hidden"],"Class":"Motor6D"},{"Superclass":"JointInstance","type":"Class","Name":"Rotate","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"Snap","tags":[]},{"Superclass":"JointInstance","type":"Class","Name":"VelocityMotor","tags":[]},{"ValueType":"float","type":"Property","Name":"CurrentAngle","tags":[],"Class":"VelocityMotor"},{"ValueType":"float","type":"Property","Name":"DesiredAngle","tags":[],"Class":"VelocityMotor"},{"ValueType":"Object","type":"Property","Name":"Hole","tags":[],"Class":"VelocityMotor"},{"ValueType":"float","type":"Property","Name":"MaxVelocity","tags":[],"Class":"VelocityMotor"},{"Superclass":"JointInstance","type":"Class","Name":"Weld","tags":[]},{"Superclass":"Instance","type":"Class","Name":"JointsService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"ClearJoinAfterMoveJoints","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"CreateJoinAfterMoveJoints","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"joinInstance","Default":null}],"Name":"SetJoinAfterMoveInstance","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"joinTarget","Default":null}],"Name":"SetJoinAfterMoveTarget","tags":[],"Class":"JointsService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ShowPermissibleJoints","tags":[],"Class":"JointsService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Keyframe","tags":[]},{"ValueType":"float","type":"Property","Name":"Time","tags":[],"Class":"Keyframe"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"AddPose","tags":[],"Class":"Keyframe","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetPoses","tags":[],"Class":"Keyframe","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"RemovePose","tags":[],"Class":"Keyframe","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"KeyframeSequence","tags":[]},{"ValueType":"bool","type":"Property","Name":"Loop","tags":[],"Class":"KeyframeSequence"},{"ValueType":"AnimationPriority","type":"Property","Name":"Priority","tags":[],"Class":"KeyframeSequence"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"keyframe","Default":null}],"Name":"AddKeyframe","tags":[],"Class":"KeyframeSequence","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetKeyframes","tags":[],"Class":"KeyframeSequence","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"keyframe","Default":null}],"Name":"RemoveKeyframe","tags":[],"Class":"KeyframeSequence","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"KeyframeSequenceProvider","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"Content","Name":"assetId","Default":null}],"Name":"GetKeyframeSequence","tags":[],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"assetId","Default":null},{"Type":"bool","Name":"useCache","Default":null}],"Name":"GetKeyframeSequenceById","tags":[],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Content","Arguments":[{"Type":"Instance","Name":"keyframeSequence","Default":null}],"Name":"RegisterActiveKeyframeSequence","tags":[],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Content","Arguments":[{"Type":"Instance","Name":"keyframeSequence","Default":null}],"Name":"RegisterKeyframeSequence","tags":[],"Class":"KeyframeSequenceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetAnimations","tags":[],"Class":"KeyframeSequenceProvider","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"Content","Name":"assetId","Default":null}],"Name":"GetKeyframeSequenceAsync","tags":[],"Class":"KeyframeSequenceProvider","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Light","tags":[]},{"ValueType":"float","type":"Property","Name":"Brightness","tags":[],"Class":"Light"},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"Light"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Light"},{"ValueType":"bool","type":"Property","Name":"Shadows","tags":[],"Class":"Light"},{"Superclass":"Light","type":"Class","Name":"PointLight","tags":[]},{"ValueType":"float","type":"Property","Name":"Range","tags":[],"Class":"PointLight"},{"Superclass":"Light","type":"Class","Name":"SpotLight","tags":[]},{"ValueType":"float","type":"Property","Name":"Angle","tags":[],"Class":"SpotLight"},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"SpotLight"},{"ValueType":"float","type":"Property","Name":"Range","tags":[],"Class":"SpotLight"},{"Superclass":"Light","type":"Class","Name":"SurfaceLight","tags":[]},{"ValueType":"float","type":"Property","Name":"Angle","tags":[],"Class":"SurfaceLight"},{"ValueType":"NormalId","type":"Property","Name":"Face","tags":[],"Class":"SurfaceLight"},{"ValueType":"float","type":"Property","Name":"Range","tags":[],"Class":"SurfaceLight"},{"Superclass":"Instance","type":"Class","Name":"Lighting","tags":["notCreatable"]},{"ValueType":"Color3","type":"Property","Name":"Ambient","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"Brightness","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"ClockTime","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"ColorShift_Bottom","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"ColorShift_Top","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"FogColor","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"FogEnd","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"FogStart","tags":[],"Class":"Lighting"},{"ValueType":"float","type":"Property","Name":"GeographicLatitude","tags":[],"Class":"Lighting"},{"ValueType":"bool","type":"Property","Name":"GlobalShadows","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"OutdoorAmbient","tags":[],"Class":"Lighting"},{"ValueType":"bool","type":"Property","Name":"Outlines","tags":[],"Class":"Lighting"},{"ValueType":"Color3","type":"Property","Name":"ShadowColor","tags":["deprecated"],"Class":"Lighting"},{"ValueType":"string","type":"Property","Name":"TimeOfDay","tags":[],"Class":"Lighting"},{"ReturnType":"double","Arguments":[],"Name":"GetMinutesAfterMidnight","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetMoonDirection","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetMoonPhase","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetSunDirection","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"minutes","Default":null}],"Name":"SetMinutesAfterMidnight","tags":[],"Class":"Lighting","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"getMinutesAfterMidnight","tags":["deprecated"],"Class":"Lighting","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"minutes","Default":null}],"Name":"setMinutesAfterMidnight","tags":["deprecated"],"Class":"Lighting","type":"Function"},{"Arguments":[{"Name":"skyboxChanged","Type":"bool"}],"Name":"LightingChanged","tags":[],"Class":"Lighting","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"LobbyService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"BeginLeaveLobby","tags":["RobloxScriptSecurity"],"Class":"LobbyService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null}],"Name":"BeginLobbyStartGame","tags":["RobloxScriptSecurity"],"Class":"LobbyService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"LocalWorkspace","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"LocalizationService","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"RobloxLocaleId","tags":["readonly"],"Class":"LocalizationService"},{"ValueType":"string","type":"Property","Name":"SystemLocaleId","tags":["readonly"],"Class":"LocalizationService"},{"ReturnType":"Objects","Arguments":[],"Name":"GetCorescriptLocalizations","tags":[],"Class":"LocalizationService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"LocalizationTable","tags":[]},{"ValueType":"string","type":"Property","Name":"DevelopmentLanguage","tags":[],"Class":"LocalizationTable"},{"ValueType":"Object","type":"Property","Name":"Root","tags":[],"Class":"LocalizationTable"},{"ReturnType":"string","Arguments":[],"Name":"GetContents","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetEntries","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"targetLocaleId","Default":null},{"Type":"string","Name":"key","Default":null}],"Name":"GetString","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"RemoveKey","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"contents","Default":null}],"Name":"SetContents","tags":[],"Class":"LocalizationTable","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"targetLocaleId","Default":null},{"Type":"string","Name":"text","Default":null}],"Name":"SetEntry","tags":[],"Class":"LocalizationTable","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"LogService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"source","Default":null}],"Name":"ExecuteScript","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetHttpResultHistory","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetLogHistory","tags":[],"Class":"LogService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RequestHttpResultApproved","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RequestServerHttpResult","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RequestServerOutput","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Function"},{"Arguments":[{"Name":"httpResult","Type":"Dictionary"}],"Name":"HttpResultOut","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"messageType","Type":"MessageType"}],"Name":"MessageOut","tags":[],"Class":"LogService","type":"Event"},{"Arguments":[{"Name":"isApproved","Type":"bool"}],"Name":"OnHttpResultApproved","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Event"},{"Arguments":[{"Name":"httpResult","Type":"Dictionary"}],"Name":"ServerHttpResultOut","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"messageType","Type":"MessageType"},{"Name":"timestamp","Type":"int"}],"Name":"ServerMessageOut","tags":["RobloxScriptSecurity"],"Class":"LogService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"LoginService","tags":[]},{"ReturnType":"void","Arguments":[],"Name":"Logout","tags":["RobloxSecurity"],"Class":"LoginService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"PromptLogin","tags":["RobloxSecurity"],"Class":"LoginService","type":"Function"},{"Arguments":[{"Name":"loginError","Type":"string"}],"Name":"LoginFailed","tags":["RobloxSecurity"],"Class":"LoginService","type":"Event"},{"Arguments":[{"Name":"username","Type":"string"}],"Name":"LoginSucceeded","tags":["RobloxSecurity"],"Class":"LoginService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"LuaSettings","tags":[]},{"ValueType":"bool","type":"Property","Name":"AreScriptStartsReported","tags":[],"Class":"LuaSettings"},{"ValueType":"double","type":"Property","Name":"DefaultWaitTime","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcFrequency","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcLimit","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcPause","tags":[],"Class":"LuaSettings"},{"ValueType":"int","type":"Property","Name":"GcStepMul","tags":[],"Class":"LuaSettings"},{"ValueType":"float","type":"Property","Name":"WaitingThreadsBudget","tags":[],"Class":"LuaSettings"},{"Superclass":"Instance","type":"Class","Name":"LuaSourceContainer","tags":["notbrowsable"]},{"Superclass":"LuaSourceContainer","type":"Class","Name":"BaseScript","tags":[]},{"ValueType":"bool","type":"Property","Name":"Disabled","tags":[],"Class":"BaseScript"},{"ValueType":"Content","type":"Property","Name":"LinkedSource","tags":[],"Class":"BaseScript"},{"Superclass":"BaseScript","type":"Class","Name":"CoreScript","tags":["notCreatable"]},{"Superclass":"BaseScript","type":"Class","Name":"Script","tags":[]},{"ValueType":"ProtectedString","type":"Property","Name":"Source","tags":["PluginSecurity"],"Class":"Script"},{"ReturnType":"string","Arguments":[],"Name":"GetHash","tags":["LocalUserSecurity"],"Class":"Script","type":"Function"},{"Superclass":"Script","type":"Class","Name":"LocalScript","tags":[]},{"Superclass":"LuaSourceContainer","type":"Class","Name":"ModuleScript","tags":[]},{"ValueType":"Content","type":"Property","Name":"LinkedSource","tags":[],"Class":"ModuleScript"},{"ValueType":"ProtectedString","type":"Property","Name":"Source","tags":["PluginSecurity"],"Class":"ModuleScript"},{"Superclass":"Instance","type":"Class","Name":"LuaWebService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"MarketplaceService","tags":["notCreatable"]},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"PlayerCanMakePurchases","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"gamePassId","Default":null}],"Name":"PromptGamePassPurchase","tags":[],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"productId","Default":null}],"Name":"PromptNativePurchase","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"productId","Default":null},{"Type":"bool","Name":"equipIfPurchased","Default":"true"},{"Type":"CurrencyType","Name":"currencyType","Default":"Default"}],"Name":"PromptProductPurchase","tags":[],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"assetId","Default":null},{"Type":"bool","Name":"equipIfPurchased","Default":"true"},{"Type":"CurrencyType","Name":"currencyType","Default":"Default"}],"Name":"PromptPurchase","tags":[],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"productId","Default":null}],"Name":"PromptThirdPartyPurchase","tags":["LocalUserSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"assetId","Default":null},{"Type":"int","Name":"robuxAmount","Default":null}],"Name":"ReportAssetSale","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ReportRobuxUpsellStarted","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"ticket","Default":null},{"Type":"int","Name":"playerId","Default":null},{"Type":"int","Name":"productId","Default":null}],"Name":"SignalClientPurchaseSuccess","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"gamePassId","Default":null},{"Type":"bool","Name":"success","Default":null}],"Name":"SignalPromptGamePassPurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"productId","Default":null},{"Type":"bool","Name":"success","Default":null}],"Name":"SignalPromptProductPurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"assetId","Default":null},{"Type":"bool","Name":"success","Default":null}],"Name":"SignalPromptPurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SignalServerLuaDialogClosed","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetDeveloperProductsAsync","tags":[],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int","Name":"assetId","Default":null},{"Type":"InfoType","Name":"infoType","Default":"Asset"}],"Name":"GetProductInfo","tags":[],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[],"Name":"GetRobuxBalance","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"InfoType","Name":"infoType","Default":null},{"Type":"int","Name":"productId","Default":null},{"Type":"int","Name":"expectedPrice","Default":null},{"Type":"string","Name":"requestId","Default":null}],"Name":"PerformPurchase","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"int","Name":"assetId","Default":null}],"Name":"PlayerOwnsAsset","tags":[],"Class":"MarketplaceService","type":"YieldFunction"},{"Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"ClientLuaDialogRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"ticket","Type":"string"},{"Name":"playerId","Type":"int"},{"Name":"productId","Type":"int"}],"Name":"ClientPurchaseSuccess","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"productId","Type":"string"},{"Name":"wasPurchased","Type":"bool"}],"Name":"NativePurchaseFinished","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"gamePassId","Type":"int"},{"Name":"wasPurchased","Type":"bool"}],"Name":"PromptGamePassPurchaseFinished","tags":[],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"gamePassId","Type":"int"}],"Name":"PromptGamePassPurchaseRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"userId","Type":"int"},{"Name":"productId","Type":"int"},{"Name":"isPurchased","Type":"bool"}],"Name":"PromptProductPurchaseFinished","tags":["deprecated"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"productId","Type":"int"},{"Name":"equipIfPurchased","Type":"bool"},{"Name":"currencyType","Type":"CurrencyType"}],"Name":"PromptProductPurchaseRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"assetId","Type":"int"},{"Name":"isPurchased","Type":"bool"}],"Name":"PromptPurchaseFinished","tags":[],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"assetId","Type":"int"},{"Name":"equipIfPurchased","Type":"bool"},{"Name":"currencyType","Type":"CurrencyType"}],"Name":"PromptPurchaseRequested","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"serverResponseTable","Type":"Dictionary"}],"Name":"ServerPurchaseVerification","tags":["RobloxScriptSecurity"],"Class":"MarketplaceService","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"productId","Type":"string"},{"Name":"receipt","Type":"string"},{"Name":"wasPurchased","Type":"bool"}],"Name":"ThirdPartyPurchaseFinished","tags":["LocalUserSecurity"],"Class":"MarketplaceService","type":"Event"},{"ReturnType":"ProductPurchaseDecision","Arguments":[{"Name":"receiptInfo","Type":"Dictionary"}],"Name":"ProcessReceipt","tags":[],"Class":"MarketplaceService","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"Message","tags":["deprecated"]},{"ValueType":"string","type":"Property","Name":"Text","tags":[],"Class":"Message"},{"Superclass":"Message","type":"Class","Name":"Hint","tags":["deprecated"]},{"Superclass":"Instance","type":"Class","Name":"Mouse","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"Hit","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Content","type":"Property","Name":"Icon","tags":[],"Class":"Mouse"},{"ValueType":"CoordinateFrame","type":"Property","Name":"Origin","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Object","type":"Property","Name":"Target","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Object","type":"Property","Name":"TargetFilter","tags":[],"Class":"Mouse"},{"ValueType":"NormalId","type":"Property","Name":"TargetSurface","tags":["readonly"],"Class":"Mouse"},{"ValueType":"Ray","type":"Property","Name":"UnitRay","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"ViewSizeX","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"ViewSizeY","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"X","tags":["readonly"],"Class":"Mouse"},{"ValueType":"int","type":"Property","Name":"Y","tags":["readonly"],"Class":"Mouse"},{"ValueType":"CoordinateFrame","type":"Property","Name":"hit","tags":["deprecated","hidden","readonly"],"Class":"Mouse"},{"ValueType":"Object","type":"Property","Name":"target","tags":["deprecated","readonly"],"Class":"Mouse"},{"Arguments":[],"Name":"Button1Down","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Button1Up","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Button2Down","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Button2Up","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Idle","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"}],"Name":"KeyDown","tags":["deprecated"],"Class":"Mouse","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"}],"Name":"KeyUp","tags":["deprecated"],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"Move","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"WheelBackward","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[],"Name":"WheelForward","tags":[],"Class":"Mouse","type":"Event"},{"Arguments":[{"Name":"key","Type":"string"}],"Name":"keyDown","tags":["deprecated"],"Class":"Mouse","type":"Event"},{"Superclass":"Mouse","type":"Class","Name":"PlayerMouse","tags":[]},{"Superclass":"Mouse","type":"Class","Name":"PluginMouse","tags":[]},{"Arguments":[{"Name":"instances","Type":"Objects"}],"Name":"DragEnter","tags":["PluginSecurity"],"Class":"PluginMouse","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"NetworkMarker","tags":["notbrowsable"]},{"Arguments":[],"Name":"Received","tags":[],"Class":"NetworkMarker","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"NetworkPeer","tags":["notbrowsable"]},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"limit","Default":null}],"Name":"SetOutgoingKBPSLimit","tags":["PluginSecurity"],"Class":"NetworkPeer","type":"Function"},{"Superclass":"NetworkPeer","type":"Class","Name":"NetworkClient","tags":["notCreatable"]},{"ValueType":"string","type":"Property","Name":"Ticket","tags":[],"Class":"NetworkClient"},{"Arguments":[{"Name":"peer","Type":"string"},{"Name":"replicator","Type":"Instance"}],"Name":"ConnectionAccepted","tags":[],"Class":"NetworkClient","type":"Event"},{"Arguments":[{"Name":"peer","Type":"string"},{"Name":"code","Type":"int"},{"Name":"reason","Type":"string"}],"Name":"ConnectionFailed","tags":[],"Class":"NetworkClient","type":"Event"},{"Arguments":[{"Name":"peer","Type":"string"}],"Name":"ConnectionRejected","tags":[],"Class":"NetworkClient","type":"Event"},{"Superclass":"NetworkPeer","type":"Class","Name":"NetworkServer","tags":["notCreatable"]},{"ValueType":"int","type":"Property","Name":"Port","tags":["readonly"],"Class":"NetworkServer"},{"ReturnType":"int","Arguments":[],"Name":"GetClientCount","tags":["LocalUserSecurity"],"Class":"NetworkServer","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"NetworkReplicator","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"CloseConnection","tags":["LocalUserSecurity"],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetPlayer","tags":[],"Class":"NetworkReplicator","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"verbosityLevel","Default":"0"}],"Name":"GetRakStatsString","tags":["PluginSecurity"],"Class":"NetworkReplicator","type":"Function"},{"Superclass":"NetworkReplicator","type":"Class","Name":"ClientReplicator","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"request","Default":null}],"Name":"RequestServerStats","tags":["RobloxScriptSecurity"],"Class":"ClientReplicator","type":"Function"},{"Arguments":[{"Name":"stats","Type":"Dictionary"}],"Name":"StatsReceived","tags":["RobloxScriptSecurity"],"Class":"ClientReplicator","type":"Event"},{"Superclass":"NetworkReplicator","type":"Class","Name":"ServerReplicator","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"NetworkSettings","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"ArePhysicsRejectionsReported","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"CanSendPacketBufferLimit","tags":[],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"ClientPhysicsSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"DataGCRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"DataMtuAdjust","tags":[],"Class":"NetworkSettings"},{"ValueType":"PacketPriority","type":"Property","Name":"DataSendPriority","tags":["hidden"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"DataSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"EnableHeavyCompression","tags":["hidden"],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"ExperimentalPhysicsEnabled","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"ExtraMemoryUsed","tags":["PluginSecurity","hidden"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"FreeMemoryMBytes","tags":["PluginSecurity","hidden","readonly"],"Class":"NetworkSettings"},{"ValueType":"double","type":"Property","Name":"IncommingReplicationLag","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"IsQueueErrorComputed","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"IsThrottledByCongestionControl","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"IsThrottledByOutgoingBandwidthLimit","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"MaxDataModelSendBuffer","tags":["deprecated"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"NetworkOwnerRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"PhysicsMtuAdjust","tags":[],"Class":"NetworkSettings"},{"ValueType":"PhysicsReceiveMethod","type":"Property","Name":"PhysicsReceive","tags":[],"Class":"NetworkSettings"},{"ValueType":"PhysicsSendMethod","type":"Property","Name":"PhysicsSend","tags":[],"Class":"NetworkSettings"},{"ValueType":"PacketPriority","type":"Property","Name":"PhysicsSendPriority","tags":["hidden"],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"PhysicsSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"PreferredClientPort","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintBits","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintEvents","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintFilters","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintInstances","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintPhysicsErrors","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintProperties","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintSplitMessage","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintStreamInstanceQuota","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"PrintTouches","tags":[],"Class":"NetworkSettings"},{"ValueType":"double","type":"Property","Name":"ReceiveRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"RenderStreamedRegions","tags":[],"Class":"NetworkSettings"},{"ValueType":"string","type":"Property","Name":"ReportStatURL","tags":["deprecated","hidden"],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"SendPacketBufferLimit","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"ShowActiveAnimationAsset","tags":[],"Class":"NetworkSettings"},{"ValueType":"float","type":"Property","Name":"TouchSendRate","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"TrackDataTypes","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"TrackPhysicsDetails","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"UseInstancePacketCache","tags":[],"Class":"NetworkSettings"},{"ValueType":"bool","type":"Property","Name":"UsePhysicsPacketCache","tags":[],"Class":"NetworkSettings"},{"ValueType":"int","type":"Property","Name":"WaitingForCharacterLogRate","tags":["deprecated","hidden"],"Class":"NetworkSettings"},{"Superclass":"Instance","type":"Class","Name":"NotificationService","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"CancelAllNotification","tags":["LocalUserSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"alertId","Default":null}],"Name":"CancelNotification","tags":["LocalUserSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"alertId","Default":null},{"Type":"string","Name":"alertMsg","Default":null},{"Type":"int","Name":"minutesToFire","Default":null}],"Name":"ScheduleNotification","tags":["LocalUserSecurity"],"Class":"NotificationService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetScheduledNotifications","tags":["LocalUserSecurity"],"Class":"NotificationService","type":"YieldFunction"},{"Arguments":[{"Name":"connectionName","Type":"string"},{"Name":"connectionState","Type":"ConnectionState"},{"Name":"sequenceNumber","Type":"string"}],"Name":"RobloxConnectionChanged","tags":["RobloxScriptSecurity"],"Class":"NotificationService","type":"Event"},{"Arguments":[{"Name":"eventData","Type":"Map"}],"Name":"RobloxEventReceived","tags":["RobloxScriptSecurity"],"Class":"NotificationService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"NumberValue","tags":[]},{"ValueType":"double","type":"Property","Name":"Value","tags":[],"Class":"NumberValue"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"Changed","tags":[],"Class":"NumberValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"double"}],"Name":"changed","tags":["deprecated"],"Class":"NumberValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ObjectValue","tags":[]},{"ValueType":"Object","type":"Property","Name":"Value","tags":[],"Class":"ObjectValue"},{"Arguments":[{"Name":"value","Type":"Instance"}],"Name":"Changed","tags":[],"Class":"ObjectValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"Instance"}],"Name":"changed","tags":["deprecated"],"Class":"ObjectValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"OneQuarterClusterPacketCacheBase","tags":[]},{"Superclass":"Instance","type":"Class","Name":"PVInstance","tags":["notbrowsable"]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CoordinateFrame","tags":["deprecated","writeonly"],"Class":"PVInstance"},{"Superclass":"PVInstance","type":"Class","Name":"BasePart","tags":["notbrowsable"]},{"ValueType":"bool","type":"Property","Name":"Anchored","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BackParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BackParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"BackSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"BackSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BottomParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"BottomParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"BottomSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"BottomSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"BrickColor","type":"Property","Name":"BrickColor","tags":[],"Class":"BasePart"},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"BasePart"},{"ValueType":"bool","type":"Property","Name":"CanCollide","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"CenterOfMass","tags":["readonly"],"Class":"BasePart"},{"ValueType":"int","type":"Property","Name":"CollisionGroupId","tags":[],"Class":"BasePart"},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"BasePart"},{"ValueType":"PhysicalProperties","type":"Property","Name":"CustomPhysicalProperties","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Elasticity","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Friction","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"FrontParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"FrontParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"FrontSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"FrontSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"LeftParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"LeftParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"LeftSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"LeftSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"LocalTransparencyModifier","tags":["hidden"],"Class":"BasePart"},{"ValueType":"bool","type":"Property","Name":"Locked","tags":[],"Class":"BasePart"},{"ValueType":"Material","type":"Property","Name":"Material","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Orientation","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"ReceiveAge","tags":["hidden","readonly"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Reflectance","tags":[],"Class":"BasePart"},{"ValueType":"int","type":"Property","Name":"ResizeIncrement","tags":["readonly"],"Class":"BasePart"},{"ValueType":"Faces","type":"Property","Name":"ResizeableFaces","tags":["readonly"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"RightParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"RightParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"RightSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"RightSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"RotVelocity","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Rotation","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Size","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"SpecificGravity","tags":["deprecated","readonly"],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"TopParamA","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"TopParamB","tags":[],"Class":"BasePart"},{"ValueType":"SurfaceType","type":"Property","Name":"TopSurface","tags":[],"Class":"BasePart"},{"ValueType":"InputType","type":"Property","Name":"TopSurfaceInput","tags":[],"Class":"BasePart"},{"ValueType":"float","type":"Property","Name":"Transparency","tags":[],"Class":"BasePart"},{"ValueType":"Vector3","type":"Property","Name":"Velocity","tags":[],"Class":"BasePart"},{"ValueType":"BrickColor","type":"Property","Name":"brickColor","tags":["deprecated"],"Class":"BasePart"},{"ReturnType":"void","Arguments":[],"Name":"BreakJoints","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Instance","Name":"part","Default":null}],"Name":"CanCollideWith","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"CanSetNetworkOwnership","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"bool","Name":"recursive","Default":"false"}],"Name":"GetConnectedParts","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetJoints","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"GetMass","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetNetworkOwner","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetNetworkOwnershipAuto","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetRenderCFrame","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetRootPart","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetTouchingParts","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsGrounded","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"MakeJoints","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"NormalId","Name":"normalId","Default":null},{"Type":"int","Name":"deltaAmount","Default":null}],"Name":"Resize","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"playerInstance","Default":"nil"}],"Name":"SetNetworkOwner","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetNetworkOwnershipAuto","tags":[],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"breakJoints","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"float","Arguments":[],"Name":"getMass","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"makeJoints","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"NormalId","Name":"normalId","Default":null},{"Type":"int","Name":"deltaAmount","Default":null}],"Name":"resize","tags":["deprecated"],"Class":"BasePart","type":"Function"},{"Arguments":[{"Name":"part","Type":"Instance"}],"Name":"LocalSimulationTouched","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Arguments":[],"Name":"OutfitChanged","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"StoppedTouching","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"TouchEnded","tags":[],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"Touched","tags":[],"Class":"BasePart","type":"Event"},{"Arguments":[{"Name":"otherPart","Type":"Instance"}],"Name":"touched","tags":["deprecated"],"Class":"BasePart","type":"Event"},{"Superclass":"BasePart","type":"Class","Name":"CornerWedgePart","tags":[]},{"Superclass":"BasePart","type":"Class","Name":"FormFactorPart","tags":[]},{"ValueType":"FormFactor","type":"Property","Name":"FormFactor","tags":["deprecated"],"Class":"FormFactorPart"},{"ValueType":"FormFactor","type":"Property","Name":"formFactor","tags":["deprecated","hidden"],"Class":"FormFactorPart"},{"Superclass":"FormFactorPart","type":"Class","Name":"Part","tags":[]},{"ValueType":"PartType","type":"Property","Name":"Shape","tags":[],"Class":"Part"},{"Superclass":"Part","type":"Class","Name":"FlagStand","tags":["deprecated"]},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"FlagStand"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"FlagCaptured","tags":[],"Class":"FlagStand","type":"Event"},{"Superclass":"Part","type":"Class","Name":"Platform","tags":[]},{"Superclass":"Part","type":"Class","Name":"Seat","tags":[]},{"ValueType":"bool","type":"Property","Name":"Disabled","tags":[],"Class":"Seat"},{"ValueType":"Object","type":"Property","Name":"Occupant","tags":["readonly"],"Class":"Seat"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"humanoid","Default":null}],"Name":"Sit","tags":[],"Class":"Seat","type":"Function"},{"Superclass":"Part","type":"Class","Name":"SkateboardPlatform","tags":["deprecated"]},{"ValueType":"Object","type":"Property","Name":"Controller","tags":["readonly"],"Class":"SkateboardPlatform"},{"ValueType":"Object","type":"Property","Name":"ControllingHumanoid","tags":["readonly"],"Class":"SkateboardPlatform"},{"ValueType":"int","type":"Property","Name":"Steer","tags":[],"Class":"SkateboardPlatform"},{"ValueType":"bool","type":"Property","Name":"StickyWheels","tags":[],"Class":"SkateboardPlatform"},{"ValueType":"int","type":"Property","Name":"Throttle","tags":[],"Class":"SkateboardPlatform"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"impulseWorld","Default":null}],"Name":"ApplySpecificImpulse","tags":[],"Class":"SkateboardPlatform","type":"Function"},{"Arguments":[{"Name":"humanoid","Type":"Instance"},{"Name":"skateboardController","Type":"Instance"}],"Name":"Equipped","tags":[],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"newState","Type":"MoveState"},{"Name":"oldState","Type":"MoveState"}],"Name":"MoveStateChanged","tags":[],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"humanoid","Type":"Instance"}],"Name":"Unequipped","tags":[],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"humanoid","Type":"Instance"},{"Name":"skateboardController","Type":"Instance"}],"Name":"equipped","tags":["deprecated"],"Class":"SkateboardPlatform","type":"Event"},{"Arguments":[{"Name":"humanoid","Type":"Instance"}],"Name":"unequipped","tags":["deprecated"],"Class":"SkateboardPlatform","type":"Event"},{"Superclass":"Part","type":"Class","Name":"SpawnLocation","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllowTeamChangeOnTouch","tags":[],"Class":"SpawnLocation"},{"ValueType":"int","type":"Property","Name":"Duration","tags":[],"Class":"SpawnLocation"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"SpawnLocation"},{"ValueType":"bool","type":"Property","Name":"Neutral","tags":[],"Class":"SpawnLocation"},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"SpawnLocation"},{"Superclass":"FormFactorPart","type":"Class","Name":"WedgePart","tags":[]},{"Superclass":"BasePart","type":"Class","Name":"MeshPart","tags":[]},{"ValueType":"Content","type":"Property","Name":"MeshId","tags":["ScriptWriteRestricted: [NotAccessibleSecurity]"],"Class":"MeshPart"},{"ValueType":"Content","type":"Property","Name":"TextureID","tags":[],"Class":"MeshPart"},{"Superclass":"BasePart","type":"Class","Name":"ParallelRampPart","tags":["deprecated","notbrowsable"]},{"Superclass":"BasePart","type":"Class","Name":"PartOperation","tags":[]},{"ValueType":"int","type":"Property","Name":"TriangleCount","tags":["readonly"],"Class":"PartOperation"},{"ValueType":"bool","type":"Property","Name":"UsePartColor","tags":[],"Class":"PartOperation"},{"Superclass":"PartOperation","type":"Class","Name":"NegateOperation","tags":[]},{"Superclass":"PartOperation","type":"Class","Name":"UnionOperation","tags":[]},{"Superclass":"BasePart","type":"Class","Name":"PrismPart","tags":["deprecated","notbrowsable"]},{"ValueType":"PrismSides","type":"Property","Name":"Sides","tags":[],"Class":"PrismPart"},{"Superclass":"BasePart","type":"Class","Name":"PyramidPart","tags":["deprecated","notbrowsable"]},{"ValueType":"PyramidSides","type":"Property","Name":"Sides","tags":[],"Class":"PyramidPart"},{"Superclass":"BasePart","type":"Class","Name":"RightAngleRampPart","tags":["deprecated","notbrowsable"]},{"Superclass":"BasePart","type":"Class","Name":"Terrain","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"IsSmooth","tags":["deprecated","readonly"],"Class":"Terrain"},{"ValueType":"Region3int16","type":"Property","Name":"MaxExtents","tags":["readonly"],"Class":"Terrain"},{"ValueType":"Color3","type":"Property","Name":"WaterColor","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterReflectance","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterTransparency","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterWaveSize","tags":[],"Class":"Terrain"},{"ValueType":"float","type":"Property","Name":"WaterWaveSpeed","tags":[],"Class":"Terrain"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"AutowedgeCell","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3int16","Name":"region","Default":null}],"Name":"AutowedgeCells","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"CellCenterToWorld","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"CellCornerToWorld","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Clear","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ConvertToSmooth","tags":["PluginSecurity","deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Region3int16","Name":"region","Default":null}],"Name":"CopyRegion","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"CountCells","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"center","Default":null},{"Type":"float","Name":"radius","Default":null},{"Type":"Material","Name":"material","Default":null}],"Name":"FillBall","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"cframe","Default":null},{"Type":"Vector3","Name":"size","Default":null},{"Type":"Material","Name":"material","Default":null}],"Name":"FillBlock","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"float","Name":"resolution","Default":null},{"Type":"Material","Name":"material","Default":null}],"Name":"FillRegion","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"GetCell","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"Color3","Arguments":[{"Type":"Material","Name":"material","Default":null}],"Name":"GetMaterialColor","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null}],"Name":"GetWaterCell","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"region","Default":null},{"Type":"Vector3int16","Name":"corner","Default":null},{"Type":"bool","Name":"pasteEmptyCells","Default":null}],"Name":"PasteRegion","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"float","Name":"resolution","Default":null}],"Name":"ReadVoxels","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null},{"Type":"CellMaterial","Name":"material","Default":null},{"Type":"CellBlock","Name":"block","Default":null},{"Type":"CellOrientation","Name":"orientation","Default":null}],"Name":"SetCell","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3int16","Name":"region","Default":null},{"Type":"CellMaterial","Name":"material","Default":null},{"Type":"CellBlock","Name":"block","Default":null},{"Type":"CellOrientation","Name":"orientation","Default":null}],"Name":"SetCells","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Material","Name":"material","Default":null},{"Type":"Color3","Name":"value","Default":null}],"Name":"SetMaterialColor","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"x","Default":null},{"Type":"int","Name":"y","Default":null},{"Type":"int","Name":"z","Default":null},{"Type":"WaterForce","Name":"force","Default":null},{"Type":"WaterDirection","Name":"direction","Default":null}],"Name":"SetWaterCell","tags":["deprecated"],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"WorldToCell","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"WorldToCellPreferEmpty","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"Vector3","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"WorldToCellPreferSolid","tags":[],"Class":"Terrain","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"float","Name":"resolution","Default":null},{"Type":"Array","Name":"materials","Default":null},{"Type":"Array","Name":"occupancy","Default":null}],"Name":"WriteVoxels","tags":[],"Class":"Terrain","type":"Function"},{"Superclass":"BasePart","type":"Class","Name":"TrussPart","tags":[]},{"ValueType":"Style","type":"Property","Name":"Style","tags":[],"Class":"TrussPart"},{"Superclass":"BasePart","type":"Class","Name":"VehicleSeat","tags":[]},{"ValueType":"int","type":"Property","Name":"AreHingesDetected","tags":["readonly"],"Class":"VehicleSeat"},{"ValueType":"bool","type":"Property","Name":"Disabled","tags":[],"Class":"VehicleSeat"},{"ValueType":"bool","type":"Property","Name":"HeadsUpDisplay","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"MaxSpeed","tags":[],"Class":"VehicleSeat"},{"ValueType":"Object","type":"Property","Name":"Occupant","tags":["readonly"],"Class":"VehicleSeat"},{"ValueType":"int","type":"Property","Name":"Steer","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"SteerFloat","tags":[],"Class":"VehicleSeat"},{"ValueType":"int","type":"Property","Name":"Throttle","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"ThrottleFloat","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"Torque","tags":[],"Class":"VehicleSeat"},{"ValueType":"float","type":"Property","Name":"TurnSpeed","tags":[],"Class":"VehicleSeat"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"humanoid","Default":null}],"Name":"Sit","tags":[],"Class":"VehicleSeat","type":"Function"},{"Superclass":"PVInstance","type":"Class","Name":"Model","tags":[]},{"ValueType":"Object","type":"Property","Name":"PrimaryPart","tags":[],"Class":"Model"},{"ReturnType":"void","Arguments":[],"Name":"BreakJoints","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetExtentsSize","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetModelCFrame","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"Vector3","Arguments":[],"Name":"GetModelSize","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[],"Name":"GetPrimaryPartCFrame","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"MakeJoints","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"position","Default":null}],"Name":"MoveTo","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ResetOrientationToIdentity","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetIdentityOrientation","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"cframe","Default":null}],"Name":"SetPrimaryPartCFrame","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"delta","Default":null}],"Name":"TranslateBy","tags":[],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"breakJoints","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"makeJoints","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"location","Default":null}],"Name":"move","tags":["deprecated"],"Class":"Model","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"location","Default":null}],"Name":"moveTo","tags":["deprecated"],"Class":"Model","type":"Function"},{"Superclass":"Model","type":"Class","Name":"RootInstance","tags":["notbrowsable"]},{"Superclass":"RootInstance","type":"Class","Name":"Workspace","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllowThirdPartySales","tags":[],"Class":"Workspace"},{"ValueType":"Object","type":"Property","Name":"CurrentCamera","tags":[],"Class":"Workspace"},{"ValueType":"double","type":"Property","Name":"DistributedGameTime","tags":[],"Class":"Workspace"},{"ValueType":"float","type":"Property","Name":"FallenPartsDestroyHeight","tags":["ScriptWriteRestricted: [PluginSecurity]"],"Class":"Workspace"},{"ValueType":"bool","type":"Property","Name":"FilteringEnabled","tags":["ScriptWriteRestricted: [PluginSecurity]"],"Class":"Workspace"},{"ValueType":"float","type":"Property","Name":"Gravity","tags":[],"Class":"Workspace"},{"ValueType":"bool","type":"Property","Name":"StreamingEnabled","tags":[],"Class":"Workspace"},{"ValueType":"Object","type":"Property","Name":"Terrain","tags":["readonly"],"Class":"Workspace"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"BreakJoints","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"ExperimentalSolverIsEnabled","tags":["LocalUserSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Instance","Name":"ignoreDescendantsInstance","Default":"nil"},{"Type":"bool","Name":"terrainCellsAreCubes","Default":"false"},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"FindPartOnRay","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Objects","Name":"ignoreDescendantsTable","Default":null},{"Type":"bool","Name":"terrainCellsAreCubes","Default":"false"},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"FindPartOnRayWithIgnoreList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Objects","Name":"whitelistDescendantsTable","Default":null},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"FindPartOnRayWithWhitelist","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Instance","Name":"ignoreDescendantsInstance","Default":"nil"},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"FindPartsInRegion3","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Objects","Name":"ignoreDescendantsTable","Default":null},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"FindPartsInRegion3WithIgnoreList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Objects","Name":"whitelistDescendantsTable","Default":null},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"FindPartsInRegion3WithWhiteList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetNumAwakeParts","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetPhysicsAnalyzerBreakOnIssue","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"int","Name":"index","Default":null}],"Name":"GetPhysicsAnalyzerIssue","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetPhysicsThrottling","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"double","Arguments":[],"Name":"GetRealPhysicsFPS","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Instance","Name":"ignoreDescendentsInstance","Default":"nil"}],"Name":"IsRegion3Empty","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Objects","Name":"ignoreDescendentsTable","Default":null}],"Name":"IsRegion3EmptyWithIgnoreList","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null},{"Type":"JointCreationMode","Name":"jointType","Default":null}],"Name":"JoinToOutsiders","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"MakeJoints","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"PGSIsEnabled","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enable","Default":null}],"Name":"SetPhysicsAnalyzerBreakOnIssue","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetPhysicsThrottleEnabled","tags":["LocalUserSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"UnjoinFromOutsiders","tags":[],"Class":"Workspace","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ZoomToExtents","tags":["PluginSecurity"],"Class":"Workspace","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"Ray","Name":"ray","Default":null},{"Type":"Instance","Name":"ignoreDescendantsInstance","Default":"nil"},{"Type":"bool","Name":"terrainCellsAreCubes","Default":"false"},{"Type":"bool","Name":"ignoreWater","Default":"false"}],"Name":"findPartOnRay","tags":["deprecated"],"Class":"Workspace","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Region3","Name":"region","Default":null},{"Type":"Instance","Name":"ignoreDescendantsInstance","Default":"nil"},{"Type":"int","Name":"maxParts","Default":"20"}],"Name":"findPartsInRegion3","tags":["deprecated"],"Class":"Workspace","type":"Function"},{"Arguments":[{"Name":"count","Type":"int"}],"Name":"PhysicsAnalyzerIssuesFound","tags":["PluginSecurity"],"Class":"Workspace","type":"Event"},{"Superclass":"Model","type":"Class","Name":"Status","tags":["deprecated","notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"Pages","tags":[]},{"ValueType":"bool","type":"Property","Name":"IsFinished","tags":["readonly"],"Class":"Pages"},{"ReturnType":"Array","Arguments":[],"Name":"GetCurrentPage","tags":[],"Class":"Pages","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"AdvanceToNextPageAsync","tags":[],"Class":"Pages","type":"YieldFunction"},{"Superclass":"Pages","type":"Class","Name":"DataStorePages","tags":[]},{"Superclass":"Pages","type":"Class","Name":"FriendPages","tags":[]},{"Superclass":"Pages","type":"Class","Name":"InventoryPages","tags":[]},{"Superclass":"Pages","type":"Class","Name":"StandardPages","tags":[]},{"Superclass":"Instance","type":"Class","Name":"PartOperationAsset","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ParticleEmitter","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Acceleration","tags":[],"Class":"ParticleEmitter"},{"ValueType":"ColorSequence","type":"Property","Name":"Color","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"Drag","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NormalId","type":"Property","Name":"EmissionDirection","tags":[],"Class":"ParticleEmitter"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"Lifetime","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"LightEmission","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"LightInfluence","tags":[],"Class":"ParticleEmitter"},{"ValueType":"bool","type":"Property","Name":"LockedToPart","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"Rate","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"RotSpeed","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"Rotation","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberSequence","type":"Property","Name":"Size","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberRange","type":"Property","Name":"Speed","tags":[],"Class":"ParticleEmitter"},{"ValueType":"Vector2","type":"Property","Name":"SpreadAngle","tags":[],"Class":"ParticleEmitter"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"ParticleEmitter"},{"ValueType":"NumberSequence","type":"Property","Name":"Transparency","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"VelocityInheritance","tags":[],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"VelocitySpread","tags":["deprecated"],"Class":"ParticleEmitter"},{"ValueType":"float","type":"Property","Name":"ZOffset","tags":[],"Class":"ParticleEmitter"},{"ReturnType":"void","Arguments":[],"Name":"Clear","tags":[],"Class":"ParticleEmitter","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"particleCount","Default":"16"}],"Name":"Emit","tags":[],"Class":"ParticleEmitter","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Path","tags":[]},{"ValueType":"PathStatus","type":"Property","Name":"Status","tags":["readonly"],"Class":"Path"},{"ReturnType":"Array","Arguments":[],"Name":"GetPointCoordinates","tags":["deprecated"],"Class":"Path","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetWaypoints","tags":[],"Class":"Path","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"start","Default":null}],"Name":"CheckOcclusionAsync","tags":[],"Class":"Path","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"PathWaypoint","tags":[]},{"ValueType":"PathWaypointAction","type":"Property","Name":"Action","tags":["readonly"],"Class":"PathWaypoint"},{"ValueType":"Vector3","type":"Property","Name":"Position","tags":["readonly"],"Class":"PathWaypoint"},{"Superclass":"Instance","type":"Class","Name":"PathfindingService","tags":["notCreatable"]},{"ValueType":"float","type":"Property","Name":"EmptyCutoff","tags":["deprecated"],"Class":"PathfindingService"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"start","Default":null},{"Type":"Vector3","Name":"finish","Default":null},{"Type":"float","Name":"maxDistance","Default":null}],"Name":"ComputeRawPathAsync","tags":["deprecated"],"Class":"PathfindingService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"start","Default":null},{"Type":"Vector3","Name":"finish","Default":null},{"Type":"float","Name":"maxDistance","Default":null}],"Name":"ComputeSmoothPathAsync","tags":["deprecated"],"Class":"PathfindingService","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"Vector3","Name":"start","Default":null},{"Type":"Vector3","Name":"finish","Default":null}],"Name":"FindPathAsync","tags":[],"Class":"PathfindingService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"PersonalServerService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"PhysicsPacketCache","tags":[]},{"Superclass":"Instance","type":"Class","Name":"PhysicsService","tags":[]},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Instance","Name":"part","Default":null}],"Name":"CollisionGroupContainsPart","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name1","Default":null},{"Type":"string","Name":"name2","Default":null},{"Type":"bool","Name":"collidable","Default":null}],"Name":"CollisionGroupSetCollidable","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"name1","Default":null},{"Type":"string","Name":"name2","Default":null}],"Name":"CollisionGroupsAreCollidable","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"CreateCollisionGroup","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"GetCollisionGroupId","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"name","Default":null}],"Name":"GetCollisionGroupName","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetCollisionGroups","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetMaxCollisionGroups","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"RemoveCollisionGroup","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"from","Default":null},{"Type":"string","Name":"to","Default":null}],"Name":"RenameCollisionGroup","tags":[],"Class":"PhysicsService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"part","Default":null},{"Type":"string","Name":"name","Default":null}],"Name":"SetPartCollisionGroup","tags":[],"Class":"PhysicsService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"PhysicsSettings","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllowSleep","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreAnchorsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreAssembliesShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreAwakePartsHighlighted","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreBodyTypesShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreContactIslandsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreContactPointsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreJointCoordinatesShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreMechanismsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreModelCoordsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreOwnersShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"ArePartCoordsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreRegionsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreUnalignedPartsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"AreWorldCoordsShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"DisableCSGv2","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"IsReceiveAgeShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"IsTreeShown","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"ParallelPhysics","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"PhysicsAnalyzerEnabled","tags":["PluginSecurity","readonly"],"Class":"PhysicsSettings"},{"ValueType":"EnviromentalPhysicsThrottle","type":"Property","Name":"PhysicsEnvironmentalThrottle","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"ShowDecompositionGeometry","tags":[],"Class":"PhysicsSettings"},{"ValueType":"double","type":"Property","Name":"ThrottleAdjustTime","tags":[],"Class":"PhysicsSettings"},{"ValueType":"bool","type":"Property","Name":"UseCSGv2","tags":[],"Class":"PhysicsSettings"},{"Superclass":"Instance","type":"Class","Name":"Player","tags":[]},{"ValueType":"int","type":"Property","Name":"AccountAge","tags":["readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"AppearanceDidLoad","tags":["RobloxScriptSecurity","deprecated","readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"AutoJumpEnabled","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"CameraMaxZoomDistance","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"CameraMinZoomDistance","tags":[],"Class":"Player"},{"ValueType":"CameraMode","type":"Property","Name":"CameraMode","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"CanLoadCharacterAppearance","tags":[],"Class":"Player"},{"ValueType":"Object","type":"Property","Name":"Character","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"CharacterAppearance","tags":["deprecated","notbrowsable"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"CharacterAppearanceId","tags":[],"Class":"Player"},{"ValueType":"ChatMode","type":"Property","Name":"ChatMode","tags":["RobloxScriptSecurity","readonly"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"DataComplexity","tags":["deprecated","readonly"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"DataComplexityLimit","tags":["LocalUserSecurity","deprecated"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"DataReady","tags":["deprecated","readonly"],"Class":"Player"},{"ValueType":"DevCameraOcclusionMode","type":"Property","Name":"DevCameraOcclusionMode","tags":[],"Class":"Player"},{"ValueType":"DevComputerCameraMovementMode","type":"Property","Name":"DevComputerCameraMode","tags":[],"Class":"Player"},{"ValueType":"DevComputerMovementMode","type":"Property","Name":"DevComputerMovementMode","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"DevEnableMouseLock","tags":[],"Class":"Player"},{"ValueType":"DevTouchCameraMovementMode","type":"Property","Name":"DevTouchCameraMode","tags":[],"Class":"Player"},{"ValueType":"DevTouchMovementMode","type":"Property","Name":"DevTouchMovementMode","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"DisplayName","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"FollowUserId","tags":["readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"Guest","tags":["RobloxScriptSecurity","readonly"],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"HealthDisplayDistance","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"MaximumSimulationRadius","tags":["LocalUserSecurity"],"Class":"Player"},{"ValueType":"MembershipType","type":"Property","Name":"MembershipType","tags":["readonly"],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"NameDisplayDistance","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"Neutral","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"OsPlatform","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"Object","type":"Property","Name":"ReplicationFocus","tags":[],"Class":"Player"},{"ValueType":"Object","type":"Property","Name":"RespawnLocation","tags":[],"Class":"Player"},{"ValueType":"float","type":"Property","Name":"SimulationRadius","tags":["LocalUserSecurity"],"Class":"Player"},{"ValueType":"Object","type":"Property","Name":"Team","tags":[],"Class":"Player"},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"Teleported","tags":["RobloxScriptSecurity","hidden","readonly"],"Class":"Player"},{"ValueType":"bool","type":"Property","Name":"TeleportedIn","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"UserId","tags":[],"Class":"Player"},{"ValueType":"string","type":"Property","Name":"VRDevice","tags":["RobloxScriptSecurity"],"Class":"Player"},{"ValueType":"int","type":"Property","Name":"userId","tags":["deprecated"],"Class":"Player"},{"ReturnType":"void","Arguments":[],"Name":"ClearCharacterAppearance","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"float","Arguments":[{"Type":"Vector3","Name":"point","Default":null}],"Name":"DistanceFromCharacter","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"FriendStatus","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"GetFriendStatus","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetGameSessionID","tags":["RobloxSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetMouse","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetUnder13","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"HasAppearanceLoaded","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsUserAvailableForExperiment","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"JumpCharacter","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":""}],"Name":"Kick","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadBoolean","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"assetInstance","Default":null}],"Name":"LoadCharacterAppearance","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"LoadData","tags":["LocalUserSecurity","deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadInstance","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadNumber","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"LoadString","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector3","Name":"walkDirection","Default":null},{"Type":"bool","Name":"relativeToCamera","Default":"false"}],"Name":"Move","tags":[],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"walkDirection","Default":null},{"Type":"float","Name":"maxWalkDelta","Default":null}],"Name":"MoveCharacter","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RemoveCharacter","tags":["LocalUserSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"RequestFriendship","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null}],"Name":"RevokeFriendship","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"bool","Name":"value","Default":null}],"Name":"SaveBoolean","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SaveData","tags":["LocalUserSecurity","deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Instance","Name":"value","Default":null}],"Name":"SaveInstance","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"double","Name":"value","Default":null}],"Name":"SaveNumber","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"value","Default":null}],"Name":"SaveString","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"accountAge","Default":null}],"Name":"SetAccountAge","tags":["PluginSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"MembershipType","Name":"membershipType","Default":null}],"Name":"SetMembershipType","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetSuperSafeChat","tags":["PluginSecurity"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"value","Default":null}],"Name":"SetUnder13","tags":["RobloxSecurity","deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadBoolean","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadInstance","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadNumber","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"loadString","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"bool","Name":"value","Default":null}],"Name":"saveBoolean","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Instance","Name":"value","Default":null}],"Name":"saveInstance","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"double","Name":"value","Default":null}],"Name":"saveNumber","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"string","Name":"value","Default":null}],"Name":"saveString","tags":["deprecated"],"Class":"Player","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"int","Name":"maxFriends","Default":"200"}],"Name":"GetFriendsOnline","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"GetRankInGroup","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"GetRoleInGroup","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"IsBestFriendsWith","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"IsFriendsWith","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"groupId","Default":null}],"Name":"IsInGroup","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"void","Arguments":[],"Name":"LoadCharacter","tags":[],"Class":"Player","type":"YieldFunction"},{"ReturnType":"void","Arguments":[],"Name":"LoadCharacterBlocking","tags":["LocalUserSecurity"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[],"Name":"WaitForDataReady","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"isFriendsWith","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[],"Name":"waitForDataReady","tags":["deprecated"],"Class":"Player","type":"YieldFunction"},{"Arguments":[{"Name":"character","Type":"Instance"}],"Name":"CharacterAdded","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"character","Type":"Instance"}],"Name":"CharacterAppearanceLoaded","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"character","Type":"Instance"}],"Name":"CharacterRemoving","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"recipient","Type":"Instance"}],"Name":"Chatted","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"friendStatus","Type":"FriendStatus"}],"Name":"FriendStatusChanged","tags":["RobloxScriptSecurity"],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"time","Type":"double"}],"Name":"Idled","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"teleportState","Type":"TeleportState"},{"Name":"placeId","Type":"int"},{"Name":"spawnName","Type":"string"}],"Name":"OnTeleport","tags":[],"Class":"Player","type":"Event"},{"Arguments":[{"Name":"radius","Type":"float"}],"Name":"SimulationRadiusChanged","tags":["LocalUserSecurity"],"Class":"Player","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"PlayerScripts","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[],"Name":"ClearComputerCameraMovementModes","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ClearComputerMovementModes","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ClearTouchCameraMovementModes","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ClearTouchMovementModes","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetRegisteredComputerCameraMovementModes","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetRegisteredComputerMovementModes","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetRegisteredTouchCameraMovementModes","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetRegisteredTouchMovementModes","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ComputerCameraMovementMode","Name":"cameraMovementMode","Default":null}],"Name":"RegisterComputerCameraMovementMode","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ComputerMovementMode","Name":"movementMode","Default":null}],"Name":"RegisterComputerMovementMode","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"TouchCameraMovementMode","Name":"cameraMovementMode","Default":null}],"Name":"RegisterTouchCameraMovementMode","tags":[],"Class":"PlayerScripts","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"TouchMovementMode","Name":"movementMode","Default":null}],"Name":"RegisterTouchMovementMode","tags":[],"Class":"PlayerScripts","type":"Function"},{"Arguments":[],"Name":"ComputerCameraMovementModeRegistered","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Event"},{"Arguments":[],"Name":"ComputerMovementModeRegistered","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Event"},{"Arguments":[],"Name":"TouchCameraMovementModeRegistered","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Event"},{"Arguments":[],"Name":"TouchMovementModeRegistered","tags":["RobloxScriptSecurity"],"Class":"PlayerScripts","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Players","tags":[]},{"ValueType":"bool","type":"Property","Name":"BubbleChat","tags":["readonly"],"Class":"Players"},{"ValueType":"bool","type":"Property","Name":"CharacterAutoLoads","tags":[],"Class":"Players"},{"ValueType":"bool","type":"Property","Name":"ClassicChat","tags":["readonly"],"Class":"Players"},{"ValueType":"Object","type":"Property","Name":"LocalPlayer","tags":["readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"MaxPlayers","tags":["readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"MaxPlayersInternal","tags":["LocalUserSecurity"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"NumPlayers","tags":["deprecated","readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"PreferredPlayers","tags":["readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"PreferredPlayersInternal","tags":["LocalUserSecurity"],"Class":"Players"},{"ValueType":"Object","type":"Property","Name":"localPlayer","tags":["deprecated","hidden","readonly"],"Class":"Players"},{"ValueType":"int","type":"Property","Name":"numPlayers","tags":["deprecated","hidden","readonly"],"Class":"Players"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":null}],"Name":"Chat","tags":["PluginSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"CreateLocalPlayer","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetPlayerByUserId","tags":[],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"character","Default":null}],"Name":"GetPlayerFromCharacter","tags":[],"Class":"Players","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetPlayers","tags":[],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"string","Name":"reason","Default":null},{"Type":"string","Name":"optionalMessage","Default":null}],"Name":"ReportAbuse","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ChatStyle","Name":"style","Default":"Classic"}],"Name":"SetChatStyle","tags":["PluginSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":null}],"Name":"TeamChat","tags":["PluginSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"message","Default":null},{"Type":"Instance","Name":"player","Default":null}],"Name":"WhisperChat","tags":["LocalUserSecurity"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"character","Default":null}],"Name":"getPlayerFromCharacter","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"getPlayers","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"character","Default":null}],"Name":"playerFromCharacter","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"players","tags":["deprecated"],"Class":"Players","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetCharacterAppearanceAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetCharacterAppearanceInfoAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetFriendsAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetNameFromUserIdAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"string","Name":"userName","Default":null}],"Name":"GetUserIdFromNameAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"ThumbnailType","Name":"thumbnailType","Default":null},{"Type":"ThumbnailSize","Name":"thumbnailSize","Default":null}],"Name":"GetUserThumbnailAsync","tags":[],"Class":"Players","type":"YieldFunction"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"player","Type":"Instance"},{"Name":"friendRequestEvent","Type":"FriendRequestEvent"}],"Name":"FriendRequestEvent","tags":["RobloxScriptSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"message","Type":"string"}],"Name":"GameAnnounce","tags":["RobloxScriptSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerAdded","tags":[],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"chatType","Type":"PlayerChatType"},{"Name":"player","Type":"Instance"},{"Name":"message","Type":"string"},{"Name":"targetPlayer","Type":"Instance"}],"Name":"PlayerChatted","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerConnecting","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerDisconnecting","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerRejoining","tags":["LocalUserSecurity"],"Class":"Players","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerRemoving","tags":[],"Class":"Players","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Plugin","tags":[]},{"ValueType":"bool","type":"Property","Name":"CollisionEnabled","tags":["readonly"],"Class":"Plugin"},{"ValueType":"float","type":"Property","Name":"GridSize","tags":["readonly"],"Class":"Plugin"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"exclusiveMouse","Default":null}],"Name":"Activate","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"CreateToolbar","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"JointCreationMode","Arguments":[],"Name":"GetJoinMode","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetMouse","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"RibbonTool","Arguments":[],"Name":"GetSelectedRibbonTool","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"GetSetting","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"int","Arguments":[],"Name":"GetStudioUserId","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"rigModel","Default":null}],"Name":"ImportFbxAnimation","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"Negate","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"script","Default":null},{"Type":"int","Name":"lineNumber","Default":"1"}],"Name":"OpenScript","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"url","Default":null}],"Name":"OpenWikiPage","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SaveSelectedToRoblox","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"RibbonTool","Name":"tool","Default":null},{"Type":"UDim2","Name":"position","Default":null}],"Name":"SelectRibbonTool","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Objects","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"Separate","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetSetting","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"Objects","Name":"objects","Default":null}],"Name":"Union","tags":["PluginSecurity"],"Class":"Plugin","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"ImportFbxRig","tags":["PluginSecurity"],"Class":"Plugin","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"string","Name":"assetType","Default":null}],"Name":"PromptForExistingAssetId","tags":["PluginSecurity"],"Class":"Plugin","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"suggestedFileName","Default":""}],"Name":"PromptSaveSelection","tags":["PluginSecurity"],"Class":"Plugin","type":"YieldFunction"},{"Arguments":[],"Name":"Deactivation","tags":["PluginSecurity"],"Class":"Plugin","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"PluginManager","tags":[]},{"ReturnType":"Instance","Arguments":[],"Name":"CreatePlugin","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"EndUntranslatedStringCollect","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"filePath","Default":""}],"Name":"ExportPlace","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"filePath","Default":""}],"Name":"ExportSelection","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StartUntranslatedStringCollect","tags":["PluginSecurity"],"Class":"PluginManager","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"PointsService","tags":["notCreatable"]},{"ReturnType":"int","Arguments":[],"Name":"GetAwardablePoints","tags":["deprecated"],"Class":"PointsService","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"userId","Default":null},{"Type":"int","Name":"amount","Default":null}],"Name":"AwardPoints","tags":[],"Class":"PointsService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetGamePointBalance","tags":[],"Class":"PointsService","type":"YieldFunction"},{"ReturnType":"int","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetPointBalance","tags":["deprecated"],"Class":"PointsService","type":"YieldFunction"},{"Arguments":[{"Name":"userId","Type":"int"},{"Name":"pointsAwarded","Type":"int"},{"Name":"userBalanceInGame","Type":"int"},{"Name":"userTotalBalance","Type":"int"}],"Name":"PointsAwarded","tags":[],"Class":"PointsService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Pose","tags":[]},{"ValueType":"CoordinateFrame","type":"Property","Name":"CFrame","tags":[],"Class":"Pose"},{"ValueType":"PoseEasingDirection","type":"Property","Name":"EasingDirection","tags":[],"Class":"Pose"},{"ValueType":"PoseEasingStyle","type":"Property","Name":"EasingStyle","tags":[],"Class":"Pose"},{"ValueType":"float","type":"Property","Name":"MaskWeight","tags":["deprecated"],"Class":"Pose"},{"ValueType":"float","type":"Property","Name":"Weight","tags":[],"Class":"Pose"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"AddSubPose","tags":[],"Class":"Pose","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetSubPoses","tags":[],"Class":"Pose","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"pose","Default":null}],"Name":"RemoveSubPose","tags":[],"Class":"Pose","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"PostEffect","tags":[]},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"PostEffect"},{"Superclass":"PostEffect","type":"Class","Name":"BloomEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Intensity","tags":[],"Class":"BloomEffect"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"BloomEffect"},{"ValueType":"float","type":"Property","Name":"Threshold","tags":[],"Class":"BloomEffect"},{"Superclass":"PostEffect","type":"Class","Name":"BlurEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"BlurEffect"},{"Superclass":"PostEffect","type":"Class","Name":"ColorCorrectionEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Brightness","tags":[],"Class":"ColorCorrectionEffect"},{"ValueType":"float","type":"Property","Name":"Contrast","tags":[],"Class":"ColorCorrectionEffect"},{"ValueType":"float","type":"Property","Name":"Saturation","tags":[],"Class":"ColorCorrectionEffect"},{"ValueType":"Color3","type":"Property","Name":"TintColor","tags":[],"Class":"ColorCorrectionEffect"},{"Superclass":"PostEffect","type":"Class","Name":"SunRaysEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Intensity","tags":[],"Class":"SunRaysEffect"},{"ValueType":"float","type":"Property","Name":"Spread","tags":[],"Class":"SunRaysEffect"},{"Superclass":"Instance","type":"Class","Name":"RayValue","tags":[]},{"ValueType":"Ray","type":"Property","Name":"Value","tags":[],"Class":"RayValue"},{"Arguments":[{"Name":"value","Type":"Ray"}],"Name":"Changed","tags":[],"Class":"RayValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"Ray"}],"Name":"changed","tags":["deprecated"],"Class":"RayValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadata","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataCallbacks","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataClasses","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataEnums","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataEvents","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataFunctions","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataItem","tags":[]},{"ValueType":"bool","type":"Property","Name":"Browsable","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"string","type":"Property","Name":"ClassCategory","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"bool","type":"Property","Name":"Deprecated","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"bool","type":"Property","Name":"EditingDisabled","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"bool","type":"Property","Name":"IsBackend","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"double","type":"Property","Name":"UIMaximum","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"double","type":"Property","Name":"UIMinimum","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"double","type":"Property","Name":"UINumTicks","tags":[],"Class":"ReflectionMetadataItem"},{"ValueType":"string","type":"Property","Name":"summary","tags":[],"Class":"ReflectionMetadataItem"},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataClass","tags":[]},{"ValueType":"int","type":"Property","Name":"ExplorerImageIndex","tags":[],"Class":"ReflectionMetadataClass"},{"ValueType":"int","type":"Property","Name":"ExplorerOrder","tags":[],"Class":"ReflectionMetadataClass"},{"ValueType":"bool","type":"Property","Name":"Insertable","tags":[],"Class":"ReflectionMetadataClass"},{"ValueType":"string","type":"Property","Name":"PreferredParent","tags":[],"Class":"ReflectionMetadataClass"},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataEnum","tags":[]},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataEnumItem","tags":[]},{"Superclass":"ReflectionMetadataItem","type":"Class","Name":"ReflectionMetadataMember","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataProperties","tags":[]},{"Superclass":"Instance","type":"Class","Name":"ReflectionMetadataYieldFunctions","tags":[]},{"Superclass":"Instance","type":"Class","Name":"RemoteEvent","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"FireAllClients","tags":[],"Class":"RemoteEvent","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"FireClient","tags":[],"Class":"RemoteEvent","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"FireServer","tags":[],"Class":"RemoteEvent","type":"Function"},{"Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"OnClientEvent","tags":[],"Class":"RemoteEvent","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"},{"Name":"arguments","Type":"Tuple"}],"Name":"OnServerEvent","tags":[],"Class":"RemoteEvent","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"RemoteFunction","tags":[]},{"ReturnType":"Tuple","Arguments":[{"Type":"Instance","Name":"player","Default":null},{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"InvokeClient","tags":[],"Class":"RemoteFunction","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Type":"Tuple","Name":"arguments","Default":null}],"Name":"InvokeServer","tags":[],"Class":"RemoteFunction","type":"YieldFunction"},{"ReturnType":"Tuple","Arguments":[{"Name":"arguments","Type":"Tuple"}],"Name":"OnClientInvoke","tags":[],"Class":"RemoteFunction","type":"Callback"},{"ReturnType":"Tuple","Arguments":[{"Name":"player","Type":"Instance"},{"Name":"arguments","Type":"Tuple"}],"Name":"OnServerInvoke","tags":[],"Class":"RemoteFunction","type":"Callback"},{"Superclass":"Instance","type":"Class","Name":"RenderSettings","tags":["notbrowsable"]},{"ValueType":"int","type":"Property","Name":"AutoFRMLevel","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"EagerBulkExecution","tags":[],"Class":"RenderSettings"},{"ValueType":"QualityLevel","type":"Property","Name":"EditQualityLevel","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"EnableFRM","tags":["hidden"],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"ExportMergeByMaterial","tags":[],"Class":"RenderSettings"},{"ValueType":"FramerateManagerMode","type":"Property","Name":"FrameRateManager","tags":[],"Class":"RenderSettings"},{"ValueType":"GraphicsMode","type":"Property","Name":"GraphicsMode","tags":[],"Class":"RenderSettings"},{"ValueType":"int","type":"Property","Name":"MeshCacheSize","tags":[],"Class":"RenderSettings"},{"ValueType":"QualityLevel","type":"Property","Name":"QualityLevel","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"ReloadAssets","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"RenderCSGTrianglesDebug","tags":[],"Class":"RenderSettings"},{"ValueType":"Resolution","type":"Property","Name":"Resolution","tags":[],"Class":"RenderSettings"},{"ValueType":"bool","type":"Property","Name":"ShowBoundingBoxes","tags":[],"Class":"RenderSettings"},{"ReturnType":"int","Arguments":[],"Name":"GetMaxQualityLevel","tags":[],"Class":"RenderSettings","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"ReplicatedFirst","tags":["notCreatable"]},{"ReturnType":"bool","Arguments":[],"Name":"IsDefaultLoadingGuiRemoved","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsFinishedReplicating","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RemoveDefaultLoadingScreen","tags":[],"Class":"ReplicatedFirst","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetDefaultLoadingGuiRemoved","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Function"},{"Arguments":[],"Name":"DefaultLoadingGuiRemoved","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Event"},{"Arguments":[],"Name":"FinishedReplicating","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Event"},{"Arguments":[],"Name":"RemoveDefaultLoadingGuiSignal","tags":["RobloxScriptSecurity"],"Class":"ReplicatedFirst","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ReplicatedStorage","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"RobloxReplicatedStorage","tags":["notCreatable","notbrowsable"]},{"Superclass":"Instance","type":"Class","Name":"RunService","tags":[]},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"int","Name":"priority","Default":null},{"Type":"Function","Name":"function","Default":null}],"Name":"BindToRenderStep","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetRobloxVersion","tags":["RobloxScriptSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsClient","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsRunMode","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsRunning","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsServer","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsStudio","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Pause","tags":["PluginSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Reset","tags":["PluginSecurity","deprecated"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Run","tags":["PluginSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enable","Default":null}],"Name":"Set3dRenderingEnabled","tags":["RobloxScriptSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Stop","tags":["PluginSecurity"],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"UnbindFromRenderStep","tags":[],"Class":"RunService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"enable","Default":null}],"Name":"setThrottleFramerateEnabled","tags":["RobloxScriptSecurity"],"Class":"RunService","type":"Function"},{"Arguments":[{"Name":"step","Type":"double"}],"Name":"Heartbeat","tags":[],"Class":"RunService","type":"Event"},{"Arguments":[{"Name":"step","Type":"double"}],"Name":"RenderStepped","tags":[],"Class":"RunService","type":"Event"},{"Arguments":[{"Name":"time","Type":"double"},{"Name":"step","Type":"double"}],"Name":"Stepped","tags":[],"Class":"RunService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"RuntimeScriptService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"ScriptContext","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"ScriptsDisabled","tags":["LocalUserSecurity"],"Class":"ScriptContext"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Instance","Name":"parent","Default":null}],"Name":"AddCoreScriptLocal","tags":["RobloxScriptSecurity"],"Class":"ScriptContext","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"double","Name":"seconds","Default":null}],"Name":"SetTimeout","tags":["PluginSecurity"],"Class":"ScriptContext","type":"Function"},{"Arguments":[{"Name":"message","Type":"string"},{"Name":"stackTrace","Type":"string"},{"Name":"script","Type":"Instance"}],"Name":"Error","tags":[],"Class":"ScriptContext","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ScriptDebugger","tags":["notCreatable"]},{"ValueType":"int","type":"Property","Name":"CurrentLine","tags":["readonly"],"Class":"ScriptDebugger"},{"ValueType":"bool","type":"Property","Name":"IsDebugging","tags":["readonly"],"Class":"ScriptDebugger"},{"ValueType":"bool","type":"Property","Name":"IsPaused","tags":["readonly"],"Class":"ScriptDebugger"},{"ValueType":"Object","type":"Property","Name":"Script","tags":["readonly"],"Class":"ScriptDebugger"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"expression","Default":null}],"Name":"AddWatch","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetBreakpoints","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Map","Arguments":[],"Name":"GetGlobals","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Map","Arguments":[{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"GetLocals","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetStack","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Map","Arguments":[{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"GetUpvalues","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"Instance","Name":"watch","Default":null}],"Name":"GetWatchValue","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Objects","Arguments":[],"Name":"GetWatches","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Resume","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"int","Name":"line","Default":null}],"Name":"SetBreakpoint","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetGlobal","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Variant","Name":"value","Default":null},{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"SetLocal","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"name","Default":null},{"Type":"Variant","Name":"value","Default":null},{"Type":"int","Name":"stackFrame","Default":"0"}],"Name":"SetUpvalue","tags":[],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepIn","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOut","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StepOver","tags":["deprecated"],"Class":"ScriptDebugger","type":"Function"},{"Arguments":[{"Name":"breakpoint","Type":"Instance"}],"Name":"BreakpointAdded","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"breakpoint","Type":"Instance"}],"Name":"BreakpointRemoved","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"line","Type":"int"}],"Name":"EncounteredBreak","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[],"Name":"Resuming","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"watch","Type":"Instance"}],"Name":"WatchAdded","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Arguments":[{"Name":"watch","Type":"Instance"}],"Name":"WatchRemoved","tags":[],"Class":"ScriptDebugger","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ScriptService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Selection","tags":[]},{"ReturnType":"Objects","Arguments":[],"Name":"Get","tags":["PluginSecurity"],"Class":"Selection","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Objects","Name":"selection","Default":null}],"Name":"Set","tags":["PluginSecurity"],"Class":"Selection","type":"Function"},{"Arguments":[],"Name":"SelectionChanged","tags":[],"Class":"Selection","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"ServerScriptService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"ServerStorage","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"ServiceProvider","tags":["notbrowsable"]},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"FindService","tags":[],"Class":"ServiceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"GetService","tags":[],"Class":"ServiceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"getService","tags":["deprecated"],"Class":"ServiceProvider","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"className","Default":null}],"Name":"service","tags":["deprecated"],"Class":"ServiceProvider","type":"Function"},{"Arguments":[],"Name":"Close","tags":[],"Class":"ServiceProvider","type":"Event"},{"Arguments":[],"Name":"CloseLate","tags":["LocalUserSecurity"],"Class":"ServiceProvider","type":"Event"},{"Arguments":[{"Name":"service","Type":"Instance"}],"Name":"ServiceAdded","tags":[],"Class":"ServiceProvider","type":"Event"},{"Arguments":[{"Name":"service","Type":"Instance"}],"Name":"ServiceRemoving","tags":[],"Class":"ServiceProvider","type":"Event"},{"Superclass":"ServiceProvider","type":"Class","Name":"DataModel","tags":[]},{"ValueType":"int","type":"Property","Name":"CreatorId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"CreatorType","type":"Property","Name":"CreatorType","tags":["readonly"],"Class":"DataModel"},{"ValueType":"int","type":"Property","Name":"GameId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"GearGenreSetting","type":"Property","Name":"GearGenreSetting","tags":["readonly"],"Class":"DataModel"},{"ValueType":"Genre","type":"Property","Name":"Genre","tags":["readonly"],"Class":"DataModel"},{"ValueType":"bool","type":"Property","Name":"IsSFFlagsLoaded","tags":["RobloxScriptSecurity","readonly"],"Class":"DataModel"},{"ValueType":"string","type":"Property","Name":"JobId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"int64","type":"Property","Name":"PlaceId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"int","type":"Property","Name":"PlaceVersion","tags":["readonly"],"Class":"DataModel"},{"ValueType":"string","type":"Property","Name":"VIPServerId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"int","type":"Property","Name":"VIPServerOwnerId","tags":["readonly"],"Class":"DataModel"},{"ValueType":"Object","type":"Property","Name":"Workspace","tags":["readonly"],"Class":"DataModel"},{"ValueType":"Object","type":"Property","Name":"lighting","tags":["deprecated","readonly"],"Class":"DataModel"},{"ValueType":"Object","type":"Property","Name":"workspace","tags":["deprecated","readonly"],"Class":"DataModel"},{"ReturnType":"void","Arguments":[{"Type":"Function","Name":"function","Default":null}],"Name":"BindToClose","tags":[],"Class":"DataModel","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"jobname","Default":null},{"Type":"double","Name":"greaterThan","Default":null}],"Name":"GetJobIntervalPeakFraction","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"double","Arguments":[{"Type":"string","Name":"jobname","Default":null},{"Type":"double","Name":"greaterThan","Default":null}],"Name":"GetJobTimePeakFraction","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetJobsExtendedStats","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetJobsInfo","tags":["PluginSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetMessage","tags":["deprecated"],"Class":"DataModel","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"GetRemoteBuildMode","tags":["deprecated"],"Class":"DataModel","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"bool","Name":"synchronous","Default":"false"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"HttpGet","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"bool","Name":"synchronous","Default":"false"},{"Type":"string","Name":"contentType","Default":"*/*"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"HttpPost","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"GearType","Name":"gearType","Default":null}],"Name":"IsGearTypeAllowed","tags":[],"Class":"DataModel","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"IsLoaded","tags":[],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Content","Name":"url","Default":null}],"Name":"Load","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"OpenScreenshotsFolder","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"OpenVideosFolder","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"category","Default":null},{"Type":"string","Name":"action","Default":"custom"},{"Type":"string","Name":"label","Default":"none"},{"Type":"int","Name":"value","Default":"0"}],"Name":"ReportInGoogleAnalytics","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Shutdown","tags":["LocalUserSecurity"],"Class":"DataModel","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"HttpGetAsync","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"url","Default":null},{"Type":"string","Name":"data","Default":null},{"Type":"string","Name":"contentType","Default":"*/*"},{"Type":"HttpRequestType","Name":"httpRequestType","Default":"Default"},{"Type":"bool","Name":"doNotAllowDiabolicalMode","Default":"false"}],"Name":"HttpPostAsync","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"YieldFunction"},{"ReturnType":"bool","Arguments":[{"Type":"SaveFilter","Name":"saveFilter","Default":"SaveAll"}],"Name":"SavePlace","tags":["deprecated"],"Class":"DataModel","type":"YieldFunction"},{"Arguments":[],"Name":"AllowedGearTypeChanged","tags":["deprecated"],"Class":"DataModel","type":"Event"},{"Arguments":[{"Name":"betterQuality","Type":"bool"}],"Name":"GraphicsQualityChangeRequest","tags":[],"Class":"DataModel","type":"Event"},{"Arguments":[{"Name":"object","Type":"Instance"},{"Name":"descriptor","Type":"Property"}],"Name":"ItemChanged","tags":["deprecated"],"Class":"DataModel","type":"Event"},{"Arguments":[],"Name":"Loaded","tags":[],"Class":"DataModel","type":"Event"},{"Arguments":[{"Name":"path","Type":"string"}],"Name":"ScreenshotReady","tags":["RobloxScriptSecurity"],"Class":"DataModel","type":"Event"},{"ReturnType":"Tuple","Arguments":[],"Name":"OnClose","tags":["deprecated"],"Class":"DataModel","type":"Callback"},{"Superclass":"ServiceProvider","type":"Class","Name":"GenericSettings","tags":[]},{"Superclass":"GenericSettings","type":"Class","Name":"AnalysticsSettings","tags":[]},{"Superclass":"GenericSettings","type":"Class","Name":"GlobalSettings","tags":["notbrowsable"]},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"GetFFlag","tags":[],"Class":"GlobalSettings","type":"Function"},{"ReturnType":"string","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"GetFVariable","tags":[],"Class":"GlobalSettings","type":"Function"},{"Superclass":"GenericSettings","type":"Class","Name":"UserSettings","tags":[]},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"name","Default":null}],"Name":"IsUserFeatureEnabled","tags":[],"Class":"UserSettings","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Reset","tags":[],"Class":"UserSettings","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Sky","tags":[]},{"ValueType":"bool","type":"Property","Name":"CelestialBodiesShown","tags":[],"Class":"Sky"},{"ValueType":"float","type":"Property","Name":"MoonAngularSize","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"MoonTextureId","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxBk","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxDn","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxFt","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxLf","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxRt","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SkyboxUp","tags":[],"Class":"Sky"},{"ValueType":"int","type":"Property","Name":"StarCount","tags":[],"Class":"Sky"},{"ValueType":"float","type":"Property","Name":"SunAngularSize","tags":[],"Class":"Sky"},{"ValueType":"Content","type":"Property","Name":"SunTextureId","tags":[],"Class":"Sky"},{"Superclass":"Instance","type":"Class","Name":"Smoke","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color","tags":[],"Class":"Smoke"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Smoke"},{"ValueType":"float","type":"Property","Name":"Opacity","tags":[],"Class":"Smoke"},{"ValueType":"float","type":"Property","Name":"RiseVelocity","tags":[],"Class":"Smoke"},{"ValueType":"float","type":"Property","Name":"Size","tags":[],"Class":"Smoke"},{"Superclass":"Instance","type":"Class","Name":"Sound","tags":[]},{"ValueType":"float","type":"Property","Name":"EmitterSize","tags":[],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"IsLoaded","tags":["readonly"],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"IsPaused","tags":["readonly"],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"IsPlaying","tags":["readonly"],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"Looped","tags":[],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"MaxDistance","tags":[],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"MinDistance","tags":["deprecated"],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"Pitch","tags":["deprecated"],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"PlayOnRemove","tags":[],"Class":"Sound"},{"ValueType":"double","type":"Property","Name":"PlaybackLoudness","tags":["readonly"],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"PlaybackSpeed","tags":[],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"Playing","tags":[],"Class":"Sound"},{"ValueType":"RollOffMode","type":"Property","Name":"RollOffMode","tags":[],"Class":"Sound"},{"ValueType":"Object","type":"Property","Name":"SoundGroup","tags":[],"Class":"Sound"},{"ValueType":"Content","type":"Property","Name":"SoundId","tags":[],"Class":"Sound"},{"ValueType":"double","type":"Property","Name":"TimeLength","tags":["readonly"],"Class":"Sound"},{"ValueType":"double","type":"Property","Name":"TimePosition","tags":[],"Class":"Sound"},{"ValueType":"float","type":"Property","Name":"Volume","tags":[],"Class":"Sound"},{"ValueType":"bool","type":"Property","Name":"isPlaying","tags":["deprecated","readonly"],"Class":"Sound"},{"ReturnType":"void","Arguments":[],"Name":"Pause","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Play","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Resume","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Stop","tags":[],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"pause","tags":["deprecated"],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"play","tags":["deprecated"],"Class":"Sound","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"stop","tags":["deprecated"],"Class":"Sound","type":"Function"},{"Arguments":[{"Name":"soundId","Type":"string"},{"Name":"numOfTimesLooped","Type":"int"}],"Name":"DidLoop","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Ended","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Loaded","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Paused","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Played","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Resumed","tags":[],"Class":"Sound","type":"Event"},{"Arguments":[{"Name":"soundId","Type":"string"}],"Name":"Stopped","tags":[],"Class":"Sound","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"SoundEffect","tags":[]},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"SoundEffect"},{"ValueType":"int","type":"Property","Name":"Priority","tags":[],"Class":"SoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"ChorusSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Depth","tags":[],"Class":"ChorusSoundEffect"},{"ValueType":"float","type":"Property","Name":"Mix","tags":[],"Class":"ChorusSoundEffect"},{"ValueType":"float","type":"Property","Name":"Rate","tags":[],"Class":"ChorusSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"CompressorSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Attack","tags":[],"Class":"CompressorSoundEffect"},{"ValueType":"float","type":"Property","Name":"GainMakeup","tags":[],"Class":"CompressorSoundEffect"},{"ValueType":"float","type":"Property","Name":"Ratio","tags":[],"Class":"CompressorSoundEffect"},{"ValueType":"float","type":"Property","Name":"Release","tags":[],"Class":"CompressorSoundEffect"},{"ValueType":"Object","type":"Property","Name":"SideChain","tags":[],"Class":"CompressorSoundEffect"},{"ValueType":"float","type":"Property","Name":"Threshold","tags":[],"Class":"CompressorSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"DistortionSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Level","tags":[],"Class":"DistortionSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"EchoSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Delay","tags":[],"Class":"EchoSoundEffect"},{"ValueType":"float","type":"Property","Name":"DryLevel","tags":[],"Class":"EchoSoundEffect"},{"ValueType":"float","type":"Property","Name":"Feedback","tags":[],"Class":"EchoSoundEffect"},{"ValueType":"float","type":"Property","Name":"WetLevel","tags":[],"Class":"EchoSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"EqualizerSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"HighGain","tags":[],"Class":"EqualizerSoundEffect"},{"ValueType":"float","type":"Property","Name":"LowGain","tags":[],"Class":"EqualizerSoundEffect"},{"ValueType":"float","type":"Property","Name":"MidGain","tags":[],"Class":"EqualizerSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"FlangeSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Depth","tags":[],"Class":"FlangeSoundEffect"},{"ValueType":"float","type":"Property","Name":"Mix","tags":[],"Class":"FlangeSoundEffect"},{"ValueType":"float","type":"Property","Name":"Rate","tags":[],"Class":"FlangeSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"PitchShiftSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Octave","tags":[],"Class":"PitchShiftSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"ReverbSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"DecayTime","tags":[],"Class":"ReverbSoundEffect"},{"ValueType":"float","type":"Property","Name":"Density","tags":[],"Class":"ReverbSoundEffect"},{"ValueType":"float","type":"Property","Name":"Diffusion","tags":[],"Class":"ReverbSoundEffect"},{"ValueType":"float","type":"Property","Name":"DryLevel","tags":[],"Class":"ReverbSoundEffect"},{"ValueType":"float","type":"Property","Name":"WetLevel","tags":[],"Class":"ReverbSoundEffect"},{"Superclass":"SoundEffect","type":"Class","Name":"TremoloSoundEffect","tags":[]},{"ValueType":"float","type":"Property","Name":"Depth","tags":[],"Class":"TremoloSoundEffect"},{"ValueType":"float","type":"Property","Name":"Duty","tags":[],"Class":"TremoloSoundEffect"},{"ValueType":"float","type":"Property","Name":"Frequency","tags":[],"Class":"TremoloSoundEffect"},{"Superclass":"Instance","type":"Class","Name":"SoundGroup","tags":[]},{"ValueType":"float","type":"Property","Name":"Volume","tags":[],"Class":"SoundGroup"},{"Superclass":"Instance","type":"Class","Name":"SoundService","tags":["notCreatable"]},{"ValueType":"ReverbType","type":"Property","Name":"AmbientReverb","tags":[],"Class":"SoundService"},{"ValueType":"float","type":"Property","Name":"DistanceFactor","tags":[],"Class":"SoundService"},{"ValueType":"float","type":"Property","Name":"DopplerScale","tags":[],"Class":"SoundService"},{"ValueType":"bool","type":"Property","Name":"RespectFilteringEnabled","tags":[],"Class":"SoundService"},{"ValueType":"float","type":"Property","Name":"RolloffScale","tags":[],"Class":"SoundService"},{"ReturnType":"bool","Arguments":[],"Name":"BeginRecording","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetListener","tags":[],"Class":"SoundService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"sound","Default":null}],"Name":"PlayLocalSound","tags":[],"Class":"SoundService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"SoundType","Name":"sound","Default":null}],"Name":"PlayStockSound","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"ListenerType","Name":"listenerType","Default":null},{"Type":"Tuple","Name":"listener","Default":null}],"Name":"SetListener","tags":[],"Class":"SoundService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"int","Name":"deviceIndex","Default":null}],"Name":"SetRecordingDevice","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"Function"},{"ReturnType":"Dictionary","Arguments":[],"Name":"EndRecording","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"YieldFunction"},{"ReturnType":"Dictionary","Arguments":[],"Name":"GetRecordingDevices","tags":["RobloxScriptSecurity"],"Class":"SoundService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"Sparkles","tags":[]},{"ValueType":"Color3","type":"Property","Name":"Color","tags":["hidden"],"Class":"Sparkles"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Sparkles"},{"ValueType":"Color3","type":"Property","Name":"SparkleColor","tags":[],"Class":"Sparkles"},{"Superclass":"Instance","type":"Class","Name":"SpawnerService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"StarterGear","tags":[]},{"Superclass":"Instance","type":"Class","Name":"StarterPlayer","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AllowCustomAnimations","tags":["ScriptWriteRestricted: [NotAccessibleSecurity]","hidden"],"Class":"StarterPlayer"},{"ValueType":"bool","type":"Property","Name":"AutoJumpEnabled","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"CameraMaxZoomDistance","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"CameraMinZoomDistance","tags":[],"Class":"StarterPlayer"},{"ValueType":"CameraMode","type":"Property","Name":"CameraMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevCameraOcclusionMode","type":"Property","Name":"DevCameraOcclusionMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevComputerCameraMovementMode","type":"Property","Name":"DevComputerCameraMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevComputerMovementMode","type":"Property","Name":"DevComputerMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevTouchCameraMovementMode","type":"Property","Name":"DevTouchCameraMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"DevTouchMovementMode","type":"Property","Name":"DevTouchMovementMode","tags":[],"Class":"StarterPlayer"},{"ValueType":"bool","type":"Property","Name":"EnableMouseLockOption","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"HealthDisplayDistance","tags":[],"Class":"StarterPlayer"},{"ValueType":"bool","type":"Property","Name":"LoadCharacterAppearance","tags":[],"Class":"StarterPlayer"},{"ValueType":"float","type":"Property","Name":"NameDisplayDistance","tags":[],"Class":"StarterPlayer"},{"Superclass":"Instance","type":"Class","Name":"StarterPlayerScripts","tags":[]},{"Superclass":"StarterPlayerScripts","type":"Class","Name":"StarterCharacterScripts","tags":[]},{"Superclass":"Instance","type":"Class","Name":"Stats","tags":[]},{"ValueType":"int","type":"Property","Name":"ContactsCount","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"DataReceiveKbps","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"DataSendKbps","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"HeartbeatTimeMs","tags":["readonly"],"Class":"Stats"},{"ValueType":"int","type":"Property","Name":"InstanceCount","tags":["readonly"],"Class":"Stats"},{"ValueType":"int","type":"Property","Name":"MovingPrimitivesCount","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"PhysicsReceiveKbps","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"PhysicsSendKbps","tags":["readonly"],"Class":"Stats"},{"ValueType":"float","type":"Property","Name":"PhysicsStepTimeMs","tags":["readonly"],"Class":"Stats"},{"ValueType":"int","type":"Property","Name":"PrimitivesCount","tags":["readonly"],"Class":"Stats"},{"ReturnType":"float","Arguments":[{"Type":"DeveloperMemoryTag","Name":"tag","Default":null}],"Name":"GetMemoryUsageMbForTag","tags":[],"Class":"Stats","type":"Function"},{"ReturnType":"Dictionary","Arguments":[{"Type":"TextureQueryType","Name":"queryType","Default":null},{"Type":"int","Name":"pageIndex","Default":null},{"Type":"int","Name":"pageSize","Default":null}],"Name":"GetPaginatedMemoryByTexture","tags":["RobloxScriptSecurity"],"Class":"Stats","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"StatsItem","tags":[]},{"ReturnType":"double","Arguments":[],"Name":"GetValue","tags":["PluginSecurity"],"Class":"StatsItem","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetValueString","tags":["PluginSecurity"],"Class":"StatsItem","type":"Function"},{"Superclass":"StatsItem","type":"Class","Name":"RunningAverageItemDouble","tags":[]},{"Superclass":"StatsItem","type":"Class","Name":"RunningAverageItemInt","tags":[]},{"Superclass":"StatsItem","type":"Class","Name":"RunningAverageTimeIntervalItem","tags":[]},{"Superclass":"StatsItem","type":"Class","Name":"TotalCountTimeIntervalItem","tags":[]},{"Superclass":"Instance","type":"Class","Name":"StringValue","tags":[]},{"ValueType":"string","type":"Property","Name":"Value","tags":[],"Class":"StringValue"},{"Arguments":[{"Name":"value","Type":"string"}],"Name":"Changed","tags":[],"Class":"StringValue","type":"Event"},{"Arguments":[{"Name":"value","Type":"string"}],"Name":"changed","tags":["deprecated"],"Class":"StringValue","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"TaskScheduler","tags":[]},{"ValueType":"bool","type":"Property","Name":"AreArbitersThrottled","tags":[],"Class":"TaskScheduler"},{"ValueType":"ConcurrencyModel","type":"Property","Name":"Concurrency","tags":[],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"NumRunningJobs","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"NumSleepingJobs","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"NumWaitingJobs","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"PriorityMethod","type":"Property","Name":"PriorityMethod","tags":[],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"SchedulerDutyCycle","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"SchedulerRate","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"SleepAdjustMethod","type":"Property","Name":"SleepAdjustMethod","tags":[],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"ThreadAffinity","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"ThreadPoolConfig","type":"Property","Name":"ThreadPoolConfig","tags":[],"Class":"TaskScheduler"},{"ValueType":"int","type":"Property","Name":"ThreadPoolSize","tags":["readonly"],"Class":"TaskScheduler"},{"ValueType":"double","type":"Property","Name":"ThrottledJobSleepTime","tags":[],"Class":"TaskScheduler"},{"Superclass":"Instance","type":"Class","Name":"Team","tags":[]},{"ValueType":"bool","type":"Property","Name":"AutoAssignable","tags":[],"Class":"Team"},{"ValueType":"bool","type":"Property","Name":"AutoColorCharacters","tags":["deprecated"],"Class":"Team"},{"ValueType":"int","type":"Property","Name":"Score","tags":["deprecated"],"Class":"Team"},{"ValueType":"BrickColor","type":"Property","Name":"TeamColor","tags":[],"Class":"Team"},{"ReturnType":"Objects","Arguments":[],"Name":"GetPlayers","tags":[],"Class":"Team","type":"Function"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerAdded","tags":[],"Class":"Team","type":"Event"},{"Arguments":[{"Name":"player","Type":"Instance"}],"Name":"PlayerRemoved","tags":[],"Class":"Team","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Teams","tags":["notCreatable"]},{"ReturnType":"Objects","Arguments":[],"Name":"GetTeams","tags":[],"Class":"Teams","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RebalanceTeams","tags":["deprecated"],"Class":"Teams","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TeleportService","tags":[]},{"ValueType":"bool","type":"Property","Name":"CustomizedTeleportUI","tags":["deprecated"],"Class":"TeleportService"},{"ReturnType":"Variant","Arguments":[],"Name":"GetLocalPlayerTeleportData","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"Variant","Arguments":[{"Type":"string","Name":"setting","Default":null}],"Name":"GetTeleportSetting","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"setting","Default":null},{"Type":"Variant","Name":"value","Default":null}],"Name":"SetTeleportSetting","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"Instance","Name":"player","Default":"nil"},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"Teleport","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"TeleportCancel","tags":["RobloxScriptSecurity"],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"string","Name":"instanceId","Default":null},{"Type":"Instance","Name":"player","Default":"nil"},{"Type":"string","Name":"spawnName","Default":""},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"TeleportToPlaceInstance","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"string","Name":"reservedServerAccessCode","Default":null},{"Type":"Objects","Name":"players","Default":null},{"Type":"string","Name":"spawnName","Default":""},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"TeleportToPrivateServer","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"placeId","Default":null},{"Type":"string","Name":"spawnName","Default":null},{"Type":"Instance","Name":"player","Default":"nil"},{"Type":"Variant","Name":"teleportData","Default":null},{"Type":"Instance","Name":"customLoadingScreen","Default":"nil"}],"Name":"TeleportToSpawnByName","tags":[],"Class":"TeleportService","type":"Function"},{"ReturnType":"Tuple","Arguments":[{"Type":"int","Name":"userId","Default":null}],"Name":"GetPlayerPlaceInstanceAsync","tags":[],"Class":"TeleportService","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"placeId","Default":null}],"Name":"ReserveServer","tags":[],"Class":"TeleportService","type":"YieldFunction"},{"Arguments":[{"Name":"loadingGui","Type":"Instance"},{"Name":"dataTable","Type":"Variant"}],"Name":"LocalPlayerArrivedFromTeleport","tags":[],"Class":"TeleportService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"TerrainRegion","tags":[]},{"ValueType":"bool","type":"Property","Name":"IsSmooth","tags":["deprecated","readonly"],"Class":"TerrainRegion"},{"ValueType":"Vector3","type":"Property","Name":"SizeInCells","tags":["readonly"],"Class":"TerrainRegion"},{"ReturnType":"void","Arguments":[],"Name":"ConvertToSmooth","tags":["PluginSecurity","deprecated"],"Class":"TerrainRegion","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TestService","tags":[]},{"ValueType":"bool","type":"Property","Name":"AutoRuns","tags":[],"Class":"TestService"},{"ValueType":"string","type":"Property","Name":"Description","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"ErrorCount","tags":["readonly"],"Class":"TestService"},{"ValueType":"bool","type":"Property","Name":"Is30FpsThrottleEnabled","tags":[],"Class":"TestService"},{"ValueType":"bool","type":"Property","Name":"IsPhysicsEnvironmentalThrottled","tags":[],"Class":"TestService"},{"ValueType":"bool","type":"Property","Name":"IsSleepAllowed","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"NumberOfPlayers","tags":[],"Class":"TestService"},{"ValueType":"double","type":"Property","Name":"SimulateSecondsLag","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"TestCount","tags":["readonly"],"Class":"TestService"},{"ValueType":"double","type":"Property","Name":"Timeout","tags":[],"Class":"TestService"},{"ValueType":"int","type":"Property","Name":"WarnCount","tags":["readonly"],"Class":"TestService"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"condition","Default":null},{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Check","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Checkpoint","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Done","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Error","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Fail","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"text","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Message","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"condition","Default":null},{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Require","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"bool","Name":"condition","Default":null},{"Type":"string","Name":"description","Default":null},{"Type":"Instance","Name":"source","Default":"nil"},{"Type":"int","Name":"line","Default":"0"}],"Name":"Warn","tags":[],"Class":"TestService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Run","tags":["PluginSecurity"],"Class":"TestService","type":"YieldFunction"},{"Arguments":[{"Name":"condition","Type":"bool"},{"Name":"text","Type":"string"},{"Name":"script","Type":"Instance"},{"Name":"line","Type":"int"}],"Name":"ServerCollectConditionalResult","tags":[],"Class":"TestService","type":"Event"},{"Arguments":[{"Name":"text","Type":"string"},{"Name":"script","Type":"Instance"},{"Name":"line","Type":"int"}],"Name":"ServerCollectResult","tags":[],"Class":"TestService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"TextFilterResult","tags":["notCreatable"]},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"toUserId","Default":null}],"Name":"GetChatForUserAsync","tags":[],"Class":"TextFilterResult","type":"YieldFunction"},{"ReturnType":"string","Arguments":[],"Name":"GetNonChatStringForBroadcastAsync","tags":[],"Class":"TextFilterResult","type":"YieldFunction"},{"ReturnType":"string","Arguments":[{"Type":"int","Name":"toUserId","Default":null}],"Name":"GetNonChatStringForUserAsync","tags":[],"Class":"TextFilterResult","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"TextService","tags":[]},{"ReturnType":"Vector2","Arguments":[{"Type":"string","Name":"string","Default":null},{"Type":"int","Name":"fontSize","Default":null},{"Type":"Font","Name":"font","Default":null},{"Type":"Vector2","Name":"frameSize","Default":null}],"Name":"GetTextSize","tags":[],"Class":"TextService","type":"Function"},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"stringToFilter","Default":null},{"Type":"int","Name":"fromUserId","Default":null}],"Name":"FilterStringAsync","tags":[],"Class":"TextService","type":"YieldFunction"},{"Superclass":"Instance","type":"Class","Name":"ThirdPartyUserService","tags":["notCreatable"]},{"ReturnType":"string","Arguments":[],"Name":"GetUserDisplayName","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"GetUserPlatformId","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"HaveActiveUser","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"ShowAccountPicker","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Function"},{"ReturnType":"int","Arguments":[{"Type":"UserInputType","Name":"gamepadId","Default":null}],"Name":"RegisterActiveUser","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"YieldFunction"},{"Arguments":[],"Name":"ActiveGamepadAdded","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Event"},{"Arguments":[],"Name":"ActiveGamepadRemoved","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Event"},{"Arguments":[{"Name":"signOutStatus","Type":"int"}],"Name":"ActiveUserSignedOut","tags":["RobloxScriptSecurity"],"Class":"ThirdPartyUserService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"TimerService","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"Toolbar","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"string","Name":"text","Default":null},{"Type":"string","Name":"tooltip","Default":null},{"Type":"string","Name":"iconname","Default":null}],"Name":"CreateButton","tags":["PluginSecurity"],"Class":"Toolbar","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TouchInputService","tags":[]},{"Superclass":"Instance","type":"Class","Name":"TouchTransmitter","tags":["notCreatable","notbrowsable"]},{"Superclass":"Instance","type":"Class","Name":"Trail","tags":[]},{"ValueType":"Object","type":"Property","Name":"Attachment0","tags":[],"Class":"Trail"},{"ValueType":"Object","type":"Property","Name":"Attachment1","tags":[],"Class":"Trail"},{"ValueType":"ColorSequence","type":"Property","Name":"Color","tags":[],"Class":"Trail"},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"Trail"},{"ValueType":"bool","type":"Property","Name":"FaceCamera","tags":[],"Class":"Trail"},{"ValueType":"float","type":"Property","Name":"Lifetime","tags":[],"Class":"Trail"},{"ValueType":"float","type":"Property","Name":"LightEmission","tags":[],"Class":"Trail"},{"ValueType":"float","type":"Property","Name":"MinLength","tags":[],"Class":"Trail"},{"ValueType":"Content","type":"Property","Name":"Texture","tags":[],"Class":"Trail"},{"ValueType":"float","type":"Property","Name":"TextureLength","tags":[],"Class":"Trail"},{"ValueType":"TextureMode","type":"Property","Name":"TextureMode","tags":[],"Class":"Trail"},{"ValueType":"NumberSequence","type":"Property","Name":"Transparency","tags":[],"Class":"Trail"},{"ReturnType":"void","Arguments":[],"Name":"Clear","tags":[],"Class":"Trail","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"TweenBase","tags":["notbrowsable"]},{"ValueType":"PlaybackState","type":"Property","Name":"PlaybackState","tags":["readonly"],"Class":"TweenBase"},{"ReturnType":"void","Arguments":[],"Name":"Cancel","tags":[],"Class":"TweenBase","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Pause","tags":[],"Class":"TweenBase","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Play","tags":[],"Class":"TweenBase","type":"Function"},{"Arguments":[{"Name":"playbackState","Type":"PlaybackState"}],"Name":"Completed","tags":[],"Class":"TweenBase","type":"Event"},{"Superclass":"TweenBase","type":"Class","Name":"Tween","tags":[]},{"ValueType":"Object","type":"Property","Name":"Instance","tags":["readonly"],"Class":"Tween"},{"ValueType":"TweenInfo","type":"Property","Name":"TweenInfo","tags":["readonly"],"Class":"Tween"},{"Superclass":"Instance","type":"Class","Name":"TweenService","tags":[]},{"ReturnType":"Instance","Arguments":[{"Type":"Instance","Name":"instance","Default":null},{"Type":"TweenInfo","Name":"tweenInfo","Default":null},{"Type":"Dictionary","Name":"propertyTable","Default":null}],"Name":"Create","tags":[],"Class":"TweenService","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"UIBase","tags":[]},{"Superclass":"UIBase","type":"Class","Name":"UIComponent","tags":[]},{"Superclass":"UIComponent","type":"Class","Name":"UIConstraint","tags":[]},{"Superclass":"UIConstraint","type":"Class","Name":"UIAspectRatioConstraint","tags":[]},{"ValueType":"float","type":"Property","Name":"AspectRatio","tags":[],"Class":"UIAspectRatioConstraint"},{"ValueType":"AspectType","type":"Property","Name":"AspectType","tags":[],"Class":"UIAspectRatioConstraint"},{"ValueType":"DominantAxis","type":"Property","Name":"DominantAxis","tags":[],"Class":"UIAspectRatioConstraint"},{"Superclass":"UIConstraint","type":"Class","Name":"UISizeConstraint","tags":[]},{"ValueType":"Vector2","type":"Property","Name":"MaxSize","tags":[],"Class":"UISizeConstraint"},{"ValueType":"Vector2","type":"Property","Name":"MinSize","tags":[],"Class":"UISizeConstraint"},{"Superclass":"UIConstraint","type":"Class","Name":"UITextSizeConstraint","tags":[]},{"ValueType":"int","type":"Property","Name":"MaxTextSize","tags":[],"Class":"UITextSizeConstraint"},{"ValueType":"int","type":"Property","Name":"MinTextSize","tags":[],"Class":"UITextSizeConstraint"},{"Superclass":"UIComponent","type":"Class","Name":"UILayout","tags":[]},{"Superclass":"UILayout","type":"Class","Name":"UIGridStyleLayout","tags":["notbrowsable"]},{"ValueType":"Vector2","type":"Property","Name":"AbsoluteContentSize","tags":["readonly"],"Class":"UIGridStyleLayout"},{"ValueType":"FillDirection","type":"Property","Name":"FillDirection","tags":[],"Class":"UIGridStyleLayout"},{"ValueType":"HorizontalAlignment","type":"Property","Name":"HorizontalAlignment","tags":[],"Class":"UIGridStyleLayout"},{"ValueType":"SortOrder","type":"Property","Name":"SortOrder","tags":[],"Class":"UIGridStyleLayout"},{"ValueType":"VerticalAlignment","type":"Property","Name":"VerticalAlignment","tags":[],"Class":"UIGridStyleLayout"},{"ReturnType":"void","Arguments":[],"Name":"ApplyLayout","tags":[],"Class":"UIGridStyleLayout","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Function","Name":"function","Default":"nil"}],"Name":"SetCustomSortFunction","tags":["deprecated"],"Class":"UIGridStyleLayout","type":"Function"},{"Superclass":"UIGridStyleLayout","type":"Class","Name":"UIGridLayout","tags":[]},{"ValueType":"UDim2","type":"Property","Name":"CellPadding","tags":[],"Class":"UIGridLayout"},{"ValueType":"UDim2","type":"Property","Name":"CellSize","tags":[],"Class":"UIGridLayout"},{"ValueType":"int","type":"Property","Name":"FillDirectionMaxCells","tags":[],"Class":"UIGridLayout"},{"ValueType":"StartCorner","type":"Property","Name":"StartCorner","tags":[],"Class":"UIGridLayout"},{"Superclass":"UIGridStyleLayout","type":"Class","Name":"UIListLayout","tags":[]},{"ValueType":"UDim","type":"Property","Name":"Padding","tags":[],"Class":"UIListLayout"},{"Superclass":"UIGridStyleLayout","type":"Class","Name":"UIPageLayout","tags":[]},{"ValueType":"bool","type":"Property","Name":"Animated","tags":[],"Class":"UIPageLayout"},{"ValueType":"bool","type":"Property","Name":"Circular","tags":[],"Class":"UIPageLayout"},{"ValueType":"Object","type":"Property","Name":"CurrentPage","tags":["readonly"],"Class":"UIPageLayout"},{"ValueType":"EasingDirection","type":"Property","Name":"EasingDirection","tags":[],"Class":"UIPageLayout"},{"ValueType":"EasingStyle","type":"Property","Name":"EasingStyle","tags":[],"Class":"UIPageLayout"},{"ValueType":"bool","type":"Property","Name":"GamepadInputEnabled","tags":[],"Class":"UIPageLayout"},{"ValueType":"UDim","type":"Property","Name":"Padding","tags":[],"Class":"UIPageLayout"},{"ValueType":"bool","type":"Property","Name":"ScrollWheelInputEnabled","tags":[],"Class":"UIPageLayout"},{"ValueType":"bool","type":"Property","Name":"TouchInputEnabled","tags":[],"Class":"UIPageLayout"},{"ValueType":"float","type":"Property","Name":"TweenTime","tags":[],"Class":"UIPageLayout"},{"ReturnType":"void","Arguments":[{"Type":"Instance","Name":"page","Default":null}],"Name":"JumpTo","tags":[],"Class":"UIPageLayout","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"int","Name":"index","Default":null}],"Name":"JumpToIndex","tags":[],"Class":"UIPageLayout","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Next","tags":[],"Class":"UIPageLayout","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"Previous","tags":[],"Class":"UIPageLayout","type":"Function"},{"Arguments":[{"Name":"page","Type":"Instance"}],"Name":"PageEnter","tags":[],"Class":"UIPageLayout","type":"Event"},{"Arguments":[{"Name":"page","Type":"Instance"}],"Name":"PageLeave","tags":[],"Class":"UIPageLayout","type":"Event"},{"Arguments":[{"Name":"currentPage","Type":"Instance"}],"Name":"Stopped","tags":[],"Class":"UIPageLayout","type":"Event"},{"Superclass":"UIGridStyleLayout","type":"Class","Name":"UITableLayout","tags":[]},{"ValueType":"bool","type":"Property","Name":"FillEmptySpaceColumns","tags":[],"Class":"UITableLayout"},{"ValueType":"bool","type":"Property","Name":"FillEmptySpaceRows","tags":[],"Class":"UITableLayout"},{"ValueType":"TableMajorAxis","type":"Property","Name":"MajorAxis","tags":[],"Class":"UITableLayout"},{"ValueType":"UDim2","type":"Property","Name":"Padding","tags":[],"Class":"UITableLayout"},{"Superclass":"UIComponent","type":"Class","Name":"UIPadding","tags":[]},{"ValueType":"UDim","type":"Property","Name":"PaddingBottom","tags":[],"Class":"UIPadding"},{"ValueType":"UDim","type":"Property","Name":"PaddingLeft","tags":[],"Class":"UIPadding"},{"ValueType":"UDim","type":"Property","Name":"PaddingRight","tags":[],"Class":"UIPadding"},{"ValueType":"UDim","type":"Property","Name":"PaddingTop","tags":[],"Class":"UIPadding"},{"Superclass":"UIComponent","type":"Class","Name":"UIScale","tags":[]},{"ValueType":"float","type":"Property","Name":"Scale","tags":[],"Class":"UIScale"},{"Superclass":"Instance","type":"Class","Name":"UserGameSettings","tags":[]},{"ValueType":"bool","type":"Property","Name":"AllTutorialsDisabled","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"CustomCameraMode","type":"Property","Name":"CameraMode","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"CameraYInverted","tags":["RobloxScriptSecurity","hidden"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"ChatVisible","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"ComputerCameraMovementMode","type":"Property","Name":"ComputerCameraMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"ComputerMovementMode","type":"Property","Name":"ComputerMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"ControlMode","type":"Property","Name":"ControlMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"Fullscreen","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"float","type":"Property","Name":"GamepadCameraSensitivity","tags":[],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"HasEverUsedVR","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"IsUsingCameraYInverted","tags":["RobloxScriptSecurity","hidden","readonly"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"IsUsingGamepadCameraSensitivity","tags":["RobloxScriptSecurity","hidden","readonly"],"Class":"UserGameSettings"},{"ValueType":"float","type":"Property","Name":"MasterVolume","tags":[],"Class":"UserGameSettings"},{"ValueType":"float","type":"Property","Name":"MouseSensitivity","tags":[],"Class":"UserGameSettings"},{"ValueType":"Vector2","type":"Property","Name":"MouseSensitivityFirstPerson","tags":["RobloxScriptSecurity","hidden"],"Class":"UserGameSettings"},{"ValueType":"Vector2","type":"Property","Name":"MouseSensitivityThirdPerson","tags":["RobloxScriptSecurity","hidden"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"PerformanceStatsVisible","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"RotationType","type":"Property","Name":"RotationType","tags":[],"Class":"UserGameSettings"},{"ValueType":"SavedQualitySetting","type":"Property","Name":"SavedQualityLevel","tags":[],"Class":"UserGameSettings"},{"ValueType":"TouchCameraMovementMode","type":"Property","Name":"TouchCameraMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"TouchMovementMode","type":"Property","Name":"TouchMovementMode","tags":[],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"UsedCoreGuiIsVisibleToggle","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"UsedCustomGuiIsVisibleToggle","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"UsedHideHudShortcut","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"bool","type":"Property","Name":"VREnabled","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ValueType":"int","type":"Property","Name":"VRRotationIntensity","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings"},{"ReturnType":"int","Arguments":[],"Name":"GetCameraYInvertValue","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"string","Name":"tutorialId","Default":null}],"Name":"GetTutorialState","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"InFullScreen","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"bool","Arguments":[],"Name":"InStudioMode","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetCameraYInvertVisible","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"SetGamepadCameraSensitivityVisible","tags":[],"Class":"UserGameSettings","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"tutorialId","Default":null},{"Type":"bool","Name":"value","Default":null}],"Name":"SetTutorialState","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings","type":"Function"},{"Arguments":[{"Name":"isFullscreen","Type":"bool"}],"Name":"FullscreenChanged","tags":[],"Class":"UserGameSettings","type":"Event"},{"Arguments":[{"Name":"isPerformanceStatsVisible","Type":"bool"}],"Name":"PerformanceStatsVisibleChanged","tags":["RobloxScriptSecurity"],"Class":"UserGameSettings","type":"Event"},{"Arguments":[{"Name":"isStudioMode","Type":"bool"}],"Name":"StudioModeChanged","tags":[],"Class":"UserGameSettings","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"UserInputService","tags":["notCreatable"]},{"ValueType":"bool","type":"Property","Name":"AccelerometerEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"Vector2","type":"Property","Name":"BottomBarSize","tags":["RobloxScriptSecurity","readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"GamepadEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"GazeSelectionEnabled","tags":["RobloxScriptSecurity","hidden"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"GyroscopeEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"KeyboardEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"ModalEnabled","tags":[],"Class":"UserInputService"},{"ValueType":"MouseBehavior","type":"Property","Name":"MouseBehavior","tags":[],"Class":"UserInputService"},{"ValueType":"float","type":"Property","Name":"MouseDeltaSensitivity","tags":[],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"MouseEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"MouseIconEnabled","tags":[],"Class":"UserInputService"},{"ValueType":"Vector2","type":"Property","Name":"NavBarSize","tags":["RobloxScriptSecurity","readonly"],"Class":"UserInputService"},{"ValueType":"double","type":"Property","Name":"OnScreenKeyboardAnimationDuration","tags":["RobloxScriptSecurity","readonly"],"Class":"UserInputService"},{"ValueType":"Vector2","type":"Property","Name":"OnScreenKeyboardPosition","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"Vector2","type":"Property","Name":"OnScreenKeyboardSize","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"OnScreenKeyboardVisible","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"OverrideMouseIconBehavior","type":"Property","Name":"OverrideMouseIconBehavior","tags":["RobloxScriptSecurity"],"Class":"UserInputService"},{"ValueType":"Vector2","type":"Property","Name":"StatusBarSize","tags":["RobloxScriptSecurity","readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"TouchEnabled","tags":["readonly"],"Class":"UserInputService"},{"ValueType":"CoordinateFrame","type":"Property","Name":"UserHeadCFrame","tags":["deprecated","readonly"],"Class":"UserInputService"},{"ValueType":"bool","type":"Property","Name":"VREnabled","tags":["readonly"],"Class":"UserInputService"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null},{"Type":"KeyCode","Name":"gamepadKeyCode","Default":null}],"Name":"GamepadSupports","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetConnectedGamepads","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetDeviceAcceleration","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetDeviceGravity","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Tuple","Arguments":[],"Name":"GetDeviceRotation","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Instance","Arguments":[],"Name":"GetFocusedTextBox","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null}],"Name":"GetGamepadConnected","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null}],"Name":"GetGamepadState","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetKeysPressed","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"UserInputType","Arguments":[],"Name":"GetLastInputType","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetMouseButtonsPressed","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Vector2","Arguments":[],"Name":"GetMouseDelta","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Vector2","Arguments":[],"Name":"GetMouseLocation","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[],"Name":"GetNavigationGamepads","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"Platform","Arguments":[],"Name":"GetPlatform","tags":["RobloxScriptSecurity"],"Class":"UserInputService","type":"Function"},{"ReturnType":"Array","Arguments":[{"Type":"UserInputType","Name":"gamepadNum","Default":null}],"Name":"GetSupportedGamepadKeyCodes","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[{"Type":"UserCFrame","Name":"type","Default":null}],"Name":"GetUserCFrame","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"KeyCode","Name":"keyCode","Default":null}],"Name":"IsKeyDown","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"mouseButton","Default":null}],"Name":"IsMouseButtonPressed","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserInputType","Name":"gamepadEnum","Default":null}],"Name":"IsNavigationGamepad","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RecenterUserHeadCFrame","tags":[],"Class":"UserInputService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"statusBarSize","Default":null},{"Type":"Vector2","Name":"navBarSize","Default":null},{"Type":"Vector2","Name":"bottomBarSize","Default":null}],"Name":"SendAppUISizes","tags":["RobloxScriptSecurity"],"Class":"UserInputService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"UserInputType","Name":"gamepadEnum","Default":null},{"Type":"bool","Name":"enabled","Default":null}],"Name":"SetNavigationGamepad","tags":[],"Class":"UserInputService","type":"Function"},{"Arguments":[{"Name":"acceleration","Type":"Instance"}],"Name":"DeviceAccelerationChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"gravity","Type":"Instance"}],"Name":"DeviceGravityChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"rotation","Type":"Instance"},{"Name":"cframe","Type":"CoordinateFrame"}],"Name":"DeviceRotationChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"gamepadNum","Type":"UserInputType"}],"Name":"GamepadConnected","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"gamepadNum","Type":"UserInputType"}],"Name":"GamepadDisconnected","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"InputBegan","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"InputChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"input","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"InputEnded","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[],"Name":"JumpRequest","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"lastInputType","Type":"UserInputType"}],"Name":"LastInputTypeChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"textboxReleased","Type":"Instance"}],"Name":"TextBoxFocusReleased","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"textboxFocused","Type":"Instance"}],"Name":"TextBoxFocused","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touch","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchEnded","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchLongPress","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touch","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchMoved","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"totalTranslation","Type":"Vector2"},{"Name":"velocity","Type":"Vector2"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchPan","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"scale","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchPinch","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"rotation","Type":"float"},{"Name":"velocity","Type":"float"},{"Name":"state","Type":"UserInputState"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchRotate","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touch","Type":"Instance"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchStarted","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"swipeDirection","Type":"SwipeDirection"},{"Name":"numberOfTouches","Type":"int"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchSwipe","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"touchPositions","Type":"Array"},{"Name":"gameProcessedEvent","Type":"bool"}],"Name":"TouchTap","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"position","Type":"Vector2"},{"Name":"processedByUI","Type":"bool"}],"Name":"TouchTapInWorld","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[{"Name":"type","Type":"UserCFrame"},{"Name":"value","Type":"CoordinateFrame"}],"Name":"UserCFrameChanged","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[],"Name":"WindowFocusReleased","tags":[],"Class":"UserInputService","type":"Event"},{"Arguments":[],"Name":"WindowFocused","tags":[],"Class":"UserInputService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"VRService","tags":[]},{"ValueType":"UserCFrame","type":"Property","Name":"GuiInputUserCFrame","tags":[],"Class":"VRService"},{"ValueType":"string","type":"Property","Name":"VRDeviceName","tags":["RobloxScriptSecurity","readonly"],"Class":"VRService"},{"ValueType":"bool","type":"Property","Name":"VREnabled","tags":["readonly"],"Class":"VRService"},{"ReturnType":"VRTouchpadMode","Arguments":[{"Type":"VRTouchpad","Name":"pad","Default":null}],"Name":"GetTouchpadMode","tags":[],"Class":"VRService","type":"Function"},{"ReturnType":"CoordinateFrame","Arguments":[{"Type":"UserCFrame","Name":"type","Default":null}],"Name":"GetUserCFrame","tags":[],"Class":"VRService","type":"Function"},{"ReturnType":"bool","Arguments":[{"Type":"UserCFrame","Name":"type","Default":null}],"Name":"GetUserCFrameEnabled","tags":[],"Class":"VRService","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"RecenterUserHeadCFrame","tags":[],"Class":"VRService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"CoordinateFrame","Name":"cframe","Default":null},{"Type":"UserCFrame","Name":"inputUserCFrame","Default":null}],"Name":"RequestNavigation","tags":[],"Class":"VRService","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"VRTouchpad","Name":"pad","Default":null},{"Type":"VRTouchpadMode","Name":"mode","Default":null}],"Name":"SetTouchpadMode","tags":[],"Class":"VRService","type":"Function"},{"Arguments":[{"Name":"cframe","Type":"CoordinateFrame"},{"Name":"inputUserCFrame","Type":"UserCFrame"}],"Name":"NavigationRequested","tags":[],"Class":"VRService","type":"Event"},{"Arguments":[{"Name":"pad","Type":"VRTouchpad"},{"Name":"mode","Type":"VRTouchpadMode"}],"Name":"TouchpadModeChanged","tags":[],"Class":"VRService","type":"Event"},{"Arguments":[{"Name":"type","Type":"UserCFrame"},{"Name":"value","Type":"CoordinateFrame"}],"Name":"UserCFrameChanged","tags":[],"Class":"VRService","type":"Event"},{"Arguments":[{"Name":"type","Type":"UserCFrame"},{"Name":"enabled","Type":"bool"}],"Name":"UserCFrameEnabled","tags":[],"Class":"VRService","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"Vector3Value","tags":[]},{"ValueType":"Vector3","type":"Property","Name":"Value","tags":[],"Class":"Vector3Value"},{"Arguments":[{"Name":"value","Type":"Vector3"}],"Name":"Changed","tags":[],"Class":"Vector3Value","type":"Event"},{"Arguments":[{"Name":"value","Type":"Vector3"}],"Name":"changed","tags":["deprecated"],"Class":"Vector3Value","type":"Event"},{"Superclass":"Instance","type":"Class","Name":"VirtualUser","tags":["notCreatable"]},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button1Down","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button1Up","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button2Down","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"Button2Up","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"CaptureController","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"ClickButton1","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"ClickButton2","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"Vector2","Name":"position","Default":null},{"Type":"CoordinateFrame","Name":"camera","Default":"Identity"}],"Name":"MoveMouse","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"SetKeyDown","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"SetKeyUp","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[],"Name":"StartRecording","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"string","Arguments":[],"Name":"StopRecording","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"ReturnType":"void","Arguments":[{"Type":"string","Name":"key","Default":null}],"Name":"TypeKey","tags":["LocalUserSecurity"],"Class":"VirtualUser","type":"Function"},{"Superclass":"Instance","type":"Class","Name":"Visit","tags":["notCreatable"]},{"Superclass":"Instance","type":"Class","Name":"WeldConstraint","tags":[]},{"ValueType":"bool","type":"Property","Name":"Enabled","tags":[],"Class":"WeldConstraint"},{"ValueType":"Object","type":"Property","Name":"Part0","tags":[],"Class":"WeldConstraint"},{"ValueType":"Object","type":"Property","Name":"Part1","tags":[],"Class":"WeldConstraint"},{"type":"Enum","Name":"AASamples","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":1,"Enum":"AASamples"},{"type":"EnumItem","Name":"4","tags":[],"Value":4,"Enum":"AASamples"},{"type":"EnumItem","Name":"8","tags":[],"Value":8,"Enum":"AASamples"},{"type":"Enum","Name":"AccessType","tags":[]},{"type":"EnumItem","Name":"Me","tags":[],"Value":0,"Enum":"AccessType"},{"type":"EnumItem","Name":"Friends","tags":[],"Value":1,"Enum":"AccessType"},{"type":"EnumItem","Name":"Everyone","tags":[],"Value":2,"Enum":"AccessType"},{"type":"EnumItem","Name":"InviteOnly","tags":[],"Value":3,"Enum":"AccessType"},{"type":"Enum","Name":"ActionType","tags":[]},{"type":"EnumItem","Name":"Nothing","tags":[],"Value":0,"Enum":"ActionType"},{"type":"EnumItem","Name":"Pause","tags":[],"Value":1,"Enum":"ActionType"},{"type":"EnumItem","Name":"Lose","tags":[],"Value":2,"Enum":"ActionType"},{"type":"EnumItem","Name":"Draw","tags":[],"Value":3,"Enum":"ActionType"},{"type":"EnumItem","Name":"Win","tags":[],"Value":4,"Enum":"ActionType"},{"type":"Enum","Name":"ActuatorRelativeTo","tags":[]},{"type":"EnumItem","Name":"Attachment0","tags":[],"Value":0,"Enum":"ActuatorRelativeTo"},{"type":"EnumItem","Name":"Attachment1","tags":[],"Value":1,"Enum":"ActuatorRelativeTo"},{"type":"EnumItem","Name":"World","tags":[],"Value":2,"Enum":"ActuatorRelativeTo"},{"type":"Enum","Name":"ActuatorType","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"ActuatorType"},{"type":"EnumItem","Name":"Motor","tags":[],"Value":1,"Enum":"ActuatorType"},{"type":"EnumItem","Name":"Servo","tags":[],"Value":2,"Enum":"ActuatorType"},{"type":"Enum","Name":"AnimationPriority","tags":[]},{"type":"EnumItem","Name":"Idle","tags":[],"Value":0,"Enum":"AnimationPriority"},{"type":"EnumItem","Name":"Movement","tags":[],"Value":1,"Enum":"AnimationPriority"},{"type":"EnumItem","Name":"Action","tags":[],"Value":2,"Enum":"AnimationPriority"},{"type":"EnumItem","Name":"Core","tags":[],"Value":1000,"Enum":"AnimationPriority"},{"type":"Enum","Name":"Antialiasing","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"Antialiasing"},{"type":"EnumItem","Name":"Off","tags":[],"Value":2,"Enum":"Antialiasing"},{"type":"EnumItem","Name":"On","tags":[],"Value":1,"Enum":"Antialiasing"},{"type":"Enum","Name":"AspectType","tags":[]},{"type":"EnumItem","Name":"FitWithinMaxSize","tags":[],"Value":0,"Enum":"AspectType"},{"type":"EnumItem","Name":"ScaleWithParentSize","tags":[],"Value":1,"Enum":"AspectType"},{"type":"Enum","Name":"AssetType","tags":[]},{"type":"EnumItem","Name":"Image","tags":[],"Value":1,"Enum":"AssetType"},{"type":"EnumItem","Name":"TeeShirt","tags":[],"Value":2,"Enum":"AssetType"},{"type":"EnumItem","Name":"Audio","tags":[],"Value":3,"Enum":"AssetType"},{"type":"EnumItem","Name":"Mesh","tags":[],"Value":4,"Enum":"AssetType"},{"type":"EnumItem","Name":"Lua","tags":[],"Value":5,"Enum":"AssetType"},{"type":"EnumItem","Name":"Hat","tags":[],"Value":8,"Enum":"AssetType"},{"type":"EnumItem","Name":"Place","tags":[],"Value":9,"Enum":"AssetType"},{"type":"EnumItem","Name":"Model","tags":[],"Value":10,"Enum":"AssetType"},{"type":"EnumItem","Name":"Shirt","tags":[],"Value":11,"Enum":"AssetType"},{"type":"EnumItem","Name":"Pants","tags":[],"Value":12,"Enum":"AssetType"},{"type":"EnumItem","Name":"Decal","tags":[],"Value":13,"Enum":"AssetType"},{"type":"EnumItem","Name":"Head","tags":[],"Value":17,"Enum":"AssetType"},{"type":"EnumItem","Name":"Face","tags":[],"Value":18,"Enum":"AssetType"},{"type":"EnumItem","Name":"Gear","tags":[],"Value":19,"Enum":"AssetType"},{"type":"EnumItem","Name":"Badge","tags":[],"Value":21,"Enum":"AssetType"},{"type":"EnumItem","Name":"Animation","tags":[],"Value":24,"Enum":"AssetType"},{"type":"EnumItem","Name":"Torso","tags":[],"Value":27,"Enum":"AssetType"},{"type":"EnumItem","Name":"RightArm","tags":[],"Value":28,"Enum":"AssetType"},{"type":"EnumItem","Name":"LeftArm","tags":[],"Value":29,"Enum":"AssetType"},{"type":"EnumItem","Name":"LeftLeg","tags":[],"Value":30,"Enum":"AssetType"},{"type":"EnumItem","Name":"RightLeg","tags":[],"Value":31,"Enum":"AssetType"},{"type":"EnumItem","Name":"Package","tags":[],"Value":32,"Enum":"AssetType"},{"type":"EnumItem","Name":"GamePass","tags":[],"Value":34,"Enum":"AssetType"},{"type":"EnumItem","Name":"Plugin","tags":[],"Value":38,"Enum":"AssetType"},{"type":"EnumItem","Name":"MeshPart","tags":[],"Value":40,"Enum":"AssetType"},{"type":"EnumItem","Name":"HairAccessory","tags":[],"Value":41,"Enum":"AssetType"},{"type":"EnumItem","Name":"FaceAccessory","tags":[],"Value":42,"Enum":"AssetType"},{"type":"EnumItem","Name":"NeckAccessory","tags":[],"Value":43,"Enum":"AssetType"},{"type":"EnumItem","Name":"ShoulderAccessory","tags":[],"Value":44,"Enum":"AssetType"},{"type":"EnumItem","Name":"FrontAccessory","tags":[],"Value":45,"Enum":"AssetType"},{"type":"EnumItem","Name":"BackAccessory","tags":[],"Value":46,"Enum":"AssetType"},{"type":"EnumItem","Name":"WaistAccessory","tags":[],"Value":47,"Enum":"AssetType"},{"type":"EnumItem","Name":"ClimbAnimation","tags":[],"Value":48,"Enum":"AssetType"},{"type":"EnumItem","Name":"DeathAnimation","tags":[],"Value":49,"Enum":"AssetType"},{"type":"EnumItem","Name":"FallAnimation","tags":[],"Value":50,"Enum":"AssetType"},{"type":"EnumItem","Name":"IdleAnimation","tags":[],"Value":51,"Enum":"AssetType"},{"type":"EnumItem","Name":"JumpAnimation","tags":[],"Value":52,"Enum":"AssetType"},{"type":"EnumItem","Name":"RunAnimation","tags":[],"Value":53,"Enum":"AssetType"},{"type":"EnumItem","Name":"SwimAnimation","tags":[],"Value":54,"Enum":"AssetType"},{"type":"EnumItem","Name":"WalkAnimation","tags":[],"Value":55,"Enum":"AssetType"},{"type":"EnumItem","Name":"PoseAnimation","tags":[],"Value":56,"Enum":"AssetType"},{"type":"EnumItem","Name":"EarAccessory","tags":[],"Value":57,"Enum":"AssetType"},{"type":"EnumItem","Name":"EyeAccessory","tags":[],"Value":58,"Enum":"AssetType"},{"type":"Enum","Name":"Axis","tags":[]},{"type":"EnumItem","Name":"X","tags":[],"Value":0,"Enum":"Axis"},{"type":"EnumItem","Name":"Y","tags":[],"Value":1,"Enum":"Axis"},{"type":"EnumItem","Name":"Z","tags":[],"Value":2,"Enum":"Axis"},{"type":"Enum","Name":"BinType","tags":[]},{"type":"EnumItem","Name":"Script","tags":[],"Value":0,"Enum":"BinType"},{"type":"EnumItem","Name":"GameTool","tags":[],"Value":1,"Enum":"BinType"},{"type":"EnumItem","Name":"Grab","tags":[],"Value":2,"Enum":"BinType"},{"type":"EnumItem","Name":"Clone","tags":[],"Value":3,"Enum":"BinType"},{"type":"EnumItem","Name":"Hammer","tags":[],"Value":4,"Enum":"BinType"},{"type":"Enum","Name":"BodyPart","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"BodyPart"},{"type":"EnumItem","Name":"Torso","tags":[],"Value":1,"Enum":"BodyPart"},{"type":"EnumItem","Name":"LeftArm","tags":[],"Value":2,"Enum":"BodyPart"},{"type":"EnumItem","Name":"RightArm","tags":[],"Value":3,"Enum":"BodyPart"},{"type":"EnumItem","Name":"LeftLeg","tags":[],"Value":4,"Enum":"BodyPart"},{"type":"EnumItem","Name":"RightLeg","tags":[],"Value":5,"Enum":"BodyPart"},{"type":"Enum","Name":"Button","tags":[]},{"type":"EnumItem","Name":"Jump","tags":[],"Value":32,"Enum":"Button"},{"type":"EnumItem","Name":"Dismount","tags":[],"Value":8,"Enum":"Button"},{"type":"Enum","Name":"ButtonStyle","tags":[]},{"type":"EnumItem","Name":"Custom","tags":[],"Value":0,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxButtonDefault","tags":[],"Value":1,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxButton","tags":[],"Value":2,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxRoundButton","tags":[],"Value":3,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxRoundDefaultButton","tags":[],"Value":4,"Enum":"ButtonStyle"},{"type":"EnumItem","Name":"RobloxRoundDropdownButton","tags":[],"Value":5,"Enum":"ButtonStyle"},{"type":"Enum","Name":"CameraMode","tags":[]},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"CameraMode"},{"type":"EnumItem","Name":"LockFirstPerson","tags":[],"Value":1,"Enum":"CameraMode"},{"type":"Enum","Name":"CameraPanMode","tags":[]},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"CameraPanMode"},{"type":"EnumItem","Name":"EdgeBump","tags":[],"Value":1,"Enum":"CameraPanMode"},{"type":"Enum","Name":"CameraType","tags":[]},{"type":"EnumItem","Name":"Fixed","tags":[],"Value":0,"Enum":"CameraType"},{"type":"EnumItem","Name":"Watch","tags":[],"Value":2,"Enum":"CameraType"},{"type":"EnumItem","Name":"Attach","tags":[],"Value":1,"Enum":"CameraType"},{"type":"EnumItem","Name":"Track","tags":[],"Value":3,"Enum":"CameraType"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":4,"Enum":"CameraType"},{"type":"EnumItem","Name":"Custom","tags":[],"Value":5,"Enum":"CameraType"},{"type":"EnumItem","Name":"Scriptable","tags":[],"Value":6,"Enum":"CameraType"},{"type":"EnumItem","Name":"Orbital","tags":[],"Value":7,"Enum":"CameraType"},{"type":"Enum","Name":"CellBlock","tags":[]},{"type":"EnumItem","Name":"Solid","tags":[],"Value":0,"Enum":"CellBlock"},{"type":"EnumItem","Name":"VerticalWedge","tags":[],"Value":1,"Enum":"CellBlock"},{"type":"EnumItem","Name":"CornerWedge","tags":[],"Value":2,"Enum":"CellBlock"},{"type":"EnumItem","Name":"InverseCornerWedge","tags":[],"Value":3,"Enum":"CellBlock"},{"type":"EnumItem","Name":"HorizontalWedge","tags":[],"Value":4,"Enum":"CellBlock"},{"type":"Enum","Name":"CellMaterial","tags":[]},{"type":"EnumItem","Name":"Empty","tags":[],"Value":0,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Grass","tags":[],"Value":1,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Sand","tags":[],"Value":2,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":3,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Granite","tags":[],"Value":4,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Asphalt","tags":[],"Value":5,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Iron","tags":[],"Value":6,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Aluminum","tags":[],"Value":7,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Gold","tags":[],"Value":8,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"WoodPlank","tags":[],"Value":9,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"WoodLog","tags":[],"Value":10,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Gravel","tags":[],"Value":11,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"CinderBlock","tags":[],"Value":12,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"MossyStone","tags":[],"Value":13,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Cement","tags":[],"Value":14,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"RedPlastic","tags":[],"Value":15,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"BluePlastic","tags":[],"Value":16,"Enum":"CellMaterial"},{"type":"EnumItem","Name":"Water","tags":[],"Value":17,"Enum":"CellMaterial"},{"type":"Enum","Name":"CellOrientation","tags":[]},{"type":"EnumItem","Name":"NegZ","tags":[],"Value":0,"Enum":"CellOrientation"},{"type":"EnumItem","Name":"X","tags":[],"Value":1,"Enum":"CellOrientation"},{"type":"EnumItem","Name":"Z","tags":[],"Value":2,"Enum":"CellOrientation"},{"type":"EnumItem","Name":"NegX","tags":[],"Value":3,"Enum":"CellOrientation"},{"type":"Enum","Name":"CenterDialogType","tags":[]},{"type":"EnumItem","Name":"UnsolicitedDialog","tags":[],"Value":1,"Enum":"CenterDialogType"},{"type":"EnumItem","Name":"PlayerInitiatedDialog","tags":[],"Value":2,"Enum":"CenterDialogType"},{"type":"EnumItem","Name":"ModalDialog","tags":[],"Value":3,"Enum":"CenterDialogType"},{"type":"EnumItem","Name":"QuitDialog","tags":[],"Value":4,"Enum":"CenterDialogType"},{"type":"Enum","Name":"ChatColor","tags":[]},{"type":"EnumItem","Name":"Blue","tags":[],"Value":0,"Enum":"ChatColor"},{"type":"EnumItem","Name":"Green","tags":[],"Value":1,"Enum":"ChatColor"},{"type":"EnumItem","Name":"Red","tags":[],"Value":2,"Enum":"ChatColor"},{"type":"EnumItem","Name":"White","tags":[],"Value":3,"Enum":"ChatColor"},{"type":"Enum","Name":"ChatMode","tags":[]},{"type":"EnumItem","Name":"Menu","tags":[],"Value":0,"Enum":"ChatMode"},{"type":"EnumItem","Name":"TextAndMenu","tags":[],"Value":1,"Enum":"ChatMode"},{"type":"Enum","Name":"ChatPrivacyMode","tags":[]},{"type":"EnumItem","Name":"AllUsers","tags":[],"Value":0,"Enum":"ChatPrivacyMode"},{"type":"EnumItem","Name":"NoOne","tags":[],"Value":1,"Enum":"ChatPrivacyMode"},{"type":"EnumItem","Name":"Friends","tags":[],"Value":2,"Enum":"ChatPrivacyMode"},{"type":"Enum","Name":"ChatStyle","tags":[]},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"ChatStyle"},{"type":"EnumItem","Name":"Bubble","tags":[],"Value":1,"Enum":"ChatStyle"},{"type":"EnumItem","Name":"ClassicAndBubble","tags":[],"Value":2,"Enum":"ChatStyle"},{"type":"Enum","Name":"CollisionFidelity","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"CollisionFidelity"},{"type":"EnumItem","Name":"Hull","tags":[],"Value":1,"Enum":"CollisionFidelity"},{"type":"EnumItem","Name":"Box","tags":[],"Value":2,"Enum":"CollisionFidelity"},{"type":"Enum","Name":"ComputerCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"ComputerCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"ComputerCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"ComputerCameraMovementMode"},{"type":"EnumItem","Name":"Orbital","tags":[],"Value":3,"Enum":"ComputerCameraMovementMode"},{"type":"Enum","Name":"ComputerMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"ComputerMovementMode"},{"type":"EnumItem","Name":"KeyboardMouse","tags":[],"Value":1,"Enum":"ComputerMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":2,"Enum":"ComputerMovementMode"},{"type":"Enum","Name":"ConcurrencyModel","tags":[]},{"type":"EnumItem","Name":"Serial","tags":[],"Value":0,"Enum":"ConcurrencyModel"},{"type":"EnumItem","Name":"Safe","tags":[],"Value":1,"Enum":"ConcurrencyModel"},{"type":"EnumItem","Name":"Logical","tags":[],"Value":2,"Enum":"ConcurrencyModel"},{"type":"EnumItem","Name":"Empirical","tags":[],"Value":3,"Enum":"ConcurrencyModel"},{"type":"Enum","Name":"ConnectionState","tags":[]},{"type":"EnumItem","Name":"Connected","tags":[],"Value":0,"Enum":"ConnectionState"},{"type":"EnumItem","Name":"Disconnected","tags":[],"Value":1,"Enum":"ConnectionState"},{"type":"Enum","Name":"ContextActionPriority","tags":[]},{"type":"EnumItem","Name":"Low","tags":[],"Value":1000,"Enum":"ContextActionPriority"},{"type":"EnumItem","Name":"Medium","tags":[],"Value":2000,"Enum":"ContextActionPriority"},{"type":"EnumItem","Name":"Default","tags":[],"Value":2000,"Enum":"ContextActionPriority"},{"type":"EnumItem","Name":"High","tags":[],"Value":3000,"Enum":"ContextActionPriority"},{"type":"Enum","Name":"ContextActionResult","tags":[]},{"type":"EnumItem","Name":"Pass","tags":[],"Value":1,"Enum":"ContextActionResult"},{"type":"EnumItem","Name":"Sink","tags":[],"Value":0,"Enum":"ContextActionResult"},{"type":"Enum","Name":"ControlMode","tags":[]},{"type":"EnumItem","Name":"MouseLockSwitch","tags":[],"Value":1,"Enum":"ControlMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":0,"Enum":"ControlMode"},{"type":"Enum","Name":"CoreGuiType","tags":[]},{"type":"EnumItem","Name":"PlayerList","tags":[],"Value":0,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"Health","tags":[],"Value":1,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"Backpack","tags":[],"Value":2,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"Chat","tags":[],"Value":3,"Enum":"CoreGuiType"},{"type":"EnumItem","Name":"All","tags":[],"Value":4,"Enum":"CoreGuiType"},{"type":"Enum","Name":"CreatorType","tags":[]},{"type":"EnumItem","Name":"User","tags":[],"Value":0,"Enum":"CreatorType"},{"type":"EnumItem","Name":"Group","tags":[],"Value":1,"Enum":"CreatorType"},{"type":"Enum","Name":"CurrencyType","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"CurrencyType"},{"type":"EnumItem","Name":"Robux","tags":[],"Value":1,"Enum":"CurrencyType"},{"type":"EnumItem","Name":"Tix","tags":[],"Value":2,"Enum":"CurrencyType"},{"type":"Enum","Name":"CustomCameraMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"CustomCameraMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"CustomCameraMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"CustomCameraMode"},{"type":"Enum","Name":"DataStoreRequestType","tags":[]},{"type":"EnumItem","Name":"GetAsync","tags":[],"Value":0,"Enum":"DataStoreRequestType"},{"type":"EnumItem","Name":"SetIncrementAsync","tags":[],"Value":1,"Enum":"DataStoreRequestType"},{"type":"EnumItem","Name":"UpdateAsync","tags":[],"Value":2,"Enum":"DataStoreRequestType"},{"type":"EnumItem","Name":"GetSortedAsync","tags":[],"Value":3,"Enum":"DataStoreRequestType"},{"type":"EnumItem","Name":"SetIncrementSortedAsync","tags":[],"Value":4,"Enum":"DataStoreRequestType"},{"type":"EnumItem","Name":"OnUpdate","tags":[],"Value":5,"Enum":"DataStoreRequestType"},{"type":"Enum","Name":"DevCameraOcclusionMode","tags":[]},{"type":"EnumItem","Name":"Zoom","tags":[],"Value":0,"Enum":"DevCameraOcclusionMode"},{"type":"EnumItem","Name":"Invisicam","tags":[],"Value":1,"Enum":"DevCameraOcclusionMode"},{"type":"Enum","Name":"DevComputerCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevComputerCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"DevComputerCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"DevComputerCameraMovementMode"},{"type":"EnumItem","Name":"Orbital","tags":[],"Value":3,"Enum":"DevComputerCameraMovementMode"},{"type":"Enum","Name":"DevComputerMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevComputerMovementMode"},{"type":"EnumItem","Name":"KeyboardMouse","tags":[],"Value":1,"Enum":"DevComputerMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":2,"Enum":"DevComputerMovementMode"},{"type":"EnumItem","Name":"Scriptable","tags":[],"Value":3,"Enum":"DevComputerMovementMode"},{"type":"Enum","Name":"DevTouchCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevTouchCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"DevTouchCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"DevTouchCameraMovementMode"},{"type":"EnumItem","Name":"Orbital","tags":[],"Value":3,"Enum":"DevTouchCameraMovementMode"},{"type":"Enum","Name":"DevTouchMovementMode","tags":[]},{"type":"EnumItem","Name":"UserChoice","tags":[],"Value":0,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"Thumbstick","tags":[],"Value":1,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"DPad","tags":[],"Value":2,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"Thumbpad","tags":[],"Value":3,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":4,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"Scriptable","tags":[],"Value":5,"Enum":"DevTouchMovementMode"},{"type":"EnumItem","Name":"DynamicThumbstick","tags":[],"Value":6,"Enum":"DevTouchMovementMode"},{"type":"Enum","Name":"DeveloperMemoryTag","tags":[]},{"type":"EnumItem","Name":"Internal","tags":[],"Value":0,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"HttpCache","tags":[],"Value":1,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Instances","tags":[],"Value":2,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Signals","tags":[],"Value":3,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"LuaHeap","tags":[],"Value":4,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Script","tags":[],"Value":5,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"PhysicsCollision","tags":[],"Value":6,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"PhysicsParts","tags":[],"Value":7,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsSolidModels","tags":[],"Value":8,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsMeshParts","tags":[],"Value":9,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsParticles","tags":[],"Value":10,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsParts","tags":[],"Value":11,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsSpatialHash","tags":[],"Value":12,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsTerrain","tags":[],"Value":13,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsTexture","tags":[],"Value":14,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"GraphicsTextureCharacter","tags":[],"Value":15,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Sounds","tags":[],"Value":16,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"StreamingSounds","tags":[],"Value":17,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"TerrainVoxels","tags":[],"Value":18,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Gui","tags":[],"Value":20,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Animation","tags":[],"Value":21,"Enum":"DeveloperMemoryTag"},{"type":"EnumItem","Name":"Navigation","tags":[],"Value":22,"Enum":"DeveloperMemoryTag"},{"type":"Enum","Name":"DialogBehaviorType","tags":[]},{"type":"EnumItem","Name":"SinglePlayer","tags":[],"Value":0,"Enum":"DialogBehaviorType"},{"type":"EnumItem","Name":"MultiplePlayers","tags":[],"Value":1,"Enum":"DialogBehaviorType"},{"type":"Enum","Name":"DialogPurpose","tags":[]},{"type":"EnumItem","Name":"Quest","tags":[],"Value":0,"Enum":"DialogPurpose"},{"type":"EnumItem","Name":"Help","tags":[],"Value":1,"Enum":"DialogPurpose"},{"type":"EnumItem","Name":"Shop","tags":[],"Value":2,"Enum":"DialogPurpose"},{"type":"Enum","Name":"DialogTone","tags":[]},{"type":"EnumItem","Name":"Neutral","tags":[],"Value":0,"Enum":"DialogTone"},{"type":"EnumItem","Name":"Friendly","tags":[],"Value":1,"Enum":"DialogTone"},{"type":"EnumItem","Name":"Enemy","tags":[],"Value":2,"Enum":"DialogTone"},{"type":"Enum","Name":"DominantAxis","tags":[]},{"type":"EnumItem","Name":"Width","tags":[],"Value":0,"Enum":"DominantAxis"},{"type":"EnumItem","Name":"Height","tags":[],"Value":1,"Enum":"DominantAxis"},{"type":"Enum","Name":"EasingDirection","tags":[]},{"type":"EnumItem","Name":"In","tags":[],"Value":0,"Enum":"EasingDirection"},{"type":"EnumItem","Name":"Out","tags":[],"Value":1,"Enum":"EasingDirection"},{"type":"EnumItem","Name":"InOut","tags":[],"Value":2,"Enum":"EasingDirection"},{"type":"Enum","Name":"EasingStyle","tags":[]},{"type":"EnumItem","Name":"Linear","tags":[],"Value":0,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Sine","tags":[],"Value":1,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Back","tags":[],"Value":2,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Quad","tags":[],"Value":3,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Quart","tags":[],"Value":4,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Quint","tags":[],"Value":5,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Bounce","tags":[],"Value":6,"Enum":"EasingStyle"},{"type":"EnumItem","Name":"Elastic","tags":[],"Value":7,"Enum":"EasingStyle"},{"type":"Enum","Name":"EnviromentalPhysicsThrottle","tags":[]},{"type":"EnumItem","Name":"DefaultAuto","tags":[],"Value":0,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Disabled","tags":[],"Value":1,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Always","tags":[],"Value":2,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip2","tags":[],"Value":3,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip4","tags":[],"Value":4,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip8","tags":[],"Value":5,"Enum":"EnviromentalPhysicsThrottle"},{"type":"EnumItem","Name":"Skip16","tags":[],"Value":6,"Enum":"EnviromentalPhysicsThrottle"},{"type":"Enum","Name":"ErrorReporting","tags":[]},{"type":"EnumItem","Name":"DontReport","tags":[],"Value":0,"Enum":"ErrorReporting"},{"type":"EnumItem","Name":"Prompt","tags":[],"Value":1,"Enum":"ErrorReporting"},{"type":"EnumItem","Name":"Report","tags":[],"Value":2,"Enum":"ErrorReporting"},{"type":"Enum","Name":"ExplosionType","tags":[]},{"type":"EnumItem","Name":"NoCraters","tags":[],"Value":0,"Enum":"ExplosionType"},{"type":"EnumItem","Name":"Craters","tags":[],"Value":1,"Enum":"ExplosionType"},{"type":"EnumItem","Name":"CratersAndDebris","tags":[],"Value":2,"Enum":"ExplosionType"},{"type":"Enum","Name":"FillDirection","tags":[]},{"type":"EnumItem","Name":"Horizontal","tags":[],"Value":0,"Enum":"FillDirection"},{"type":"EnumItem","Name":"Vertical","tags":[],"Value":1,"Enum":"FillDirection"},{"type":"Enum","Name":"FilterResult","tags":[]},{"type":"EnumItem","Name":"Rejected","tags":[],"Value":1,"Enum":"FilterResult"},{"type":"EnumItem","Name":"Accepted","tags":[],"Value":0,"Enum":"FilterResult"},{"type":"Enum","Name":"Font","tags":[]},{"type":"EnumItem","Name":"Legacy","tags":[],"Value":0,"Enum":"Font"},{"type":"EnumItem","Name":"Arial","tags":[],"Value":1,"Enum":"Font"},{"type":"EnumItem","Name":"ArialBold","tags":[],"Value":2,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSans","tags":[],"Value":3,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansBold","tags":[],"Value":4,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansSemibold","tags":[],"Value":16,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansLight","tags":[],"Value":5,"Enum":"Font"},{"type":"EnumItem","Name":"SourceSansItalic","tags":[],"Value":6,"Enum":"Font"},{"type":"EnumItem","Name":"Bodoni","tags":[],"Value":7,"Enum":"Font"},{"type":"EnumItem","Name":"Garamond","tags":[],"Value":8,"Enum":"Font"},{"type":"EnumItem","Name":"Cartoon","tags":[],"Value":9,"Enum":"Font"},{"type":"EnumItem","Name":"Code","tags":[],"Value":10,"Enum":"Font"},{"type":"EnumItem","Name":"Highway","tags":[],"Value":11,"Enum":"Font"},{"type":"EnumItem","Name":"SciFi","tags":[],"Value":12,"Enum":"Font"},{"type":"EnumItem","Name":"Arcade","tags":[],"Value":13,"Enum":"Font"},{"type":"EnumItem","Name":"Fantasy","tags":[],"Value":14,"Enum":"Font"},{"type":"EnumItem","Name":"Antique","tags":[],"Value":15,"Enum":"Font"},{"type":"Enum","Name":"FontSize","tags":[]},{"type":"EnumItem","Name":"Size8","tags":[],"Value":0,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size9","tags":[],"Value":1,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size10","tags":[],"Value":2,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size11","tags":[],"Value":3,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size12","tags":[],"Value":4,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size14","tags":[],"Value":5,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size18","tags":[],"Value":6,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size24","tags":[],"Value":7,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size36","tags":[],"Value":8,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size48","tags":[],"Value":9,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size28","tags":[],"Value":10,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size32","tags":[],"Value":11,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size42","tags":[],"Value":12,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size60","tags":[],"Value":13,"Enum":"FontSize"},{"type":"EnumItem","Name":"Size96","tags":[],"Value":14,"Enum":"FontSize"},{"type":"Enum","Name":"FormFactor","tags":[]},{"type":"EnumItem","Name":"Symmetric","tags":[],"Value":0,"Enum":"FormFactor"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":1,"Enum":"FormFactor"},{"type":"EnumItem","Name":"Plate","tags":[],"Value":2,"Enum":"FormFactor"},{"type":"EnumItem","Name":"Custom","tags":[],"Value":3,"Enum":"FormFactor"},{"type":"Enum","Name":"FrameStyle","tags":[]},{"type":"EnumItem","Name":"Custom","tags":[],"Value":0,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"ChatBlue","tags":[],"Value":1,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"RobloxSquare","tags":[],"Value":2,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"RobloxRound","tags":[],"Value":3,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"ChatGreen","tags":[],"Value":4,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"ChatRed","tags":[],"Value":5,"Enum":"FrameStyle"},{"type":"EnumItem","Name":"DropShadow","tags":[],"Value":6,"Enum":"FrameStyle"},{"type":"Enum","Name":"FramerateManagerMode","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"FramerateManagerMode"},{"type":"EnumItem","Name":"On","tags":[],"Value":1,"Enum":"FramerateManagerMode"},{"type":"EnumItem","Name":"Off","tags":[],"Value":2,"Enum":"FramerateManagerMode"},{"type":"Enum","Name":"FriendRequestEvent","tags":[]},{"type":"EnumItem","Name":"Issue","tags":[],"Value":0,"Enum":"FriendRequestEvent"},{"type":"EnumItem","Name":"Revoke","tags":[],"Value":1,"Enum":"FriendRequestEvent"},{"type":"EnumItem","Name":"Accept","tags":[],"Value":2,"Enum":"FriendRequestEvent"},{"type":"EnumItem","Name":"Deny","tags":[],"Value":3,"Enum":"FriendRequestEvent"},{"type":"Enum","Name":"FriendStatus","tags":[]},{"type":"EnumItem","Name":"Unknown","tags":[],"Value":0,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"NotFriend","tags":[],"Value":1,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"Friend","tags":[],"Value":2,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"FriendRequestSent","tags":[],"Value":3,"Enum":"FriendStatus"},{"type":"EnumItem","Name":"FriendRequestReceived","tags":[],"Value":4,"Enum":"FriendStatus"},{"type":"Enum","Name":"FunctionalTestResult","tags":[]},{"type":"EnumItem","Name":"Passed","tags":[],"Value":0,"Enum":"FunctionalTestResult"},{"type":"EnumItem","Name":"Warning","tags":[],"Value":1,"Enum":"FunctionalTestResult"},{"type":"EnumItem","Name":"Error","tags":[],"Value":2,"Enum":"FunctionalTestResult"},{"type":"Enum","Name":"GameAvatarType","tags":[]},{"type":"EnumItem","Name":"R6","tags":[],"Value":0,"Enum":"GameAvatarType"},{"type":"EnumItem","Name":"R15","tags":[],"Value":1,"Enum":"GameAvatarType"},{"type":"EnumItem","Name":"PlayerChoice","tags":[],"Value":2,"Enum":"GameAvatarType"},{"type":"Enum","Name":"GearGenreSetting","tags":[]},{"type":"EnumItem","Name":"AllGenres","tags":[],"Value":0,"Enum":"GearGenreSetting"},{"type":"EnumItem","Name":"MatchingGenreOnly","tags":[],"Value":1,"Enum":"GearGenreSetting"},{"type":"Enum","Name":"GearType","tags":[]},{"type":"EnumItem","Name":"MeleeWeapons","tags":[],"Value":0,"Enum":"GearType"},{"type":"EnumItem","Name":"RangedWeapons","tags":[],"Value":1,"Enum":"GearType"},{"type":"EnumItem","Name":"Explosives","tags":[],"Value":2,"Enum":"GearType"},{"type":"EnumItem","Name":"PowerUps","tags":[],"Value":3,"Enum":"GearType"},{"type":"EnumItem","Name":"NavigationEnhancers","tags":[],"Value":4,"Enum":"GearType"},{"type":"EnumItem","Name":"MusicalInstruments","tags":[],"Value":5,"Enum":"GearType"},{"type":"EnumItem","Name":"SocialItems","tags":[],"Value":6,"Enum":"GearType"},{"type":"EnumItem","Name":"BuildingTools","tags":[],"Value":7,"Enum":"GearType"},{"type":"EnumItem","Name":"Transport","tags":[],"Value":8,"Enum":"GearType"},{"type":"Enum","Name":"Genre","tags":[]},{"type":"EnumItem","Name":"All","tags":[],"Value":0,"Enum":"Genre"},{"type":"EnumItem","Name":"TownAndCity","tags":[],"Value":1,"Enum":"Genre"},{"type":"EnumItem","Name":"Fantasy","tags":[],"Value":2,"Enum":"Genre"},{"type":"EnumItem","Name":"SciFi","tags":[],"Value":3,"Enum":"Genre"},{"type":"EnumItem","Name":"Ninja","tags":[],"Value":4,"Enum":"Genre"},{"type":"EnumItem","Name":"Scary","tags":[],"Value":5,"Enum":"Genre"},{"type":"EnumItem","Name":"Pirate","tags":[],"Value":6,"Enum":"Genre"},{"type":"EnumItem","Name":"Adventure","tags":[],"Value":7,"Enum":"Genre"},{"type":"EnumItem","Name":"Sports","tags":[],"Value":8,"Enum":"Genre"},{"type":"EnumItem","Name":"Funny","tags":[],"Value":9,"Enum":"Genre"},{"type":"EnumItem","Name":"WildWest","tags":[],"Value":10,"Enum":"Genre"},{"type":"EnumItem","Name":"War","tags":[],"Value":11,"Enum":"Genre"},{"type":"EnumItem","Name":"SkatePark","tags":[],"Value":12,"Enum":"Genre"},{"type":"EnumItem","Name":"Tutorial","tags":[],"Value":13,"Enum":"Genre"},{"type":"Enum","Name":"GraphicsMode","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":1,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"Direct3D9","tags":[],"Value":3,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"Direct3D11","tags":[],"Value":2,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"OpenGL","tags":[],"Value":4,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"Metal","tags":[],"Value":5,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"Vulkan","tags":[],"Value":6,"Enum":"GraphicsMode"},{"type":"EnumItem","Name":"NoGraphics","tags":[],"Value":7,"Enum":"GraphicsMode"},{"type":"Enum","Name":"HandlesStyle","tags":[]},{"type":"EnumItem","Name":"Resize","tags":[],"Value":0,"Enum":"HandlesStyle"},{"type":"EnumItem","Name":"Movement","tags":[],"Value":1,"Enum":"HandlesStyle"},{"type":"Enum","Name":"HorizontalAlignment","tags":[]},{"type":"EnumItem","Name":"Center","tags":[],"Value":0,"Enum":"HorizontalAlignment"},{"type":"EnumItem","Name":"Left","tags":[],"Value":1,"Enum":"HorizontalAlignment"},{"type":"EnumItem","Name":"Right","tags":[],"Value":2,"Enum":"HorizontalAlignment"},{"type":"Enum","Name":"HttpContentType","tags":[]},{"type":"EnumItem","Name":"ApplicationJson","tags":[],"Value":0,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"ApplicationXml","tags":[],"Value":1,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"ApplicationUrlEncoded","tags":[],"Value":2,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"TextPlain","tags":[],"Value":3,"Enum":"HttpContentType"},{"type":"EnumItem","Name":"TextXml","tags":[],"Value":4,"Enum":"HttpContentType"},{"type":"Enum","Name":"HttpRequestType","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"HttpRequestType"},{"type":"EnumItem","Name":"MarketplaceService","tags":[],"Value":2,"Enum":"HttpRequestType"},{"type":"EnumItem","Name":"Players","tags":[],"Value":7,"Enum":"HttpRequestType"},{"type":"EnumItem","Name":"Chat","tags":[],"Value":15,"Enum":"HttpRequestType"},{"type":"EnumItem","Name":"Avatar","tags":[],"Value":16,"Enum":"HttpRequestType"},{"type":"Enum","Name":"HumanoidDisplayDistanceType","tags":[]},{"type":"EnumItem","Name":"Viewer","tags":[],"Value":0,"Enum":"HumanoidDisplayDistanceType"},{"type":"EnumItem","Name":"Subject","tags":[],"Value":1,"Enum":"HumanoidDisplayDistanceType"},{"type":"EnumItem","Name":"None","tags":[],"Value":2,"Enum":"HumanoidDisplayDistanceType"},{"type":"Enum","Name":"HumanoidHealthDisplayType","tags":[]},{"type":"EnumItem","Name":"DisplayWhenDamaged","tags":[],"Value":0,"Enum":"HumanoidHealthDisplayType"},{"type":"EnumItem","Name":"AlwaysOn","tags":[],"Value":1,"Enum":"HumanoidHealthDisplayType"},{"type":"EnumItem","Name":"AlwaysOff","tags":[],"Value":2,"Enum":"HumanoidHealthDisplayType"},{"type":"Enum","Name":"HumanoidRigType","tags":[]},{"type":"EnumItem","Name":"R6","tags":[],"Value":0,"Enum":"HumanoidRigType"},{"type":"EnumItem","Name":"R15","tags":[],"Value":1,"Enum":"HumanoidRigType"},{"type":"Enum","Name":"HumanoidStateType","tags":[]},{"type":"EnumItem","Name":"FallingDown","tags":[],"Value":0,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Running","tags":[],"Value":8,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"RunningNoPhysics","tags":[],"Value":10,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Climbing","tags":[],"Value":12,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"StrafingNoPhysics","tags":[],"Value":11,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Ragdoll","tags":[],"Value":1,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"GettingUp","tags":[],"Value":2,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Jumping","tags":[],"Value":3,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Landed","tags":[],"Value":7,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Flying","tags":[],"Value":6,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Freefall","tags":[],"Value":5,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Seated","tags":[],"Value":13,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"PlatformStanding","tags":[],"Value":14,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Dead","tags":[],"Value":15,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Swimming","tags":[],"Value":4,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"Physics","tags":[],"Value":16,"Enum":"HumanoidStateType"},{"type":"EnumItem","Name":"None","tags":[],"Value":18,"Enum":"HumanoidStateType"},{"type":"Enum","Name":"InOut","tags":[]},{"type":"EnumItem","Name":"Edge","tags":[],"Value":0,"Enum":"InOut"},{"type":"EnumItem","Name":"Inset","tags":[],"Value":1,"Enum":"InOut"},{"type":"EnumItem","Name":"Center","tags":[],"Value":2,"Enum":"InOut"},{"type":"Enum","Name":"InfoType","tags":[]},{"type":"EnumItem","Name":"Asset","tags":[],"Value":0,"Enum":"InfoType"},{"type":"EnumItem","Name":"Product","tags":[],"Value":1,"Enum":"InfoType"},{"type":"EnumItem","Name":"GamePass","tags":[],"Value":2,"Enum":"InfoType"},{"type":"Enum","Name":"InputType","tags":[]},{"type":"EnumItem","Name":"NoInput","tags":[],"Value":0,"Enum":"InputType"},{"type":"EnumItem","Name":"LeftTread","tags":[],"Value":1,"Enum":"InputType"},{"type":"EnumItem","Name":"RightTread","tags":[],"Value":2,"Enum":"InputType"},{"type":"EnumItem","Name":"Steer","tags":[],"Value":3,"Enum":"InputType"},{"type":"EnumItem","Name":"Throttle","tags":[],"Value":4,"Enum":"InputType"},{"type":"EnumItem","Name":"UpDown","tags":[],"Value":6,"Enum":"InputType"},{"type":"EnumItem","Name":"Action1","tags":[],"Value":7,"Enum":"InputType"},{"type":"EnumItem","Name":"Action2","tags":[],"Value":8,"Enum":"InputType"},{"type":"EnumItem","Name":"Action3","tags":[],"Value":9,"Enum":"InputType"},{"type":"EnumItem","Name":"Action4","tags":[],"Value":10,"Enum":"InputType"},{"type":"EnumItem","Name":"Action5","tags":[],"Value":11,"Enum":"InputType"},{"type":"EnumItem","Name":"Constant","tags":[],"Value":12,"Enum":"InputType"},{"type":"EnumItem","Name":"Sin","tags":[],"Value":13,"Enum":"InputType"},{"type":"Enum","Name":"JointCreationMode","tags":[]},{"type":"EnumItem","Name":"All","tags":[],"Value":0,"Enum":"JointCreationMode"},{"type":"EnumItem","Name":"Surface","tags":[],"Value":1,"Enum":"JointCreationMode"},{"type":"EnumItem","Name":"None","tags":[],"Value":2,"Enum":"JointCreationMode"},{"type":"Enum","Name":"JointType","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":28,"Enum":"JointType"},{"type":"EnumItem","Name":"Rotate","tags":[],"Value":7,"Enum":"JointType"},{"type":"EnumItem","Name":"RotateP","tags":[],"Value":8,"Enum":"JointType"},{"type":"EnumItem","Name":"RotateV","tags":[],"Value":9,"Enum":"JointType"},{"type":"EnumItem","Name":"Glue","tags":[],"Value":10,"Enum":"JointType"},{"type":"EnumItem","Name":"Weld","tags":[],"Value":1,"Enum":"JointType"},{"type":"EnumItem","Name":"Snap","tags":[],"Value":3,"Enum":"JointType"},{"type":"Enum","Name":"KeyCode","tags":[]},{"type":"EnumItem","Name":"Unknown","tags":[],"Value":0,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Backspace","tags":[],"Value":8,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Tab","tags":[],"Value":9,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Clear","tags":[],"Value":12,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Return","tags":[],"Value":13,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Pause","tags":[],"Value":19,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Escape","tags":[],"Value":27,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Space","tags":[],"Value":32,"Enum":"KeyCode"},{"type":"EnumItem","Name":"QuotedDouble","tags":[],"Value":34,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Hash","tags":[],"Value":35,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Dollar","tags":[],"Value":36,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Percent","tags":[],"Value":37,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Ampersand","tags":[],"Value":38,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Quote","tags":[],"Value":39,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftParenthesis","tags":[],"Value":40,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightParenthesis","tags":[],"Value":41,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Asterisk","tags":[],"Value":42,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Plus","tags":[],"Value":43,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Comma","tags":[],"Value":44,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Minus","tags":[],"Value":45,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Period","tags":[],"Value":46,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Slash","tags":[],"Value":47,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Zero","tags":[],"Value":48,"Enum":"KeyCode"},{"type":"EnumItem","Name":"One","tags":[],"Value":49,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Two","tags":[],"Value":50,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Three","tags":[],"Value":51,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Four","tags":[],"Value":52,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Five","tags":[],"Value":53,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Six","tags":[],"Value":54,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Seven","tags":[],"Value":55,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Eight","tags":[],"Value":56,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Nine","tags":[],"Value":57,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Colon","tags":[],"Value":58,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Semicolon","tags":[],"Value":59,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LessThan","tags":[],"Value":60,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Equals","tags":[],"Value":61,"Enum":"KeyCode"},{"type":"EnumItem","Name":"GreaterThan","tags":[],"Value":62,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Question","tags":[],"Value":63,"Enum":"KeyCode"},{"type":"EnumItem","Name":"At","tags":[],"Value":64,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftBracket","tags":[],"Value":91,"Enum":"KeyCode"},{"type":"EnumItem","Name":"BackSlash","tags":[],"Value":92,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightBracket","tags":[],"Value":93,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Caret","tags":[],"Value":94,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Underscore","tags":[],"Value":95,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Backquote","tags":[],"Value":96,"Enum":"KeyCode"},{"type":"EnumItem","Name":"A","tags":[],"Value":97,"Enum":"KeyCode"},{"type":"EnumItem","Name":"B","tags":[],"Value":98,"Enum":"KeyCode"},{"type":"EnumItem","Name":"C","tags":[],"Value":99,"Enum":"KeyCode"},{"type":"EnumItem","Name":"D","tags":[],"Value":100,"Enum":"KeyCode"},{"type":"EnumItem","Name":"E","tags":[],"Value":101,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F","tags":[],"Value":102,"Enum":"KeyCode"},{"type":"EnumItem","Name":"G","tags":[],"Value":103,"Enum":"KeyCode"},{"type":"EnumItem","Name":"H","tags":[],"Value":104,"Enum":"KeyCode"},{"type":"EnumItem","Name":"I","tags":[],"Value":105,"Enum":"KeyCode"},{"type":"EnumItem","Name":"J","tags":[],"Value":106,"Enum":"KeyCode"},{"type":"EnumItem","Name":"K","tags":[],"Value":107,"Enum":"KeyCode"},{"type":"EnumItem","Name":"L","tags":[],"Value":108,"Enum":"KeyCode"},{"type":"EnumItem","Name":"M","tags":[],"Value":109,"Enum":"KeyCode"},{"type":"EnumItem","Name":"N","tags":[],"Value":110,"Enum":"KeyCode"},{"type":"EnumItem","Name":"O","tags":[],"Value":111,"Enum":"KeyCode"},{"type":"EnumItem","Name":"P","tags":[],"Value":112,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Q","tags":[],"Value":113,"Enum":"KeyCode"},{"type":"EnumItem","Name":"R","tags":[],"Value":114,"Enum":"KeyCode"},{"type":"EnumItem","Name":"S","tags":[],"Value":115,"Enum":"KeyCode"},{"type":"EnumItem","Name":"T","tags":[],"Value":116,"Enum":"KeyCode"},{"type":"EnumItem","Name":"U","tags":[],"Value":117,"Enum":"KeyCode"},{"type":"EnumItem","Name":"V","tags":[],"Value":118,"Enum":"KeyCode"},{"type":"EnumItem","Name":"W","tags":[],"Value":119,"Enum":"KeyCode"},{"type":"EnumItem","Name":"X","tags":[],"Value":120,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Y","tags":[],"Value":121,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Z","tags":[],"Value":122,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftCurly","tags":[],"Value":123,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Pipe","tags":[],"Value":124,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightCurly","tags":[],"Value":125,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Tilde","tags":[],"Value":126,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Delete","tags":[],"Value":127,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadZero","tags":[],"Value":256,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadOne","tags":[],"Value":257,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadTwo","tags":[],"Value":258,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadThree","tags":[],"Value":259,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadFour","tags":[],"Value":260,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadFive","tags":[],"Value":261,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadSix","tags":[],"Value":262,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadSeven","tags":[],"Value":263,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadEight","tags":[],"Value":264,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadNine","tags":[],"Value":265,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadPeriod","tags":[],"Value":266,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadDivide","tags":[],"Value":267,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadMultiply","tags":[],"Value":268,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadMinus","tags":[],"Value":269,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadPlus","tags":[],"Value":270,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadEnter","tags":[],"Value":271,"Enum":"KeyCode"},{"type":"EnumItem","Name":"KeypadEquals","tags":[],"Value":272,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Up","tags":[],"Value":273,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Down","tags":[],"Value":274,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Right","tags":[],"Value":275,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Left","tags":[],"Value":276,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Insert","tags":[],"Value":277,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Home","tags":[],"Value":278,"Enum":"KeyCode"},{"type":"EnumItem","Name":"End","tags":[],"Value":279,"Enum":"KeyCode"},{"type":"EnumItem","Name":"PageUp","tags":[],"Value":280,"Enum":"KeyCode"},{"type":"EnumItem","Name":"PageDown","tags":[],"Value":281,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftShift","tags":[],"Value":304,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightShift","tags":[],"Value":303,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftMeta","tags":[],"Value":310,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightMeta","tags":[],"Value":309,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftAlt","tags":[],"Value":308,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightAlt","tags":[],"Value":307,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftControl","tags":[],"Value":306,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightControl","tags":[],"Value":305,"Enum":"KeyCode"},{"type":"EnumItem","Name":"CapsLock","tags":[],"Value":301,"Enum":"KeyCode"},{"type":"EnumItem","Name":"NumLock","tags":[],"Value":300,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ScrollLock","tags":[],"Value":302,"Enum":"KeyCode"},{"type":"EnumItem","Name":"LeftSuper","tags":[],"Value":311,"Enum":"KeyCode"},{"type":"EnumItem","Name":"RightSuper","tags":[],"Value":312,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Mode","tags":[],"Value":313,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Compose","tags":[],"Value":314,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Help","tags":[],"Value":315,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Print","tags":[],"Value":316,"Enum":"KeyCode"},{"type":"EnumItem","Name":"SysReq","tags":[],"Value":317,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Break","tags":[],"Value":318,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Menu","tags":[],"Value":319,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Power","tags":[],"Value":320,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Euro","tags":[],"Value":321,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Undo","tags":[],"Value":322,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F1","tags":[],"Value":282,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F2","tags":[],"Value":283,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F3","tags":[],"Value":284,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F4","tags":[],"Value":285,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F5","tags":[],"Value":286,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F6","tags":[],"Value":287,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F7","tags":[],"Value":288,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F8","tags":[],"Value":289,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F9","tags":[],"Value":290,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F10","tags":[],"Value":291,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F11","tags":[],"Value":292,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F12","tags":[],"Value":293,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F13","tags":[],"Value":294,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F14","tags":[],"Value":295,"Enum":"KeyCode"},{"type":"EnumItem","Name":"F15","tags":[],"Value":296,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World0","tags":[],"Value":160,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World1","tags":[],"Value":161,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World2","tags":[],"Value":162,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World3","tags":[],"Value":163,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World4","tags":[],"Value":164,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World5","tags":[],"Value":165,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World6","tags":[],"Value":166,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World7","tags":[],"Value":167,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World8","tags":[],"Value":168,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World9","tags":[],"Value":169,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World10","tags":[],"Value":170,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World11","tags":[],"Value":171,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World12","tags":[],"Value":172,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World13","tags":[],"Value":173,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World14","tags":[],"Value":174,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World15","tags":[],"Value":175,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World16","tags":[],"Value":176,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World17","tags":[],"Value":177,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World18","tags":[],"Value":178,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World19","tags":[],"Value":179,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World20","tags":[],"Value":180,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World21","tags":[],"Value":181,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World22","tags":[],"Value":182,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World23","tags":[],"Value":183,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World24","tags":[],"Value":184,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World25","tags":[],"Value":185,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World26","tags":[],"Value":186,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World27","tags":[],"Value":187,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World28","tags":[],"Value":188,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World29","tags":[],"Value":189,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World30","tags":[],"Value":190,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World31","tags":[],"Value":191,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World32","tags":[],"Value":192,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World33","tags":[],"Value":193,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World34","tags":[],"Value":194,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World35","tags":[],"Value":195,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World36","tags":[],"Value":196,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World37","tags":[],"Value":197,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World38","tags":[],"Value":198,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World39","tags":[],"Value":199,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World40","tags":[],"Value":200,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World41","tags":[],"Value":201,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World42","tags":[],"Value":202,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World43","tags":[],"Value":203,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World44","tags":[],"Value":204,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World45","tags":[],"Value":205,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World46","tags":[],"Value":206,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World47","tags":[],"Value":207,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World48","tags":[],"Value":208,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World49","tags":[],"Value":209,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World50","tags":[],"Value":210,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World51","tags":[],"Value":211,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World52","tags":[],"Value":212,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World53","tags":[],"Value":213,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World54","tags":[],"Value":214,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World55","tags":[],"Value":215,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World56","tags":[],"Value":216,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World57","tags":[],"Value":217,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World58","tags":[],"Value":218,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World59","tags":[],"Value":219,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World60","tags":[],"Value":220,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World61","tags":[],"Value":221,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World62","tags":[],"Value":222,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World63","tags":[],"Value":223,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World64","tags":[],"Value":224,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World65","tags":[],"Value":225,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World66","tags":[],"Value":226,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World67","tags":[],"Value":227,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World68","tags":[],"Value":228,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World69","tags":[],"Value":229,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World70","tags":[],"Value":230,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World71","tags":[],"Value":231,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World72","tags":[],"Value":232,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World73","tags":[],"Value":233,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World74","tags":[],"Value":234,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World75","tags":[],"Value":235,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World76","tags":[],"Value":236,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World77","tags":[],"Value":237,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World78","tags":[],"Value":238,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World79","tags":[],"Value":239,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World80","tags":[],"Value":240,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World81","tags":[],"Value":241,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World82","tags":[],"Value":242,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World83","tags":[],"Value":243,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World84","tags":[],"Value":244,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World85","tags":[],"Value":245,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World86","tags":[],"Value":246,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World87","tags":[],"Value":247,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World88","tags":[],"Value":248,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World89","tags":[],"Value":249,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World90","tags":[],"Value":250,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World91","tags":[],"Value":251,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World92","tags":[],"Value":252,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World93","tags":[],"Value":253,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World94","tags":[],"Value":254,"Enum":"KeyCode"},{"type":"EnumItem","Name":"World95","tags":[],"Value":255,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonX","tags":[],"Value":1000,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonY","tags":[],"Value":1001,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonA","tags":[],"Value":1002,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonB","tags":[],"Value":1003,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonR1","tags":[],"Value":1004,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonL1","tags":[],"Value":1005,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonR2","tags":[],"Value":1006,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonL2","tags":[],"Value":1007,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonR3","tags":[],"Value":1008,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonL3","tags":[],"Value":1009,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonStart","tags":[],"Value":1010,"Enum":"KeyCode"},{"type":"EnumItem","Name":"ButtonSelect","tags":[],"Value":1011,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadLeft","tags":[],"Value":1012,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadRight","tags":[],"Value":1013,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadUp","tags":[],"Value":1014,"Enum":"KeyCode"},{"type":"EnumItem","Name":"DPadDown","tags":[],"Value":1015,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Thumbstick1","tags":[],"Value":1016,"Enum":"KeyCode"},{"type":"EnumItem","Name":"Thumbstick2","tags":[],"Value":1017,"Enum":"KeyCode"},{"type":"Enum","Name":"KeywordFilterType","tags":[]},{"type":"EnumItem","Name":"Include","tags":[],"Value":0,"Enum":"KeywordFilterType"},{"type":"EnumItem","Name":"Exclude","tags":[],"Value":1,"Enum":"KeywordFilterType"},{"type":"Enum","Name":"Language","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"Language"},{"type":"Enum","Name":"LeftRight","tags":[]},{"type":"EnumItem","Name":"Left","tags":[],"Value":0,"Enum":"LeftRight"},{"type":"EnumItem","Name":"Center","tags":[],"Value":1,"Enum":"LeftRight"},{"type":"EnumItem","Name":"Right","tags":[],"Value":2,"Enum":"LeftRight"},{"type":"Enum","Name":"LevelOfDetailSetting","tags":[]},{"type":"EnumItem","Name":"High","tags":[],"Value":2,"Enum":"LevelOfDetailSetting"},{"type":"EnumItem","Name":"Medium","tags":[],"Value":1,"Enum":"LevelOfDetailSetting"},{"type":"EnumItem","Name":"Low","tags":[],"Value":0,"Enum":"LevelOfDetailSetting"},{"type":"Enum","Name":"Limb","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"Limb"},{"type":"EnumItem","Name":"Torso","tags":[],"Value":1,"Enum":"Limb"},{"type":"EnumItem","Name":"LeftArm","tags":[],"Value":2,"Enum":"Limb"},{"type":"EnumItem","Name":"RightArm","tags":[],"Value":3,"Enum":"Limb"},{"type":"EnumItem","Name":"LeftLeg","tags":[],"Value":4,"Enum":"Limb"},{"type":"EnumItem","Name":"RightLeg","tags":[],"Value":5,"Enum":"Limb"},{"type":"EnumItem","Name":"Unknown","tags":[],"Value":6,"Enum":"Limb"},{"type":"Enum","Name":"ListenerType","tags":[]},{"type":"EnumItem","Name":"Camera","tags":[],"Value":0,"Enum":"ListenerType"},{"type":"EnumItem","Name":"CFrame","tags":[],"Value":1,"Enum":"ListenerType"},{"type":"EnumItem","Name":"ObjectPosition","tags":[],"Value":2,"Enum":"ListenerType"},{"type":"EnumItem","Name":"ObjectCFrame","tags":[],"Value":3,"Enum":"ListenerType"},{"type":"Enum","Name":"Material","tags":[]},{"type":"EnumItem","Name":"Plastic","tags":[],"Value":256,"Enum":"Material"},{"type":"EnumItem","Name":"Wood","tags":[],"Value":512,"Enum":"Material"},{"type":"EnumItem","Name":"Slate","tags":[],"Value":800,"Enum":"Material"},{"type":"EnumItem","Name":"Concrete","tags":[],"Value":816,"Enum":"Material"},{"type":"EnumItem","Name":"CorrodedMetal","tags":[],"Value":1040,"Enum":"Material"},{"type":"EnumItem","Name":"DiamondPlate","tags":[],"Value":1056,"Enum":"Material"},{"type":"EnumItem","Name":"Foil","tags":[],"Value":1072,"Enum":"Material"},{"type":"EnumItem","Name":"Grass","tags":[],"Value":1280,"Enum":"Material"},{"type":"EnumItem","Name":"Ice","tags":[],"Value":1536,"Enum":"Material"},{"type":"EnumItem","Name":"Marble","tags":[],"Value":784,"Enum":"Material"},{"type":"EnumItem","Name":"Granite","tags":[],"Value":832,"Enum":"Material"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":848,"Enum":"Material"},{"type":"EnumItem","Name":"Pebble","tags":[],"Value":864,"Enum":"Material"},{"type":"EnumItem","Name":"Sand","tags":[],"Value":1296,"Enum":"Material"},{"type":"EnumItem","Name":"Fabric","tags":[],"Value":1312,"Enum":"Material"},{"type":"EnumItem","Name":"SmoothPlastic","tags":[],"Value":272,"Enum":"Material"},{"type":"EnumItem","Name":"Metal","tags":[],"Value":1088,"Enum":"Material"},{"type":"EnumItem","Name":"WoodPlanks","tags":[],"Value":528,"Enum":"Material"},{"type":"EnumItem","Name":"Cobblestone","tags":[],"Value":880,"Enum":"Material"},{"type":"EnumItem","Name":"Air","tags":["notbrowsable"],"Value":1792,"Enum":"Material"},{"type":"EnumItem","Name":"Water","tags":["notbrowsable"],"Value":2048,"Enum":"Material"},{"type":"EnumItem","Name":"Rock","tags":["notbrowsable"],"Value":896,"Enum":"Material"},{"type":"EnumItem","Name":"Glacier","tags":["notbrowsable"],"Value":1552,"Enum":"Material"},{"type":"EnumItem","Name":"Snow","tags":["notbrowsable"],"Value":1328,"Enum":"Material"},{"type":"EnumItem","Name":"Sandstone","tags":["notbrowsable"],"Value":912,"Enum":"Material"},{"type":"EnumItem","Name":"Mud","tags":["notbrowsable"],"Value":1344,"Enum":"Material"},{"type":"EnumItem","Name":"Basalt","tags":["notbrowsable"],"Value":788,"Enum":"Material"},{"type":"EnumItem","Name":"Ground","tags":["notbrowsable"],"Value":1360,"Enum":"Material"},{"type":"EnumItem","Name":"CrackedLava","tags":["notbrowsable"],"Value":804,"Enum":"Material"},{"type":"EnumItem","Name":"Neon","tags":[],"Value":288,"Enum":"Material"},{"type":"EnumItem","Name":"Asphalt","tags":["notbrowsable"],"Value":1376,"Enum":"Material"},{"type":"EnumItem","Name":"LeafyGrass","tags":["notbrowsable"],"Value":1284,"Enum":"Material"},{"type":"EnumItem","Name":"Salt","tags":["notbrowsable"],"Value":1392,"Enum":"Material"},{"type":"EnumItem","Name":"Limestone","tags":["notbrowsable"],"Value":820,"Enum":"Material"},{"type":"EnumItem","Name":"Pavement","tags":["notbrowsable"],"Value":836,"Enum":"Material"},{"type":"Enum","Name":"MembershipType","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"MembershipType"},{"type":"EnumItem","Name":"BuildersClub","tags":[],"Value":1,"Enum":"MembershipType"},{"type":"EnumItem","Name":"TurboBuildersClub","tags":[],"Value":2,"Enum":"MembershipType"},{"type":"EnumItem","Name":"OutrageousBuildersClub","tags":[],"Value":3,"Enum":"MembershipType"},{"type":"Enum","Name":"MeshType","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"MeshType"},{"type":"EnumItem","Name":"Torso","tags":[],"Value":1,"Enum":"MeshType"},{"type":"EnumItem","Name":"Wedge","tags":[],"Value":2,"Enum":"MeshType"},{"type":"EnumItem","Name":"Prism","tags":["deprecated"],"Value":7,"Enum":"MeshType"},{"type":"EnumItem","Name":"Pyramid","tags":["deprecated"],"Value":8,"Enum":"MeshType"},{"type":"EnumItem","Name":"ParallelRamp","tags":["deprecated"],"Value":9,"Enum":"MeshType"},{"type":"EnumItem","Name":"RightAngleRamp","tags":["deprecated"],"Value":10,"Enum":"MeshType"},{"type":"EnumItem","Name":"CornerWedge","tags":["deprecated"],"Value":11,"Enum":"MeshType"},{"type":"EnumItem","Name":"Brick","tags":[],"Value":6,"Enum":"MeshType"},{"type":"EnumItem","Name":"Sphere","tags":[],"Value":3,"Enum":"MeshType"},{"type":"EnumItem","Name":"Cylinder","tags":[],"Value":4,"Enum":"MeshType"},{"type":"EnumItem","Name":"FileMesh","tags":[],"Value":5,"Enum":"MeshType"},{"type":"Enum","Name":"MessageType","tags":[]},{"type":"EnumItem","Name":"MessageOutput","tags":[],"Value":0,"Enum":"MessageType"},{"type":"EnumItem","Name":"MessageInfo","tags":[],"Value":1,"Enum":"MessageType"},{"type":"EnumItem","Name":"MessageWarning","tags":[],"Value":2,"Enum":"MessageType"},{"type":"EnumItem","Name":"MessageError","tags":[],"Value":3,"Enum":"MessageType"},{"type":"Enum","Name":"MouseBehavior","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"MouseBehavior"},{"type":"EnumItem","Name":"LockCenter","tags":[],"Value":1,"Enum":"MouseBehavior"},{"type":"EnumItem","Name":"LockCurrentPosition","tags":[],"Value":2,"Enum":"MouseBehavior"},{"type":"Enum","Name":"MoveState","tags":[]},{"type":"EnumItem","Name":"Stopped","tags":[],"Value":0,"Enum":"MoveState"},{"type":"EnumItem","Name":"Coasting","tags":[],"Value":1,"Enum":"MoveState"},{"type":"EnumItem","Name":"Pushing","tags":[],"Value":2,"Enum":"MoveState"},{"type":"EnumItem","Name":"Stopping","tags":[],"Value":3,"Enum":"MoveState"},{"type":"EnumItem","Name":"AirFree","tags":[],"Value":4,"Enum":"MoveState"},{"type":"Enum","Name":"NameOcclusion","tags":[]},{"type":"EnumItem","Name":"OccludeAll","tags":[],"Value":2,"Enum":"NameOcclusion"},{"type":"EnumItem","Name":"EnemyOcclusion","tags":[],"Value":1,"Enum":"NameOcclusion"},{"type":"EnumItem","Name":"NoOcclusion","tags":[],"Value":0,"Enum":"NameOcclusion"},{"type":"Enum","Name":"NetworkOwnership","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"NetworkOwnership"},{"type":"EnumItem","Name":"Manual","tags":[],"Value":1,"Enum":"NetworkOwnership"},{"type":"EnumItem","Name":"OnContact","tags":[],"Value":2,"Enum":"NetworkOwnership"},{"type":"Enum","Name":"NormalId","tags":[]},{"type":"EnumItem","Name":"Top","tags":[],"Value":1,"Enum":"NormalId"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":4,"Enum":"NormalId"},{"type":"EnumItem","Name":"Back","tags":[],"Value":2,"Enum":"NormalId"},{"type":"EnumItem","Name":"Front","tags":[],"Value":5,"Enum":"NormalId"},{"type":"EnumItem","Name":"Right","tags":[],"Value":0,"Enum":"NormalId"},{"type":"EnumItem","Name":"Left","tags":[],"Value":3,"Enum":"NormalId"},{"type":"Enum","Name":"OverrideMouseIconBehavior","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"OverrideMouseIconBehavior"},{"type":"EnumItem","Name":"ForceShow","tags":[],"Value":1,"Enum":"OverrideMouseIconBehavior"},{"type":"EnumItem","Name":"ForceHide","tags":[],"Value":2,"Enum":"OverrideMouseIconBehavior"},{"type":"Enum","Name":"PacketPriority","tags":[]},{"type":"EnumItem","Name":"IMMEDIATE_PRIORITY","tags":[],"Value":0,"Enum":"PacketPriority"},{"type":"EnumItem","Name":"HIGH_PRIORITY","tags":[],"Value":1,"Enum":"PacketPriority"},{"type":"EnumItem","Name":"MEDIUM_PRIORITY","tags":[],"Value":2,"Enum":"PacketPriority"},{"type":"EnumItem","Name":"LOW_PRIORITY","tags":[],"Value":3,"Enum":"PacketPriority"},{"type":"Enum","Name":"PacketReliability","tags":[]},{"type":"EnumItem","Name":"UNRELIABLE","tags":[],"Value":0,"Enum":"PacketReliability"},{"type":"EnumItem","Name":"UNRELIABLE_SEQUENCED","tags":[],"Value":1,"Enum":"PacketReliability"},{"type":"EnumItem","Name":"RELIABLE","tags":[],"Value":2,"Enum":"PacketReliability"},{"type":"EnumItem","Name":"RELIABLE_ORDERED","tags":[],"Value":3,"Enum":"PacketReliability"},{"type":"EnumItem","Name":"RELIABLE_SEQUENCED","tags":[],"Value":4,"Enum":"PacketReliability"},{"type":"Enum","Name":"PartType","tags":[]},{"type":"EnumItem","Name":"Ball","tags":[],"Value":0,"Enum":"PartType"},{"type":"EnumItem","Name":"Block","tags":[],"Value":1,"Enum":"PartType"},{"type":"EnumItem","Name":"Cylinder","tags":[],"Value":2,"Enum":"PartType"},{"type":"Enum","Name":"PathStatus","tags":[]},{"type":"EnumItem","Name":"Success","tags":[],"Value":0,"Enum":"PathStatus"},{"type":"EnumItem","Name":"ClosestNoPath","tags":["deprecated"],"Value":1,"Enum":"PathStatus"},{"type":"EnumItem","Name":"ClosestOutOfRange","tags":["deprecated"],"Value":2,"Enum":"PathStatus"},{"type":"EnumItem","Name":"FailStartNotEmpty","tags":["deprecated"],"Value":3,"Enum":"PathStatus"},{"type":"EnumItem","Name":"FailFinishNotEmpty","tags":["deprecated"],"Value":4,"Enum":"PathStatus"},{"type":"EnumItem","Name":"NoPath","tags":[],"Value":5,"Enum":"PathStatus"},{"type":"Enum","Name":"PathWaypointAction","tags":[]},{"type":"EnumItem","Name":"Walk","tags":[],"Value":0,"Enum":"PathWaypointAction"},{"type":"EnumItem","Name":"Jump","tags":[],"Value":1,"Enum":"PathWaypointAction"},{"type":"Enum","Name":"PhysicsReceiveMethod","tags":[]},{"type":"EnumItem","Name":"Direct","tags":[],"Value":0,"Enum":"PhysicsReceiveMethod"},{"type":"EnumItem","Name":"Interpolation","tags":[],"Value":1,"Enum":"PhysicsReceiveMethod"},{"type":"Enum","Name":"PhysicsSendMethod","tags":[]},{"type":"EnumItem","Name":"ErrorComputation","tags":[],"Value":0,"Enum":"PhysicsSendMethod"},{"type":"EnumItem","Name":"ErrorComputation2","tags":[],"Value":1,"Enum":"PhysicsSendMethod"},{"type":"EnumItem","Name":"RoundRobin","tags":[],"Value":2,"Enum":"PhysicsSendMethod"},{"type":"EnumItem","Name":"TopNErrors","tags":[],"Value":3,"Enum":"PhysicsSendMethod"},{"type":"Enum","Name":"Platform","tags":[]},{"type":"EnumItem","Name":"Windows","tags":[],"Value":0,"Enum":"Platform"},{"type":"EnumItem","Name":"OSX","tags":[],"Value":1,"Enum":"Platform"},{"type":"EnumItem","Name":"IOS","tags":[],"Value":2,"Enum":"Platform"},{"type":"EnumItem","Name":"Android","tags":[],"Value":3,"Enum":"Platform"},{"type":"EnumItem","Name":"XBoxOne","tags":[],"Value":4,"Enum":"Platform"},{"type":"EnumItem","Name":"PS4","tags":[],"Value":5,"Enum":"Platform"},{"type":"EnumItem","Name":"PS3","tags":[],"Value":6,"Enum":"Platform"},{"type":"EnumItem","Name":"XBox360","tags":[],"Value":7,"Enum":"Platform"},{"type":"EnumItem","Name":"WiiU","tags":[],"Value":8,"Enum":"Platform"},{"type":"EnumItem","Name":"NX","tags":[],"Value":9,"Enum":"Platform"},{"type":"EnumItem","Name":"Ouya","tags":[],"Value":10,"Enum":"Platform"},{"type":"EnumItem","Name":"AndroidTV","tags":[],"Value":11,"Enum":"Platform"},{"type":"EnumItem","Name":"Chromecast","tags":[],"Value":12,"Enum":"Platform"},{"type":"EnumItem","Name":"Linux","tags":[],"Value":13,"Enum":"Platform"},{"type":"EnumItem","Name":"SteamOS","tags":[],"Value":14,"Enum":"Platform"},{"type":"EnumItem","Name":"WebOS","tags":[],"Value":15,"Enum":"Platform"},{"type":"EnumItem","Name":"DOS","tags":[],"Value":16,"Enum":"Platform"},{"type":"EnumItem","Name":"BeOS","tags":[],"Value":17,"Enum":"Platform"},{"type":"EnumItem","Name":"UWP","tags":[],"Value":18,"Enum":"Platform"},{"type":"EnumItem","Name":"None","tags":[],"Value":19,"Enum":"Platform"},{"type":"Enum","Name":"PlaybackState","tags":[]},{"type":"EnumItem","Name":"Begin","tags":[],"Value":0,"Enum":"PlaybackState"},{"type":"EnumItem","Name":"Delayed","tags":[],"Value":1,"Enum":"PlaybackState"},{"type":"EnumItem","Name":"Playing","tags":[],"Value":2,"Enum":"PlaybackState"},{"type":"EnumItem","Name":"Paused","tags":[],"Value":3,"Enum":"PlaybackState"},{"type":"EnumItem","Name":"Completed","tags":[],"Value":4,"Enum":"PlaybackState"},{"type":"EnumItem","Name":"Cancelled","tags":[],"Value":5,"Enum":"PlaybackState"},{"type":"Enum","Name":"PlayerActions","tags":[]},{"type":"EnumItem","Name":"CharacterForward","tags":[],"Value":0,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterBackward","tags":[],"Value":1,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterLeft","tags":[],"Value":2,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterRight","tags":[],"Value":3,"Enum":"PlayerActions"},{"type":"EnumItem","Name":"CharacterJump","tags":[],"Value":4,"Enum":"PlayerActions"},{"type":"Enum","Name":"PlayerChatType","tags":[]},{"type":"EnumItem","Name":"All","tags":[],"Value":0,"Enum":"PlayerChatType"},{"type":"EnumItem","Name":"Team","tags":[],"Value":1,"Enum":"PlayerChatType"},{"type":"EnumItem","Name":"Whisper","tags":[],"Value":2,"Enum":"PlayerChatType"},{"type":"Enum","Name":"PoseEasingDirection","tags":[]},{"type":"EnumItem","Name":"Out","tags":[],"Value":1,"Enum":"PoseEasingDirection"},{"type":"EnumItem","Name":"InOut","tags":[],"Value":2,"Enum":"PoseEasingDirection"},{"type":"EnumItem","Name":"In","tags":[],"Value":0,"Enum":"PoseEasingDirection"},{"type":"Enum","Name":"PoseEasingStyle","tags":[]},{"type":"EnumItem","Name":"Linear","tags":[],"Value":0,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Constant","tags":[],"Value":1,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Elastic","tags":[],"Value":2,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Cubic","tags":[],"Value":3,"Enum":"PoseEasingStyle"},{"type":"EnumItem","Name":"Bounce","tags":[],"Value":4,"Enum":"PoseEasingStyle"},{"type":"Enum","Name":"PriorityMethod","tags":[]},{"type":"EnumItem","Name":"LastError","tags":[],"Value":0,"Enum":"PriorityMethod"},{"type":"EnumItem","Name":"AccumulatedError","tags":[],"Value":1,"Enum":"PriorityMethod"},{"type":"EnumItem","Name":"FIFO","tags":[],"Value":2,"Enum":"PriorityMethod"},{"type":"Enum","Name":"PrismSides","tags":[]},{"type":"EnumItem","Name":"3","tags":[],"Value":3,"Enum":"PrismSides"},{"type":"EnumItem","Name":"5","tags":[],"Value":5,"Enum":"PrismSides"},{"type":"EnumItem","Name":"6","tags":[],"Value":6,"Enum":"PrismSides"},{"type":"EnumItem","Name":"8","tags":[],"Value":8,"Enum":"PrismSides"},{"type":"EnumItem","Name":"10","tags":[],"Value":10,"Enum":"PrismSides"},{"type":"EnumItem","Name":"20","tags":[],"Value":20,"Enum":"PrismSides"},{"type":"Enum","Name":"PrivilegeType","tags":[]},{"type":"EnumItem","Name":"Owner","tags":[],"Value":255,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Admin","tags":[],"Value":240,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Member","tags":[],"Value":128,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Visitor","tags":[],"Value":10,"Enum":"PrivilegeType"},{"type":"EnumItem","Name":"Banned","tags":[],"Value":0,"Enum":"PrivilegeType"},{"type":"Enum","Name":"ProductPurchaseDecision","tags":[]},{"type":"EnumItem","Name":"NotProcessedYet","tags":[],"Value":0,"Enum":"ProductPurchaseDecision"},{"type":"EnumItem","Name":"PurchaseGranted","tags":[],"Value":1,"Enum":"ProductPurchaseDecision"},{"type":"Enum","Name":"PyramidSides","tags":[]},{"type":"EnumItem","Name":"3","tags":[],"Value":3,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"4","tags":[],"Value":4,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"5","tags":[],"Value":5,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"6","tags":[],"Value":6,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"8","tags":[],"Value":8,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"10","tags":[],"Value":10,"Enum":"PyramidSides"},{"type":"EnumItem","Name":"20","tags":[],"Value":20,"Enum":"PyramidSides"},{"type":"Enum","Name":"QualityLevel","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level01","tags":[],"Value":1,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level02","tags":[],"Value":2,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level03","tags":[],"Value":3,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level04","tags":[],"Value":4,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level05","tags":[],"Value":5,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level06","tags":[],"Value":6,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level07","tags":[],"Value":7,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level08","tags":[],"Value":8,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level09","tags":[],"Value":9,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level10","tags":[],"Value":10,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level11","tags":[],"Value":11,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level12","tags":[],"Value":12,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level13","tags":[],"Value":13,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level14","tags":[],"Value":14,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level15","tags":[],"Value":15,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level16","tags":[],"Value":16,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level17","tags":[],"Value":17,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level18","tags":[],"Value":18,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level19","tags":[],"Value":19,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level20","tags":[],"Value":20,"Enum":"QualityLevel"},{"type":"EnumItem","Name":"Level21","tags":[],"Value":21,"Enum":"QualityLevel"},{"type":"Enum","Name":"R15CollisionType","tags":[]},{"type":"EnumItem","Name":"OuterBox","tags":[],"Value":0,"Enum":"R15CollisionType"},{"type":"EnumItem","Name":"InnerBox","tags":[],"Value":1,"Enum":"R15CollisionType"},{"type":"Enum","Name":"RenderPriority","tags":[]},{"type":"EnumItem","Name":"First","tags":[],"Value":0,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Input","tags":[],"Value":100,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Camera","tags":[],"Value":200,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Character","tags":[],"Value":300,"Enum":"RenderPriority"},{"type":"EnumItem","Name":"Last","tags":[],"Value":2000,"Enum":"RenderPriority"},{"type":"Enum","Name":"Resolution","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"Resolution"},{"type":"EnumItem","Name":"720x526","tags":[],"Value":1,"Enum":"Resolution"},{"type":"EnumItem","Name":"800x600","tags":[],"Value":2,"Enum":"Resolution"},{"type":"EnumItem","Name":"1024x600","tags":[],"Value":3,"Enum":"Resolution"},{"type":"EnumItem","Name":"1024x768","tags":[],"Value":4,"Enum":"Resolution"},{"type":"EnumItem","Name":"1280x720","tags":[],"Value":5,"Enum":"Resolution"},{"type":"EnumItem","Name":"1280x768","tags":[],"Value":6,"Enum":"Resolution"},{"type":"EnumItem","Name":"1152x864","tags":[],"Value":7,"Enum":"Resolution"},{"type":"EnumItem","Name":"1280x800","tags":[],"Value":8,"Enum":"Resolution"},{"type":"EnumItem","Name":"1360x768","tags":[],"Value":9,"Enum":"Resolution"},{"type":"EnumItem","Name":"1280x960","tags":[],"Value":10,"Enum":"Resolution"},{"type":"EnumItem","Name":"1280x1024","tags":[],"Value":11,"Enum":"Resolution"},{"type":"EnumItem","Name":"1440x900","tags":[],"Value":12,"Enum":"Resolution"},{"type":"EnumItem","Name":"1600x900","tags":[],"Value":13,"Enum":"Resolution"},{"type":"EnumItem","Name":"1600x1024","tags":[],"Value":14,"Enum":"Resolution"},{"type":"EnumItem","Name":"1600x1200","tags":[],"Value":15,"Enum":"Resolution"},{"type":"EnumItem","Name":"1680x1050","tags":[],"Value":16,"Enum":"Resolution"},{"type":"EnumItem","Name":"1920x1080","tags":[],"Value":17,"Enum":"Resolution"},{"type":"EnumItem","Name":"1920x1200","tags":[],"Value":18,"Enum":"Resolution"},{"type":"Enum","Name":"ReverbType","tags":[]},{"type":"EnumItem","Name":"NoReverb","tags":[],"Value":0,"Enum":"ReverbType"},{"type":"EnumItem","Name":"GenericReverb","tags":[],"Value":1,"Enum":"ReverbType"},{"type":"EnumItem","Name":"PaddedCell","tags":[],"Value":2,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Room","tags":[],"Value":3,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Bathroom","tags":[],"Value":4,"Enum":"ReverbType"},{"type":"EnumItem","Name":"LivingRoom","tags":[],"Value":5,"Enum":"ReverbType"},{"type":"EnumItem","Name":"StoneRoom","tags":[],"Value":6,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Auditorium","tags":[],"Value":7,"Enum":"ReverbType"},{"type":"EnumItem","Name":"ConcertHall","tags":[],"Value":8,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Cave","tags":[],"Value":9,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Arena","tags":[],"Value":10,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Hangar","tags":[],"Value":11,"Enum":"ReverbType"},{"type":"EnumItem","Name":"CarpettedHallway","tags":[],"Value":12,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Hallway","tags":[],"Value":13,"Enum":"ReverbType"},{"type":"EnumItem","Name":"StoneCorridor","tags":[],"Value":14,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Alley","tags":[],"Value":15,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Forest","tags":[],"Value":16,"Enum":"ReverbType"},{"type":"EnumItem","Name":"City","tags":[],"Value":17,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Mountains","tags":[],"Value":18,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Quarry","tags":[],"Value":19,"Enum":"ReverbType"},{"type":"EnumItem","Name":"Plain","tags":[],"Value":20,"Enum":"ReverbType"},{"type":"EnumItem","Name":"ParkingLot","tags":[],"Value":21,"Enum":"ReverbType"},{"type":"EnumItem","Name":"SewerPipe","tags":[],"Value":22,"Enum":"ReverbType"},{"type":"EnumItem","Name":"UnderWater","tags":[],"Value":23,"Enum":"ReverbType"},{"type":"Enum","Name":"RibbonTool","tags":[]},{"type":"EnumItem","Name":"Select","tags":[],"Value":0,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Scale","tags":[],"Value":1,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Rotate","tags":[],"Value":2,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Move","tags":[],"Value":3,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Transform","tags":[],"Value":4,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"ColorPicker","tags":[],"Value":5,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"MaterialPicker","tags":[],"Value":6,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Group","tags":[],"Value":7,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"Ungroup","tags":[],"Value":8,"Enum":"RibbonTool"},{"type":"EnumItem","Name":"None","tags":[],"Value":9,"Enum":"RibbonTool"},{"type":"Enum","Name":"RollOffMode","tags":[]},{"type":"EnumItem","Name":"Inverse","tags":[],"Value":0,"Enum":"RollOffMode"},{"type":"EnumItem","Name":"Linear","tags":[],"Value":1,"Enum":"RollOffMode"},{"type":"EnumItem","Name":"InverseTapered","tags":[],"Value":3,"Enum":"RollOffMode"},{"type":"EnumItem","Name":"LinearSquare","tags":[],"Value":2,"Enum":"RollOffMode"},{"type":"Enum","Name":"RotationType","tags":[]},{"type":"EnumItem","Name":"MovementRelative","tags":[],"Value":0,"Enum":"RotationType"},{"type":"EnumItem","Name":"CameraRelative","tags":[],"Value":1,"Enum":"RotationType"},{"type":"Enum","Name":"RuntimeUndoBehavior","tags":[]},{"type":"EnumItem","Name":"Aggregate","tags":[],"Value":0,"Enum":"RuntimeUndoBehavior"},{"type":"EnumItem","Name":"Snapshot","tags":[],"Value":1,"Enum":"RuntimeUndoBehavior"},{"type":"EnumItem","Name":"Hybrid","tags":[],"Value":2,"Enum":"RuntimeUndoBehavior"},{"type":"Enum","Name":"SaveFilter","tags":[]},{"type":"EnumItem","Name":"SaveAll","tags":[],"Value":2,"Enum":"SaveFilter"},{"type":"EnumItem","Name":"SaveWorld","tags":[],"Value":0,"Enum":"SaveFilter"},{"type":"EnumItem","Name":"SaveGame","tags":[],"Value":1,"Enum":"SaveFilter"},{"type":"Enum","Name":"SavedQualitySetting","tags":[]},{"type":"EnumItem","Name":"Automatic","tags":[],"Value":0,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel1","tags":[],"Value":1,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel2","tags":[],"Value":2,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel3","tags":[],"Value":3,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel4","tags":[],"Value":4,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel5","tags":[],"Value":5,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel6","tags":[],"Value":6,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel7","tags":[],"Value":7,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel8","tags":[],"Value":8,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel9","tags":[],"Value":9,"Enum":"SavedQualitySetting"},{"type":"EnumItem","Name":"QualityLevel10","tags":[],"Value":10,"Enum":"SavedQualitySetting"},{"type":"Enum","Name":"ScaleType","tags":[]},{"type":"EnumItem","Name":"Stretch","tags":[],"Value":0,"Enum":"ScaleType"},{"type":"EnumItem","Name":"Slice","tags":[],"Value":1,"Enum":"ScaleType"},{"type":"EnumItem","Name":"Tile","tags":[],"Value":2,"Enum":"ScaleType"},{"type":"Enum","Name":"ScreenOrientation","tags":[]},{"type":"EnumItem","Name":"LandscapeLeft","tags":[],"Value":0,"Enum":"ScreenOrientation"},{"type":"EnumItem","Name":"LandscapeRight","tags":[],"Value":1,"Enum":"ScreenOrientation"},{"type":"EnumItem","Name":"LandscapeSensor","tags":[],"Value":2,"Enum":"ScreenOrientation"},{"type":"EnumItem","Name":"Portrait","tags":[],"Value":3,"Enum":"ScreenOrientation"},{"type":"EnumItem","Name":"Sensor","tags":[],"Value":4,"Enum":"ScreenOrientation"},{"type":"Enum","Name":"ScrollBarInset","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"ScrollBarInset"},{"type":"EnumItem","Name":"ScrollBar","tags":[],"Value":1,"Enum":"ScrollBarInset"},{"type":"EnumItem","Name":"Always","tags":[],"Value":2,"Enum":"ScrollBarInset"},{"type":"Enum","Name":"SizeConstraint","tags":[]},{"type":"EnumItem","Name":"RelativeXY","tags":[],"Value":0,"Enum":"SizeConstraint"},{"type":"EnumItem","Name":"RelativeXX","tags":[],"Value":1,"Enum":"SizeConstraint"},{"type":"EnumItem","Name":"RelativeYY","tags":[],"Value":2,"Enum":"SizeConstraint"},{"type":"Enum","Name":"SleepAdjustMethod","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"SleepAdjustMethod"},{"type":"EnumItem","Name":"LastSample","tags":[],"Value":1,"Enum":"SleepAdjustMethod"},{"type":"EnumItem","Name":"AverageInterval","tags":[],"Value":2,"Enum":"SleepAdjustMethod"},{"type":"Enum","Name":"SortOrder","tags":[]},{"type":"EnumItem","Name":"LayoutOrder","tags":[],"Value":2,"Enum":"SortOrder"},{"type":"EnumItem","Name":"Name","tags":[],"Value":0,"Enum":"SortOrder"},{"type":"EnumItem","Name":"Custom","tags":["deprecated"],"Value":1,"Enum":"SortOrder"},{"type":"Enum","Name":"SoundType","tags":[]},{"type":"EnumItem","Name":"NoSound","tags":[],"Value":0,"Enum":"SoundType"},{"type":"EnumItem","Name":"Boing","tags":[],"Value":1,"Enum":"SoundType"},{"type":"EnumItem","Name":"Bomb","tags":[],"Value":2,"Enum":"SoundType"},{"type":"EnumItem","Name":"Break","tags":[],"Value":3,"Enum":"SoundType"},{"type":"EnumItem","Name":"Click","tags":[],"Value":4,"Enum":"SoundType"},{"type":"EnumItem","Name":"Clock","tags":[],"Value":5,"Enum":"SoundType"},{"type":"EnumItem","Name":"Slingshot","tags":[],"Value":6,"Enum":"SoundType"},{"type":"EnumItem","Name":"Page","tags":[],"Value":7,"Enum":"SoundType"},{"type":"EnumItem","Name":"Ping","tags":[],"Value":8,"Enum":"SoundType"},{"type":"EnumItem","Name":"Snap","tags":[],"Value":9,"Enum":"SoundType"},{"type":"EnumItem","Name":"Splat","tags":[],"Value":10,"Enum":"SoundType"},{"type":"EnumItem","Name":"Step","tags":[],"Value":11,"Enum":"SoundType"},{"type":"EnumItem","Name":"StepOn","tags":[],"Value":12,"Enum":"SoundType"},{"type":"EnumItem","Name":"Swoosh","tags":[],"Value":13,"Enum":"SoundType"},{"type":"EnumItem","Name":"Victory","tags":[],"Value":14,"Enum":"SoundType"},{"type":"Enum","Name":"SpecialKey","tags":[]},{"type":"EnumItem","Name":"Insert","tags":[],"Value":0,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"Home","tags":[],"Value":1,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"End","tags":[],"Value":2,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"PageUp","tags":[],"Value":3,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"PageDown","tags":[],"Value":4,"Enum":"SpecialKey"},{"type":"EnumItem","Name":"ChatHotkey","tags":[],"Value":5,"Enum":"SpecialKey"},{"type":"Enum","Name":"StartCorner","tags":[]},{"type":"EnumItem","Name":"TopLeft","tags":[],"Value":0,"Enum":"StartCorner"},{"type":"EnumItem","Name":"TopRight","tags":[],"Value":1,"Enum":"StartCorner"},{"type":"EnumItem","Name":"BottomLeft","tags":[],"Value":2,"Enum":"StartCorner"},{"type":"EnumItem","Name":"BottomRight","tags":[],"Value":3,"Enum":"StartCorner"},{"type":"Enum","Name":"Status","tags":[]},{"type":"EnumItem","Name":"Poison","tags":["deprecated"],"Value":0,"Enum":"Status"},{"type":"EnumItem","Name":"Confusion","tags":["deprecated"],"Value":1,"Enum":"Status"},{"type":"Enum","Name":"Style","tags":[]},{"type":"EnumItem","Name":"AlternatingSupports","tags":[],"Value":0,"Enum":"Style"},{"type":"EnumItem","Name":"BridgeStyleSupports","tags":[],"Value":1,"Enum":"Style"},{"type":"EnumItem","Name":"NoSupports","tags":[],"Value":2,"Enum":"Style"},{"type":"Enum","Name":"SurfaceConstraint","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"SurfaceConstraint"},{"type":"EnumItem","Name":"Hinge","tags":[],"Value":1,"Enum":"SurfaceConstraint"},{"type":"EnumItem","Name":"SteppingMotor","tags":[],"Value":2,"Enum":"SurfaceConstraint"},{"type":"EnumItem","Name":"Motor","tags":[],"Value":3,"Enum":"SurfaceConstraint"},{"type":"Enum","Name":"SurfaceType","tags":[]},{"type":"EnumItem","Name":"Smooth","tags":[],"Value":0,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Glue","tags":[],"Value":1,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Weld","tags":[],"Value":2,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Studs","tags":[],"Value":3,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Inlet","tags":[],"Value":4,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Universal","tags":[],"Value":5,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Hinge","tags":[],"Value":6,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Motor","tags":[],"Value":7,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"SteppingMotor","tags":[],"Value":8,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"Unjoinable","tags":[],"Value":9,"Enum":"SurfaceType"},{"type":"EnumItem","Name":"SmoothNoOutlines","tags":[],"Value":10,"Enum":"SurfaceType"},{"type":"Enum","Name":"SwipeDirection","tags":[]},{"type":"EnumItem","Name":"Right","tags":[],"Value":0,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"Left","tags":[],"Value":1,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"Up","tags":[],"Value":2,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"Down","tags":[],"Value":3,"Enum":"SwipeDirection"},{"type":"EnumItem","Name":"None","tags":[],"Value":4,"Enum":"SwipeDirection"},{"type":"Enum","Name":"TableMajorAxis","tags":[]},{"type":"EnumItem","Name":"RowMajor","tags":[],"Value":0,"Enum":"TableMajorAxis"},{"type":"EnumItem","Name":"ColumnMajor","tags":[],"Value":1,"Enum":"TableMajorAxis"},{"type":"Enum","Name":"TeleportState","tags":[]},{"type":"EnumItem","Name":"RequestedFromServer","tags":[],"Value":0,"Enum":"TeleportState"},{"type":"EnumItem","Name":"Started","tags":[],"Value":1,"Enum":"TeleportState"},{"type":"EnumItem","Name":"WaitingForServer","tags":[],"Value":2,"Enum":"TeleportState"},{"type":"EnumItem","Name":"Failed","tags":[],"Value":3,"Enum":"TeleportState"},{"type":"EnumItem","Name":"InProgress","tags":[],"Value":4,"Enum":"TeleportState"},{"type":"Enum","Name":"TeleportType","tags":[]},{"type":"EnumItem","Name":"ToPlace","tags":[],"Value":0,"Enum":"TeleportType"},{"type":"EnumItem","Name":"ToInstance","tags":[],"Value":1,"Enum":"TeleportType"},{"type":"EnumItem","Name":"ToReservedServer","tags":[],"Value":2,"Enum":"TeleportType"},{"type":"Enum","Name":"TextXAlignment","tags":[]},{"type":"EnumItem","Name":"Left","tags":[],"Value":0,"Enum":"TextXAlignment"},{"type":"EnumItem","Name":"Center","tags":[],"Value":2,"Enum":"TextXAlignment"},{"type":"EnumItem","Name":"Right","tags":[],"Value":1,"Enum":"TextXAlignment"},{"type":"Enum","Name":"TextYAlignment","tags":[]},{"type":"EnumItem","Name":"Top","tags":[],"Value":0,"Enum":"TextYAlignment"},{"type":"EnumItem","Name":"Center","tags":[],"Value":1,"Enum":"TextYAlignment"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":2,"Enum":"TextYAlignment"},{"type":"Enum","Name":"TextureMode","tags":[]},{"type":"EnumItem","Name":"Stretch","tags":[],"Value":0,"Enum":"TextureMode"},{"type":"EnumItem","Name":"Wrap","tags":[],"Value":1,"Enum":"TextureMode"},{"type":"EnumItem","Name":"Static","tags":[],"Value":2,"Enum":"TextureMode"},{"type":"Enum","Name":"TextureQueryType","tags":[]},{"type":"EnumItem","Name":"NonHumanoid","tags":[],"Value":0,"Enum":"TextureQueryType"},{"type":"EnumItem","Name":"NonHumanoidOrphaned","tags":[],"Value":1,"Enum":"TextureQueryType"},{"type":"EnumItem","Name":"Humanoid","tags":[],"Value":2,"Enum":"TextureQueryType"},{"type":"EnumItem","Name":"HumanoidOrphaned","tags":[],"Value":3,"Enum":"TextureQueryType"},{"type":"Enum","Name":"ThreadPoolConfig","tags":[]},{"type":"EnumItem","Name":"Auto","tags":[],"Value":0,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore1","tags":[],"Value":101,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore2","tags":[],"Value":102,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore3","tags":[],"Value":103,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"PerCore4","tags":[],"Value":104,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads1","tags":[],"Value":1,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads2","tags":[],"Value":2,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads3","tags":[],"Value":3,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads4","tags":[],"Value":4,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads8","tags":[],"Value":8,"Enum":"ThreadPoolConfig"},{"type":"EnumItem","Name":"Threads16","tags":[],"Value":16,"Enum":"ThreadPoolConfig"},{"type":"Enum","Name":"ThrottlingPriority","tags":[]},{"type":"EnumItem","Name":"Extreme","tags":[],"Value":2,"Enum":"ThrottlingPriority"},{"type":"EnumItem","Name":"ElevatedOnServer","tags":[],"Value":1,"Enum":"ThrottlingPriority"},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"ThrottlingPriority"},{"type":"Enum","Name":"ThumbnailSize","tags":[]},{"type":"EnumItem","Name":"Size48x48","tags":[],"Value":0,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size180x180","tags":[],"Value":1,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size420x420","tags":[],"Value":2,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size60x60","tags":[],"Value":3,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size100x100","tags":[],"Value":4,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size150x150","tags":[],"Value":5,"Enum":"ThumbnailSize"},{"type":"EnumItem","Name":"Size352x352","tags":[],"Value":6,"Enum":"ThumbnailSize"},{"type":"Enum","Name":"ThumbnailType","tags":[]},{"type":"EnumItem","Name":"HeadShot","tags":[],"Value":0,"Enum":"ThumbnailType"},{"type":"EnumItem","Name":"AvatarBust","tags":[],"Value":1,"Enum":"ThumbnailType"},{"type":"EnumItem","Name":"AvatarThumbnail","tags":[],"Value":2,"Enum":"ThumbnailType"},{"type":"Enum","Name":"TickCountSampleMethod","tags":[]},{"type":"EnumItem","Name":"Fast","tags":[],"Value":0,"Enum":"TickCountSampleMethod"},{"type":"EnumItem","Name":"Benchmark","tags":[],"Value":1,"Enum":"TickCountSampleMethod"},{"type":"EnumItem","Name":"Precise","tags":[],"Value":2,"Enum":"TickCountSampleMethod"},{"type":"Enum","Name":"TopBottom","tags":[]},{"type":"EnumItem","Name":"Top","tags":[],"Value":0,"Enum":"TopBottom"},{"type":"EnumItem","Name":"Center","tags":[],"Value":1,"Enum":"TopBottom"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":2,"Enum":"TopBottom"},{"type":"Enum","Name":"TouchCameraMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"TouchCameraMovementMode"},{"type":"EnumItem","Name":"Follow","tags":[],"Value":2,"Enum":"TouchCameraMovementMode"},{"type":"EnumItem","Name":"Classic","tags":[],"Value":1,"Enum":"TouchCameraMovementMode"},{"type":"EnumItem","Name":"Orbital","tags":[],"Value":3,"Enum":"TouchCameraMovementMode"},{"type":"Enum","Name":"TouchMovementMode","tags":[]},{"type":"EnumItem","Name":"Default","tags":[],"Value":0,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"Thumbstick","tags":[],"Value":1,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"DPad","tags":[],"Value":2,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"Thumbpad","tags":[],"Value":3,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"ClickToMove","tags":[],"Value":4,"Enum":"TouchMovementMode"},{"type":"EnumItem","Name":"DynamicThumbstick","tags":[],"Value":5,"Enum":"TouchMovementMode"},{"type":"Enum","Name":"TweenStatus","tags":[]},{"type":"EnumItem","Name":"Canceled","tags":[],"Value":0,"Enum":"TweenStatus"},{"type":"EnumItem","Name":"Completed","tags":[],"Value":1,"Enum":"TweenStatus"},{"type":"Enum","Name":"UiMessageType","tags":[]},{"type":"EnumItem","Name":"UiMessageError","tags":[],"Value":0,"Enum":"UiMessageType"},{"type":"EnumItem","Name":"UiMessageInfo","tags":[],"Value":1,"Enum":"UiMessageType"},{"type":"Enum","Name":"UploadSetting","tags":[]},{"type":"EnumItem","Name":"Never","tags":[],"Value":0,"Enum":"UploadSetting"},{"type":"EnumItem","Name":"Ask","tags":[],"Value":1,"Enum":"UploadSetting"},{"type":"EnumItem","Name":"Always","tags":[],"Value":2,"Enum":"UploadSetting"},{"type":"Enum","Name":"UserCFrame","tags":[]},{"type":"EnumItem","Name":"Head","tags":[],"Value":0,"Enum":"UserCFrame"},{"type":"EnumItem","Name":"LeftHand","tags":[],"Value":1,"Enum":"UserCFrame"},{"type":"EnumItem","Name":"RightHand","tags":[],"Value":2,"Enum":"UserCFrame"},{"type":"Enum","Name":"UserInputState","tags":[]},{"type":"EnumItem","Name":"Begin","tags":[],"Value":0,"Enum":"UserInputState"},{"type":"EnumItem","Name":"Change","tags":[],"Value":1,"Enum":"UserInputState"},{"type":"EnumItem","Name":"End","tags":[],"Value":2,"Enum":"UserInputState"},{"type":"EnumItem","Name":"Cancel","tags":[],"Value":3,"Enum":"UserInputState"},{"type":"EnumItem","Name":"None","tags":[],"Value":4,"Enum":"UserInputState"},{"type":"Enum","Name":"UserInputType","tags":[]},{"type":"EnumItem","Name":"MouseButton1","tags":[],"Value":0,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseButton2","tags":[],"Value":1,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseButton3","tags":[],"Value":2,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseWheel","tags":[],"Value":3,"Enum":"UserInputType"},{"type":"EnumItem","Name":"MouseMovement","tags":[],"Value":4,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Touch","tags":[],"Value":7,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Keyboard","tags":[],"Value":8,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Focus","tags":[],"Value":9,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Accelerometer","tags":[],"Value":10,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gyro","tags":[],"Value":11,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad1","tags":[],"Value":12,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad2","tags":[],"Value":13,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad3","tags":[],"Value":14,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad4","tags":[],"Value":15,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad5","tags":[],"Value":16,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad6","tags":[],"Value":17,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad7","tags":[],"Value":18,"Enum":"UserInputType"},{"type":"EnumItem","Name":"Gamepad8","tags":[],"Value":19,"Enum":"UserInputType"},{"type":"EnumItem","Name":"TextInput","tags":[],"Value":20,"Enum":"UserInputType"},{"type":"EnumItem","Name":"None","tags":[],"Value":21,"Enum":"UserInputType"},{"type":"Enum","Name":"VRTouchpad","tags":[]},{"type":"EnumItem","Name":"Left","tags":[],"Value":0,"Enum":"VRTouchpad"},{"type":"EnumItem","Name":"Right","tags":[],"Value":1,"Enum":"VRTouchpad"},{"type":"Enum","Name":"VRTouchpadMode","tags":[]},{"type":"EnumItem","Name":"Touch","tags":[],"Value":0,"Enum":"VRTouchpadMode"},{"type":"EnumItem","Name":"VirtualThumbstick","tags":[],"Value":1,"Enum":"VRTouchpadMode"},{"type":"EnumItem","Name":"ABXY","tags":[],"Value":2,"Enum":"VRTouchpadMode"},{"type":"Enum","Name":"VerticalAlignment","tags":[]},{"type":"EnumItem","Name":"Center","tags":[],"Value":0,"Enum":"VerticalAlignment"},{"type":"EnumItem","Name":"Top","tags":[],"Value":1,"Enum":"VerticalAlignment"},{"type":"EnumItem","Name":"Bottom","tags":[],"Value":2,"Enum":"VerticalAlignment"},{"type":"Enum","Name":"VerticalScrollBarPosition","tags":[]},{"type":"EnumItem","Name":"Left","tags":[],"Value":1,"Enum":"VerticalScrollBarPosition"},{"type":"EnumItem","Name":"Right","tags":[],"Value":0,"Enum":"VerticalScrollBarPosition"},{"type":"Enum","Name":"VibrationMotor","tags":[]},{"type":"EnumItem","Name":"Large","tags":[],"Value":0,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"Small","tags":[],"Value":1,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"LeftTrigger","tags":[],"Value":2,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"RightTrigger","tags":[],"Value":3,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"LeftHand","tags":[],"Value":4,"Enum":"VibrationMotor"},{"type":"EnumItem","Name":"RightHand","tags":[],"Value":5,"Enum":"VibrationMotor"},{"type":"Enum","Name":"VideoQualitySettings","tags":[]},{"type":"EnumItem","Name":"LowResolution","tags":[],"Value":0,"Enum":"VideoQualitySettings"},{"type":"EnumItem","Name":"MediumResolution","tags":[],"Value":1,"Enum":"VideoQualitySettings"},{"type":"EnumItem","Name":"HighResolution","tags":[],"Value":2,"Enum":"VideoQualitySettings"},{"type":"Enum","Name":"WaterDirection","tags":[]},{"type":"EnumItem","Name":"NegX","tags":[],"Value":0,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"X","tags":[],"Value":1,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"NegY","tags":[],"Value":2,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"Y","tags":[],"Value":3,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"NegZ","tags":[],"Value":4,"Enum":"WaterDirection"},{"type":"EnumItem","Name":"Z","tags":[],"Value":5,"Enum":"WaterDirection"},{"type":"Enum","Name":"WaterForce","tags":[]},{"type":"EnumItem","Name":"None","tags":[],"Value":0,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Small","tags":[],"Value":1,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Medium","tags":[],"Value":2,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Strong","tags":[],"Value":3,"Enum":"WaterForce"},{"type":"EnumItem","Name":"Max","tags":[],"Value":4,"Enum":"WaterForce"},{"type":"Enum","Name":"ZIndexBehavior","tags":[]},{"type":"EnumItem","Name":"Global","tags":[],"Value":0,"Enum":"ZIndexBehavior"},{"type":"EnumItem","Name":"Sibling","tags":[],"Value":1,"Enum":"ZIndexBehavior"}]]==]
		-- TODO: Show critical error
	end
	rawAPI = Services.HttpService:JSONDecode(rawAPI)

	for _,entry in pairs(rawAPI) do
		local eType = entry.type
		if eType == "Class" then
			classes[entry.Name] = entry
			entry.Properties = {}
			entry.Functions = {}
			entry.YieldFunctions = {}
			entry.Events = {}
			entry.Callbacks = {}
		elseif eType == "Property" then
			table.insert(classes[entry.Class].Properties,entry)
			entry.Category = (propCategories[entry.Class] and propCategories[entry.Class][entry.Name] or "Other")
			entry.Tags = {}
			for i,tag in pairs(entry.tags) do
				entry.Tags[tag] = true
			end
			entry.tags = nil
		elseif eType == "Enum" then
			enums[entry.Name] = entry
			entry.EnumItems = {}
		elseif eType == "EnumItem" then
			table.insert(enums[entry.Enum].EnumItems,entry)
		end
	end

	local function getMember(class,mType)
		if not classes[class] or not classes[class][mType] then return end
		local result = {}

		local currentClass = classes[class]
		while currentClass do
			for _,entry in pairs(currentClass[mType]) do
				table.insert(result,entry)
			end
			currentClass = classes[currentClass.Superclass]
		end

		table.sort(result,function(a,b) return a.Name < b.Name end)
		return result
	end

	local API = {
		Classes = classes,
		Enums = enums,
		GetMember = getMember
	}

	return API
end

f.fetchRMD = function()
	local rawRMD = nil
	if script and script:FindFirstChild("RMD") then
		rawRMD = require(script.RMD)
	else
		rawRMD = [==[[{"Name":"BindableFunction","Summary":"Allow functions defined in one script to be called by another script","ExplorerOrder":4,"ExplorerImageIndex":66,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Invoke","Summary":"Causes the function assigned to OnInvoke to be called. Arguments passed to this function get passed to OnInvoke function.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"OnInvoke","Summary":"Should be defined as a function. This function is called when Invoke() is called. Number of arguments is variable.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BindableEvent","Summary":"Allow events defined in one script to be subscribed to by another script","ExplorerOrder":5,"ExplorerImageIndex":67,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Fire","Summary":"Used to make the custom event fire (see Event for more info). Arguments can be variable length.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Event","Summary":"This event fires when the Fire() method is used.  Receives the variable length arguments from Fire().","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchTransmitter","Summary":"Used by networking and replication code to transmit touch events - no other purpose","ExplorerOrder":3,"ExplorerImageIndex":37,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ForceField","Summary":"Prevents joint breakage from explosions, and stops Humanoids from taking damage","ExplorerOrder":3,"ExplorerImageIndex":37,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PluginManager","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TeleportService","Summary":"Allows players to seamlessly leave a game and join another","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Plugin","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PluginMouse","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Glue","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CollectionService","Summary":"A service which provides collections of instances based on tags assigned to them.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"ItemAdded","Summary":"Deprecated. Use GetInstanceAddedSignal instead.","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"ItemRemoved","Summary":"Deprecated. Use GetInstancedRemovedSignal instead.","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"GetCollection","Summary":"Deprecated. Use GetTagged instead.","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"GetTagged","Summary":"Returns an array of all of the instances in the data model which have the given tag.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AddTag","Summary":"Adds a tag to an instance.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RemoveTag","Summary":"Removes a tag to an instance.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetTags","Summary":"Returns a list of all the collections that an instance belongs to.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"HasTag","Summary":"Returns whether the given instance has the given tag.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetInstanceAddedSignal","Summary":"Returns a signal that fires when the given tag either has a new instance with that tag added to the data model or that tag is assigned to an instance within the data model.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetInstanceRemovedSignal","Summary":"Returns a signal that fires when the given tag either has an instance with that tag removed from the data model or that tag is removed from an instance within the data model.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"JointsService","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RunService","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BadgeService","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LogService","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AssetService","Summary":"A service used to set and get information about assets stored on the Roblox website.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"RevertAsset","Summary":"Reverts a given place id to the version number provided. Returns true if successful on reverting, false otherwise.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetPlacePermissions","Summary":"Sets the permissions for a placeID to the place accessType. An optional table (inviteList) can be included that will set the accessType for only the player names provided. The table should be set up as an array of usernames (strings).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetPlacePermissions","Summary":"Given a placeID, this function will return a table with the permissions of the place. Useful for determining what kind of permissions a particular user may have for a place.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetAssetVersions","Summary":"Given a placeID, this function will return a table with the version info of the place. An optional arg of page number can be used to page through all revisions (a single page may hold about 50 revisions).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetCreatorAssetID","Summary":"Given a creationID, this function will return the asset that created the creationID. If no other asset created the given creationID, 0 is returned.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"HttpService","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"HttpEnabled","Summary":"Enabling http requests from scripts","Browsable":"true","Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"InsertService","Summary":"A service used to insert objects stored on the website into the game.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"AllowClientInsertModels","Summary":"Can be set in non-filtering-enabled places to allow LoadAsset to be used in LocalScripts.","Browsable":"true","Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AllowInsertFreeModels","Summary":"Allows free models to be inserted into place.","Browsable":"false","Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"GetCollection","Summary":"Returns a table for the assets stored in the category.  A category is an setId from www.roblox.com that links to a set.  <a href=\"http://wiki.roblox.com/index.php?title=API:Class/InsertService/GetCollection\" target=\"_blank\">More info on table format</a>. <a href=\"http://wiki.roblox.com/index.php/Sets\" target=\"_blank\">More info on sets</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Insert","Summary":"Inserts the Instance into the workspace.  It is recommended to use Instance.Parent = game.Workspace instead, as this can cause issues currently.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ApproveAssetId","Summary":"Deprecated","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"ApproveAssetVersionId","Summary":"Deprecated","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"GetBaseSets","Summary":"Returns a table containing a list of the various setIds that are ROBLOX approved. <a href=\"http://wiki.roblox.com/index.php/Sets\" target=\"_blank\">More info on sets</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetUserSets","Summary":"Returns a table containing a list of the various setIds that correspond to argument 'userId'. <a href=\"http://wiki.roblox.com/index.php/Sets\" target=\"_blank\">More info on sets</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetBaseCategories","Summary":"Deprecated. Use GetBaseSets() instead.","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"GetUserCategories","Summary":"Deprecated. Use GetUserSets() instead.","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"LoadAsset","Summary":"Returns a Model containing the Instance that resides at AssetId on the web. This call will also yield the script until the model is returned. Script execution can still continue, however, if you use a <a href=\"http://wiki.roblox.com/index.php?title=Coroutine\" target=\"_blank\">coroutine</a>.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LoadAssetVersion","Summary":"Similar to LoadAsset, but instead an AssetVersionId is passed in, which refers to a particular version of the asset which is not neccessarily the latest version.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Hat","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":45,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"Accessory","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":32,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LocalBackpack","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LocalBackpackItem","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MotorFeature","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"Attachment","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":81,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Rotation","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WorldRotation","Summary":"Deprecated. Use WorldOrientation instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"Orientation","Summary":"Euler angles applied in YXZ order","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WorldOrientation","Summary":"Euler angles applied in YXZ order","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Constraint","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":86,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Enabled","Summary":"Toggles whether or not this constraint is enabled. Disabled constraints will not render in game.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Color","Summary":"The color of the in-game visual.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Visible","Summary":"Toggles the in-game visual associated with this constraint.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BallSocketConstraint","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":86,"Browsable":true,"PreferredParent":"","Members":[{"Name":"LimitsEnabled","Summary":"Enables the angular limit between the axis of Attachment0 and the axis of Attachment1.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UpperAngle","Summary":"Maximum angle between the two main axes. Value in [0, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Restitution","Summary":"Restitution of the limit, or how elastic it is. Value in [0, 1].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TwistLimitsEnabled","Summary":"Enables the angular limits around the main axis of Attachment1.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TwistUpperAngle","Summary":"Upper angular limit around the axis of Attachment1. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TwistLowerAngle","Summary":"Lower angular limit around the axis of Attachment1. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Radius","Summary":"Radius of the in-game visual. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RopeConstraint","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":89,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Length","Summary":"The length of the rope or the maximum distance between the two attachments. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Restitution","Summary":"Restitution of the rope, or how elastic it is. Value in [0, 1].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CurrentDistance","Summary":"Current distance between the two attachments. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Thickness","Summary":"The thickness of the in-game visual (diameter). Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RodConstraint","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":90,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Length","Summary":"The length of the rod or the distance to be maintained between the two attachments. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CurrentDistance","Summary":"Current distance between the two attachments. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Thickness","Summary":"The thickness of the in-game visual (diameter). Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SpringConstraint","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":91,"Browsable":true,"PreferredParent":"","Members":[{"Name":"LimitsEnabled","Summary":"Enables limits on the length of the spring.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Stiffness","Summary":"The stiffness parameter of the spring. Force is scaled based on distance from the free length. The units of this property are force / distance. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Damping","Summary":"The damping parameter of the spring. The force is scaled with respect to relative velocity. The units of this property are force / velocity. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FreeLength","Summary":"The distance (in studs) between the two attachments at which the spring exerts no stiffness force. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MaxForce","Summary":"The maximum force that the spring can apply. Useful to prevent instabilities. The units are mass * studs / seconds^2. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MaxLength","Summary":"Maximum spring length, or the maxium distance between the two attachments. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MinLength","Summary":"Minimum spring length, or the minimum distance between the two attachments. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Radius","Summary":"The radius of the in-game spring coil visual. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Thickness","Summary":"The thickness of the spring wire (diameter) in the in-game visual. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Coils","Summary":"The number of coils in the in-game visual. Value in [0, 8].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CurrentLength","Summary":"Current distance between the two attachments. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WeldConstraint","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":94,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"HingeConstraint","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":87,"Browsable":true,"PreferredParent":"","Members":[{"Name":"ActuatorType","Summary":"Type of the rotational actuator: None, Motor, or Servo.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LimitsEnabled","Summary":"Enables the angular limits on rotations around the main axis of Attachment0.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UpperAngle","Summary":"Upper limit for the angle from the SecondaryAxis of Attachment0 to the SecondaryAxis of Attachment1 around the rotation axis. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LowerAngle","Summary":"Lower limit for the angle from the SecondaryAxis of Attachment0 to the SecondaryAxis of Attachment1 around the rotation axis. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AngularRestitution","Summary":"Restitution of the two limits, or how elastic they are. Value in [0,1].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AngularVelocity","Summary":"The target angular velocity of the motor in radians per second around the rotation axis. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MotorMaxTorque","Summary":"The maximum torque the motor can apply to achieve the target angular velocity. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MotorMaxAcceleration","Summary":"The maximum angular acceleration of the motor in radians per second square. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AngularSpeed","Summary":"Target angular speed. This value is unsigned as the servo will always move toward its target. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ServoMaxTorque","Summary":"Maximum torque the servo motor can apply. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TargetAngle","Summary":"Target angle for the SecondaryAxis of Attachment1 from the SecondaryAxis of Attachment0 around the rotation axis. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CurrentAngle","Summary":"Signed angle between the SecondaryAxis of Attchement0 and the SecondaryAxis of Attachment1 around the rotation axis. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Radius","Summary":"Radius of the in-game visual. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SlidingBallConstraint","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":88,"Browsable":true,"PreferredParent":"","Members":[{"Name":"ActuatorType","Summary":"Type of linear actuator (along the axis of the slider): None, Motor, or Servo.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LimitsEnabled","Summary":"Enables the limits on the linear motion along the axis of the slider.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LowerLimit","Summary":"Lower limit for the position of Attachment1 with respect to Attachment0 along the slider axis. Value in (-inf, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UpperLimit","Summary":"Upper limit for the position of Attachment1 with respect to Attachment0 along the slider axis. Value in (-inf, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Restitution","Summary":"Restitution of the two limits, or how elastic they are. Value in [0, 1].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Velocity","Summary":"The target linear velocity of the motor in studs per second along the slider axis. Value in (-inf, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MotorMaxForce","Summary":"The maximum force the motor can apply to achieve the target velocity. Units are mass * studs / seconds^2. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MotorMaxAcceleration","Summary":"The maximum acceleration of the motor in studs per second squared. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Speed","Summary":"Target speed in studs per second. This value is unsigned as the servo will always move toward its target. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ServoMaxForce","Summary":"Maximum force the servo motor can apply. Units are mass * studs / seconds^2. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TargetPosition","Summary":"Target position of Attachment1 with respect to Attachment0 along the slider axis. Value in (-inf, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CurrentPosition","Summary":"Current position of Attachment1 with respect to Attachment0 along the slider axis. Value in (-inf, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Size","Summary":"Size of the in-game visual associated with this constraint. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PrismaticConstraint","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":88,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CylindricalConstraint","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":95,"Browsable":true,"PreferredParent":"","Members":[{"Name":"InclinationAngle","Summary":"Direction of the rotation axis as an angle from the x-axis in the xy-plane of Attachment0. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AngularActuatorType","Summary":"Type of angular actuator: None, Motor, or Servo.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AngularLimitsEnabled","Summary":"Enables the angular limits around the rotation axis.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UpperAngle","Summary":"Upper limit for the angle (in degrees) between the reference axis and the SecondaryAxis of Attachment1 around the rotation axis. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LowerAngle","Summary":"Lower limit for the angle (in degrees) between the reference axis and the SecondaryAxis of Attachment1 around the rotation axis. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AngularRestitution","Summary":"Restitution of the two limits, or how elastic they are. Value in [0, 1].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AngularVelocity","Summary":"The target angular velocity of the motor in radians per second around the rotation axis. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MotorMaxTorque","Summary":"The maximum torque the motor can apply to achieve the target angular velocity. The units are mass * studs^2 / second^2. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MotorMaxAngularAcceleration","Summary":"The maximum angular acceleration of the motor in radians per second squared. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AngularSpeed","Summary":"Target angular speed. This value is unsigned as the servo will always move toward its target. In radians per second. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ServoMaxTorque","Summary":"Maximum torque the servo motor can apply. The units are mass * studs^2 / second^2. Value in [0, inf).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TargetAngle","Summary":"Target angle (in degrees) between the reference axis and the secondary axis of Attachment1 around the rotation axis. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CurrentAngle","Summary":"Signed angle (in degrees) between the reference axis and the secondary axis of Attachment1 around the rotation axis. Value in [-180, 180].","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WorldRotationAxis","Summary":"The unit vector direction of the rotation axis in world coordinates.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RotationAxisVisible","Summary":"Enable the visibility of the rotation axis.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AlignOrientation","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":82,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AlignPosition","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":82,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"VectorForce","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":82,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LineForce","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":82,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Torque","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":82,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Mouse","Summary":"Used to receive input from the user. Actually tracks mouse events and keyboard events.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Hit","Summary":"The CoordinateFrame of where the Mouse ray is currently hitting a 3D object in the Workspace.  If the mouse is not over any 3D objects in the Workspace, this property is nil.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Icon","Summary":"The current Texture of the Mouse Icon. Stored as a string, for more information on how to format the string <a href=\"http://wiki.roblox.com/index.php/Content\" target=\"_blank\">go here</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Origin","Summary":"The CoordinateFrame of where the Mouse is when the mouse is not clicking.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Origin","Summary":"The CoordinateFrame of where the Mouse is when the mouse is not clicking.  This CoordinateFrame will be very close to the Camera.CoordinateFrame.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Target","Summary":"The Part the mouse is currently over. If the mouse is not currently over any object (on the skybox, for example) this property is nil.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TargetFilter","Summary":"A Part or Model that the Mouse will ignore when trying to find the Target, TargetSurface and Hit.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TargetSurface","Summary":"The NormalId (Top, Left, Down, etc.) of the face of the part the Mouse is currently over.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UnitRay","Summary":"The Unit Ray from where the mouse is (Origin) to the current Mouse.Target.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ViewSizeX","Summary":"The viewport's (game window) width in pixels.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ViewSizeY","Summary":"The viewport's (game window) height in pixels.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"X","Summary":"The absolute pixel position of the Mouse along the x-axis of the viewport (game window). Values start at 0 on the left hand side of the screen and increase to the right.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Y","Summary":"The absolute pixel position of the Mouse along the y-axis of the viewport (game window). Values start at 0 on the stop of the screen and increase to the bottom.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Button1Down","Summary":"Fired when the first button (usually the left, but could be another) on the mouse is depressed.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Button1Up","Summary":"Fired when the first button (usually the left, but could be another) on the mouse is release.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Button2Down","Summary":"This event is currently non-operational.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Button2Up","Summary":"This event is currently non-operational.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Idle","Summary":"Fired constantly when the mouse is not firing any other event (i.e. the mouse isn't moving, nor any buttons being pressed or depressed).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"KeyDown","Summary":"Fired when a user presses a key on the keyboard. Argument is a string representation of the key.  If the key has no string representation (such as space), the string passed in is the keycode for that character. Keycodes are currently in ASCII.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"KeyUp","Summary":"Fired when a user releases a key on the keyboard. Argument is a string representation of the key.  If the key has no string representation (such as space), the string passed in is the keycode for that character. Keycodes are currently in ASCII.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Move","Summary":"Fired when the mouse X or Y member changes.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WheelBackward","Summary":"This event is currently non-operational.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WheelForward","Summary":"This event is currently non-operational.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ProfilingItem","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ChangeHistoryService","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RotateP","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RotateV","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ScriptContext","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Selection","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"VelocityMotor","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Weld","Summary":"","ExplorerOrder":20,"ExplorerImageIndex":34,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TaskScheduler","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"SetThreadShare","Summary":"Deprecated","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StatsItem","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Snap","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FileMesh","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ClickDetector","Summary":"Raises mouse events for parent object","ExplorerOrder":3,"ExplorerImageIndex":41,"Browsable":true,"PreferredParent":"","Members":[{"Name":"MaxActivationDistance","Summary":"The maximum distance a Player's character can be from the ClickDetector's parent Part that will allow the Player's mouse to fire events on this object.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseClick","Summary":"Fired when a player clicks on the parent Part of ClickDetector. The argument provided is always of type Player.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseHoverEnter","Summary":"Fired when a player's mouse enters on the parent Part of ClickDetector. The argument provided is always of type Player.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseHoverLeave","Summary":"Fired when a player's mouse leaves the parent Part of ClickDetector. The argument provided is always of type Player.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Clothing","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Smoke","Summary":"Makes the parent part or model object emit smoke","ExplorerOrder":3,"ExplorerImageIndex":59,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Trail","Summary":"Makes two attachments emit trail when moving","ExplorerOrder":3,"ExplorerImageIndex":93,"Browsable":true,"PreferredParent":"","Members":[{"Name":"LightEmission","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Beam","Summary":"Makes beam between two attachments","ExplorerOrder":3,"ExplorerImageIndex":96,"Browsable":true,"PreferredParent":"","Members":[{"Name":"LightEmission","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ParticleEmitter","Summary":"A generic particle system.","ExplorerOrder":3,"ExplorerImageIndex":80,"Browsable":true,"PreferredParent":"","Members":[{"Name":"LightEmission","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LightInfluence","Summary":"Specifies the amount of influence lighting has on the particle emmitter. A value of 0 is unlit, 1 is fully lit. Fractional values blend from unlit to lit.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Drag","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"VelocityInheritance","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Rate","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Rotation","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RotSpeed","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Speed","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Lifetime","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Sparkles","Summary":"Makes the parent part or model object fantastic","ExplorerOrder":3,"ExplorerImageIndex":42,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Explosion","Summary":"Creates an Explosion! This can be used as a purely graphical effect, or can be made to damage objects.","ExplorerOrder":3,"ExplorerImageIndex":36,"Browsable":true,"PreferredParent":"","Members":[{"Name":"BlastPressure","Summary":"How much force this Explosion exerts on objects within it's BlastRadius. Setting this to 0 creates a purely graphical effect. A larger number will cause Parts to fly away at higher velocities.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BlastRadius","Summary":"How big the Explosion is. This is a circle starting from the center of the Explosion's Position, the larger this property the larger the circle of destruction.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Position","Summary":"Where the Explosion occurs in absolute world coordinates.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ExplosionType","Summary":"Defines the behavior of the Explosion. <a href=\"http://wiki.roblox.com/index.php/ExplosionType\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Fire","Summary":"Makes the parent part or model object emit fire","ExplorerOrder":3,"ExplorerImageIndex":61,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Color","Summary":"The color of the base of the fire.  See SecondaryColor for more.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Heat","Summary":"How hot the fire appears to be. The flame moves quicker the higher this value is set.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SecondaryColor","Summary":"The color the fire interpolates to from Color. The longer a particle exists in the fire, the close to this color it becomes.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Size","Summary":"How large the fire appears to be.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Seat","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":35,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Platform","Summary":"Equivalent to a seat, except that the character stands up rather than sits down.","ExplorerOrder":3,"ExplorerImageIndex":35,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SkateboardPlatform","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":35,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"VehicleSeat","Summary":"Automatically finds and powers hinge joints in an assembly.  Ignores motors.","ExplorerOrder":3,"ExplorerImageIndex":35,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Tool","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":17,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Flag","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":38,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[{"Name":"CanBeDropped","Summary":"If someone is carrying this flag, this bool determines whether or not they can drop it and run.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TeamColor","Summary":"The Team this flag is for. Corresponds with the TeamColors in the Teams service.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Preliminary":false,"IsBackend":false},{"Name":"FlagStand","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":39,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"BackpackItem","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Decal","Summary":"Descibes a texture that is placed on one of the sides of the Part it is parented to.","ExplorerOrder":4,"ExplorerImageIndex":7,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Face","Summary":"Describes the face of the Part the decal will be applied to. <a href=\"http://wiki.roblox.com/index.php/NormalId\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Shiny","Summary":"How much light will appear to reflect off of the decal.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Specular","Summary":"How light will react to the surface of the decal.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Transparency","Summary":"How visible the decal is.  1 is completely invisible, while 0 is completely opaque","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"JointInstance","Summary":"","ExplorerOrder":20,"ExplorerImageIndex":34,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Message","Summary":"","ExplorerOrder":11,"ExplorerImageIndex":33,"Browsable":true,"Deprecated":"true","PreferredParent":"StarterGui","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"Hint","Summary":"","ExplorerOrder":11,"ExplorerImageIndex":33,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"IntValue","Summary":"Stores a int value in it's Value member. Useful to share int information across multiple scripts.","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RayValue","Summary":"Stores a Ray value in it's Value member. Useful to share Ray information across multiple scripts.","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"IntConstrainedValue","Summary":"Stores an int value in it's Value member.  Value is clamped to be in range of Min and MaxValue. Useful to share int information across multiple scripts.","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"DoubleConstrainedValue","Summary":"Stores a double value in it's Value member.  Value is clamped to be in range of Min and MaxValue. Useful to share double information across multiple scripts.","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[{"Name":"MaxValue","Summary":"The maximum we allow this Value to be set.  If Value is set higher than this, it automatically gets adjusted to MaxValue","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MinValue","Summary":"The minimum we allow this Value to be set.  If Value is set lower than this, it automatically gets adjusted to MinValue","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Preliminary":false,"IsBackend":false},{"Name":"BoolValue","Summary":"Stores a boolean value in it's Value member. Useful to share boolean information across multiple scripts.","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CustomEvent","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"CustomEventReceiver","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"FloorWire","Summary":"Renders a thin cylinder than can be adorned with textures that 'flow' from one object to the next. Has basic pathing abilities and attempts to to not intersect anything. <a href=\"http://wiki.roblox.com/index.php/FloorWire_Guide\" target=\"_blank\">More info</a>","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[{"Name":"CycleOffset","Summary":"Controls how the decals are positioned along the wire. <a href=\"http://wiki.roblox.com/index.php/CycleOffset\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"From","Summary":"The object the FloorWire 'emits' from","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StudsBetweenTextures","Summary":"The space between two textures on the wire. Note: studs are relative depending on how far the camera is from the FloorWire.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Texture","Summary":"The image we use to render the textures that flow from beginning to end of the FloorWire.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TextureSize","Summary":"The size in studs of the Texture we use to flow from one object to the next.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"To","Summary":"The object the FloorWire 'emits' to","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Velocity","Summary":"The rate of travel that the textures flow along the wire.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WireRadius","Summary":"How thick the wire is.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Preliminary":false,"IsBackend":false},{"Name":"NumberValue","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StringValue","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Vector3Value","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CFrameValue","Summary":"Stores a CFrame value in it's Value member. Useful to share CFrame information across multiple scripts.","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Color3Value","Summary":"Stores a Color3 value in it's Value member. Useful to share Color3 information across multiple scripts.","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BrickColorValue","Summary":"Stores a BrickColor value in it's Value member. Useful to share BrickColor information across multiple scripts.","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ObjectValue","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":4,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SpecialMesh","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":8,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BlockMesh","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":8,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CylinderMesh","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":8,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BevelMesh","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"DataModelMesh","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Texture","Summary":"","ExplorerOrder":4,"ExplorerImageIndex":10,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Sound","Summary":"","ExplorerOrder":1,"ExplorerImageIndex":11,"Browsable":true,"PreferredParent":"","Members":[{"Name":"play","Summary":"Deprecated. Use Play() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"PlayOnRemove","Summary":"The sound will play when it is removed from the Workspace. Looped sounds don't play","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"EchoSoundEffect","Summary":"An echo audio effect that can be applied to a Sound or SoundGroup.","ExplorerOrder":2,"ExplorerImageIndex":84,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Delay","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Feedback","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DryLevel","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WetLevel","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FlangeSoundEffect","Summary":"A Flanging audio effect that can be applied to a Sound or SoundGroup.","ExplorerOrder":2,"ExplorerImageIndex":84,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Mix","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Depth","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Rate","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DistortionSoundEffect","Summary":"A Distortion audio effect that can be applied to a Sound or SoundGroup.","ExplorerOrder":2,"ExplorerImageIndex":84,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Level","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PitchShiftSoundEffect","Summary":"A Pitch Shifting audio effect that can be applied to a Sound or SoundGroup.","ExplorerOrder":2,"ExplorerImageIndex":84,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Octave","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ChorusSoundEffect","Summary":"A Chorus audio effect that can be applied to a Sound or SoundGroup.","ExplorerOrder":2,"ExplorerImageIndex":84,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Mix","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Rate","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Depth","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TremoloSoundEffect","Summary":"A Tremolo audio effect that can be applied to a Sound or SoundGroup.","ExplorerOrder":2,"ExplorerImageIndex":84,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Frequency","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Depth","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Duty","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ReverbSoundEffect","Summary":"A Reverb audio effect that can be applied to a Sound or SoundGroup.","ExplorerOrder":2,"ExplorerImageIndex":84,"Browsable":true,"PreferredParent":"","Members":[{"Name":"DecayTime","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Diffusion","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Density","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DryLevel","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WetLevel","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"EqualizerSoundEffect","Summary":"An Three-band Equalizer audio effect that can be applied to a Sound or SoundGroup.","ExplorerOrder":2,"ExplorerImageIndex":84,"Browsable":true,"PreferredParent":"","Members":[{"Name":"LowGain","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MidGain","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"HighGain","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CompressorSoundEffect","Summary":"A Compressor audio effect that can be applied to a Sound or SoundGroup.","ExplorerOrder":2,"ExplorerImageIndex":84,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Threshold","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Attack","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Release","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Ratio","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GainMakeup","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SoundGroup","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":85,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StockSound","Summary":"","ExplorerOrder":-1,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SoundService","Summary":"","ExplorerOrder":50,"ExplorerImageIndex":31,"Browsable":true,"PreferredParent":"","Members":[{"Name":"AmbientReverb","Summary":"The ambient sound environment.  May not work when using hardware sound","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DopplerScale","Summary":"The doppler scale is a general scaling factor for how much the pitch varies due to doppler shifting in 3D sound. Doppler is the pitch bending effect when a sound comes towards the listener or moves away from it, much like the effect you hear when a train goes past you with its horn sounding. With dopplerscale you can exaggerate or diminish the effect.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DistanceFactor","Summary":"the relative distance factor, compared to 1.0 meters.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RolloffScale","Summary":"Setting this value makes the sound drop off faster or slower. The higher the value, the faster volume will attenuate, and conversely the lower the value, the slower it will attenuate. For example a rolloff factor of 1 will simulate the real world, where as a value of 2 will make sounds attenuate 2 times quicker.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Backpack","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":20,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StarterPack","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":20,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StarterPlayer","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":79,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StarterGear","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":20,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CoreGui","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":46,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UIGridStyleLayout","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[{"Name":"SetCustomSortFunction","Summary":"When SortOrder is set to Custom, this lua function is used to determine the ordering of elements. Function should take two arguments (each will be an Instance child to compare), and return true if a comes before b, otherwise return false. In other words, use this function the same way you would use a table.sort function. The sorting should be deterministic, otherwise sort will fail and fall back to name order.","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"ApplyLayout","Summary":"Forces a relayout of all elements. Useful when sort is set to Custom.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SortOrder","Summary":"Determines how we decide which element to place next. Can be Name or Custom. If using Custom, make sure SetCustomSortFunction was called with an appropriate sort function.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FillDirection","Summary":"Determines which direction to fill the grid. Can be Horizontal or Vertical.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"HorizontalAlignment","Summary":"Determines how grid is placed within it's parent's container in the x direction. Can be Left, Center, or Right.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"VerticalAlignment","Summary":"Determines how grid is placed within it's parent's container in the y direction. Can be Top, Center, or Bottom.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UIListLayout","Summary":"Sets the position of UI elements in a list. You can use a UIListLayout by parenting it to a GuiObject. The UIListLayout will then apply itself to all of its GuiObject siblings.","ExplorerOrder":3,"ExplorerImageIndex":26,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Padding","Summary":"Determines the amount of free space between each element. Can be set either using scale (Percentage of parent's size in the current direction) or offset (a static spacing value, similar to pixel size).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UIGridLayout","Summary":"Sets the position of UI elements in a 2D grid (this can be modified to 1D grid for list layout). This will also set the elements to a particular size, although this can be overridden with particular constraints on elements. You can use a UIGridLayout by parenting it to a GuiObject. The UIGridLayout will then apply itself to all of its GuiObject siblings.","ExplorerOrder":3,"ExplorerImageIndex":26,"Browsable":true,"PreferredParent":"","Members":[{"Name":"CellSize","Summary":"Denotes what size each element should be. Can be overridden by elements using constraints on individual elements.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CellPadding","Summary":"How much space between elements there should be.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FillDirectionMaxCells","Summary":"Determines how many cells over in the FillDirection we go before starting a new row or column. Set to 0 for max cell count.  Will be clamped if this is set higher than the parent container allows room for.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AbsoluteSize","Summary":"Returns the current size of the grid. If more elements are added, this can increase. If elements are removed this can decrease.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StartCorner","Summary":"Which corner we start laying the elements out from. Can be TopLeft, TopRight, BottomLeft, BottomRight.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UIPageLayout","Summary":"Creates a paged viewing window, like the home screen of a mobile device. You can use a UIPageLayout by parenting it to a GuiObject. The UIPageLayout will then apply itself to all of its GuiObject siblings.","ExplorerOrder":3,"ExplorerImageIndex":26,"Browsable":true,"PreferredParent":"","Members":[{"Name":"CurrentPage","Summary":"The page that is either currently being displayed or is the target of the current animation.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Circular","Summary":"Whether or not the page layout wraps around at the ends.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Padding","Summary":"Determines the amount that pages are separated from each other by. Can be set either using scale (Percentage of parent's size in the current direction) or offset (a static spacing value, similar to pixel size).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Animated","Summary":"Whether or not to animate transitions between pages.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"EasingStyle","Summary":"The easing style to use when performing an animation.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"EasingDirection","Summary":"The easing direction to use when performing an animation.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TweenTime","Summary":"The length of the animation.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Next","Summary":"Sets CurrentPage to the page after the current page and animates to it, or does nothing if there isn't a next page.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Previous","Summary":"Sets CurrentPage to the page after the current page and animates to it, or does nothing if there isn't a next page.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"JumpTo","Summary":"If the instance is in the layout, then it sets CurrentPage to it and animtes to it. If circular layout is set, it will take the shortest path.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"JumpToIndex","Summary":"If the index is >= 0 and less than the size of the layout, acts like JumpTo. If it's out of bounds and circular is set, it will animate the full distance between the in-bounds index of CurrentPage and the new index.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PageEnter","Summary":"Fires when a page comes into view, and is going to be rendered.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PageLeave","Summary":"Fires when a page leaves view, and will not be rendered.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Stopped","Summary":"Fires when an animation to CurrentPage is completed without being cancelled, and the view stops scrolling.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UITableLayout","Summary":"Provides a layout of rows and columns that are sized based on the cells in them.","ExplorerOrder":3,"ExplorerImageIndex":26,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Padding","Summary":"The amount of padding to insert in between the cells of the table.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FillEmptySpaceRows","Summary":"Whether the table should expand to fill the available space of its container, row-wise.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FillEmptySpaceColumns","Summary":"Whether the table should expand to fill the available space of its container, column-wise.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MajorAxis","Summary":"Whether the direct siblings are considered the rows or the columns. The children of the direct siblings are the columns or rows, respectively.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UISizeConstraint","Summary":"Ensures a GuiObject does not become smaller or larger than the min and max size. If an element with a constraint is under the control of a layout, the constraint takes precedence in determining the element�s size, but not position. You can use a Constraint by parenting it to the element you wish to constrain.","ExplorerOrder":3,"ExplorerImageIndex":26,"Browsable":true,"PreferredParent":"","Members":[{"Name":"MinSize","Summary":"The smallest size the GuiObject is allowed to be.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MaxSize","Summary":"The biggest size the GuiObject is allowed to be.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UITextSizeConstraint","Summary":"Ensures a GuiObject with text does not allow the font size to become larger or smaller than min and max text sizes. If an element with a constraint is under the control of a layout, the constraint takes precedence in determining the element�s size, but not position. You can use a Constraint by parenting it to the element you wish to constrain.","ExplorerOrder":3,"ExplorerImageIndex":26,"Browsable":true,"PreferredParent":"","Members":[{"Name":"MinTextSize","Summary":"The smallest size the font is allowed to be.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MaxTextSize","Summary":"The biggest size the font is allowed to be.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UIAspectRatioConstraint","Summary":"Ensures a GuiObject will always have a particular aspect ratio. If an element with a constraint is under the control of a layout, the constraint takes precedence in determining the element�s size, but not position. You can use a Constraint by parenting it to the element you wish to constrain.","ExplorerOrder":3,"ExplorerImageIndex":26,"Browsable":true,"PreferredParent":"","Members":[{"Name":"AspectRatio","Summary":"The aspect ratio to maintain. This is the width/height. Only positive numbers allowed.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AspectType","Summary":"Describes how the aspect ratio will determine its size. Options are FitWithinMaxSize, ScaleWithParentSize. FitWithinMaxSize will make the element the maximum size it can be within the current possible AbsoluteSize of the element while maintaining the AspectRatio. ScaleWithParentSize will make the element the closest to the parent element�s maximum size while maintaining aspect ratio.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DominantAxis","Summary":"Describes which axis to use when determining the new size of the element, while keeping respect to the aspect ratio.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UIScale","Summary":"Uniformly scales a GUI object and all its children.","ExplorerOrder":3,"ExplorerImageIndex":26,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Scale","Summary":"The scale factor to apply.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UIPadding","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":26,"Browsable":true,"PreferredParent":"","Members":[{"Name":"PaddingLeft","Summary":"The padding to apply on the left side relative to the parent's normal size.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PaddingRight","Summary":"The padding to apply on the right side relative to the parent's normal size.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PaddingTop","Summary":"The padding to apply on the top side relative to the parent's normal size.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PaddingBottom","Summary":"The padding to apply on the bottom side relative to the parent's normal size.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TweenBase","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[{"Name":"PlaybackState","Summary":"The current state of how the tween is animating. Possible values are Begin, Playing, Paused, Completed and Cancelled. This property is modified by using functions such as Tween:Play(), Tween:Pause(), and Tween:Cancel(). Read-only.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Play","Summary":"Starts or resumes (if Tween.PlaybackState is Paused) the tween animation. If current PlaybackState is Cancelled, this property will reset the tween to the beginning properties and play the animations from the beginning.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Pause","Summary":"Temporarily stops the tween animation. Animation can be resumed by calling Play().","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Cancel","Summary":"Stops the tween animation. Animation can be restarted by calling Play(). Animation will start from the beginning values.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Completed","Summary":"Fires when the tween either reaches PlaybackState Completed or Cancelled. PlaybackState of one of these types is passed as the first arg to the function listening to this event.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Tween","Summary":"An object linked to an instance that animates properties on the instance over a specified period of time. Useful for easily moving UI objects around, rotating objects, etc. without having to write a lot of code. To create a new tween, please use TweenService:Create.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Instance","Summary":"The object this tween is operating on. Read-only.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TweenInfo","Summary":"Specifies how the tween animates. Read-only.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TweenService","Summary":"Service responsible for creating tweens on instances.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StarterGui","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":46,"Browsable":true,"PreferredParent":"","Members":[{"Name":"SetCoreGuiEnabled","Summary":"Will stop/begin certain core gui elements being rendered. See CoreGuiType for core guis that can be modified.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetCoreGuiEnabled","Summary":"Returns a boolean describing whether a CoreGuiType is currently being rendered.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GuiService","Summary":"The GuiService is a special service, which currently allows developers to control what GuiObject is currently being selected by the Gamepad Gui navigator, and allows clients to check if Roblox's main menu is currently open. This service has a lot of hidden members, which are mainly used internally by Roblox's CoreScripts.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"GetGuiInset","Summary":"Returns a Tuple containing two Vector2 values representing the offset of user GUIs in pixels from the top right corner of the screen and the bottom right corner of the screen respectively.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ContextActionService","Summary":"A service used to bind input to various lua functions.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"BindAction","Summary":"Binds 'functionToBind' to fire when any 'inputTypes' happen. InputTypes can be variable in number and type. Types can be Enum.KeyCode, single character strings corresponding to keys, or Enum.UserInputType. 'actionName' is a key used by many other ContextActionService functions to query state. 'createTouchButton' if true will create a button on screen on touch devices.  This button will fire 'functionToBind' with three arguments: first argument is the actionName, second argument is the UserInputState of the input, and the third is the InputObject that fired this function. If 'functionToBind' yields or returns nil or Enum.ContextActionResult.Sink, the input will be sunk. If it returns Enum.ContextActionResult.Pass, the next bound action in the stack will be invoked.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetTitle","Summary":"If 'actionName' key contains a bound action, then 'title' is set as the title of the touch button. Does nothing if a touch button was not created. No guarantees are made whether title will be set when button is manipulated.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetDescription","Summary":"If 'actionName' key contains a bound action, then 'description' is set as the description of the bound action. This description will appear for users in a listing of current actions availables.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetImage","Summary":"If 'actionName' key contains a bound action, then 'image' is set as the image of the touch button. Does nothing if a touch button was not created. No guarantees are made whether image will be set when button is manipulated.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetPosition","Summary":"If 'actionName' key contains a bound action, then 'position' is set as the position of the touch button. Does nothing if a touch button was not created. No guarantees are made whether position will be set when button is manipulated.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UnbindAction","Summary":"If 'actionName' key contains a bound action, removes function from being called by all input that it was bound by (if function was also bound by a different action name as well, those bound input are still active). Will also remove any touch button created (if button was manipulated manually there is no guarantee it will be cleaned up).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UnbindAllActions","Summary":"Removes all functions bound. No actionNames will remain. All touch buttons will be removed. If button was manipulated manually there is no guarantee it will be cleaned up.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetBoundActionInfo","Summary":"Returns a table with info regarding the function bound with 'actionName'. Table has the keys 'title' (current title that was set with SetTitle) 'image' (image set with SetImage) 'description' (description set with SetDescription) 'inputTypes' (tuple containing all input bound for this 'actionName') 'createTouchButton' (whether or not we created a touch button for this 'actionName').","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetAllBoundActionInfo","Summary":"Returns a table with all bound action info. Each entry is a key with 'actionName' and value being the same table you would get from ContextActionService:GetBoundActionInfo('actionName').","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetButton","Summary":"If 'actionName' key contains a bound action, then this will return the touch button (if was created). Returns nil if a touch button was not created. No guarantees are made whether button will be retrievable when button is manipulated.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PointsService","Summary":"A service used to query and award points for Roblox users using the universal point system.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"PointsAwarded","Summary":"Fired when points are successfully awarded 'userId'. Also returns the updated balance of points for usedId in universe via 'userBalanceInUniverse', total points via 'userTotalBalance', and the amount points that were awarded via 'pointsAwarded'. This event fires on the server and also all clients in the game that awarded the points.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AwardPoints","Summary":"Will attempt to award the 'amount' points to 'userId', returns 'userId' awarded to, the number of points awarded, the new point total the user has in the game, and the total number of points the user now has. Will also fire PointsService.PointsAwarded. Works with server scripts ONLY.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetPointBalance","Summary":"Returns the overall balance of points that player with userId has (the sum of all points across all games). Works with server scripts ONLY.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetGamePointBalance","Summary":"Returns the balance of points that player with userId has in the current game (all placeID points combined within the game). Works with server scripts ONLY.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetAwardablePoints","Summary":"Returns the number of points the current universe can award to players. Works with server scripts ONLY.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Chat","Summary":"","ExplorerOrder":51,"ExplorerImageIndex":33,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ChatService","Summary":"","ExplorerOrder":51,"ExplorerImageIndex":33,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LocalizationService","Summary":"","ExplorerOrder":-1,"ExplorerImageIndex":92,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MarketplaceService","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":46,"Browsable":true,"PreferredParent":"","Members":[{"Name":"PromptPurchase","Summary":"Will prompt 'player' to purchase the item associated with 'assetId'.  'equipIfPurchased' is an optional argument that will give the item to the player immediately if they buy it (only applies to gear).  'currencyType' is also optional and will attempt to prompt the user with a specified currency if the product can be purchased with this currency, otherwise we use the default currency of the product.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetProductInfo","Summary":"Takes one argument \"assetId\" which should be a number of an asset on www.roblox.com.  Returns a table containing the product information (if this process fails, returns an empty table).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PlayerOwnsAsset","Summary":"Checks to see if 'Player' owns the product associated with 'assetId'. Returns true if the player owns it, false otherwise. This call will produce a warning if called on a guest player.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ProcessReceipt","Summary":"Callback that is executed for pending Developer Product receipts.\n            \n            If this function does not return Enum.ProductPurchaseDecision.PurchaseGranted, then you will not be granted the money for the purchase!\n            \n            The callback will be invoked with a table, containing the following informational fields:\n            PlayerId - the id of the player making the purchase.\n            PlaceIdWherePurchased - the specific place where the purchase was made.\n            PurchaseId - a unique identifier for the purchase, should be used to prevent granting an item multiple times for one purchase.\n            ProductId - the id of the purchased product.\n            CurrencyType - the type of currency used (Tix, Robux).\n            CurrencySpent - the amount of currency spent on the product for this purchase.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PromptPurchaseFinished","Summary":"Fired when a 'player' dismisses a purchase dialog for 'assetId'.  If the player purchased the item 'isPurchased' will be true, otherwise it will be false. This call will produce a warning if called on a guest player.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UserInputService","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"TouchEnabled","Summary":"Returns true if the local device accepts touch input, false otherwise.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"KeyboardEnabled","Summary":"Returns true if the local device accepts keyboard input, false otherwise.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseEnabled","Summary":"Returns true if the local device accepts mouse input, false otherwise.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AccelerometerEnabled","Summary":"Returns true if the local device has an accelerometer, false otherwise.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GyroscopeEnabled","Summary":"Returns true if the local device has an gyroscope, false otherwise.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchTap","Summary":"Fired when a user taps their finger on a TouchEnabled device. 'touchPositions' is a Lua array of Vector2, each indicating the position of all the fingers involved in the tap gesture. This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchPinch","Summary":"Fired when a user pinches their fingers on a TouchEnabled device. 'touchPositions' is a Lua array of Vector2, each indicating the position of all the fingers involved in the pinch gesture. 'scale' is a float that indicates the difference from the beginning of the pinch gesture. 'velocity' is a float indicating how quickly the pinch gesture is happening. 'state' indicates the Enum.UserInputState of the gesture.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchSwipe","Summary":"Fired when a user swipes their fingers on a TouchEnabled device. 'swipeDirection' is an Enum.SwipeDirection, indicating the direction the user swiped. 'numberOfTouches' is an int that indicates how many touches were involved with the gesture.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchLongPress","Summary":"Fired when a user holds at least one finger for a short amount of time on the same screen position on a TouchEnabled device. 'touchPositions' is a Lua array of Vector2, each indicating the position of all the fingers involved in the gesture. 'state' indicates the Enum.UserInputState of the gesture.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchRotate","Summary":"Fired when a user rotates two fingers on a TouchEnabled device. 'touchPositions' is a Lua array of Vector2, each indicating the position of all the fingers involved in the gesture. 'rotation' is a float indicating how much the rotation has gone from the start of the gesture. 'velocity' is a float that indicates how quickly the gesture is being performed. 'state' indicates the Enum.UserInputState of the gesture.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchPan","Summary":"Fired when a user drags at least one finger on a TouchEnabled device. 'touchPositions' is a Lua array of Vector2, each indicating the position of all the fingers involved in the gesture. 'totalTranslation' is a Vector2, indicating how far the pan gesture has gone from its starting point. 'velocity' is a Vector2 that indicates how quickly the gesture is being performed in each dimension. 'state' indicates the Enum.UserInputState of the gesture.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchStarted","Summary":"Fired when a user places their finger on a TouchEnabled device. 'touch' is an InputObject, which contains useful data for querying user input.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchMoved","Summary":"Fired when a user moves their finger on a TouchEnabled device. 'touch' is an InputObject, which contains useful data for querying user input.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchEnded","Summary":"Fired when a user moves their finger on a TouchEnabled device. 'touch' is an InputObject, which contains useful data for querying user input.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"InputBegan","Summary":"Fired when a user begins interacting via a Human-Computer Interface device (Mouse button down, touch begin, keyboard button down, etc.). 'inputObject' is an InputObject, which contains useful data for querying user input.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"InputChanged","Summary":"Fired when a user changes interacting via a Human-Computer Interface device (Mouse move, touch move, mouse wheel, etc.). 'inputObject' is an InputObject, which contains useful data for querying user input.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"InputEnded","Summary":"Fired when a user stops interacting via a Human-Computer Interface device (Mouse button up, touch end, keyboard button up, etc.). 'inputObject' is an InputObject, which contains useful data for querying user input.  This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TextBoxFocused","Summary":"Fired when a user clicks/taps on a textbox to begin text entry. Argument is the textbox that was put in focus. This also fires if a textbox forces focus on the user. This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TextBoxFocusReleased","Summary":"Fired when a user stops text entry into a textbox (usually by pressing return or clicking/tapping somewhere else on the screen). Argument is the textbox that was taken out of focus. This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DeviceAccelerationChanged","Summary":"Fired when a user moves a device that has an accelerometer. This is fired with an InputObject, which has type Enum.InputType.Accelerometer, and position that shows the g force in each local device axis. This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DeviceGravityChanged","Summary":"Fired when the force of gravity changes on a device that has an accelerometer. This is fired with an InputObject, which has type Enum.InputType.Accelerometer, and position that shows the g force in each local device axis. This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DeviceRotationChanged","Summary":"Fired when a user rotates a device that has an gyroscope. This is fired with an InputObject, which has type Enum.InputType.Gyroscope, and position that shows total rotation in each local device axis.  The delta property describes the amount of rotation that last happened. A second argument of Vector4 is the device's current quaternion rotation in reference to it's default reference frame. This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetDeviceAcceleration","Summary":"Returns an InputObject that describes the device's current acceleration. This is fired with an InputObject, which has type Enum.InputType.Accelerometer, and position that shows the g force in each local device axis.  The delta property describes the amount of rotation that last happened. This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetDeviceGravity","Summary":"Returns an InputObject that describes the device's current gravity vector. This is fired with an InputObject, which has type Enum.InputType.Accelerometer, and position that shows the g force in each local device axis. The delta property describes the amount of rotation that last happened. This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetDeviceRotation","Summary":"Returns an InputObject and a Vector4 that describes the device's current rotation vector. This is fired with an InputObject, which has type Enum.InputType.Gyroscope, and position that shows total rotation in each local device axis. The delta property describes the amount of rotation that last happened. The Vector4 is the device's current quaternion rotation in reference to it's default reference frame. This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Sky","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":28,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ColorCorrectionEffect","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":83,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Brightness","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Contrast","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Saturation","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BloomEffect","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":83,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Intensity","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Threshold","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Size","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BlurEffect","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":83,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Size","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SunRaysEffect","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":83,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Intensity","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Spread","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Motor","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Humanoid","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":9,"Browsable":true,"PreferredParent":"","Members":[{"Name":"MoveTo","Summary":"Attempts to move the Humanoid and it's associated character to 'part'. 'location' is used as an offset from part's origin.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Jump","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Sit","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TakeDamage","Summary":"Decreases health by the amount.  Use this instead of changing health directly to make sure weapons are filtered for things such as ForceField(s).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UnequipTools","Summary":"Takes any active gear/tools that the Humanoid is using and puts them into the backpack.  This function only works on Humanoids with a corresponding Player.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"EquipTool","Summary":"Takes a specified tool and equips it to the Humanoid's Character.  Tool argument should be of type 'Tool'.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"NameOcclusion","Summary":"Sets how to display other humanoid names to this humanoid's player. <a href=\"http://wiki.roblox.com/index.php/NameOcclusion\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BodyColors","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Shirt","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":43,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Pants","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":44,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ShirtGraphic","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":40,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Skin","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"DebugSettings","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FaceInstance","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GameSettings","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GlobalSettings","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Item","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"NetworkPeer","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"NetworkSettings","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PVInstance","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[{"Name":"CoordinateFrame","Summary":"Deprecated. Use CFrame instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RenderSettings","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RootInstance","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ServiceProvider","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[{"Name":"service","Summary":"Use GetService() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ProfilingItem","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"NetworkMarker","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Hopper","Summary":"Use StarterPack instead","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"Instance","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[{"Name":"Archivable","Summary":"Determines whether or not an Instance can be saved when the game closes/attempts to save the game. Note: this only applies to games that use Data Persistence, or SavePlaceAsync.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ClassName","Summary":"The string name of this Instance's most derived class.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Parent","Summary":"The Instance that is directly above this Instance in the tree.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetDebugId","Summary":"This function is for internal testing. Don't use in production code","Browsable":"false","Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Clone","Summary":"Returns a copy of this Object and all its children. The copy's Parent is nil","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"clone","Summary":"Use Clone() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"isA","Summary":"Use IsA() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"IsA","Summary":"Returns a boolean if this Instance is of type 'className' or a is a subclass of type 'className'.  If 'className' is not a valid class type in ROBLOX, this function will always return false.  <a href=\"http://wiki.roblox.com/index.php/IsA\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FindFirstChild","Summary":"Returns the first child of this Instance that matches the first argument 'name'.  The second argument 'recursive' is an optional boolean (defaults to false) that will force the call to traverse down thru all of this Instance's descendants until it finds an object with a name that matches the 'name' argument.  The function will return nil if no Instance is found.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FindFirstChildOfClass","Summary":"Returns the first child of this Instance that with a ClassName equal to 'className'.  The function will return nil if no Instance is found.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FindFirstChildWhichIsA","Summary":"Returns the first child of this Instance that :IsA(className).  The second argument 'recursive' is an optional boolean (defaults to false) that will force the call to traverse down thru all of this Instance's descendants until it finds an object with a name that matches the 'className' argument.  The function will return nil if no Instance is found.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FindFirstAncestor","Summary":"Returns the first ancestor of this Instance that matches the first argument 'name'.  The function will return nil if no Instance is found.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FindFirstAncestorOfClass","Summary":"Returns the first ancestor of this Instance with a ClassName equal to 'className'.  The function will return nil if no Instance is found.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FindFirstAncestorWhichIsA","Summary":"Returns the first ancestor of this Instance that :IsA(className).  The function will return nil if no Instance is found.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetFullName","Summary":"Returns a string that shows the path from the root node (DataModel) to this Instance.  This string does not include the root node (DataModel).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"children","Summary":"Use GetChildren() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"getChildren","Summary":"Use GetChildren() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"GetChildren","Summary":"Returns a read-only table of this Object's children","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetDescendants","Summary":"Returns an array containing all of the descendants of the instance. Returns in preorder traversal, or in other words, where the parents come before their children, depth first.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Remove","Summary":"Deprecated. Use ClearAllChildren() to get rid of all child objects, or Destroy() to invalidate this object and its descendants","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"remove","Summary":"Use Remove() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"ClearAllChildren","Summary":"Removes all children (but not this object) from the workspace.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Destroy","Summary":"Removes object and all of its children from the workspace. Disconnects object and all children from open connections. Object and children may not be usable after calling Destroy.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"findFirstChild","Summary":"Use FindFirstChild() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"AncestryChanged","Summary":"Fired when any of this object's ancestors change.  First argument 'child' is the object whose parent changed.  Second argument 'parent' is the first argument's new parent.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DescendantAdded","Summary":"Fired after an Instance is parented to this object, or any of this object's descendants.  The 'descendant' argument is the Instance that is being added.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DescendantRemoving","Summary":"Fired after an Instance is unparented from this object, or any of this object's descendants.  The 'descendant' argument is the Instance that is being added.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Changed","Summary":"Fired after a property changes value.  The property argument is the name of the property","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BodyGyro","Summary":"Attempts to maintain a fixed orientation of its parent Part","ExplorerOrder":14,"ExplorerImageIndex":14,"Browsable":true,"PreferredParent":"","Members":[{"Name":"MaxTorque","Summary":"The maximum torque that will be exerted on the Part","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"maxTorque","Summary":"Use MaxTorque instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"D","Summary":"The dampening factor applied to this force","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"P","Summary":"The power continually applied to this force","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CFrame","Summary":"The cframe that this force is trying to orient its parent Part to.  Note: this force only uses the rotation of the cframe, not the position.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"cframe","Summary":"Use CFrame instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BodyPosition","Summary":"","ExplorerOrder":14,"ExplorerImageIndex":14,"Browsable":true,"PreferredParent":"","Members":[{"Name":"MaxForce","Summary":"The maximum force that will be exerted on the Part","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"maxForce","Summary":"Use MaxForce instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"D","Summary":"The dampening factor applied to this force","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"P","Summary":"The power factor continually applied to this force","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Position","Summary":"The Vector3 that this force is trying to position its parent Part to.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"position","Summary":"Use position instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RocketPropulsion","Summary":"A propulsion system that mimics a rocket","ExplorerOrder":14,"ExplorerImageIndex":14,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BodyVelocity","Summary":"","ExplorerOrder":14,"ExplorerImageIndex":14,"Browsable":true,"PreferredParent":"","Members":[{"Name":"MaxForce","Summary":"The maximum force that will be exerted on the Part in each axis","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"maxForce","Summary":"Use MaxForce instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"P","Summary":"The amount of power we add to the system.  The higher the power, the quicker the force will achieve its goal.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Velocity","Summary":"The velocity this system tries to achieve.  How quickly the system reaches this velocity (if ever) is defined by P.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"velocity","Summary":"Use Velocity instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BodyAngularVelocity","Summary":"","ExplorerOrder":14,"ExplorerImageIndex":14,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BodyForce","Summary":"When parented to a physical part, BodyForce will continually exert a force upon its parent object.","ExplorerOrder":14,"ExplorerImageIndex":14,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BodyThrust","Summary":"","ExplorerOrder":14,"ExplorerImageIndex":14,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Force","Summary":"The power continually applied to this force","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"force","Summary":"Use Force instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"Location","Summary":"The Vector3 location of where to apply the force to.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"location","Summary":"Use Location instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Hole","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"Feature","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Teams","Summary":"This Service-level object is the container for all Team objects in a level. A map that supports team games must have a Teams service. <a href=\"http://wiki.roblox.com/index.php/Team\" target=\"_blank\">More info</a>","ExplorerOrder":14,"ExplorerImageIndex":23,"Browsable":true,"PreferredParent":"","Members":[{"Name":"GetPlayers","Summary":"Returns a read-only table of players which are on this team.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Team","Summary":"The Team class is used to represent a faction in a team game. The only valid location for a Team object is under the Teams service. <a href=\"http://wiki.roblox.com/index.php/Team\" target=\"_blank\">More info</a>","ExplorerOrder":1,"ExplorerImageIndex":24,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SpawnLocation","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":25,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"NetworkClient","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":16,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"NetworkServer","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":15,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LuaSourceContainer","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[{"Name":"CurrentEditor","Summary":"The name of the player who is currently editing the script in Team Create.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Script","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":6,"Browsable":true,"PreferredParent":"","Members":[{"Name":"LinkedScript","Summary":"This property is under development. Do not use","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LocalScript","Summary":"A script that runs on clients, NOT servers.  LocalScripts can only run when parented under the PlayerGui currently.","ExplorerOrder":4,"ExplorerImageIndex":18,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"NetworkReplicator","Summary":"","ExplorerOrder":3,"ExplorerImageIndex":29,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Model","Summary":"A construct used to group Parts and other objects together, also allows manipulation of multiple objects.","ExplorerOrder":10,"ExplorerImageIndex":2,"Browsable":true,"PreferredParent":"","Members":[{"Name":"BreakJoints","Summary":"Breaks all surface joints contained within","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetModelCFrame","Summary":"Returns a CFrame that has position of the centroid of all Parts in the Model.  The rotation matrix is either the rotation matrix of the user-defined PrimaryPart, or if not specified then  a part in the Model chosen by the engine.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetModelSize","Summary":"Returns a Vector3 that is union of the extents of all Parts in the model.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MakeJoints","Summary":"Creates the appropriate SurfaceJoints between all touching Parts contrained within the model. Technically, this function calls MakeJoints() on all Parts inside the model.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MoveTo","Summary":"Moves the centroid of the Model to the specified location, respecting all relative distances between parts in the model.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ResetOrientationToIdentity","Summary":"Rotates all parts in the model to the orientation that was set using SetIdentityOrientation().  If this function has never been called, rotation is reset to GetModelCFrame()'s rotation.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetIdentityOrientation","Summary":"Takes the current rotation matrix of the model and stores it as the model's identity matrix. The rotation is applied when ResetOrientationToIdentity() is called.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TranslateBy","Summary":"Similar to MoveTo(), except instead of moving to an explicit location, we use the model's current CFrame location and offset it.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetPrimaryPartCFrame","Summary":"Returns the cframe of the Model.PrimaryPart. If PrimaryPart is nil, then this function will throw an error.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetPrimaryPartCFrame","Summary":"Sets the cframe of the Model.PrimaryPart. If PrimaryPart is nil, then this function will throw an error. This also sets the cframe of all descendant Parts relative to the cframe change to PrimaryPart.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"makeJoints","Summary":"Use MakeJoints() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"move","Summary":"Use MoveTo() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"PrimaryPart","Summary":"A Part that serves as a reference for the Model's CFrame. Used in conjunction with GetModelPrimaryPartCFrame and SetModelPrimaryPartCFrame. Use this to rotate/translate all Parts relative to the PrimaryPart.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Status","Summary":"","ExplorerOrder":10,"ExplorerImageIndex":2,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[{"Name":"move","Summary":"Use MoveTo() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Preliminary":false,"IsBackend":false},{"Name":"DataModel","Summary":"The root of ROBLOX's parent-child hierarchy (commonly known as game after the global variable used to access it)","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"OnClose","Summary":"Deprecated. Use DataModel.BindToClose","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"Workspace","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"workspace","Summary":"Deprecated. Use Workspace","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"ShowMouse","Summary":"Deprecated. Use Workspace.IsMouseCursorVisible","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"IsLoaded","Summary":"Returns true if the game has finished loading, false otherwise.  Check this before listening to the Loaded signal to ensure a script knows when a game finishes loading.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Loaded","Summary":"Fires when the game finishes loading.  Use this to know when to remove your custom loading gui.  It is best to check IsLoaded() before connecting to this event, as the game may load before the event is connected to.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetPlaceID","Summary":"Use SetPlaceId() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"SetCreatorID","Summary":"Use SetCreatorId() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DataStoreService","Summary":"Responsible for storing data across multiple user created places","ExplorerOrder":-1,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"GetDataStore","Summary":"Returns a data store with the given name and scope","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetGlobalDataStore","Summary":"Returns the default data store","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetOrderedDataStore","Summary":"Returns an ordered data store with the given name and scope","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GlobalDataStore","Summary":"Exposes functions for saving and loading data for the DataStoreService","ExplorerOrder":-1,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"OnUpdate","Summary":"Sets callback as a function to be executed any time the value associated with key is changed. It is important to disconnect the connection when the subscription to the key is no longer needed.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetAsync","Summary":"Returns the value of the entry in the DataStore with the given key","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"IncrementAsync","Summary":"Increments the value of a particular key amd returns the incremented value","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetAsync","Summary":"Sets the value of the key. This overwrites any existing data stored in the key","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UpdateAsync","Summary":"Retrieves the value of the key from the website, and updates it with a new value. The callback until the value fetched matches the value on the web. Returning nil means it will not save.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"OrderedDataStore","Summary":"A type of DataStore where values must be positive integers. This makes OrderedDataStore suitable for leaderboard related scripting where you are required to order large amounts of data efficiently.","ExplorerOrder":-1,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"GetSortedAsync","Summary":"Returns a DataStorePages object. The length of each page is determined by pageSize, and the order is determined by isAscending. minValue and maxValue are optional parameters which will filter the result.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"HopperBin","Summary":"","ExplorerOrder":24,"ExplorerImageIndex":22,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"Camera","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":5,"Browsable":true,"PreferredParent":"","Members":[{"Name":"CameraSubject","Summary":"Where the Camera's focus is.  Any rotation of the camera will be about this subject.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CameraType","Summary":"Defines how the camera will behave. <a href=\"http://wiki.roblox.com/index.php/CameraType\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CoordinateFrame","Summary":"The current position and rotation of the Camera.  For most CameraTypes, the rotation is set such that the CoordinateFrame lookVector is pointing at the Focus.","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"CFrame","Summary":"The current position and rotation of the Camera.  For most CameraTypes, the rotation is set such that the CoordinateFrame lookVector is pointing at the Focus.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FieldOfView","Summary":"The current angle, or width, of what the camera can see.  Current acceptable values are from 20 degrees to 80.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Focus","Summary":"The current CoordinateFrame that the camera is looking at.  Note: it is not always guaranteed that the camera is always looking here.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ViewportSize","Summary":"Holds the x,y screen resolution of the viewport the camera is presenting (note: this can differ from the AbsoluteSize property of a full screen gui).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetRoll","Summary":"Returns the camera's current roll. Roll is defined in radians, and is stored as the delta from the camera's y axis default normal vector.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WorldToScreenPoint","Summary":"Takes a 3D position in the world and projects it onto x,y coordinates of screen space. Returns two values, first is a Vector3 that has x,y position and z position which is distance from camera (negative if behind camera, positive if in front). Second return value is a boolean indicating if the first argument is an on-screen coordinate.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ScreenPointToRay","Summary":"Takes a 2D screen position and produces a Ray object to be used for 3D raycasting. Input is x,y screen coordinates, and a (optional, defaults to 0) z position which sets how far in the camera look vector to start the ray origin.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ViewportPointToRay","Summary":"Same as ScreenPointToRay, except no GUI offsets are taken into account. Useful for things like casting a ray from the middle of the Camera.ViewportSize","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WorldToViewportPoint","Summary":"Same as WorldToScreenPoint, except no GUI offsets are taken into account.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetRoll","Summary":"Sets the camera's current roll. Roll is defined in radians, and is stored as the delta from the camera's y axis default normal vector.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Players","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":21,"Browsable":true,"PreferredParent":"","Members":[{"Name":"CharacterAutoLoads","Summary":"Set to true, when a player joins a game, they get a character automatically, as well as when they die.  When set to false, characters do not auto load and will only load in using Player:LoadCharacter().","Browsable":"true","Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"players","Summary":"Use GetPlayers() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ReplicatedStorage","Summary":"A container whose contents are replicated to all clients and the server.","ExplorerOrder":3,"ExplorerImageIndex":70,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RobloxReplicatedStorage","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ReplicatedFirst","Summary":"A container whose contents are replicated to all clients (but not back to the server) first before anything else. Useful for creating loading guis, tutorials, etc.","ExplorerOrder":3,"ExplorerImageIndex":70,"Browsable":true,"PreferredParent":"","Members":[{"Name":"RemoveRobloxLoadingScreen","Summary":"Removes the default Roblox loading screen from view. Call this when you are ready to either show your own loading gui, or when the game is ready to play.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ServerStorage","Summary":"A container whose contents are only on the server.","ExplorerOrder":3,"ExplorerImageIndex":69,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ServerScriptService","Summary":"A container whose contents should be scripts. Scripts that are added to the container are run on the server.","ExplorerOrder":3,"ExplorerImageIndex":71,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Lighting","Summary":"Responsible for all lighting aspects of the world (affects how things are rendered).","ExplorerOrder":3,"ExplorerImageIndex":13,"Browsable":true,"PreferredParent":"","Members":[{"Name":"GetMinutesAfterMidnight","Summary":"The number of minutes that the current time is past midnight.  If currently at midnight, returns 0.  Will return decimal values if not at an exact minute.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetMoonDirection","Summary":"Returns the lookVector (Vector3) of the moon. If this lookVector was used in a CFrame, the Part would face the moon.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetMoonPhase","Summary":"Currently always returns 0.75. MoonPhase cannot be edited.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetSunDirection","Summary":"Returns the lookVector (Vector3) of the sun. If this lookVector was used in a CFrame, the Part would face the sun.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetMinutesAfterMidnight","Summary":"Sets the time to be a certain number of minutes after midnight.  This works with integer and decimal values.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Ambient","Summary":"The hue of the global lighting.  Changing this changes the color tint of all objects in the Workspace.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Brightness","Summary":"How much global light each Part in the Workspace receives. Standard range is 0 to 1 (0 being little light), but can be increased all the way to 5 (colors start to be appear very different at this value).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ColorShift_Bottom","Summary":"The hue of global lighting on the bottom surfaces of an object.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ColorShift_Top","Summary":"The hue of global lighting on the top surfaces of an object.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FogColor","Summary":"A Color3 value that changes the hue of distance fog.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FogEnd","Summary":"The distance at which fog completely blocks your vision. This distance is relative to the camera position. Units are in studs","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FogStart","Summary":"The distance at which the fog gradient begins. This distance is relative to the camera position. Units are in studs.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GeographicLatitude","Summary":"The latitude position the level is placed at.  This affects sun position. <a href=\"http://wiki.roblox.com/index.php/GeographicLatitude\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GlobalShadows","Summary":"Flag enabling shadows from sun and moon in the place","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"OutdoorAmbient","Summary":"Effective ambient value for outdoors, effectively shadow color outdoors (requires GlobalShadows enabled)","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Outlines","Summary":"Flag enabling or disabling outlines on parts and terrain","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ShadowColor","Summary":"Color the shadows appear as. Shadows are drawn mostly for characters, but depending on the lighting will also show for Parts in the Workspace.  Rendering settings can also affect if shadows are drawn.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TimeOfDay","Summary":"A string that represent the current time of day. Time is in 24-hour clock format \"XX::YY:ZZ\", where X is hour, Y is minute, and Z is seconds.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ClockTime","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LightingChanged","Summary":"Fired whenever a property of Lighting is changed, or a skybox is added or removed. Skyboxes are of type 'Sky' and should be parented directly to lighting.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TestService","Summary":"","ExplorerOrder":100,"ExplorerImageIndex":68,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DebuggerManager","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ScriptDebugger","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DebuggerBreakpoint","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DebuggerWatch","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Debris","Summary":"A service that provides utility in cleaning up objects","ExplorerOrder":-1,"ExplorerImageIndex":30,"Browsable":true,"PreferredParent":"","Members":[{"Name":"addItem","Summary":"Use AddItem() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"AddItem","Summary":"Adds an Instance into the debris service that will later be destroyed.  Second argument 'lifetime' is optional and specifies how long (in seconds) to wait before destroying the item. If no time is specified then the item added will automatically be destroyed in 10 seconds.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MaxItems","Summary":"Deprecated. No replacement","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Accoutrement","Summary":"","ExplorerOrder":2,"ExplorerImageIndex":32,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Player","Summary":"","ExplorerOrder":1,"ExplorerImageIndex":12,"Browsable":true,"PreferredParent":"","Members":[{"Name":"CharacterAppearance","Summary":"","Browsable":"false","Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CameraMode","Summary":"An enum that describes how a Player's camera is allowed to behave. <a href=\"http://wiki.roblox.com/index.php/CameraMode\" target=\"_blank\">More info</a>.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DataReady","Summary":"Read-only. If true, this Player's persistent data can be loaded, false otherwise. <a href=\"http://wiki.roblox.com/index.php/ROBLOX_Scripting_How_To:_Data_Persistence\" target=\"_blank\">Info on Data Persistence</a>.","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"DataComplexity","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"LoadCharacter","Summary":"Loads in a new character for this player.  This will replace the player's current character, if they have one. This should be used in conjunction with Players.CharacterAutoLoads to control spawning of characters. This function only works from a server-side script (NOT a LocalScript).","Browsable":"true","Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LoadData","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"SaveData","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"SaveBoolean","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"SaveInstance","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"SaveString","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"LoadBoolean","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"LoadNumber","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"LoadString","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"LoadInstance","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"SaveNumber","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"playerFromCharacter","Summary":"Use GetPlayerFromCharacter() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"SetUnder13","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"WaitForDataReady","Summary":"Yields until the persistent data for this Player is ready to be loaded. <a href=\"http://wiki.roblox.com/index.php/ROBLOX_Scripting_How_To:_Data_Persistence\" target=\"_blank\">Info on Data Persistence</a>.","Browsable":"true","Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"Idled","Summary":"Fired periodically after the user has been AFK for a while.  Currently this event is only fired for the *local* Player.  \"time\" is the time in seconds that the user has been idle.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Workspace","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":19,"Browsable":true,"PreferredParent":"","Members":[{"Name":"FindPartsInRegion3","Summary":"Returns parts in the area defined by the Region3, up to specified maxCount or 100, whichever is less","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FindPartsInRegion3WithIgnoreList","Summary":"Returns parts in the area defined by the Region3, up to specified maxCount or 100, whichever is less","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FindPartOnRay","Summary":"Return type is (BasePart, Vector3) if the ray hits.  If it misses it will return (nil, PointAtEndOfRay)","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FindPartOnRayWithIgnoreList","Summary":"Return type is (BasePart, Vector3) if the ray hits.  If it misses it will return (nil, PointAtEndOfRay)","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PGSPhysicsSolverEnabled","Summary":"Boolean used to enable the experimental physics solver","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FallenPartsDestroyHeight","Summary":"Sets the height at which falling characters and parts are destroyed. This property is not scriptable and can only be set in Studio","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BasePart","Summary":"A structural class, not creatable","ExplorerOrder":-1,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[{"Name":"Color","Summary":"Color3 of the part.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CFrame","Summary":"Contains information regarding the Part's position and a matrix that defines the Part's rotation.  Can read/write. <a href=\"http://wiki.roblox.com/index.php/Cframe\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CanCollide","Summary":"Determines whether physical interactions with other Parts are respected.  If true, will collide and react with physics to other Parts.  If false, other parts will pass thru instead of colliding","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Anchored","Summary":"Determines whether or not physics acts upon the Part.  If true, part stays 'Anchored' in space, not moving regardless of any collision/forces acting upon it.  If false, physics works normally on the part.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Elasticity","Summary":"A float value ranging from 0.0f to 1.0f. Sets how much the Part will rebound against another. a value of 1 is like a superball, and 0 is like a lead block.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Friction","Summary":"A float value ranging from 0.0f to 1.0f. Sets how much the Part will be able to slide. a value of 1 is no sliding, and 0 is no friction, so infinite sliding.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Locked","Summary":"Determines whether building tools (in-game and studio) can manipulate this Part.  If true, no editing allowed.  If false, editing is allowed.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Material","Summary":"Specifies the look and feel the Part should have.  Note: this does not define the color the Part is, see BrickColor for that. <a href=\"http://wiki.roblox.com/index.php/Material\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Reflectance","Summary":"Specifies how shiny the Part is. A value of 1 is completely reflective (chrome), while a value of 0 is no reflectance (concrete wall)","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ResizeIncrement","Summary":"Sets the value for the smallest change in size allowable by the Resize(NormalId, int) function.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ResizeableFaces","Summary":"Sets the value for the faces allowed to be resized by the Resize(NormalId, int) function.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Transparency","Summary":"Sets how visible an object is. A value of 1 makes the object invisible, while a value of 0 makes the object opaque.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Velocity","Summary":"How fast the Part is traveling in studs/second. This property is NOT recommended to be modified directly, unless there is good reason.  Otherwise, try using a BodyForce to move a Part.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PositionLocal","Summary":"Position relative to parent part, or global space if there is no parent.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"OrientationLocal","Summary":"Orientation relative to parent part, or global space if there is no parent.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Orientation","Summary":"Rotation around X, Y, and Z axis.  Rotations applied in YXZ order.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Rotation","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CenterOfMass","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"makeJoints","Summary":"Use MakeJoints() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"MakeJoints","Summary":"Creates the appropriate SurfaceJoints with all parts that are touching this Instance (including internal joints in the Instance, as in a Model).  This uses the SurfaceTypes defined on the surfaces of parts to create the appropriate welds. <a href=\"http://wiki.roblox.com/index.php/MakeJoints\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BreakJoints","Summary":"Destroys SurfaceJoints with all parts that are touching this Instance (including internal joints in the Instance, as in a Model).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetMass","Summary":"Returns a number that is the mass of this Instance.  Mass of a Part is immutable, and is changed only by the size of the Part.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Resize","Summary":"Resizes a Part in the direction of the face defined by 'NormalId', by the amount specified by 'deltaAmount'. If the operation will expand the part to intersect another Instance, the part will not resize at all.  Return true if the call is successful, false otherwise.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"getMass","Summary":"Use GetMass() instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"OutfitChanged","Summary":"","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"LocalSimulationTouched","Summary":"Deprecated. Use Touched instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"StoppedTouching","Summary":"Deprecated. Use TouchEnded instead","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchEnded","Summary":"Fired when the part stops touching another part","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Part","Summary":"A plastic building block - the fundamental component of ROBLOX","ExplorerOrder":11,"ExplorerImageIndex":1,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TrussPart","Summary":"An extendable building truss","ExplorerOrder":12,"ExplorerImageIndex":1,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WedgePart","Summary":"A Wedge Part","ExplorerOrder":12,"ExplorerImageIndex":1,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PrismPart","Summary":"A Prism Part","ExplorerOrder":12,"ExplorerImageIndex":1,"Browsable":"false","Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"PyramidPart","Summary":"A Pyramid Part","ExplorerOrder":12,"ExplorerImageIndex":1,"Browsable":"false","Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"ParallelRampPart","Summary":"A ParallelRamp Part","ExplorerOrder":12,"ExplorerImageIndex":1,"Browsable":"false","Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"RightAngleRampPart","Summary":"A RightAngleRamp Part","ExplorerOrder":12,"ExplorerImageIndex":1,"Browsable":"false","Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"CornerWedgePart","Summary":"A CornerWedge Part","ExplorerOrder":12,"ExplorerImageIndex":1,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PlayerGui","Summary":"A container instance that syncs data between a single player and the server.  ScreenGui objects that are placed in this container will be shown to the Player parent only","ExplorerOrder":13,"ExplorerImageIndex":46,"Browsable":true,"PreferredParent":"","Members":[{"Name":"SelectionImageObject","Summary":"Overrides the default selection adornment (used for gamepads). For best results, this should point to a GuiObject.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PlayerScripts","Summary":"A container instance that contains LocalScripts.  LocalScript objects that are placed in this container will be exectue only when a Player is the parent.","ExplorerOrder":13,"ExplorerImageIndex":78,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StarterPlayerScripts","Summary":"A container instance that contains LocalScripts.  LocalScript objects that are placed in this container will be copied to new Players on startup.","ExplorerOrder":13,"ExplorerImageIndex":78,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StarterCharacterScripts","Summary":"A container instance that contains LocalScripts.  LocalScript objects that are placed in this container will be copied to new characters on startup.","ExplorerOrder":13,"ExplorerImageIndex":78,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GuiMain","Summary":"Deprecated, please use ScreenGui","ExplorerOrder":14,"ExplorerImageIndex":47,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"LayerCollector","Summary":"The base class of ScreenGui, BillboardGui, and SurfaceGui.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ScreenGui","Summary":"The core GUI object on which tools are built.  Add Frames/Labels/Buttons to this object to have them rendered as a 2D overlay","ExplorerOrder":14,"ExplorerImageIndex":47,"Browsable":true,"PreferredParent":"StarterGui","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"FunctionalTest","Summary":"Deprecated. Use TestService instead","ExplorerOrder":1,"ExplorerImageIndex":0,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"BillboardGui","Summary":"A GUI that adorns an object in the 3D world.  Add Frames/Labels/Buttons to this object to have them rendered while attached to a 3D object","ExplorerOrder":14,"ExplorerImageIndex":64,"Browsable":true,"PreferredParent":"StarterGui","Members":[{"Name":"Adornee","Summary":"The Object the billboard gui uses as its base to render from.  Currently, the only way to set this property is thru a script, and must exist in the workspace.  This will only render if the object assigned derives from BasePart.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AbsolutePosition","Summary":"A read-only Vector2 value that is the GuiObject's current position (x,y) in pixel space, from the top left corner of the GuiObject.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AbsoluteSize","Summary":"A read-only Vector2 value that is the GuiObject's current size (width, height) in pixel space.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Active","Summary":"If true, this GuiObject can fire mouse events and will pass them to any GuiObjects layered underneath, while false will do neither.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AlwaysOnTop","Summary":"If true, billboard gui does not get occluded by 3D objects, but always renders on the screen.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Enabled","Summary":"If true, billboard gui will render, otherwise rendering will be skipped.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ExtentsOffset","Summary":"A Vector3 (x,y,z) defined in studs that will offset the gui from the extents of the 3d object it is rendering from.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PlayerToHideFrom","Summary":"Specifies a Player that the BillboardGui will not render to.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"StudsOffset","Summary":"A Vector3 (x,y,z) defined in studs that will offset the gui from the centroid of the 3d object it is rendering from","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SizeOffset","Summary":"A Vector2 (x,y) defined in studs that will offset the gui size from it's current size.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Size","Summary":"A UDim2 value describing the size of the BillboardGui. More information on UDim2 is available <a href=\"http://wiki.roblox.com/index.php/UDim2\" target=\"_blank\">here</a>. Relative values are defined as one-to-one with studs.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LightInfluence","Summary":"Specifies the amount of influence lighting has on the billboard gui. A value of 0 is unlit, 1 is fully lit. Fractional values blend from unlit to lit.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SurfaceGui","Summary":"Renders its contained GuiObjects flat against the face of a part.","ExplorerOrder":14,"ExplorerImageIndex":64,"Browsable":true,"PreferredParent":"StarterGui","Members":[{"Name":"Adornee","Summary":"The Object the surface gui uses as its base to render from.  Currently, the only way to set this property is thru a script, and must exist in the workspace.  This will only render if the object assigned derives from BasePart.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Active","Summary":"If true, this GuiObject can fire mouse events and will pass them to any GuiObjects layered underneath, while false will do neither.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Enabled","Summary":"If true, surface gui will render, otherwise rendering will be skipped.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"LightInfluence","Summary":"Specifies the amount of influence lighting has on the surface gui. A value of 0 is unlit, 1 is fully lit. Fractional values blend from unlit to lit.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GuiBase2d","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[{"Name":"AbsolutePosition","Summary":"A read-only Vector2 value that is the GuiObject's current position (x,y) in pixel space, from the top left corner of the GuiObject.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AbsoluteSize","Summary":"A read-only Vector2 value that is the GuiObject's current size (width, height) in pixel space.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"InputObject","Summary":"An object that describes a particular user input, such as mouse movement, touches, keyboard, and more.","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":true,"PreferredParent":"","Members":[{"Name":"UserInputType","Summary":"An enum that describes what kind of input this object is describing (mousebutton, touch, etc.).  See Enum.UserInputType for more info.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UserInputState","Summary":"An enum that describes what state of a particular input (touch began, touch moved, touch ended, etc.). See Enum.UserInputState for more info.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Position","Summary":"A Vector3 value that describes a positional value of this input. For mouse and touch input, this is the screen position of the mouse/touch, described in the x and y components. For mouse wheel input, the z component describes whether the wheel was moved forward or backward.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"KeyCode","Summary":"An enum that describes what kind of input is being pressed. For types of input like Keyboard, this describes what key was pressed. For input like mousebutton, this provides no additional information.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GuiObject","Summary":"","ExplorerOrder":0,"ExplorerImageIndex":0,"Browsable":"false","PreferredParent":"","Members":[{"Name":"TweenPosition","Summary":"Smoothly moves a GuiObject from its current position to 'endPosition'. The only required argument is 'endPosition'. <a href=\"http://wiki.roblox.com/index.php/TweenPosition\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TweenSize","Summary":"Smoothly translates a GuiObject's current size to 'endSize'. The only required argument is 'endSize'. <a href=\"http://wiki.roblox.com/index.php/TweenSize\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TweenSizeAndPosition","Summary":"Smoothly translates a GuiObject's current size to 'endSize', and also smoothly translates the GuiObject's current position to 'endPosition'. The only required arguments are 'endSize' and 'endPosition'. <a href=\"http://wiki.roblox.com/index.php/TweenSizeAndPosition\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Active","Summary":"If true, this GuiObject can fire mouse events and will pass them to any GuiObjects layered underneath, while false will do neither.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BackgroundColor3","Summary":"A Color3 value that specifies the background color for the GuiObject. This value is ignored if the Style property (not found on all GuiObjects) is set to something besides custom.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BackgroundTransparency","Summary":"A number value that specifies how transparent the background of the GuiObject is. This value is ignored if the Style property (not found on all GuiObjects) is set to something besides custom.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BorderColor3","Summary":"A Color3 value that specifies the color of the outline of the GuiObject. This value is ignored if the Style property (not found on all GuiObjects) is set to something besides custom.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BorderSizePixel","Summary":"A number value that specifies the thickness (in pixels) of the outline of the GuiObject. Currently this value can only be set to either 0 or 1, any other number has no effect. This value is ignored if the Style property (not found on all GuiObjects) is set to something besides custom.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ClipsDescendants","Summary":"If set to true, any descendants of this GuiObject will only render if contained within it's borders. If set to false, all descendants will render regardless of position.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Draggable","Summary":"If true, allows a GuiObject to be dragged by the user's mouse. The events 'DragBegin' and 'DragStopped' are fired when the appropriate action happens, and only will fire on Draggable=true GuiObjects.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Size","Summary":"A UDim2 value describing the size of the GuiObject on screen in both absolute and relative coordinates. More information on UDim2 is available <a href=\"http://wiki.roblox.com/index.php/UDim2\" target=\"_blank\">here</a>.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Position","Summary":"A UDim2 value describing the position of the top-left corner of the GuiObject on screen. More information on UDim2 is available <a href=\"http://wiki.roblox.com/index.php/UDim2\" target=\"_blank\">here</a>.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SizeConstraint","Summary":"The direction(s) that an object can be resized in. <a href=\"http://wiki.roblox.com/index.php/SizeConstraint\" target=\"_blank\">More info</a>.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ZIndex","Summary":"Describes the ordering in which overlapping GuiObjects will be drawn. A value of 1 is drawn first, while higher values are drawn in ascending order (each value draws over the last).","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BackgroundColor","Summary":"Deprecated. Use BackgroundColor3 instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"BorderColor","Summary":"Deprecated. Use BorderColor3 instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false},{"Name":"SelectionImageObject","Summary":"Overrides the default selection adornment (used for gamepads). For best results, this should point to a GuiObject.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DragBegin","Summary":"Fired when a GuiObject with Draggable set to true starts to be dragged. 'InitialPosition' is a UDim2 value of the position of the GuiObject before any drag operation began.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DragStopped","Summary":"Always fired after a DragBegin event, DragStopped is fired when the user releases the mouse button causing a drag operation on the GuiObject. Arguments 'x', and 'y' specify the top-left absolute position of the GuiObject when the event is fired.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseEnter","Summary":"Fired when the mouse enters a GuiObject, as long as the GuiObject is active (see active property for more detail). Arguments 'x', and 'y' specify the absolute pixel position of the mouse.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseLeave","Summary":"Fired when the mouse leaves a GuiObject, as long as the GuiObject is active (see active property for more detail). Arguments 'x', and 'y' specify the absolute pixel position of the mouse.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseMoved","Summary":"Fired when the mouse is inside a GuiObject and moves, as long as the GuiObject is active (see active property for more detail). Arguments 'x', and 'y' specify the absolute pixel position of the mouse.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchTap","Summary":"Fired when a user taps their finger on a TouchEnabled device. 'touchPositions' is a Lua array of Vector2, each indicating the position of all the fingers involved in the tap gesture. This event only fires locally.  This event will always fire regardless of game state.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchPinch","Summary":"Fired when a user pinches their fingers on a TouchEnabled device. 'touchPositions' is a Lua array of Vector2, each indicating the position of all the fingers involved in the pinch gesture. 'scale' is a float that indicates the difference from the beginning of the pinch gesture. 'velocity' is a float indicating how quickly the pinch gesture is happening. 'state' indicates the Enum.UserInputState of the gesture.  This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchSwipe","Summary":"Fired when a user swipes their fingers on a TouchEnabled device. 'swipeDirection' is an Enum.SwipeDirection, indicating the direction the user swiped. 'numberOfTouches' is an int that indicates how many touches were involved with the gesture.  This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchLongPress","Summary":"Fired when a user holds at least one finger for a short amount of time on the same screen position on a TouchEnabled device. 'touchPositions' is a Lua array of Vector2, each indicating the position of all the fingers involved in the gesture. 'state' indicates the Enum.UserInputState of the gesture.  This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchRotate","Summary":"Fired when a user rotates two fingers on a TouchEnabled device. 'touchPositions' is a Lua array of Vector2, each indicating the position of all the fingers involved in the gesture. 'rotation' is a float indicating how much the rotation has gone from the start of the gesture. 'velocity' is a float that indicates how quickly the gesture is being performed. 'state' indicates the Enum.UserInputState of the gesture.  This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TouchPan","Summary":"Fired when a user drags at least one finger on a TouchEnabled device. 'touchPositions' is a Lua array of Vector2, each indicating the position of all the fingers involved in the gesture. 'totalTranslation' is a Vector2, indicating how far the pan gesture has gone from its starting point. 'velocity' is a Vector2 that indicates how quickly the gesture is being performed in each dimension. 'state' indicates the Enum.UserInputState of the gesture.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"InputBegan","Summary":"Fired when a user begins interacting via a Human-Computer Interface device (Mouse button down, touch begin, keyboard button down, etc.). 'inputObject' is an InputObject, which contains useful data for querying user input.  This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"InputChanged","Summary":"Fired when a user changes interacting via a Human-Computer Interface device (Mouse move, touch move, mouse wheel, etc.). 'inputObject' is an InputObject, which contains useful data for querying user input.  This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"InputEnded","Summary":"Fired when a user stops interacting via a Human-Computer Interface device (Mouse button up, touch end, keyboard button up, etc.). 'inputObject' is an InputObject, which contains useful data for querying user input.  This event only fires locally.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Frame","Summary":"A container object used to layout other GUI objects","ExplorerOrder":15,"ExplorerImageIndex":48,"Browsable":true,"PreferredParent":"StarterGui","Members":[{"Name":"Style","Summary":"Determines how a frame will look. Uses Enum.FrameStyle. <a href=\"http://wiki.roblox.com/index.php?title=API:Enum/FrameStyle\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ScrollingFrame","Summary":"A container object used to layout other GUI objects, and allows for scrolling.","ExplorerOrder":15,"ExplorerImageIndex":48,"Browsable":true,"PreferredParent":"StarterGui","Members":[{"Name":"ScrollingEnabled","Summary":"Determines whether or not scrolling is allowed on this frame. If turned off, no scroll bars will be rendered.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CanvasSize","Summary":"Determines the size of the area that is scrollable. The UDim2 is calculated using the parent gui's size, similar to the regular Size property on gui objects.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CanvasPosition","Summary":"The absolute position the scroll frame is in respect to the canvas size. The minimum this can be set to is (0,0), while the max is the absolute canvas size - AbsoluteWindowSize.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AbsoluteWindowSize","Summary":"The size in pixels of the frame, without the scrollbars.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ScrollBarThickness","Summary":"How thick the scroll bar appears. This applies to both the horizontal and vertical scroll bars. Can be set to 0 for no bars render.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TopImage","Summary":"The \"Up\" image on the vertical scrollbar. Size of this is always ScrollBarThickness by ScrollBarThickness. This is also used as the \"left\" image on the horizontal scroll bar.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MidImage","Summary":"The \"Middle\" image on the vertical scrollbar. Size of this can vary in the y direction, but is always set at ScrollBarThickness in x direction. This is also used as the \"mid\" image on the horizontal scroll bar.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BottomImage","Summary":"The \"Down\" image on the vertical scrollbar. Size of this is always ScrollBarThickness by ScrollBarThickness. This is also used as the \"right\" image on the horizontal scroll bar.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ImageLabel","Summary":"A GUI object containing an Image","ExplorerOrder":18,"ExplorerImageIndex":49,"Browsable":true,"PreferredParent":"StarterGui","Members":[{"Name":"Image","Summary":"Specifies the id of the texture to display. <a href=\"http://wiki.roblox.com/index.php?title=API:Class/ImageLabel/Image\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ScaleType","Summary":"Specifies how an image should be displayed. See ScaleType for more info.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SliceCenter","Summary":"If ScaleType is set to Slice, this Rect is used to specify the central part of the image. Everything outside of this is considered to be the border.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TileSize","Summary":"If ScaleType is set to Tile, this sets the size of the tile.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TextLabel","Summary":"A GUI object containing text","ExplorerOrder":19,"ExplorerImageIndex":50,"Browsable":true,"PreferredParent":"StarterGui","Members":[{"Name":"TextColor","Summary":"Deprecated. Use TextColor3 instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TextButton","Summary":"A GUI button containing text","ExplorerOrder":17,"ExplorerImageIndex":51,"Browsable":true,"PreferredParent":"StarterGui","Members":[{"Name":"TextColor","Summary":"Deprecated. Use TextColor3 instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TextBox","Summary":"A text entry box","ExplorerOrder":17,"ExplorerImageIndex":51,"Browsable":true,"PreferredParent":"StarterGui","Members":[{"Name":"TextColor","Summary":"Deprecated. Use TextColor3 instead","Browsable":true,"Deprecated":"true","Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GuiButton","Summary":"A GUI button containing an Image","ExplorerOrder":16,"ExplorerImageIndex":52,"Browsable":"false","PreferredParent":"","Members":[{"Name":"AutoButtonColor","Summary":"Determines whether a button changes color automatically when reacting to mouse events.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Modal","Summary":"Allows the mouse to be free in first person mode. If a button with this property set to true is visible, the mouse is 'free' in first person mode.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Style","Summary":"Determines how a button will look, including mouse event states. Uses Enum.ButtonStyle. <a href=\"http://wiki.roblox.com/index.php?title=API:Class/GuiButton/Style\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseButton1Click","Summary":"Fired when the mouse is over the button, and the mouse down and up events fire without the mouse leaving the button.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseButton1Down","Summary":"Fired when the mouse button is pushed down on a button.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseButton1Up","Summary":"Fired when the mouse button is released on a button.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseButton2Click","Summary":"This function currently does not work :(","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseButton2Down","Summary":"This function currently does not work :(","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MouseButton2Up","Summary":"This function currently does not work :(","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ImageButton","Summary":"A GUI button containing an Image","ExplorerOrder":16,"ExplorerImageIndex":52,"Browsable":true,"PreferredParent":"StarterGui","Members":[{"Name":"Image","Summary":"Specifies the asset id of the texture to display. <a href=\"http://wiki.roblox.com/index.php?title=API:Class/ImageButton/Image\" target=\"_blank\">More info</a>","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ScaleType","Summary":"Specifies how an image should be displayed. See ScaleType for more info.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SliceCenter","Summary":"If ScaleType is set to Slice, this Rect is used to specify the central part of the image. Everything outside of this is considered to be the border.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TileSize","Summary":"If ScaleType is set to Tile, this sets the size of the tile.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Handles","Summary":"A 3D GUI object to represent draggable handles","ExplorerOrder":19,"ExplorerImageIndex":53,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ArcHandles","Summary":"A 3D GUI object to represent draggable arc handles","ExplorerOrder":20,"ExplorerImageIndex":56,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SelectionBox","Summary":"A 3D GUI object to represent the visible selection around an object","ExplorerOrder":21,"ExplorerImageIndex":54,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SelectionSphere","Summary":"A 3D GUI object to represent the visible selection around an object","ExplorerOrder":21,"ExplorerImageIndex":54,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SurfaceSelection","Summary":"A 3D GUI object to represent the visible selection around a face of an object","ExplorerOrder":21,"ExplorerImageIndex":55,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Configuration","Summary":"An object that can be placed under parts to hold Value objects that represent that part's configuration","ExplorerOrder":22,"ExplorerImageIndex":58,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Folder","Summary":"An object that can be created to hold and organize objects","ExplorerOrder":1,"ExplorerImageIndex":77,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SelectionPartLasso","Summary":"A visual line drawn representation between two part objects","ExplorerOrder":22,"ExplorerImageIndex":57,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"SelectionPointLasso","Summary":"A visual line drawn representation between two positions","ExplorerOrder":22,"ExplorerImageIndex":57,"Browsable":true,"Deprecated":"true","PreferredParent":"","Members":[],"Preliminary":false,"IsBackend":false},{"Name":"PartPairLasso","Summary":"A visual line drawn representation between two parts.","ExplorerOrder":22,"ExplorerImageIndex":57,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Pose","Summary":"The pose of a joint relative to it's parent part in a keyframe","ExplorerOrder":22,"ExplorerImageIndex":60,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Keyframe","Summary":"One keyframe of an animation","ExplorerOrder":22,"ExplorerImageIndex":60,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Animation","Summary":"Represents a linked animation object, containing keyframes and poses.","ExplorerOrder":22,"ExplorerImageIndex":60,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AnimationTrack","Summary":"Returned by a call to LoadAnimation. Controls the playback of an animation on a Humanoid.","ExplorerOrder":22,"ExplorerImageIndex":60,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"AnimationController","Summary":"Allows animations to be played on joints of the parent object.","ExplorerOrder":22,"ExplorerImageIndex":60,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"CharacterMesh","Summary":"Modifies the appearance of a body part.","ExplorerOrder":22,"ExplorerImageIndex":60,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Dialog","Summary":"An object used to make dialog trees to converse with players","ExplorerOrder":22,"ExplorerImageIndex":62,"Browsable":true,"PreferredParent":"","Members":[{"Name":"ConversationDistance","Summary":"The maximum distance that the player's character can be from the dialog's parent in order to use the dialog.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GoodbyeChoiceActive","Summary":"Indicates whether or not an extra choice is available for the player to exit the dialog tree at this node.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GoodbyeDialog","Summary":"The prompt text for an extra choice that allows the player to exit the dialog tree at this node.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"InUse","Summary":"Indicates whether or not the dialog is currently being used by one or more players.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"InitialPrompt","Summary":"The chat message that is displayed to the player when they first activate the dialog.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Purpose","Summary":"Describes the purpose of the dialog, which is used to display a relevant icon on the dialog's activation button.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Tone","Summary":"Describes the tone of the dialog, which is used to display a relevant color in the dialog interface.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"BehaviorType","Summary":"Indicates how the dialog may be used by players. Use Enum.DialogBehaviorType.SinglePlayer if only one player should interact with the dialog at a time, otherwise use Enum.DialogBehaviorType.MultiplePlayers.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetCurrentPlayers","Summary":"Returns an array of the players currently conversing with this dialog.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"DialogChoice","Summary":"An object used to make dialog trees to converse with players","ExplorerOrder":22,"ExplorerImageIndex":63,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"UnionOperation","Summary":"A UnionOperation is a union of multiple parts","ExplorerOrder":2,"ExplorerImageIndex":73,"Browsable":"true","PreferredParent":"","Members":[{"Name":"UsePartColor","Summary":"Override the colors of the mesh with the part color.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"NegateOperation","Summary":"A NegateOperation can be used to create holes in other parts","ExplorerOrder":2,"ExplorerImageIndex":72,"Browsable":"true","PreferredParent":"","Members":[{"Name":"UsePartColor","Summary":"Override the colors of the mesh with the part color.","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"MeshPart","Summary":"A MeshPart is a physically simulatable mesh","ExplorerOrder":2,"ExplorerImageIndex":73,"Browsable":"true","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Terrain","Summary":"Object representing a high performance bounded grid of static 4x4 parts","ExplorerOrder":0,"ExplorerImageIndex":65,"Browsable":"true","PreferredParent":"","Members":[{"Name":"WaterTransparency","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WaterWaveSize","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WaterWaveSpeed","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"WaterReflectance","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetCell","Summary":"Returns CellMaterial, CellBlock, CellOrientation","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"GetWaterCell","Summary":"Returns hasAnyWater, WaterForce, WaterDirection","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SetWaterCell","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Light","Summary":"Parent of all light objects","ExplorerOrder":3,"ExplorerImageIndex":13,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Brightness","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"PointLight","Summary":"Makes the parent part emit light in a spherical shape","ExplorerOrder":3,"ExplorerImageIndex":13,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Range","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SpotLight","Summary":"Makes the parent part emit light in a conical shape","ExplorerOrder":3,"ExplorerImageIndex":13,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Range","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Angle","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"SurfaceLight","Summary":"Makes the parent part emit light in a frustum shape from rectangle defined by part","ExplorerOrder":3,"ExplorerImageIndex":13,"Browsable":true,"PreferredParent":"","Members":[{"Name":"Range","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Brightness","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"Angle","Summary":"","Browsable":true,"Deprecated":false,"Preliminary":false,"IsBackend":false}],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RemoteFunction","Summary":"Allow functions defined in one script to be called by another script across client/server boundary","ExplorerOrder":4,"ExplorerImageIndex":74,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"RemoteEvent","Summary":"Allow events defined in one script to be subscribed to by another script across client/server boundary","ExplorerOrder":5,"ExplorerImageIndex":75,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"TerrainRegion","Summary":"Object representing a snapshot of the region of terrain","ExplorerOrder":2,"ExplorerImageIndex":65,"Browsable":"true","PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false},{"Name":"ModuleScript","Summary":"A script fragment. Only runs when another script uses require() on it.","ExplorerOrder":5,"ExplorerImageIndex":76,"Browsable":true,"PreferredParent":"","Members":[],"Deprecated":false,"Preliminary":false,"IsBackend":false}]]==]
		-- TODO: Show critical error
	end
	rawRMD = Services.HttpService:JSONDecode(rawRMD)

	local RMD = {}
	for _,v in pairs(rawRMD) do
		RMD[v.Name] = v
	end

	return RMD
end

function f.checkInPane(window)
	local inPane = false
	for i,v in pairs(LPaneItems) do if v.Window == window then inPane = true end end
	for i,v in pairs(RPaneItems) do if v.Window == window then inPane = true end end
	return inPane
end

function f.transGui(gui,num)
	if gui:IsA("GuiObject") then gui.BackgroundTransparency = num end
	if gui:IsA("TextBox") or gui:IsA("TextLabel") then gui.TextTransparency = num
	elseif gui:IsA("ImageButton") or gui:IsA("ImageLabel") then gui.ImageTransparency = num end
	for i,v in pairs(gui:GetChildren()) do
		f.transGui(v,num)
	end
end

function f.hookWindowListener(window)
	local selected = false
	local user = Services.UserInputService

	window.TopBar.InputBegan:connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			selected = true
			local selectedInit = false
			local initPos = {mouse.X,mouse.Y}
			local dragOffX,dragOffY = mouse.X-window.TopBar.AbsolutePosition.X,mouse.Y-window.TopBar.AbsolutePosition.Y
			local inPane = false
			local releaseEvent
			local mouseEvent

			for i,v in pairs(LPaneItems) do if v.Window == window then inPane = true end end
			for i,v in pairs(RPaneItems) do if v.Window == window then inPane = true end end

			releaseEvent = user.InputEnded:Connect(function(input)
				if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
				releaseEvent:Disconnect()
				if mouseEvent then mouseEvent:Disconnect() end
				selected = false
				if setPane ~= "None" then window.Position = window.Position - UDim2.new(0,gui.AbsoluteSize.X-300,0,0) f.addToPane(window,setPane) end
				mouseWindow = nil
			end)

			mouseEvent = user.InputChanged:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement and (selectedInit or f.distance(initPos[1],initPos[2],mouse.X,mouse.Y) >= (inPane and 20 or 5)) then
					if not selectedInit then selectedInit = true window.Position = UDim2.new(0,mouse.X-dragOffX,0,mouse.Y-dragOffY) window.Parent = nil end
					for i,v in pairs(LPaneItems) do if v.Window == window then f.removeFromPane(window,"Left") break end end
					for i,v in pairs(RPaneItems) do if v.Window == window then f.removeFromPane(window,"Right") break end end

					mouseWindow = window

					window.Parent = gui
					window.Position = UDim2.new(0,mouse.X-dragOffX,0,mouse.Y-dragOffY)
					window.Size = UDim2.new(0,window.Size.X.Offset,0,300)
				end
			end)
		end
	end)

	--window.TopBar.InputEnded:connect(function(input)
	--	if input.UserInputType == Enum.UserInputType.MouseButton1 then
	--		print("OH")
	--	end
	--end)

	window.InputBegan:connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			local inPane = f.checkInPane(window)

			if inPane then return end

			for i,v in pairs(activeWindows) do
				if v ~= window then
					if f.checkMouseInGui(v) and not f.checkInPane(v) then return end
				end
			end			

			window.Parent = nil
			window.Parent = gui
		end
	end)

	window.TopBar.Close.MouseEnter:connect(function()
		window.TopBar.Close.BackgroundTransparency = 0.5
	end)

	window.TopBar.Close.MouseLeave:connect(function()
		window.TopBar.Close.BackgroundTransparency = 1
	end)

	window.TopBar.Close.MouseButton1Click:connect(function()
		if f.checkInPane(window) then f.removeFromPane(window) window.Visible = false return end
		window.Content:TweenSize(UDim2.new(1,-4,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quad,0.4,true)
		wait(0.4)
		window.Visible = false
	end)
end

-- Explorer Functions

function f.tabIsA(tab,class)
	for i,v in pairs(tab) do
		if v:IsA(class) then
			return true
		end
	end
	return false
end

function f.hasChildren(tab)
	for i,v in pairs(tab) do
		if #v:GetChildren() > 0 then
			return true
		end
	end
	return false
end

function f.tabHasChar(tab)
	local players = Services.Players
	for i,v in pairs(tab) do
		if players:GetPlayerFromCharacter(v) then
			return true
		end
	end
	return false
end

function f.expandAll(obj)
	local node = nodes[obj]
	while node do
		explorerTree.Expanded[node] = true
		node = node.Parent
	end
end

function f.rightClick()
	rightClickContext:Clear()

	local selection = explorerTree.Selection	

	-- Cut
	rightClickContext:Add({Name = "Cut", Icon = f.icon(nil,iconIndex.CUT_ICON), DisabledIcon = f.icon(nil,iconIndex.CUT_D_ICON), Shortcut = "Ctrl+X", Disabled = #selection.List == 0, OnClick = function()
		print("CUT")
		pcall(function()
			clipboard = {}
			for i,v in pairs(selection.List) do
				table.insert(clipboard,v:Clone())
				v:Destroy()
			end
		end)
		rightClickContext:Hide()
	end})

	rightClickContext:Add({Name = "Copy", Icon = f.icon(nil,iconIndex.COPY_ICON), DisabledIcon = f.icon(nil,iconIndex.COPY_D_ICON), Shortcut = "Ctrl+C", Disabled = #selection.List == 0, OnClick = function()
		print("COPY")
		pcall(function()
			clipboard = {}
			for i,v in pairs(selection.List) do
				table.insert(clipboard,v:Clone())
			end
		end)
		rightClickContext:Hide()
	end})

	rightClickContext:Add({Name = "Paste Into", Icon = f.icon(nil,iconIndex.PASTE_ICON), DisabledIcon = f.icon(nil,iconIndex.PASTE_D_ICON), Shortcut = "Ctrl+B", Disabled = #clipboard == 0, OnClick = function()
		print("PASTE")
		pcall(function()
			for i,v in pairs(selection.List) do
				for _,copy in pairs(clipboard) do
					copy:Clone().Parent = v
				end
			end
		end)
		rightClickContext:Hide()
	end})

	rightClickContext:Add({Name = "Duplicate", Icon = f.icon(nil,iconIndex.COPY_ICON), DisabledIcon = f.icon(nil,iconIndex.COPY_D_ICON), Shortcut = "Ctrl+D", Disabled = #selection.List == 0, OnClick = function()
		print("DUPLICATE")
		pcall(function()
			for i,v in pairs(selection.List) do
				v:Clone().Parent = v.Parent
			end
		end)
		rightClickContext:Hide()
	end})

	rightClickContext:Add({Name = "Delete", Icon = f.icon(nil,iconIndex.DELETE_ICON), DisabledIcon = f.icon(nil,iconIndex.DELETE_D_ICON), Shortcut = "Del", Disabled = #selection.List == 0, OnClick = function()
		print("DELETE")
		pcall(function()
			for i,v in pairs(selection.List) do
				v:Destroy()
			end
		end)
		rightClickContext:Hide()
	end})

	rightClickContext:Add({Name = "Rename", Icon = "", DisabledIcon = "", Shortcut = "Ctrl+R", Disabled = #selection.List == 0, OnClick = function()
		print("RENAME")
	end})

	rightClickContext:AddDivider()

	rightClickContext:Add({Name = "Group", Icon = f.icon(nil,iconIndex.GROUP_ICON), DisabledIcon = f.icon(nil,iconIndex.GROUP_D_ICON), Shortcut = "Ctrl+G", Disabled = #selection.List == 0, OnClick = function()
		print("GROUP")
		local base = selection.List[1]
		local model = Instance.new("Model",base.Parent)
		for i,v in pairs(selection.List) do
			v.Parent = model
		end
		rightClickContext:Hide()
	end})

	rightClickContext:Add({Name = "Ungroup", Icon = f.icon(nil,iconIndex.UNGROUP_ICON), DisabledIcon = f.icon(nil,iconIndex.UNGROUP_D_ICON), Shortcut = "Ctrl+U", Disabled = not f.tabIsA(selection.List,"Model"), OnClick = function()
		print("UNGROUP")
		for i,v in pairs(selection.List) do
			if v:IsA("Model") then
				for _,child in pairs(v:GetChildren()) do
					child.Parent = v.Parent
				end
				v:Destroy()
			end
		end
		rightClickContext:Hide()
	end})

	rightClickContext:Add({Name = "Select Children", Icon = f.icon(nil,iconIndex.SELECTCHILDREN_ICON), DisabledIcon = f.icon(nil,iconIndex.SELECTCHILDREN_D_ICON), Shortcut = "", Disabled = not f.hasChildren(selection.List), OnClick = function()
		print("SELECT CHILDREN")
		local oldSel = selection.List
		selection.List = {}
		selection.Selected = {}
		for i,v in pairs(oldSel) do
			for _,child in pairs(v:GetChildren()) do
				explorerTree.Selection:Add(child)
				f.expandAll(child.Parent)
			end
		end
		explorerTree:TreeUpdate()
		explorerTree:Refresh()
		rightClickContext:Hide()
	end})

	rightClickContext:Add({Name = "Jump To Parent", Icon = "", DisabledIcon = "", Shortcut = "", Disabled = #selection.List == 0, OnClick = function()
		print("JUMP TO PARENT")
		local oldSel = selection.List
		selection.List = {}
		selection.Selected = {}
		for i,v in pairs(oldSel) do
			if v.Parent ~= nil then
				selection:Add(v.Parent)
			end
		end
		explorerTree:Refresh()
		rightClickContext:Hide()
	end})

	-- Parts
	if f.tabIsA(selection.List, "BasePart") or f.tabIsA(selection.List, "Model") then
		rightClickContext:AddDivider()

		rightClickContext:Add({Name = "Teleport To", Icon = "", DisabledIcon = "", Shortcut = "", Disabled = #selection.List == 0, OnClick = function()
			print("TELEPORT TO")
			for i,v in pairs(selection.List) do
				if v:IsA("BasePart") then
					Services.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
					break;
				end
			end
			rightClickContext:Hide()
		end})

		rightClickContext:Add({Name = "Teleport Here", Icon = "", DisabledIcon = "", Shortcut = "", Disabled = #selection.List == 0, OnClick = function()
			print("TELEPORT HERE")
			rightClickContext:Hide()
		end})
	end

	-- Player
	local hasPlayer = false	

	if f.tabIsA(selection.List, "Player") then
		hasPlayer = true
		rightClickContext:AddDivider()

		rightClickContext:Add({Name = "Jump To Character", Icon = "", DisabledIcon = "", Shortcut = "", Disabled = #selection.List == 0, OnClick = function()
			print("JUMP TO CHARACTER")
			rightClickContext:Hide()
		end})
	end

	if f.tabHasChar(selection.List) then
		if not hasPlayer then rightClickContext:AddDivider() end

		rightClickContext:Add({Name = "Jump To Player", Icon = "", DisabledIcon = "", Shortcut = "", Disabled = #selection.List == 0, OnClick = function()
			print("JUMP TO PLAYER")
			rightClickContext:Hide()
		end})
	end

	rightClickContext:Refresh()
	rightClickContext:Show(gui,mouse.X,mouse.Y)
end

function f.newExplorer()
	local newgui = getResource("ExplorerPanel")
	local explorerScroll = ScrollBar.new()
	local explorerScrollH = ScrollBar.new(true)
	local newTree = TreeView.new()
	newTree.Scroll = explorerScroll
	newTree.DisplayFrame = newgui.Content.List
	newTree.TreeUpdate = f.updateTree
	newTree.SearchText = ""
	newTree.SearchExpanded = {}

	local nameEvents = {}

	newTree.PreUpdate = function(self)
		for i,v in pairs(nameEvents) do v:Disconnect() nameEvents[i] = nil end
	end

	newTree.NodeCreate = function(self,entry,i)
		entry.Indent.IconFrame.Icon.Image = iconMap

		entry.MouseEnter:Connect(function()
			local node = self.Tree[i + self.Index]
			if node then
				if self.Selection.Selected[node.Obj] then return end
				if rightClickContext.Frame.Parent ~= nil and f.checkMouseInGui(rightClickContext.Frame) then return end
				entry.BackgroundTransparency = 0.7
			end
		end)
		entry.MouseLeave:Connect(function()
			local node = self.Tree[i + self.Index]
			if node then
				if self.Selection.Selected[node.Obj] then return end
				entry.BackgroundTransparency = 1
			end
		end)						
		entry.MouseButton1Down:Connect(function()
			local node = self.Tree[i + self.Index]
			if Services.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
				self.Selection:Add(node.Obj)
			else
				self.Selection:Set({node.Obj})
			end
			self:Refresh()
			propertiesTree:TreeUpdate()
			propertiesTree:Refresh()
		end)
		entry.MouseButton2Down:Connect(function()
			local node = self.Tree[i + self.Index]
			rightEntry = entry
			rightClickContext.Frame.Parent = nil
			if not self.Selection.Selected[node.Obj] then
				self.Selection:Set({node.Obj})
			end
			self:Refresh()
		end)
		entry.MouseButton2Up:Connect(function()
			if rightEntry and f.checkMouseInGui(rightEntry) then
				f.rightClick()
			end
		end)

		entry.Indent.Expand.MouseEnter:Connect(function()
			local node = self.Tree[i + self.Index]
			if node then
				if (not self.SearchResults and self.Expanded[node]) or (self.SearchResults and self.SearchExpanded[node.Obj]) then
					f.icon(entry.Indent.Expand,iconIndex.NodeExpandedOver)
				else
					f.icon(entry.Indent.Expand,iconIndex.NodeCollapsedOver)
				end
			end
		end)
		entry.Indent.Expand.MouseLeave:Connect(function()
			local node = self.Tree[i + self.Index]
			if node then
				if (not self.SearchResults and self.Expanded[node]) or (self.SearchResults and self.SearchExpanded[node.Obj]) then
					f.icon(entry.Indent.Expand,iconIndex.NodeExpanded)
				else
					f.icon(entry.Indent.Expand,iconIndex.NodeCollapsed)
				end
			end
		end)
		entry.Indent.Expand.MouseButton1Down:Connect(function()
			local node = self.Tree[i + self.Index]
			if node and not self.SearchResults then
				self:Expand(node)
			else
				if self.SearchExpanded[node.Obj] then
					self.SearchExpanded[node.Obj] = nil
				else
					self.SearchExpanded[node.Obj] = 2
				end
				if self.TreeUpdate then self:TreeUpdate() end
				self:Refresh()
			end
		end)
	end

	newTree.NodeDraw = function(self,entry,node)
		f.icon(entry.Indent.IconFrame,iconIndex[node.Obj.ClassName] or 0)
		entry.Indent.EntryName.Text = node.Obj.Name									
		if #node > 0 then
			entry.Indent.Expand.Visible = true
			if (not self.SearchResults and self.Expanded[node]) or (self.SearchResults and self.SearchExpanded[node.Obj] == 2) then
				f.icon(entry.Indent.Expand,iconIndex.NodeExpanded)
			else
				f.icon(entry.Indent.Expand,iconIndex.NodeCollapsed)
			end
			if self.SearchExpanded[node.Obj] == 1 then
				entry.Indent.Expand.Visible = false
			end
		else
			entry.Indent.Expand.Visible = false
		end

		if node.Obj.Parent ~= node.Parent.Obj then
			spawn(function() f.moveObject(node.Obj,node.Obj.Parent) end)
		end

		if self.Selection.Selected[node.Obj] then
			entry.Indent.EntryName.TextColor3 = Color3.new(1,1,1)
			entry.BackgroundTransparency = 0
		else
			entry.Indent.EntryName.TextColor3 = Color3.new(220/255, 220/255, 220/255)
			entry.BackgroundTransparency = 1
		end

		nameEvents[node.Obj] = node.Obj:GetPropertyChangedSignal("Name"):Connect(function()
			entry.Indent.EntryName.Text = node.Obj.Name
		end)

		entry.Indent.Position = UDim2.new(0,18*node.Depth,0,0)
		entry.Size = UDim2.new(0,nodeWidth+10,0,18)
	end

	explorerScroll.Gui.Parent = newgui.Content
	explorerScroll:Texture({
		FrameColor = Color3.new(80/255,80/255,80/255),
		ThumbColor = Color3.new(120/255,120/255,120/255),
		ThumbSelectColor = Color3.new(140/255,140/255,140/255),
		ButtonColor = Color3.new(163/255,162/255,165/255),
		ArrowColor = Color3.new(220/255,220/255,220/255)
	})
	explorerScroll:SetScrollFrame(newgui.Content,3)

	explorerScrollH.Gui.Visible = false
	explorerScrollH.Gui.Parent = newgui.Content
	explorerScrollH:Texture({
		FrameColor = Color3.new(80/255,80/255,80/255),
		ThumbColor = Color3.new(120/255,120/255,120/255),
		ThumbSelectColor = Color3.new(140/255,140/255,140/255),
		ButtonColor = Color3.new(163/255,162/255,165/255),
		ArrowColor = Color3.new(220/255,220/255,220/255)
	})
	explorerScrollH.Gui.Position = UDim2.new(0,0,1,-16)
	explorerScrollH.Gui.Size = UDim2.new(1,-16,0,16)

	newTree.OnUpdate = function(self)
		local guiX = explorerPanel.Content.AbsoluteSize.X-16
		explorerScrollH.VisibleSpace = guiX
		explorerScrollH.TotalSpace = nodeWidth+10
		if nodeWidth > guiX then
			explorerScrollH.Gui.Visible = true
			explorerScroll.Gui.Size = UDim2.new(0,16,1,-16)
			self.DisplayFrame.Size = UDim2.new(1,-16,1,-16)
		else
			explorerScrollH.Gui.Visible = false
			explorerScroll.Gui.Size = UDim2.new(0,16,1,0)
			self.DisplayFrame.Size = UDim2.new(1,-16,1,0)
		end
		explorerScroll.TotalSpace = #self.Tree + 1
		explorerScroll.VisibleSpace = math.ceil(self.DisplayFrame.AbsoluteSize.Y / 19)
		explorerScrollH:Update()		
		explorerScroll:Update()
	end
	explorerScroll.OnUpdate = function(self) if newTree.Index == self.Index then return end newTree.Index = self.Index newTree:Refresh() end
	explorerScrollH.OnUpdate = function(self)
		for i,v in pairs(explorerTree.Entries) do
			v.Position = UDim2.new(0,1-self.Index,0,v.Position.Y.Offset)
		end
	end
	--explorerData = {Window = newgui, NodeData = {}, Scroll = explorerScroll, Entries = {}}

	explorerTree = newTree

	table.insert(activeWindows,newgui)
	f.hookWindowListener(newgui)
	newgui.Changed:connect(function(prop) if prop == "AbsoluteSize" or prop == "AbsolutePosition" then newTree:Refresh() end end)

	local searchBox = newgui.TopBar.SearchFrame.Search
	local searchAnim = searchBox.Parent.Entering
	searchBox:GetPropertyChangedSignal("Text"):Connect(function()
		local searchTime = tick()
		lastSearch = searchTime
		wait()
		if lastSearch ~= searchTime then return end
		newTree.SearchText = searchBox.Text
		f.updateSearch(newTree)
		explorerTree:TreeUpdate()
		explorerTree:Refresh()
	end)

	searchBox.Focused:Connect(function()
		searchBox.Empty.Visible = false
		searchAnim:TweenSizeAndPosition(UDim2.new(1,0,0,2),UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
	end)

	searchBox.FocusLost:Connect(function()
		if searchBox.Text == "" then searchBox.Empty.Visible = true else searchBox.Empty.Visible = false end
		searchAnim:TweenSizeAndPosition(UDim2.new(0,0,0,2),UDim2.new(0.5,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
	end)

	return newgui
end

function f.refreshExplorer()
	--if updateDebounce then return end
	--updateDebounce = true
	--Services.RunService.RenderStepped:wait()
	--updateDebounce = false
	explorerTree:Refresh()
end

function f.makeWindow(name)
	local newWindow = getResource(name)

	table.insert(activeWindows,newWindow)
	f.hookWindowListener(newWindow)

	return newWindow
end

function f.getRMDOrder(class)
	local currentClass = API.Classes[class]
	while currentClass do
		if RMD[currentClass.Name] and RMD[currentClass.Name].ExplorerOrder then return RMD[currentClass.Name].ExplorerOrder end
		currentClass = API.Classes[currentClass.Superclass]
	end
	return 999
end

function f.reDepth(node,depth)
	for i,v in ipairs(node) do
		v.Depth = depth + 1
		f.reDepth(node[i], depth + 1)
	end
end

function f.moveObject(obj,par)
	ypcall(function()
		if obj.Parent == nil then return end
		local node = nodes[obj]
		local newNode = nodes[par]
		if node and newNode then
			local parNode = node.Parent
			for i,v in ipairs(parNode) do
				if v == node then
					table.remove(parNode,i)
					break
				end
			end

			node.Depth = f.depth(par) + 1
			f.reDepth(node,node.Depth)

			node.Parent = newNode
			newNode.Sorted = nil
			table.insert(newNode,node)

			if not updateDebounce then
				updateDebounce = true
				wait()
				updateDebounce = false
				explorerTree:TreeUpdate()
				f.refreshExplorer()
			end
		end
	end)
end

function f.addObject(obj,noupdate,recurse)
	ypcall(function()
		local access = obj.Changed
		if not nodes[obj.Parent] then return end
		local newNode = {
			Obj = obj,
			Parent = nodes[obj.Parent],
			--Ind = #nodes[obj.Parent] + 1,
			ExplorerOrder = f.getRMDOrder(obj.ClassName),
			Depth = f.depth(obj),
			UID = tick()--RMD[v.ClassName] and (RMD[v.ClassName].ExplorerOrder or 999) or 999
		}
		if newNode.ExplorerOrder <= 0 and not obj:IsA("Workspace") and obj.Parent == game then newNode.ExplorerOrder = 999 end
		nodes[obj] = newNode
		newNode.Parent.Sorted = nil
		table.insert(newNode.Parent,newNode)

		newNode.AncestryEvent = obj.AncestryChanged:Connect(function(child,par)
			spawn(function()
				if child == obj then
					f.moveObject(obj,par)
				end
			end)
		end)

		newNode.AddedEvent = obj.ChildAdded:Connect(function(child)
			f.addObject(child,false,true)
		end)

		newNode.RemovedEvent = obj.ChildRemoved:Connect(function(child)
			f.removeObject(child,false,true)
		end)

		if recurse then
			for i,v in pairs(obj:GetDescendants()) do
				f.addObject(v,true)
			end
		end

		if not noupdate then
			if explorerTree.SearchChecks and explorerTree.SearchResults then
				for i,v in pairs(explorerTree.SearchChecks) do
					local success,found = pcall(v,obj)
					if found then
						explorerTree.SearchResults[obj] = true
						explorerTree.SearchExpanded[obj] = math.max(explorerTree.SearchExpanded[v] or 0, 1)
						local par = obj.Parent
						while par and not explorerTree.SearchResults[par] or explorerTree.SearchExpanded[par] == 1 do
							explorerTree.SearchResults[par] = true
							explorerTree.SearchExpanded[par] = 2
							par = par.Parent
						end
					end
				end
			end

			if not updateDebounce then
				updateDebounce = true
				wait()
				updateDebounce = false
				explorerTree:TreeUpdate()
				f.refreshExplorer()
			end
		end
		-- TODO: Maybe ypcall?
	end)
end

function f.nodeDescendants(node,descendants)
	for i,v in ipairs(node) do
		table.insert(descendants,v.Obj)
		f.nodeDescendants(v,descendants)
	end
end

function f.removeObject(obj,noupdate,recurse)
	ypcall(function()
		local node = nodes[obj]
		if node then
			local par = node.Parent
			for i,v in ipairs(par) do
				if v == node then
					table.remove(par,i)
					break
				end
			end

			node.AncestryEvent:Disconnect()
			node.AncestryEvent = nil

			node.AddedEvent:Disconnect()
			node.AddedEvent = nil

			node.RemovedEvent:Disconnect()
			node.RemovedEvent = nil

			if recurse then
				local descendants = {}
				f.nodeDescendants(node,descendants)
				for i,v in ipairs(descendants) do
					f.removeObject(v,true)
				end
			end

			nodes[obj] = nil

			if not updateDebounce and not noupdate then
				updateDebounce = true
				wait()
				updateDebounce = false
				explorerTree:TreeUpdate()
				f.refreshExplorer()
			end
		end
	end)
end

function f.indexNodes(obj)
	if not nodes[game] then nodes[game] = {Obj = game,Parent = nil} end

	local addObject = f.addObject
	local removeObject = f.removeObject

	--game.DescendantAdded:Connect(function(obj) spawn(function() addObject(obj) end) end)
	--game.DescendantRemoving:Connect(function(obj) spawn(function() removeObject(obj) end) end)

	for i,v in pairs(game:GetChildren()) do
		addObject(v,true,true)
	end
end

function f.gExpanded(obj)
	if explorerData.NodeData and explorerData.NodeData[obj] and explorerData.NodeData[obj].Expanded then
		return true
	end
	return false
end

local searchFunctions = {
	["class:"] = function(token,results)
		local class = string.match(token,"%S+:%s*(%S*)")
		if class == "" then return end
		local foundClass = ""
		for i,v in pairs(API.Classes) do
			if i:lower() == class:lower() then
				foundClass = i
				break
			elseif i:lower():find(class:lower(),1,true) then
				foundClass = i
			end
		end

		if foundClass == "" then return end

		return function(obj)
			return obj.ClassName == foundClass
		end
	end,
	["isa:"] = function(token,results)
		local class = string.match(token,"%S+:%s*(%S*)")
		if class == "" then return end
		local foundClass = ""
		for i,v in pairs(API.Classes) do
			if i:lower() == class:lower() then
				foundClass = i
				break
			elseif i:lower():find(class:lower(),1,true) then
				foundClass = i
			end
		end

		if foundClass == "" then return end

		return function(obj)
			return obj:IsA(foundClass)
		end
	end,
	["regex:"] = function(token,results)
		local pattern = string.match(token,"%S+:%s*(%S*)")
		if pattern == "" then return end

		return function(obj)
			return obj.Name:find(pattern)
		end
	end,
}

local searchCache = {}

function f.updateSearch(self)
	local searchText = self.SearchText
	if searchText == "" then self.SearchResults = nil return end
	local results = {}
	local tokens = {}
	local checks = {}
	local tokenMap = {}

	self.SearchExpanded = {}

	-- Splits search text into multiple tokens for multiple searching
	for w in string.gmatch(searchText,"[^|]+") do
		table.insert(tokens,w)
	end

	-- Create checks based on search text
	for _,token in pairs(tokens) do
		token = token:match("%s*(.+)")
		tokenMap[token] = true
		local keyword = string.match(token,"%S+:")
		if searchFunctions[keyword] then
			local res = searchFunctions[keyword](token,results)
			if res then checks[token] = res end
		else
			checks[token] = function(obj)
				return obj.Name:lower():find(token:lower(),1,true)
			end
		end
	end

	-- Remove uneeded items from cache
	for i,v in pairs(searchCache) do
		if not tokenMap[i] then
			searchCache[i] = nil
		end
	end

	-- Perform the searches
	local searchExpanded = self.SearchExpanded	

	for token,check in pairs(checks) do
		local newResults = {}
		if searchCache[token] then
			for obj,v in pairs(searchCache[token]) do
				results[obj] = true
				searchExpanded[obj] = math.max(searchExpanded[obj] or 0, 1)
				local par = obj.Parent
				while par and not results[par] or searchExpanded[par] == 1 do
					results[par] = true
					searchExpanded[par] = 2
					par = par.Parent
				end
			end
		else
			for i,v in pairs(game:GetDescendants()) do
				local success,found = pcall(check,v)
				if found and nodes[v] then
					results[v] = true
					newResults[v] = true
					searchExpanded[v] = math.max(searchExpanded[v] or 0, 1)
					local par = v.Parent
					while par and not results[par] or searchExpanded[par] == 1 do
						results[par] = true
						newResults[par] = true
						searchExpanded[par] = 2
						par = par.Parent
					end
				end
			end
			searchCache[token] = newResults
		end
	end

	--[[
	for i,v in pairs(game:GetDescendants()) do
		searchCache[token] = {}
		for token,check in pairs(checks) do
			if searchCache[token] then for obj,_ in pairs(searchCache[token]) do results[obj] = true end break end
			local success,found = pcall(check,v)
			if found and nodes[v] then
				results[v] = true
				local par = v.Parent
				while par and not results[par] do
					results[par] = true
					par = par.Parent
				end
				break
			end
		end
	end
	--]]
	self.SearchChecks = checks
	self.SearchResults = results
end

local textWidthRuler = Instance.new("TextLabel",gui)
textWidthRuler.Font = Enum.Font.SourceSans
textWidthRuler.TextSize = 14
textWidthRuler.Visible = false

function f.textWidth(text)
	textWidthRuler.Text = text
	return textWidthRuler.TextBounds.X
end

function f.updateTree(self)
	local isSearching = self.SearchResults
	local searchExpanded = self.SearchExpanded

	nodeWidth = 0

	local function fillTree(node,tree)
		if not node.Sorted then
			table.sort(node,function(a,b)
				local o1 = a.ExplorerOrder
				local o2 = b.ExplorerOrder
				if o1 ~= o2 then
					return o1 < o2
				elseif a.Obj.Name ~= b.Obj.Name then
					return a.Obj.Name < b.Obj.Name
				elseif a.Obj.ClassName ~= b.Obj.ClassName then
					return a.Obj.ClassName < b.Obj.ClassName
				else
					return a.UID < b.UID
				end
			end)
			node.Sorted = true
		end

		for i = 1,#node do
			--node[i].Ind = i
			if not isSearching or (isSearching and isSearching[node[i].Obj]) then
				local textWidth = node[i].Depth * 18 + f.textWidth(node[i].Obj.Name) + 22
				nodeWidth = textWidth > nodeWidth and textWidth or nodeWidth
				table.insert(tree,node[i])
				if (not isSearching and explorerTree.Expanded[node[i]]) or (isSearching and searchExpanded[node[i].Obj] == 2) then
					fillTree(node[i],tree)
				end
			end
		end
	end

	self.Tree = {}
	fillTree(nodes[game],self.Tree)
	--self.Scroll:Update()
end

function f.icon(frame,index)
	local row,col = math.floor(index/14%14),math.floor(index%14)
	local pad,border = 2,1
	if not frame then
		frame = Instance.new("Frame")
		frame.BackgroundTransparency = 1
		frame.Size = UDim2.new(0,16,0,16)
		frame.ClipsDescendants = true
		local newMap = Instance.new("ImageLabel",frame)
		newMap.Name = "Icon"
		newMap.BackgroundTransparency = 1
		newMap.Size = UDim2.new(16,0,16,0)
		newMap.Image = iconMap
	end
	local icon = frame.Icon
	icon.Position = UDim2.new(-col - (pad*(col+1) + border)/16,0,-row - (pad*(row+1) + border)/16,0)
	return frame
end

function f.depth(obj)
	local depth = 0
	local curPar = obj.Parent
	while curPar ~= nil do
		curPar = curPar.Parent
		depth = depth + 1
	end
	return depth
end

local Selection do
	Selection = {
		List = {},
		Selected = {}
	}

	function Selection:Add(obj)
		if Selection.Selected[obj] then return end

		Selection.Selected[obj] = true
		table.insert(Selection.List,obj)
	end

	function Selection:Set(objs)
		for i,v in pairs(Selection.List) do
			Selection.Selected[v] = nil
		end
		Selection.List = {}

		for i,v in pairs(objs) do
			if not Selection.Selected[v] then
				Selection.Selected[v] = true
				table.insert(Selection.List,v)
			end
		end
	end

	function Selection:Remove(obj)
		if not Selection.Selected[obj] then return end

		Selection.Selected[obj] = false
		for i,v in pairs(Selection.List) do
			if v == obj then table.remove(Selection.List,i) break end
		end
	end
end

function f.refreshExplorers(id)
	--wait()
	local e = explorerData
	local window = e.Window
	local scroll = e.Scroll
	local entrySpace = math.floor(window.Content.List.AbsoluteSize.Y / 19) + 1

	scroll.TotalSpace = #e.Tree
	scroll.VisibleSpace = entrySpace - 1		

	for i = 1,entrySpace do
		local node = e.Tree[i + scroll.Index]
		if node then
			local nodeData = e.NodeData[node.Obj]
			local cEntry = e.Entries[i]
			if not cEntry then
				cEntry = entryTemplate:Clone()
				cEntry.Position = UDim2.new(0,1,0,2 + 19 * #window.Content.List:GetChildren())
				cEntry.Parent = window.Content.List
				e.Entries[i] = cEntry

				cEntry.MouseEnter:connect(function()
					local node = e.Tree[i + scroll.Index]
					if node then
						if Selection.Selected[node.Obj] then return end
						cEntry.BackgroundTransparency = 0.7
					end
				end)
				cEntry.MouseLeave:connect(function()
					local node = e.Tree[i + scroll.Index]
					if node then
						if Selection.Selected[node.Obj] then return end
						cEntry.BackgroundTransparency = 1
					end
				end)						
				cEntry.MouseButton1Down:connect(function()
					local node = e.Tree[i + scroll.Index]
					if Services.UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
						Selection:Add(node.Obj)
					else
						Selection:Set({node.Obj})
					end
					f.refreshExplorer()
				end)

				cEntry.Indent.Expand.MouseEnter:connect(function()
					local node = e.Tree[i + scroll.Index]
					if node then
						if not e.NodeData[node.Obj] then e.NodeData[node.Obj] = {} end
						if e.NodeData[node.Obj].Expanded then
							f.icon(cEntry.Indent.Expand,iconIndex.NodeExpandedOver)
						else
							f.icon(cEntry.Indent.Expand,iconIndex.NodeCollapsedOver)
						end
					end
				end)
				cEntry.Indent.Expand.MouseLeave:connect(function()
					local node = e.Tree[i + scroll.Index]
					if node then
						if not e.NodeData[node.Obj] then e.NodeData[node.Obj] = {} end
						if e.NodeData[node.Obj].Expanded then
							f.icon(cEntry.Indent.Expand,iconIndex.NodeExpanded)
						else
							f.icon(cEntry.Indent.Expand,iconIndex.NodeCollapsed)
						end
					end
				end)
				cEntry.Indent.Expand.MouseButton1Down:connect(function()
					local node = e.Tree[i + scroll.Index]
					if node then
						if not e.NodeData[node.Obj] then e.NodeData[node.Obj] = {} end
						if e.NodeData[node.Obj].Expanded then
							e.NodeData[node.Obj].Expanded = false
						else
							e.NodeData[node.Obj].Expanded = true
						end
						f.updateTree()
						f.refreshExplorer()
					end
				end)
			end

			cEntry.Visible = true
			f.icon(cEntry.Indent.IconFrame,iconIndex[node.Obj.ClassName] or 0)
			cEntry.Indent.EntryName.Text = node.Obj.Name									
			if #node.Obj:GetChildren() > 0 then
				cEntry.Indent.Expand.Visible = true
				if nodeData and nodeData.Expanded then
					f.icon(cEntry.Indent.Expand,iconIndex.NodeExpanded)
				else
					f.icon(cEntry.Indent.Expand,iconIndex.NodeCollapsed)
				end
			else
				cEntry.Indent.Expand.Visible = false
			end

			if Selection.Selected[node.Obj] then
				cEntry.Indent.EntryName.TextColor3 = Color3.new(1,1,1)
				cEntry.BackgroundTransparency = 0
			else
				cEntry.Indent.EntryName.TextColor3 = Color3.new(220/255, 220/255, 220/255)
				cEntry.BackgroundTransparency = 1
			end

			cEntry.Indent.Position = UDim2.new(0,18*node.Depth,0,0)
		else
			local cEntry = e.Entries[i]
			if cEntry then
				cEntry.Visible = false
			end
		end
	end

	-- Outliers
	for i = entrySpace+1, #e.Entries do
		if e.Entries[i] then
			e.Entries[i]:Destroy()
			e.Entries[i] = nil
		end
	end
end

-- Properties Functions

function f.toValue(str,valueType)
	if valueType == "int" or valueType == "float" or valueType == "double" then
		return tonumber(str)
	end
end

function f.childValue(prop,value,obj)
	local propName = prop.Name
	local parentPropName = prop.ParentProp.Name
	local parentPropType = prop.ParentProp.ValueType
	local objProp = obj[parentPropName]

	if parentPropType == "Vector3" then
		return Vector3.new(
			propName == "X" and value or objProp.X,
			propName == "Y" and value or objProp.Y,
			propName == "Z" and value or objProp.Z
		)
	elseif parentPropType == "Rect2D" then
		return Rect.new(
			propName == "X0" and value or objProp.Min.X,
			propName == "Y0" and value or objProp.Min.Y,
			propName == "X1" and value or objProp.Max.X,
			propName == "Y1" and value or objProp.Max.Y
		)
	end
end

function f.setProp(prop,str,child)
	local value = f.toValue(str,prop.ValueType)
	if value then
		for i,v in pairs(explorerTree.Selection.List) do
			pcall(function()
				if v:IsA(prop.Class) then
					if #child == 0 then
						v[prop.Name] = value
					else
						v[prop.ParentProp.Name] = f.childValue(prop,value,v)
					end
				end
			end)
		end
	end
end

local propControls = {
	["Default"] = function(prop,child)
		local newMt = setmetatable({},{})

		local controlGui,readOnlyText,lastValue

		local function setup(self,frame)
			controlGui = resources.PropControls.String:Clone()
			readOnlyText = controlGui.ReadOnly		

			if prop.Tags["readonly"] then
				if lastValue then readOnlyText.Text = tostring(lastValue) end
				readOnlyText.Visible = true
				readOnlyText.Parent = frame
			else
				if lastValue then controlGui.Text = tostring(lastValue) end
				controlGui.FocusLost:Connect(function()
					f.setProp(prop,controlGui.Text,child or {})
				end)
				controlGui.Parent = frame
			end	
		end
		newMt.Setup = setup

		local function update(self,value)
			lastValue = value
			if not controlGui then return end
			if not prop.Tags["readonly"] then
				controlGui.Text = tostring(value)
			else
				readOnlyText.Text = tostring(value)
			end
		end	
		newMt.Update = update

		local function focus(self)
			controlGui:CaptureFocus()
		end
		newMt.Focus = focus
		return newMt
	end,
	["Vector3"] = function(prop,child)
		local newMt = setmetatable({},{})

		local controlGui,readOnlyText

		local function setup(self,frame)
			controlGui = resources.PropControls.String:Clone()
			readOnlyText = controlGui.ReadOnly		

			if prop.Tags["readonly"] then
				readOnlyText.Visible = true
				readOnlyText.Parent = frame
			else
				controlGui.FocusLost:Connect(function()
					f.setProp(prop,controlGui.Text,child or {})
				end)
				controlGui.Parent = frame
			end	
		end
		newMt.Setup = setup

		local function update(self,value)
			if not prop.Tags["readonly"] then
				controlGui.Text = tostring(value)
				self.Children[1].Control:Update(value.X)
				self.Children[2].Control:Update(value.Y)
				self.Children[3].Control:Update(value.Z)
			else
				readOnlyText.Text = tostring(value)
				self.Children[1].Control:Update(value.X)
				self.Children[2].Control:Update(value.Y)
				self.Children[3].Control:Update(value.Z)
			end
		end	
		newMt.Update = update

		local function focus(self)
			controlGui:CaptureFocus()
		end
		newMt.Focus = focus

		newMt.Children = {
			f.getChildProp(prop,{Name = "X",ValueType = "double",Depth = 2}),
			f.getChildProp(prop,{Name = "Y",ValueType = "double",Depth = 2}),
			f.getChildProp(prop,{Name = "Z",ValueType = "double",Depth = 2})
		}

		return newMt
	end,
	["Rect2D"] = function(prop,child)
		local newMt = setmetatable({},{})

		local controlGui,readOnlyText

		local function setup(self,frame)
			controlGui = resources.PropControls.String:Clone()
			readOnlyText = controlGui.ReadOnly		

			if prop.Tags["readonly"] then
				readOnlyText.Visible = true
				readOnlyText.Parent = frame
			else
				controlGui.FocusLost:Connect(function()
					f.setProp(prop,controlGui.Text,child or {})
				end)
				controlGui.Parent = frame
			end	
		end
		newMt.Setup = setup

		local function update(self,value)
			if not prop.Tags["readonly"] then
				controlGui.Text = tostring(value)
				self.Children[1].Control:Update(value.Min.X)
				self.Children[2].Control:Update(value.Min.Y)
				self.Children[3].Control:Update(value.Max.X)
				self.Children[4].Control:Update(value.Max.Y)
			else
				readOnlyText.Text = tostring(value)
				self.Children[1].Control:Update(value.Min.X)
				self.Children[2].Control:Update(value.Min.Y)
				self.Children[3].Control:Update(value.Max.X)
				self.Children[4].Control:Update(value.Max.Y)
			end
		end	
		newMt.Update = update

		local function focus(self)
			controlGui:CaptureFocus()
		end
		newMt.Focus = focus

		newMt.Children = {
			f.getChildProp(prop,{Name = "X0",ValueType = "double",Depth = 2}),
			f.getChildProp(prop,{Name = "Y0",ValueType = "double",Depth = 2}),
			f.getChildProp(prop,{Name = "X1",ValueType = "double",Depth = 2}),
			f.getChildProp(prop,{Name = "Y1",ValueType = "double",Depth = 2})
		}

		return newMt
	end
}

function f.getPropControl(prop,child)
	local control = propControls[prop.ValueType] or propControls["Default"]
	return control(prop,child)
end

--[[
local propExpandable = {
	["Vector3"] = true
}
--]]

--[[
function f.getChildrenControls(obj,prop)
	local children = {}
	if prop.ValueType == "Vector3" then
		local newProp = {}
		for i,v in pairs(prop) do newProp[i] = v end
		newProp.ValueType = "double"
		newProp.Name = "X"
		newProp.ParentName = prop.Name
		newProp.ParentType = prop.ValueType
		local newNode = {
			Prop = newProp,
			RefName = prop.Class.."|"..prop.Name.."|X",
			Control = f.getPropControl(newProp,{"X"}),
			Depth = 2,
			Obj = obj,
			Children = {}
		}
		table.insert(children,newNode)
	end
	return children
end
--]]

function f.getChildProp(prop,data)
	local newProp = {
		Name = data.Name,
		ValueType = data.ValueType,
		ParentProp = prop,
		Tags = prop.Tags,
		Class = prop.Class
	}
	local childNode = {
		Prop = newProp,
		RefName = prop.Class.."|"..prop.Name.."|"..data.Name,
		Control = f.getPropControl(newProp,{data.Name}),
		Depth = data.Depth,
		Children = {}
	}
	return childNode
end

function f.updatePropTree(self)
	self.Tree = {}

	propWidth = 0
	local gotProps = {}
	local props = {}
	local newTree = {}	

	for i,v in pairs(explorerTree.Selection.List) do
		local class = API.Classes[v.ClassName]
		while class ~= nil and not gotProps[class.Name] do
			for _,prop in pairs(class.Properties) do
				pcall(function()
					local check = v[prop.Name]
					local categoryList = propCategories[class.Name] or {}
					local newNode = {
						Prop = prop,
						RefName = class.Name.."|"..prop.Name,
						Obj = v,
						Control = f.getPropControl(prop),
						Depth = 1,
						--Children = f.getChildrenControls(v,prop)
					}
					--f.setupControls(newNode)
					--newNode.Control.Children = newNode.Children
					local textWidth = f.textWidth(prop.Name) + newNode.Depth * 18 + 5
					propWidth = textWidth > propWidth and textWidth or propWidth
					table.insert(props,newNode)
				end)
			end
			gotProps[class.Name] = true
			class = API.Classes[class.Superclass]
		end
	end

	table.sort(props,function(a,b)
		local o1 = categoryOrder[a.Prop.Category] or 0
		local o2 = categoryOrder[b.Prop.Category] or 0
		if o1 ~= o2 then
			return o1 < o2
		else
			return a.Prop.Name < b.Prop.Name
		end
	end)

	local nextCategory = ""
	local categoryNode
	for i,v in pairs(props) do
		if nextCategory ~= v.Prop.Category then
			nextCategory = v.Prop.Category
			categoryNode = {
				Category = true,
				RefName = "CAT:"..nextCategory,
				Prop = {Name=nextCategory},
				Depth = 1
			}
			table.insert(newTree,categoryNode)
		end
		if self.Expanded["CAT:"..nextCategory] then
			table.insert(newTree,v)
			if v.Control.Children and self.Expanded[v.RefName] then
				for _,child in pairs(v.Control.Children) do
					table.insert(newTree,child)
				end
			end
		end
	end

	self.Tree = newTree
end

function f.newProperties()
	local newgui = getResource("PropertiesPanel")
	local propertiesScroll = ScrollBar.new()
	local propertiesScrollH = ScrollBar.new(true)
	local newTree = TreeView.new()
	newTree.NodeTemplate = getResource("PEntry")
	newTree.Height = 22
	newTree.OffY = 0
	newTree.Scroll = propertiesScroll
	newTree.DisplayFrame = newgui.Content.List
	newTree.TreeUpdate = f.updatePropTree
	newTree.SearchText = ""

	local changeEvents = {}
	local drawOrder = 0

	newTree.PreUpdate = function(self)
		drawOrder = 0
		for i,v in pairs(changeEvents) do v:Disconnect() changeEvents[i] = nil end
	end

	newTree.NodeCreate = function(self,entry,i)	
		entry.MouseEnter:Connect(function()
			local node = self.Tree[i + self.Index]
			if node then
				if self.Selection.Selected[node.RefName] then return end
				entry.Indent.BackgroundTransparency = 0.7
			end
		end)
		entry.MouseLeave:Connect(function()
			local node = self.Tree[i + self.Index]
			if node then
				if self.Selection.Selected[node.RefName] then return end
				entry.Indent.BackgroundTransparency = 1
			end
		end)						
		entry.MouseButton1Down:Connect(function()
			local node = self.Tree[i + self.Index]
			--node.Control:Focus()
		end)
		entry.MouseButton2Down:Connect(function()
			local node = self.Tree[i + self.Index]
			--node.Control:Focus()
		end)

		entry.Indent.Expand.MouseEnter:Connect(function()
			local node = self.Tree[i + self.Index]
			if node then
				if (not self.SearchResults and self.Expanded[node]) or (self.SearchResults and self.SearchExpanded[node.Obj]) then
					f.icon(entry.Indent.Expand,iconIndex.NodeExpandedOver)
				else
					f.icon(entry.Indent.Expand,iconIndex.NodeCollapsedOver)
				end
			end
		end)
		entry.Indent.Expand.MouseLeave:Connect(function()
			local node = self.Tree[i + self.Index]
			if node then
				if (not self.SearchResults and self.Expanded[node]) or (self.SearchResults and self.SearchExpanded[node.Obj]) then
					f.icon(entry.Indent.Expand,iconIndex.NodeExpanded)
				else
					f.icon(entry.Indent.Expand,iconIndex.NodeCollapsed)
				end
			end
		end)
		entry.Indent.Expand.MouseButton1Down:Connect(function()
			local node = self.Tree[i + self.Index]
			self:Expand(node.RefName)
		end)
	end

	newTree.NodeDraw = function(self,entry,node)
		entry.Indent.EntryName.Text = node.Prop.Name
		entry.Indent.Control:ClearAllChildren()

		if not node.Category then
			-- Update property controls
			node.Control:Setup(entry.Indent.Control)
			if node.Depth > 1 then
				--node.Control:Update(node.Obj[node.Prop.ParentName][node.Prop.Name])
			else
				node.Control:Update(node.Obj[node.Prop.Name])
			end

			-- Color switching
			--if drawOrder % 2 == 0 and not node.Category then
			--	entry.BackgroundColor3 = Color3.new(96/255,96/255,96/255)
			--else
			entry.BackgroundColor3 = Color3.new(80/255,80/255,80/255)
			--end
		else
			entry.BackgroundColor3 = Color3.new(64/255,64/255,64/255)
		end
		drawOrder = drawOrder + 1

		-- Fonts for category nodes and property nodes
		if node.Category then
			entry.Indent.Sep.Visible = false
			entry.Indent.EntryName.Font = Enum.Font.SourceSansBold
			entry.Indent.EntryName.TextColor3 = Color3.new(220/255,220/255,220/255)
		else
			entry.Indent.Sep.Visible = true
			entry.Indent.EntryName.Font = Enum.Font.SourceSans
			if node.Prop.Tags["readonly"] then
				entry.Indent.EntryName.TextColor3 = Color3.new(144/255,144/255,144/255)
			else
				entry.Indent.EntryName.TextColor3 = Color3.new(220/255,220/255,220/255)
			end
		end

		if node.Category or node.Control.Children then
			entry.Indent.Expand.Visible = true
			if self.Expanded[node.RefName] then
				f.icon(entry.Indent.Expand,iconIndex.NodeExpanded)
			else
				f.icon(entry.Indent.Expand,iconIndex.NodeCollapsed)
			end
		else
			entry.Indent.Expand.Visible = false
		end

		if self.Selection.Selected[node.Obj] then
			entry.Indent.EntryName.TextColor3 = Color3.new(1,1,1)
			entry.Indent.BackgroundTransparency = 0
		else
			--entry.Indent.EntryName.TextColor3 = Color3.new(220/255, 220/255, 220/255)
			entry.Indent.BackgroundTransparency = 1
		end

		if not node.Category and node.Depth == 1 then
			changeEvents[node.Obj] = node.Obj:GetPropertyChangedSignal(node.Prop.Name):Connect(function()
				node.Control:Update(node.Obj[node.Prop.Name])
			end)
		end

		entry.Indent.Position = UDim2.new(0,18*node.Depth,0,0)

		local newPropWidth = propWidth - node.Depth*18
		entry.Indent.EntryName.Size = UDim2.new(0,newPropWidth,0,22)
		entry.Indent.Control.Position = UDim2.new(0,newPropWidth+2,0,0)
		entry.Indent.Control.Size = UDim2.new(1,-newPropWidth-2,0,22)
		entry.Indent.Sep.Position = UDim2.new(0,newPropWidth+1,0,0)
		entry.Size = UDim2.new(0,281,0,22)
	end

	propertiesScroll.Gui.Parent = newgui.Content
	propertiesScroll:Texture({
		FrameColor = Color3.new(80/255,80/255,80/255),
		ThumbColor = Color3.new(120/255,120/255,120/255),
		ThumbSelectColor = Color3.new(140/255,140/255,140/255),
		ButtonColor = Color3.new(163/255,162/255,165/255),
		ArrowColor = Color3.new(220/255,220/255,220/255)
	})
	propertiesScroll:SetScrollFrame(newgui.Content,3)

	propertiesScrollH.Gui.Visible = false
	propertiesScrollH.Gui.Parent = newgui.Content
	propertiesScrollH:Texture({
		FrameColor = Color3.new(80/255,80/255,80/255),
		ThumbColor = Color3.new(120/255,120/255,120/255),
		ThumbSelectColor = Color3.new(140/255,140/255,140/255),
		ButtonColor = Color3.new(163/255,162/255,165/255),
		ArrowColor = Color3.new(220/255,220/255,220/255)
	})
	propertiesScrollH.Gui.Position = UDim2.new(0,0,1,-16)
	propertiesScrollH.Gui.Size = UDim2.new(1,-16,0,16)

	newTree.OnUpdate = function(self)
		local guiX = propertiesPanel.Content.AbsoluteSize.X-16
		--[[
		propertiesScrollH.VisibleSpace = guiX
		propertiesScrollH.TotalSpace = nodeWidth+10
		if nodeWidth > guiX then
			explorerScrollH.Gui.Visible = true
			explorerScroll.Gui.Size = UDim2.new(0,16,1,-16)
			self.DisplayFrame.Size = UDim2.new(1,-16,1,-16)
		else
			explorerScrollH.Gui.Visible = false
			explorerScroll.Gui.Size = UDim2.new(0,16,1,0)
			self.DisplayFrame.Size = UDim2.new(1,-16,1,0)
		end
		--]]
		propertiesScroll.TotalSpace = #self.Tree + 1
		propertiesScroll.VisibleSpace = math.ceil(self.DisplayFrame.AbsoluteSize.Y / 23)
		propertiesScrollH:Update()		
		propertiesScroll:Update()
	end
	propertiesScroll.OnUpdate = function(self) if newTree.Index == self.Index then return end newTree.Index = self.Index newTree:Refresh() end
	propertiesScrollH.OnUpdate = function(self)
		for i,v in pairs(propertiesTree.Entries) do
			v.Position = UDim2.new(0,-self.Index,0,v.Position.Y.Offset)
		end
	end
	--explorerData = {Window = newgui, NodeData = {}, Scroll = explorerScroll, Entries = {}}

	propertiesTree = newTree

	table.insert(activeWindows,newgui)
	f.hookWindowListener(newgui)
	newgui.Changed:connect(function(prop) if prop == "AbsoluteSize" or prop == "AbsolutePosition" then newTree:Refresh() end end)

	local searchBox = newgui.TopBar.SearchFrame.Search
	local searchAnim = searchBox.Parent.Entering
	searchBox:GetPropertyChangedSignal("Text"):Connect(function()
		--[[
		local searchTime = tick()
		lastSearch = searchTime
		wait()
		if lastSearch ~= searchTime then return end
		newTree.SearchText = searchBox.Text
		f.updateSearch(newTree)
		explorerTree:TreeUpdate()
		explorerTree:Refresh()
		--]]
	end)

	searchBox.Focused:Connect(function()
		searchBox.Empty.Visible = false
		searchAnim:TweenSizeAndPosition(UDim2.new(1,0,0,2),UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
	end)

	searchBox.FocusLost:Connect(function()
		if searchBox.Text == "" then searchBox.Empty.Visible = true else searchBox.Empty.Visible = false end
		searchAnim:TweenSizeAndPosition(UDim2.new(0,0,0,2),UDim2.new(0.5,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
	end)

	return newgui
end

local function welcomePlayer()
	welcomeFrame.Visible = true
	welcomeMain.Position = UDim2.new(-0.6,0,0,0)
	welcomeChangelog.Position = UDim2.new(1,5,0,20)
	welcomeBottom.Position = UDim2.new(0.6,0,1,0)

	welcomeFrame.BackgroundTransparency = 0
	welcomeOutline.ImageTransparency = 0

	welcomeMain:TweenPosition(UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
	welcomeChangelog:TweenPosition(UDim2.new(0.6,5,0,20),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
	welcomeBottom:TweenPosition(UDim2.new(0.6,0,1,-50),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)

	welcomeProgress:WaitForChild("Progress1").TextColor3 = Color3.new(1,1,1)	
	API = f.fetchAPI()
	welcomeProgress:WaitForChild("Progress2").TextColor3 = Color3.new(1,1,1)
	RMD = f.fetchRMD()
	welcomeProgress:WaitForChild("Progress3").TextColor3 = Color3.new(1,1,1)
	welcomeProgress:WaitForChild("Progress4").TextColor3 = Color3.new(1,1,1)
	rightClickContext = ContextMenu.new()
	f.indexNodes()
	explorerTree:TreeUpdate()
	welcomeProgress:WaitForChild("Progress5").TextColor3 = Color3.new(1,1,1)


	-- Attach explorer and properties to right content pane then launch
	explorerTree:Refresh()
	f.addToPane(explorerPanel,"Right")
	f.addToPane(propertiesPanel,"Right")
	f.resizePaneItem(propertiesPanel,"Right",0.5)

	contentL:TweenPosition(UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
	contentR:TweenPosition(UDim2.new(1,-explorerSettings.RPaneWidth,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
	
	welcomeFrame:TweenPosition(UDim2.new(0.5,-250,0,-350),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.5,true)
end

mouse.Move:connect(function()
	--if mouseWindow == nil then return end
	local x,y = mouse.X,mouse.Y

	if x <= 50 then
		setPane = "Left"
	elseif x >= gui.AbsoluteSize.X - 50 then
		setPane = "Right"
	else
		setPane = "None"
	end
end)

explorerPanel = f.newExplorer()
propertiesPanel = f.newProperties()

for category,_ in pairs(categoryOrder) do
	propertiesTree.Expanded["CAT:"..category] = true
end

propertiesTree.Expanded["CAT:Surface Inputs"] = false
propertiesTree.Expanded["CAT:Surface"] = false

welcomePlayer()

for i,v in pairs(nodes[workspace]) do
	print(type(i))
end
		end)()
elseif TextBox.ContentText == "anim" then
coroutine.wrap(function()
	local Energize = Instance.new("ScreenGui")
	local MainFrame = Instance.new("Frame")
	local GuiBottomFrame = Instance.new("Frame")
	local Credits = Instance.new("TextLabel")
	local GuiTopFrame = Instance.new("Frame")
	local CloseGUI = Instance.new("TextButton")
	local Title = Instance.new("TextLabel")
	local CheckR = Instance.new("TextLabel")
	local ScrollingFrame = Instance.new("ScrollingFrame")
	local GlitchLevitate = Instance.new("TextButton")
	local FullSwing = Instance.new("TextButton")
	local MoonDance = Instance.new("TextButton")
	local FullPunch = Instance.new("TextButton")
	local FloorFaint = Instance.new("TextButton")
	local Crouch = Instance.new("TextButton")
	local SpinDance = Instance.new("TextButton")
	local JumpingJacks = Instance.new("TextButton")
	local ArmDetach = Instance.new("TextButton")
	local MegaInsane = Instance.new("TextButton")
	local WeirdMove = Instance.new("TextButton")
	local DinoWalk = Instance.new("TextButton")
	local FloorCrawl = Instance.new("TextButton")
	local Spinner = Instance.new("TextButton")
	local Faint = Instance.new("TextButton")
	local Levitate = Instance.new("TextButton")
	local LoopHead = Instance.new("TextButton")
	local HeadThrow = Instance.new("TextButton")
	local CloneIllusion = Instance.new("TextButton")
	local Dab = Instance.new("TextButton")
	local BarrelRoll = Instance.new("TextButton")
	local Insane = Instance.new("TextButton")
	local SwordSlam = Instance.new("TextButton")
	local MovingDance = Instance.new("TextButton")
	local ArmTurbine = Instance.new("TextButton")
	local SuperPunch = Instance.new("TextButton")
	local Scared = Instance.new("TextButton")
	local LoopSlam = Instance.new("TextButton")
	local HeroJump = Instance.new("TextButton")
	local SpinDance2 = Instance.new("TextButton")
	local SwordSlice = Instance.new("TextButton")
	local FloatingHead = Instance.new("TextButton")
	local InsaneArms = Instance.new("TextButton")
	local SuperFaint = Instance.new("TextButton")
	local FloatSit = Instance.new("TextButton")
	local BowDown = Instance.new("TextButton")
	local ScrollingFrameR15 = Instance.new("ScrollingFrame")
	local FloatSlash = Instance.new("TextButton")
	local ArmsOut = Instance.new("TextButton")
	local DownSlash = Instance.new("TextButton")
	local R15Spinner = Instance.new("TextButton")
	local WeirdZombie = Instance.new("TextButton")
	local CrazySlash = Instance.new("TextButton")
	local Pull = Instance.new("TextButton")
	local Open = Instance.new("TextButton")
	local CircleArm = Instance.new("TextButton")
	local Bend = Instance.new("TextButton")
	local RotateSlash = Instance.new("TextButton")
	local FlingArms = Instance.new("TextButton")
	local SideFrame = Instance.new("Frame")
	local OpenGUI = Instance.new("TextButton")
	local SideFrameTitle = Instance.new("TextLabel")
	--Properties:
	Energize.Name = "Energize"
	Energize.Parent = game:GetService"Players".LocalPlayer.PlayerGui
	Energize.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	
	MainFrame.Name = "MainFrame"
	MainFrame.Active = true
	MainFrame.Draggable = true
	MainFrame.Parent = Energize
	MainFrame.BackgroundColor3 = Color3.new(0.0313726, 0.0313726, 0.0313726)
	MainFrame.BackgroundTransparency = 0.15000000596046
	MainFrame.Position = UDim2.new(0.502199888, 0, 0.552243114, 0)
	MainFrame.Size = UDim2.new(0, 426, 0, 258)
	
	GuiBottomFrame.Name = "Gui BottomFrame"
	GuiBottomFrame.Parent = MainFrame
	GuiBottomFrame.BackgroundColor3 = Color3.new(1, 1, 1)
	GuiBottomFrame.BackgroundTransparency = 1
	GuiBottomFrame.Position = UDim2.new(0, 0, 0.901309371, 0)
	GuiBottomFrame.Size = UDim2.new(0, 426, 0, 25)
	
	Credits.Name = "Credits"
	Credits.Parent = GuiBottomFrame
	Credits.BackgroundColor3 = Color3.new(0, 0, 0)
	Credits.BackgroundTransparency = 1
	Credits.Size = UDim2.new(0, 426, 0, 25)
	Credits.Font = Enum.Font.SourceSansSemibold
	Credits.Text = "By illremember - FE Animations Gui / Remade by Kipster"
	Credits.TextColor3 = Color3.new(1, 1, 1)
	Credits.TextSize = 17
	
	GuiTopFrame.Name = "Gui TopFrame"
	GuiTopFrame.Parent = MainFrame
	GuiTopFrame.BackgroundColor3 = Color3.new(1, 1, 1)
	GuiTopFrame.BackgroundTransparency = 1
	GuiTopFrame.Position = UDim2.new(0, 0, -0.00178042857, 0)
	GuiTopFrame.Size = UDim2.new(0, 426, 0, 25)
	
	CloseGUI.Name = "CloseGUI"
	CloseGUI.Parent = GuiTopFrame
	CloseGUI.BackgroundColor3 = Color3.new(0, 0, 0)
	CloseGUI.BackgroundTransparency = 0.15000000596046
	CloseGUI.BorderSizePixel = 0
	CloseGUI.Position = UDim2.new(0.967136145, 0, 0, 0)
	CloseGUI.Size = UDim2.new(0, 15, 0, 15)
	CloseGUI.Font = Enum.Font.SourceSansSemibold
	CloseGUI.Text = "X"
	CloseGUI.TextColor3 = Color3.new(1, 1, 1)
	CloseGUI.TextSize = 14
	
	Title.Name = "Title"
	Title.Parent = GuiTopFrame
	Title.BackgroundColor3 = Color3.new(1, 1, 1)
	Title.BackgroundTransparency = 1
	Title.Position = UDim2.new(0.653472185, 0, 0, 0)
	Title.Size = UDim2.new(0, 105, 0, 25)
	Title.Font = Enum.Font.SourceSansSemibold
	Title.Text = "Energize Remake"
	Title.TextColor3 = Color3.new(1, 1, 1)
	Title.TextSize = 17
	
	CheckR.Name = "CheckR"
	CheckR.Parent = GuiTopFrame
	CheckR.BackgroundColor3 = Color3.new(1, 1, 1)
	CheckR.BackgroundTransparency = 1
	CheckR.Position = UDim2.new(0.0234741792, 0, 0, 0)
	CheckR.Size = UDim2.new(0, 194, 0, 24)
	CheckR.Font = Enum.Font.SourceSansSemibold
	CheckR.Text = "Text"
	CheckR.TextColor3 = Color3.new(1, 1, 1)
	CheckR.TextSize = 17
	CheckR.TextXAlignment = Enum.TextXAlignment.Left
	
	ScrollingFrame.Parent = MainFrame
	ScrollingFrame.BackgroundColor3 = Color3.new(0, 0, 0)
	ScrollingFrame.BackgroundTransparency = 0.60000002384186
	ScrollingFrame.Position = UDim2.new(0, 0, 0.0951187983, 0)
	ScrollingFrame.Size = UDim2.new(0, 426, 0, 207)
	ScrollingFrame.CanvasSize = UDim2.new(0, 0, 1.29999995, 0)
	ScrollingFrame.ScrollBarThickness = 10
	
	GlitchLevitate.Name = "GlitchLevitate"
	GlitchLevitate.Parent = ScrollingFrame
	GlitchLevitate.BackgroundColor3 = Color3.new(0, 0, 0)
	GlitchLevitate.BackgroundTransparency = 0.30000001192093
	GlitchLevitate.Position = UDim2.new(0.0469483584, 0, 0.0273178034, 0)
	GlitchLevitate.Size = UDim2.new(0, 90, 0, 30)
	GlitchLevitate.Font = Enum.Font.SourceSansSemibold
	GlitchLevitate.Text = "Glitch Levitate"
	GlitchLevitate.TextColor3 = Color3.new(1, 1, 1)
	GlitchLevitate.TextSize = 15
	
	FullSwing.Name = "FullSwing"
	FullSwing.Parent = ScrollingFrame
	FullSwing.BackgroundColor3 = Color3.new(0, 0, 0)
	FullSwing.BackgroundTransparency = 0.30000001192093
	FullSwing.Position = UDim2.new(0.267605633, 0, 0.0273178034, 0)
	FullSwing.Size = UDim2.new(0, 90, 0, 30)
	FullSwing.Font = Enum.Font.SourceSansSemibold
	FullSwing.Text = "Full Swing"
	FullSwing.TextColor3 = Color3.new(1, 1, 1)
	FullSwing.TextSize = 15
	
	MoonDance.Name = "MoonDance"
	MoonDance.Parent = ScrollingFrame
	MoonDance.BackgroundColor3 = Color3.new(0, 0, 0)
	MoonDance.BackgroundTransparency = 0.30000001192093
	MoonDance.Position = UDim2.new(0.713614941, 0, 0.0273178034, 0)
	MoonDance.Size = UDim2.new(0, 90, 0, 30)
	MoonDance.Font = Enum.Font.SourceSansSemibold
	MoonDance.Text = "Moon Dance"
	MoonDance.TextColor3 = Color3.new(1, 1, 1)
	MoonDance.TextSize = 15
	
	FullPunch.Name = "FullPunch"
	FullPunch.Parent = ScrollingFrame
	FullPunch.BackgroundColor3 = Color3.new(0, 0, 0)
	FullPunch.BackgroundTransparency = 0.30000001192093
	FullPunch.Position = UDim2.new(0.492957741, 0, 0.0273178034, 0)
	FullPunch.Size = UDim2.new(0, 90, 0, 30)
	FullPunch.Font = Enum.Font.SourceSansSemibold
	FullPunch.Text = "Full Punch"
	FullPunch.TextColor3 = Color3.new(1, 1, 1)
	FullPunch.TextSize = 15
	
	FloorFaint.Name = "FloorFaint"
	FloorFaint.Parent = ScrollingFrame
	FloorFaint.BackgroundColor3 = Color3.new(0, 0, 0)
	FloorFaint.BackgroundTransparency = 0.30000001192093
	FloorFaint.Position = UDim2.new(0.0469483584, 0, 0.134652346, 0)
	FloorFaint.Size = UDim2.new(0, 90, 0, 30)
	FloorFaint.Font = Enum.Font.SourceSansSemibold
	FloorFaint.Text = "Floor Faint"
	FloorFaint.TextColor3 = Color3.new(1, 1, 1)
	FloorFaint.TextSize = 15
	
	Crouch.Name = "Crouch"
	Crouch.Parent = ScrollingFrame
	Crouch.BackgroundColor3 = Color3.new(0, 0, 0)
	Crouch.BackgroundTransparency = 0.30000001192093
	Crouch.Position = UDim2.new(0.267605633, 0, 0.134652346, 0)
	Crouch.Size = UDim2.new(0, 90, 0, 30)
	Crouch.Font = Enum.Font.SourceSansSemibold
	Crouch.Text = "Crouch"
	Crouch.TextColor3 = Color3.new(1, 1, 1)
	Crouch.TextSize = 15
	
	SpinDance.Name = "SpinDance"
	SpinDance.Parent = ScrollingFrame
	SpinDance.BackgroundColor3 = Color3.new(0, 0, 0)
	SpinDance.BackgroundTransparency = 0.30000001192093
	SpinDance.Position = UDim2.new(0.713614941, 0, 0.134652346, 0)
	SpinDance.Size = UDim2.new(0, 90, 0, 30)
	SpinDance.Font = Enum.Font.SourceSansSemibold
	SpinDance.Text = "Spin Dance"
	SpinDance.TextColor3 = Color3.new(1, 1, 1)
	SpinDance.TextSize = 15
	
	JumpingJacks.Name = "JumpingJacks"
	JumpingJacks.Parent = ScrollingFrame
	JumpingJacks.BackgroundColor3 = Color3.new(0, 0, 0)
	JumpingJacks.BackgroundTransparency = 0.30000001192093
	JumpingJacks.Position = UDim2.new(0.492957741, 0, 0.134652346, 0)
	JumpingJacks.Size = UDim2.new(0, 90, 0, 30)
	JumpingJacks.Font = Enum.Font.SourceSansSemibold
	JumpingJacks.Text = "Jumping Jacks"
	JumpingJacks.TextColor3 = Color3.new(1, 1, 1)
	JumpingJacks.TextSize = 15
	
	ArmDetach.Name = "ArmDetach"
	ArmDetach.Parent = ScrollingFrame
	ArmDetach.BackgroundColor3 = Color3.new(0, 0, 0)
	ArmDetach.BackgroundTransparency = 0.30000001192093
	ArmDetach.Position = UDim2.new(0.0469483584, 0, 0.241986871, 0)
	ArmDetach.Size = UDim2.new(0, 90, 0, 30)
	ArmDetach.Font = Enum.Font.SourceSansSemibold
	ArmDetach.Text = "Arm Detach"
	ArmDetach.TextColor3 = Color3.new(1, 1, 1)
	ArmDetach.TextSize = 15
	
	MegaInsane.Name = "MegaInsane"
	MegaInsane.Parent = ScrollingFrame
	MegaInsane.BackgroundColor3 = Color3.new(0, 0, 0)
	MegaInsane.BackgroundTransparency = 0.30000001192093
	MegaInsane.Position = UDim2.new(0.267605633, 0, 0.241986871, 0)
	MegaInsane.Size = UDim2.new(0, 90, 0, 30)
	MegaInsane.Font = Enum.Font.SourceSansSemibold
	MegaInsane.Text = "Mega Insane"
	MegaInsane.TextColor3 = Color3.new(1, 1, 1)
	MegaInsane.TextSize = 15
	
	WeirdMove.Name = "WeirdMove"
	WeirdMove.Parent = ScrollingFrame
	WeirdMove.BackgroundColor3 = Color3.new(0, 0, 0)
	WeirdMove.BackgroundTransparency = 0.30000001192093
	WeirdMove.Position = UDim2.new(0.713614941, 0, 0.241986871, 0)
	WeirdMove.Size = UDim2.new(0, 90, 0, 30)
	WeirdMove.Font = Enum.Font.SourceSansSemibold
	WeirdMove.Text = "Weird Move"
	WeirdMove.TextColor3 = Color3.new(1, 1, 1)
	WeirdMove.TextSize = 15
	
	DinoWalk.Name = "DinoWalk"
	DinoWalk.Parent = ScrollingFrame
	DinoWalk.BackgroundColor3 = Color3.new(0, 0, 0)
	DinoWalk.BackgroundTransparency = 0.30000001192093
	DinoWalk.Position = UDim2.new(0.492957741, 0, 0.241986871, 0)
	DinoWalk.Size = UDim2.new(0, 90, 0, 30)
	DinoWalk.Font = Enum.Font.SourceSansSemibold
	DinoWalk.Text = "Dino Walk"
	DinoWalk.TextColor3 = Color3.new(1, 1, 1)
	DinoWalk.TextSize = 15
	
	FloorCrawl.Name = "FloorCrawl"
	FloorCrawl.Parent = ScrollingFrame
	FloorCrawl.BackgroundColor3 = Color3.new(0, 0, 0)
	FloorCrawl.BackgroundTransparency = 0.30000001192093
	FloorCrawl.Position = UDim2.new(0.492957741, 0, 0.349321395, 0)
	FloorCrawl.Size = UDim2.new(0, 90, 0, 30)
	FloorCrawl.Font = Enum.Font.SourceSansSemibold
	FloorCrawl.Text = "Floor Crawl"
	FloorCrawl.TextColor3 = Color3.new(1, 1, 1)
	FloorCrawl.TextSize = 15
	
	Spinner.Name = "Spinner"
	Spinner.Parent = ScrollingFrame
	Spinner.BackgroundColor3 = Color3.new(0, 0, 0)
	Spinner.BackgroundTransparency = 0.30000001192093
	Spinner.Position = UDim2.new(0.267605633, 0, 0.349321395, 0)
	Spinner.Size = UDim2.new(0, 90, 0, 30)
	Spinner.Font = Enum.Font.SourceSansSemibold
	Spinner.Text = "Spinner"
	Spinner.TextColor3 = Color3.new(1, 1, 1)
	Spinner.TextSize = 15
	
	Faint.Name = "Faint"
	Faint.Parent = ScrollingFrame
	Faint.BackgroundColor3 = Color3.new(0, 0, 0)
	Faint.BackgroundTransparency = 0.30000001192093
	Faint.Position = UDim2.new(0.713614941, 0, 0.349321395, 0)
	Faint.Size = UDim2.new(0, 90, 0, 30)
	Faint.Font = Enum.Font.SourceSansSemibold
	Faint.Text = "Faint"
	Faint.TextColor3 = Color3.new(1, 1, 1)
	Faint.TextSize = 15
	
	Levitate.Name = "Levitate"
	Levitate.Parent = ScrollingFrame
	Levitate.BackgroundColor3 = Color3.new(0, 0, 0)
	Levitate.BackgroundTransparency = 0.30000001192093
	Levitate.Position = UDim2.new(0.0469483584, 0, 0.349321395, 0)
	Levitate.Size = UDim2.new(0, 90, 0, 30)
	Levitate.Font = Enum.Font.SourceSansSemibold
	Levitate.Text = "Levitate"
	Levitate.TextColor3 = Color3.new(1, 1, 1)
	Levitate.TextSize = 15
	
	LoopHead.Name = "LoopHead"
	LoopHead.Parent = ScrollingFrame
	LoopHead.BackgroundColor3 = Color3.new(0, 0, 0)
	LoopHead.BackgroundTransparency = 0.30000001192093
	LoopHead.Position = UDim2.new(0.0469483584, 0, 0.456655949, 0)
	LoopHead.Size = UDim2.new(0, 90, 0, 30)
	LoopHead.Font = Enum.Font.SourceSansSemibold
	LoopHead.Text = "Loop Head"
	LoopHead.TextColor3 = Color3.new(1, 1, 1)
	LoopHead.TextSize = 15
	
	HeadThrow.Name = "HeadThrow"
	HeadThrow.Parent = ScrollingFrame
	HeadThrow.BackgroundColor3 = Color3.new(0, 0, 0)
	HeadThrow.BackgroundTransparency = 0.30000001192093
	HeadThrow.Position = UDim2.new(0.267605633, 0, 0.456655949, 0)
	HeadThrow.Size = UDim2.new(0, 90, 0, 30)
	HeadThrow.Font = Enum.Font.SourceSansSemibold
	HeadThrow.Text = "Head Throw"
	HeadThrow.TextColor3 = Color3.new(1, 1, 1)
	HeadThrow.TextSize = 15
	
	CloneIllusion.Name = "CloneIllusion"
	CloneIllusion.Parent = ScrollingFrame
	CloneIllusion.BackgroundColor3 = Color3.new(0, 0, 0)
	CloneIllusion.BackgroundTransparency = 0.30000001192093
	CloneIllusion.Position = UDim2.new(0.713614941, 0, 0.456655949, 0)
	CloneIllusion.Size = UDim2.new(0, 90, 0, 30)
	CloneIllusion.Font = Enum.Font.SourceSansSemibold
	CloneIllusion.Text = "Clone Illusion"
	CloneIllusion.TextColor3 = Color3.new(1, 1, 1)
	CloneIllusion.TextSize = 15
	
	Dab.Name = "Dab"
	Dab.Parent = ScrollingFrame
	Dab.BackgroundColor3 = Color3.new(0, 0, 0)
	Dab.BackgroundTransparency = 0.30000001192093
	Dab.Position = UDim2.new(0.492957741, 0, 0.456655949, 0)
	Dab.Size = UDim2.new(0, 90, 0, 30)
	Dab.Font = Enum.Font.SourceSansSemibold
	Dab.Text = "Dab"
	Dab.TextColor3 = Color3.new(1, 1, 1)
	Dab.TextSize = 15
	
	BarrelRoll.Name = "BarrelRoll"
	BarrelRoll.Parent = ScrollingFrame
	BarrelRoll.BackgroundColor3 = Color3.new(0, 0, 0)
	BarrelRoll.BackgroundTransparency = 0.30000001192093
	BarrelRoll.Position = UDim2.new(0.492957741, 0, 0.563990533, 0)
	BarrelRoll.Size = UDim2.new(0, 90, 0, 30)
	BarrelRoll.Font = Enum.Font.SourceSansSemibold
	BarrelRoll.Text = "Barrel Roll"
	BarrelRoll.TextColor3 = Color3.new(1, 1, 1)
	BarrelRoll.TextSize = 15
	
	Insane.Name = "Insane"
	Insane.Parent = ScrollingFrame
	Insane.BackgroundColor3 = Color3.new(0, 0, 0)
	Insane.BackgroundTransparency = 0.30000001192093
	Insane.Position = UDim2.new(0.267605633, 0, 0.563990533, 0)
	Insane.Size = UDim2.new(0, 90, 0, 30)
	Insane.Font = Enum.Font.SourceSansSemibold
	Insane.Text = "Insane"
	Insane.TextColor3 = Color3.new(1, 1, 1)
	Insane.TextSize = 15
	
	SwordSlam.Name = "SwordSlam"
	SwordSlam.Parent = ScrollingFrame
	SwordSlam.BackgroundColor3 = Color3.new(0, 0, 0)
	SwordSlam.BackgroundTransparency = 0.30000001192093
	SwordSlam.Position = UDim2.new(0.713614941, 0, 0.563990533, 0)
	SwordSlam.Size = UDim2.new(0, 90, 0, 30)
	SwordSlam.Font = Enum.Font.SourceSansSemibold
	SwordSlam.Text = "Sword Slam"
	SwordSlam.TextColor3 = Color3.new(1, 1, 1)
	SwordSlam.TextSize = 15
	
	MovingDance.Name = "MovingDance"
	MovingDance.Parent = ScrollingFrame
	MovingDance.BackgroundColor3 = Color3.new(0, 0, 0)
	MovingDance.BackgroundTransparency = 0.30000001192093
	MovingDance.Position = UDim2.new(0.0469483584, 0, 0.563990533, 0)
	MovingDance.Size = UDim2.new(0, 90, 0, 30)
	MovingDance.Font = Enum.Font.SourceSansSemibold
	MovingDance.Text = "Moving Dance"
	MovingDance.TextColor3 = Color3.new(1, 1, 1)
	MovingDance.TextSize = 15
	
	ArmTurbine.Name = "ArmTurbine"
	ArmTurbine.Parent = ScrollingFrame
	ArmTurbine.BackgroundColor3 = Color3.new(0, 0, 0)
	ArmTurbine.BackgroundTransparency = 0.30000001192093
	ArmTurbine.Position = UDim2.new(0.267605633, 0, 0.671325028, 0)
	ArmTurbine.Size = UDim2.new(0, 90, 0, 30)
	ArmTurbine.Font = Enum.Font.SourceSansSemibold
	ArmTurbine.Text = "Arm Turbine"
	ArmTurbine.TextColor3 = Color3.new(1, 1, 1)
	ArmTurbine.TextSize = 15
	
	SuperPunch.Name = "SuperPunch"
	SuperPunch.Parent = ScrollingFrame
	SuperPunch.BackgroundColor3 = Color3.new(0, 0, 0)
	SuperPunch.BackgroundTransparency = 0.30000001192093
	SuperPunch.Position = UDim2.new(0.0469483584, 0, 0.671325028, 0)
	SuperPunch.Size = UDim2.new(0, 90, 0, 30)
	SuperPunch.Font = Enum.Font.SourceSansSemibold
	SuperPunch.Text = "Super Punch"
	SuperPunch.TextColor3 = Color3.new(1, 1, 1)
	SuperPunch.TextSize = 15
	
	Scared.Name = "Scared"
	Scared.Parent = ScrollingFrame
	Scared.BackgroundColor3 = Color3.new(0, 0, 0)
	Scared.BackgroundTransparency = 0.30000001192093
	Scared.Position = UDim2.new(0.267605633, 0, 0.778659523, 0)
	Scared.Size = UDim2.new(0, 90, 0, 30)
	Scared.Font = Enum.Font.SourceSansSemibold
	Scared.Text = "Scared"
	Scared.TextColor3 = Color3.new(1, 1, 1)
	Scared.TextSize = 15
	
	LoopSlam.Name = "LoopSlam"
	LoopSlam.Parent = ScrollingFrame
	LoopSlam.BackgroundColor3 = Color3.new(0, 0, 0)
	LoopSlam.BackgroundTransparency = 0.30000001192093
	LoopSlam.Position = UDim2.new(0.713614941, 0, 0.671325028, 0)
	LoopSlam.Size = UDim2.new(0, 90, 0, 30)
	LoopSlam.Font = Enum.Font.SourceSansSemibold
	LoopSlam.Text = "Loop Slam"
	LoopSlam.TextColor3 = Color3.new(1, 1, 1)
	LoopSlam.TextSize = 15
	
	HeroJump.Name = "HeroJump"
	HeroJump.Parent = ScrollingFrame
	HeroJump.BackgroundColor3 = Color3.new(0, 0, 0)
	HeroJump.BackgroundTransparency = 0.30000001192093
	HeroJump.Position = UDim2.new(0.0469483584, 0, 0.778659523, 0)
	HeroJump.Size = UDim2.new(0, 90, 0, 30)
	HeroJump.Font = Enum.Font.SourceSansSemibold
	HeroJump.Text = "Hero Jump"
	HeroJump.TextColor3 = Color3.new(1, 1, 1)
	HeroJump.TextSize = 15
	
	SpinDance2.Name = "SpinDance2"
	SpinDance2.Parent = ScrollingFrame
	SpinDance2.BackgroundColor3 = Color3.new(0, 0, 0)
	SpinDance2.BackgroundTransparency = 0.30000001192093
	SpinDance2.Position = UDim2.new(0.713614941, 0, 0.778659523, 0)
	SpinDance2.Size = UDim2.new(0, 90, 0, 30)
	SpinDance2.Font = Enum.Font.SourceSansSemibold
	SpinDance2.Text = "Spin Dance 2"
	SpinDance2.TextColor3 = Color3.new(1, 1, 1)
	SpinDance2.TextSize = 15
	
	SwordSlice.Name = "SwordSlice"
	SwordSlice.Parent = ScrollingFrame
	SwordSlice.BackgroundColor3 = Color3.new(0, 0, 0)
	SwordSlice.BackgroundTransparency = 0.30000001192093
	SwordSlice.Position = UDim2.new(0.492957741, 0, 0.671325028, 0)
	SwordSlice.Size = UDim2.new(0, 90, 0, 30)
	SwordSlice.Font = Enum.Font.SourceSansSemibold
	SwordSlice.Text = "Sword Slice"
	SwordSlice.TextColor3 = Color3.new(1, 1, 1)
	SwordSlice.TextSize = 15
	
	FloatingHead.Name = "FloatingHead"
	FloatingHead.Parent = ScrollingFrame
	FloatingHead.BackgroundColor3 = Color3.new(0, 0, 0)
	FloatingHead.BackgroundTransparency = 0.30000001192093
	FloatingHead.Position = UDim2.new(0.492957741, 0, 0.778659523, 0)
	FloatingHead.Size = UDim2.new(0, 90, 0, 30)
	FloatingHead.Font = Enum.Font.SourceSansSemibold
	FloatingHead.Text = "Floating Head"
	FloatingHead.TextColor3 = Color3.new(1, 1, 1)
	FloatingHead.TextSize = 15
	
	InsaneArms.Name = "InsaneArms"
	InsaneArms.Parent = ScrollingFrame
	InsaneArms.BackgroundColor3 = Color3.new(0, 0, 0)
	InsaneArms.BackgroundTransparency = 0.30000001192093
	InsaneArms.Position = UDim2.new(0.0469483584, 0, 0.888975561, 0)
	InsaneArms.Size = UDim2.new(0, 90, 0, 30)
	InsaneArms.Font = Enum.Font.SourceSansSemibold
	InsaneArms.Text = "Insane Arms"
	InsaneArms.TextColor3 = Color3.new(1, 1, 1)
	InsaneArms.TextSize = 15
	
	SuperFaint.Name = "SuperFaint"
	SuperFaint.Parent = ScrollingFrame
	SuperFaint.BackgroundColor3 = Color3.new(0, 0, 0)
	SuperFaint.BackgroundTransparency = 0.30000001192093
	SuperFaint.Position = UDim2.new(0.267605633, 0, 0.888975561, 0)
	SuperFaint.Size = UDim2.new(0, 90, 0, 30)
	SuperFaint.Font = Enum.Font.SourceSansSemibold
	SuperFaint.Text = "Super Faint"
	SuperFaint.TextColor3 = Color3.new(1, 1, 1)
	SuperFaint.TextSize = 15
	
	FloatSit.Name = "FloatSit"
	FloatSit.Parent = ScrollingFrame
	FloatSit.BackgroundColor3 = Color3.new(0, 0, 0)
	FloatSit.BackgroundTransparency = 0.30000001192093
	FloatSit.Position = UDim2.new(0.492957741, 0, 0.888975561, 0)
	FloatSit.Size = UDim2.new(0, 90, 0, 30)
	FloatSit.Font = Enum.Font.SourceSansSemibold
	FloatSit.Text = "FloatSit"
	FloatSit.TextColor3 = Color3.new(1, 1, 1)
	FloatSit.TextSize = 15
	
	BowDown.Name = "BowDown"
	BowDown.Parent = ScrollingFrame
	BowDown.BackgroundColor3 = Color3.new(0, 0, 0)
	BowDown.BackgroundTransparency = 0.30000001192093
	BowDown.Position = UDim2.new(0.713614941, 0, 0.888975561, 0)
	BowDown.Size = UDim2.new(0, 90, 0, 30)
	BowDown.Font = Enum.Font.SourceSansSemibold
	BowDown.Text = "Bow Down"
	BowDown.TextColor3 = Color3.new(1, 1, 1)
	BowDown.TextSize = 15
	
	ScrollingFrameR15.Name = "ScrollingFrameR15"
	ScrollingFrameR15.Parent = MainFrame
	ScrollingFrameR15.BackgroundColor3 = Color3.new(0, 0, 0)
	ScrollingFrameR15.BackgroundTransparency = 0.60000002384186
	ScrollingFrameR15.Position = UDim2.new(-0.00150352798, 0, 0.0951187983, 0)
	ScrollingFrameR15.Size = UDim2.new(0, 427, 0, 207)
	ScrollingFrameR15.CanvasSize = UDim2.new(0, 0, 0.430000007, 0)
	ScrollingFrameR15.ScrollBarThickness = 10
	
	FloatSlash.Name = "FloatSlash"
	FloatSlash.Parent = ScrollingFrameR15
	FloatSlash.BackgroundColor3 = Color3.new(0, 0, 0)
	FloatSlash.BackgroundTransparency = 0.30000001192093
	FloatSlash.Position = UDim2.new(0.0563380271, 0, 0.0405257866, 0)
	FloatSlash.Size = UDim2.new(0, 90, 0, 30)
	FloatSlash.Font = Enum.Font.SourceSansSemibold
	FloatSlash.Text = "Float Slash"
	FloatSlash.TextColor3 = Color3.new(1, 1, 1)
	FloatSlash.TextSize = 15
	
	ArmsOut.Name = "ArmsOut"
	ArmsOut.Parent = ScrollingFrameR15
	ArmsOut.BackgroundColor3 = Color3.new(0, 0, 0)
	ArmsOut.BackgroundTransparency = 0.30000001192093
	ArmsOut.Position = UDim2.new(0.28169015, 0, 0.0405257866, 0)
	ArmsOut.Size = UDim2.new(0, 90, 0, 30)
	ArmsOut.Font = Enum.Font.SourceSansSemibold
	ArmsOut.Text = " Arms Out"
	ArmsOut.TextColor3 = Color3.new(1, 1, 1)
	ArmsOut.TextSize = 15
	
	DownSlash.Name = "DownSlash"
	DownSlash.Parent = ScrollingFrameR15
	DownSlash.BackgroundColor3 = Color3.new(0, 0, 0)
	DownSlash.BackgroundTransparency = 0.30000001192093
	DownSlash.Position = UDim2.new(0.507042229, 0, 0.0405257866, 0)
	DownSlash.Size = UDim2.new(0, 90, 0, 30)
	DownSlash.Font = Enum.Font.SourceSansSemibold
	DownSlash.Text = "Down Slash"
	DownSlash.TextColor3 = Color3.new(1, 1, 1)
	DownSlash.TextSize = 15
	
	R15Spinner.Name = "R15Spinner"
	R15Spinner.Parent = ScrollingFrameR15
	R15Spinner.BackgroundColor3 = Color3.new(0, 0, 0)
	R15Spinner.BackgroundTransparency = 0.30000001192093
	R15Spinner.Position = UDim2.new(0.732394338, 0, 0.0405257866, 0)
	R15Spinner.Size = UDim2.new(0, 90, 0, 30)
	R15Spinner.Font = Enum.Font.SourceSansSemibold
	R15Spinner.Text = "Spinner"
	R15Spinner.TextColor3 = Color3.new(1, 1, 1)
	R15Spinner.TextSize = 15
	
	WeirdZombie.Name = "WeirdZombie"
	WeirdZombie.Parent = ScrollingFrameR15
	WeirdZombie.BackgroundColor3 = Color3.new(0, 0, 0)
	WeirdZombie.BackgroundTransparency = 0.30000001192093
	WeirdZombie.Position = UDim2.new(0.28169015, 0, 0.213602722, 0)
	WeirdZombie.Size = UDim2.new(0, 90, 0, 30)
	WeirdZombie.Font = Enum.Font.SourceSansSemibold
	WeirdZombie.Text = "Weird Zombie"
	WeirdZombie.TextColor3 = Color3.new(1, 1, 1)
	WeirdZombie.TextSize = 15
	
	CrazySlash.Name = "CrazySlash"
	CrazySlash.Parent = ScrollingFrameR15
	CrazySlash.BackgroundColor3 = Color3.new(0, 0, 0)
	CrazySlash.BackgroundTransparency = 0.30000001192093
	CrazySlash.Position = UDim2.new(0.0563380271, 0, 0.213602722, 0)
	CrazySlash.Size = UDim2.new(0, 90, 0, 30)
	CrazySlash.Font = Enum.Font.SourceSansSemibold
	CrazySlash.Text = "Crazy Slash"
	CrazySlash.TextColor3 = Color3.new(1, 1, 1)
	CrazySlash.TextSize = 15
	
	Pull.Name = "Pull"
	Pull.Parent = ScrollingFrameR15
	Pull.BackgroundColor3 = Color3.new(0, 0, 0)
	Pull.BackgroundTransparency = 0.30000001192093
	Pull.Position = UDim2.new(0.507042229, 0, 0.213602722, 0)
	Pull.Size = UDim2.new(0, 90, 0, 30)
	Pull.Font = Enum.Font.SourceSansSemibold
	Pull.Text = "Pull"
	Pull.TextColor3 = Color3.new(1, 1, 1)
	Pull.TextSize = 15
	
	Open.Name = "Open"
	Open.Parent = ScrollingFrameR15
	Open.BackgroundColor3 = Color3.new(0, 0, 0)
	Open.BackgroundTransparency = 0.30000001192093
	Open.Position = UDim2.new(0.732394338, 0, 0.213602722, 0)
	Open.Size = UDim2.new(0, 90, 0, 30)
	Open.Font = Enum.Font.SourceSansSemibold
	Open.Text = "Open"
	Open.TextColor3 = Color3.new(1, 1, 1)
	Open.TextSize = 15
	
	CircleArm.Name = "CircleArm"
	CircleArm.Parent = ScrollingFrameR15
	CircleArm.BackgroundColor3 = Color3.new(0, 0, 0)
	CircleArm.BackgroundTransparency = 0.30000001192093
	CircleArm.Position = UDim2.new(0.0563380271, 0, 0.386679649, 0)
	CircleArm.Size = UDim2.new(0, 90, 0, 30)
	CircleArm.Font = Enum.Font.SourceSansSemibold
	CircleArm.Text = "Circle Arm"
	CircleArm.TextColor3 = Color3.new(1, 1, 1)
	CircleArm.TextSize = 15
	
	Bend.Name = "Bend"
	Bend.Parent = ScrollingFrameR15
	Bend.BackgroundColor3 = Color3.new(0, 0, 0)
	Bend.BackgroundTransparency = 0.30000001192093
	Bend.Position = UDim2.new(0.28169015, 0, 0.386679649, 0)
	Bend.Size = UDim2.new(0, 90, 0, 30)
	Bend.Font = Enum.Font.SourceSansSemibold
	Bend.Text = "Bend"
	Bend.TextColor3 = Color3.new(1, 1, 1)
	Bend.TextSize = 15
	
	RotateSlash.Name = "RotateSlash"
	RotateSlash.Parent = ScrollingFrameR15
	RotateSlash.BackgroundColor3 = Color3.new(0, 0, 0)
	RotateSlash.BackgroundTransparency = 0.30000001192093
	RotateSlash.Position = UDim2.new(0.507042229, 0, 0.386679649, 0)
	RotateSlash.Size = UDim2.new(0, 90, 0, 30)
	RotateSlash.Font = Enum.Font.SourceSansSemibold
	RotateSlash.Text = "Rotate Slash"
	RotateSlash.TextColor3 = Color3.new(1, 1, 1)
	RotateSlash.TextSize = 15
	
	FlingArms.Name = "FlingArms"
	FlingArms.Parent = ScrollingFrameR15
	FlingArms.BackgroundColor3 = Color3.new(0, 0, 0)
	FlingArms.BackgroundTransparency = 0.30000001192093
	FlingArms.Position = UDim2.new(0.732394338, 0, 0.386679649, 0)
	FlingArms.Size = UDim2.new(0, 90, 0, 30)
	FlingArms.Font = Enum.Font.SourceSansSemibold
	FlingArms.Text = "Fling Arms"
	FlingArms.TextColor3 = Color3.new(1, 1, 1)
	FlingArms.TextSize = 15
	
	SideFrame.Name = "SideFrame"
	SideFrame.Active = true
	SideFrame.Draggable = true
	SideFrame.Visible = false
	SideFrame.Parent = Energize
	SideFrame.BackgroundColor3 = Color3.new(0.0823529, 0.0823529, 0.0823529)
	SideFrame.BackgroundTransparency = 0.15000000596046
	SideFrame.Position = UDim2.new(0.502199769, 0, 0.55104512, 0)
	SideFrame.Size = UDim2.new(0, 426, 0, 25)
	
	OpenGUI.Name = "OpenGUI"
	OpenGUI.Parent = SideFrame
	OpenGUI.BackgroundColor3 = Color3.new(0, 0, 0)
	OpenGUI.BackgroundTransparency = 0.15000000596046
	OpenGUI.BorderSizePixel = 0
	OpenGUI.Position = UDim2.new(0.967136145, 0, 0, 0)
	OpenGUI.Size = UDim2.new(0, 15, 0, 15)
	OpenGUI.Font = Enum.Font.SourceSansSemibold
	OpenGUI.Text = "X"
	OpenGUI.TextColor3 = Color3.new(1, 1, 1)
	OpenGUI.TextSize = 14
	
	SideFrameTitle.Name = "SideFrameTitle"
	SideFrameTitle.Parent = SideFrame
	SideFrameTitle.BackgroundColor3 = Color3.new(1, 1, 1)
	SideFrameTitle.BackgroundTransparency = 1
	SideFrameTitle.Position = UDim2.new(0.364739805, 0, 0, 0)
	SideFrameTitle.Size = UDim2.new(0, 115, 0, 25)
	SideFrameTitle.Font = Enum.Font.SourceSansSemibold
	SideFrameTitle.Text = "Energize Remake"
	SideFrameTitle.TextColor3 = Color3.new(1, 1, 1)
	SideFrameTitle.TextSize = 17
	-- Scripts:
	col = Color3.fromRGB(0, 0, 0)
	loc = Color3.fromRGB(255, 117, 19)
	rcol = Color3.fromRGB(0, 0, 0)
	rloc = Color3.fromRGB(255, 117, 19)
	
	CloseGUI.MouseButton1Click:connect(function()
	MainFrame.Visible = false
	SideFrame.Visible = true
	SideFrame.Position = MainFrame.Position
	end)
	
	OpenGUI.MouseButton1Click:connect(function()
	MainFrame.Visible = true
	SideFrame.Visible = false
	MainFrame.Position = SideFrame.Position
	end)
	
	if (game:GetService"Players".LocalPlayer.Character:WaitForChild("Humanoid").RigType == Enum.HumanoidRigType.R15) then
		ScrollingFrame.Visible = false
		ScrollingFrameR15.Visible = true
		CheckR.Text = "Showing R15 Animations"
	else
		ScrollingFrame.Visible = true
		ScrollingFrameR15.Visible = false
		CheckR.Text = "Showing R6 Animations"
	end
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://35154961"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local HeadThrowACTIVE = false
	HeadThrow.MouseButton1Click:connect(function()
		HeadThrowACTIVE = not HeadThrowACTIVE
		if HeadThrowACTIVE then
			HeadThrow.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if HeadThrowACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			HeadThrow.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://121572214"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local FloatingHeadACTIVE = false
	FloatingHead.MouseButton1Click:connect(function()
		FloatingHeadACTIVE = not FloatingHeadACTIVE
		if FloatingHeadACTIVE then
			track:Play(.1, 1, 1)
			FloatingHead.BackgroundColor3 = loc
		else
			track:Stop()
			FloatingHead.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://182724289"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local CrouchACTIVE = false
	Crouch.MouseButton1Click:connect(function()
		CrouchACTIVE = not CrouchACTIVE
		if CrouchACTIVE then
			track:Play(.1, 1, 1)
			Crouch.BackgroundColor3 = loc
		else
			track:Stop()
			Crouch.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://282574440"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local FloorCrawlACTIVE = false
	FloorCrawl.MouseButton1Click:connect(function()
		FloorCrawlACTIVE = not FloorCrawlACTIVE
		if FloorCrawlACTIVE then
			track:Play(.1, 1, 1)
			FloorCrawl.BackgroundColor3 = loc
		else
			track:Stop()
			FloorCrawl.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://204328711"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local DinoWalkACTIVE = false
	DinoWalk.MouseButton1Click:connect(function()
		DinoWalkACTIVE = not DinoWalkACTIVE
		if DinoWalkACTIVE then
			track:Play(.1, 1, 1)
			DinoWalk.BackgroundColor3 = loc
		else
			track:Stop()
			DinoWalk.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://429681631"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local JumpingJacksACTIVE = false
	JumpingJacks.MouseButton1Click:connect(function()
		JumpingJacksACTIVE = not JumpingJacksACTIVE
		if JumpingJacksACTIVE then
			track:Play(.1, 1, 1)
			JumpingJacks.BackgroundColor3 = loc
		else
			track:Stop()
			JumpingJacks.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://35154961"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local LoopHeadACTIVE = false
	LoopHead.MouseButton1Click:connect(function()
		LoopHeadACTIVE = not LoopHeadACTIVE
		if LoopHeadACTIVE then
			LoopHead.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if LoopHeadACTIVE then
					track:Play(.5, 1, 1e6)
				end
			 end
			end
		else
			track:Stop()
			LoopHead.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://184574340"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local HeroJumpACTIVE = false
	HeroJump.MouseButton1Click:connect(function()
		HeroJumpACTIVE = not HeroJumpACTIVE
		if HeroJumpACTIVE then
			HeroJump.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if HeroJumpACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			HeroJump.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://181526230"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local FaintACTIVE = false
	Faint.MouseButton1Click:connect(function()
		FaintACTIVE = not FaintACTIVE
		if FaintACTIVE then
			track:Play(.1, 1, 1)
			Faint.BackgroundColor3 = loc
		else
			track:Stop()
			Faint.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://181525546"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local FloorFaintACTIVE = false
	FloorFaint.MouseButton1Click:connect(function()
		FloorFaintACTIVE = not FloorFaintACTIVE
		if FloorFaintACTIVE then
			FloorFaint.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if FloorFaintACTIVE then
					track:Play(.1, 1, 2)
				end
			 end
			end
		else
			track:Stop()
			FloorFaint.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://181525546"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local SuperFaintACTIVE = false
	SuperFaint.MouseButton1Click:connect(function()
		SuperFaintACTIVE = not SuperFaintACTIVE
		if SuperFaintACTIVE then
			SuperFaint.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if SuperFaintACTIVE then
					track:Play(.1, 0.5, 40)
				end
			 end
			end
		else
			track:Stop()
			SuperFaint.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://313762630"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local LevitateACTIVE = false
	Levitate.MouseButton1Click:connect(function()
		LevitateACTIVE = not LevitateACTIVE
		if LevitateACTIVE then
			track:Play(.1, 1, 1)
			Levitate.BackgroundColor3 = loc
		else
			track:Stop()
			Levitate.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://183412246"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local DabACTIVE = false
	Dab.MouseButton1Click:connect(function()
		DabACTIVE = not DabACTIVE
		if DabACTIVE then
			Dab.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if DabACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			Dab.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://188632011"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local SpinACTIVE = false
	Spinner.MouseButton1Click:connect(function()
		SpinACTIVE = not SpinACTIVE
		if SpinACTIVE then
			Spinner.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if SpinACTIVE then
					track:Play(.1, 1, 2)
				end
			 end
			end
		else
			track:Stop()
			Spinner.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://179224234"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local FloatSitACTIVE = false
	FloatSit.MouseButton1Click:connect(function()
		FloatSitACTIVE = not FloatSitACTIVE
		if FloatSitACTIVE then
			track:Play(.1, 1, 1)
			FloatSit.BackgroundColor3 = loc
		else
			track:Stop()
			FloatSit.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://429703734"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local MovingDanceACTIVE = false
	MovingDance.MouseButton1Click:connect(function()
		MovingDanceACTIVE = not MovingDanceACTIVE
		if MovingDanceACTIVE then
			MovingDance.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if MovingDanceACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			MovingDance.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://215384594"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local WeirdMoveACTIVE = false
	WeirdMove.MouseButton1Click:connect(function()
		WeirdMoveACTIVE = not WeirdMoveACTIVE
		if WeirdMoveACTIVE then
			track:Play(.1, 1, 1)
			WeirdMove.BackgroundColor3 = loc
		else
			track:Stop()
			WeirdMove.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://215384594"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local CloneIllusionACTIVE = false
	CloneIllusion.MouseButton1Click:connect(function()
		CloneIllusionACTIVE = not CloneIllusionACTIVE
		if CloneIllusionACTIVE then
			track:Play(.5, 1, 1e7)
			CloneIllusion.BackgroundColor3 = loc
		else
			track:Stop()
			CloneIllusion.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://313762630"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local GlitchLevitateACTIVE = false
	GlitchLevitate.MouseButton1Click:connect(function()
		GlitchLevitateACTIVE = not GlitchLevitateACTIVE
		if GlitchLevitateACTIVE then
			track:Play(.5, 1, 1e7)
			GlitchLevitate.BackgroundColor3 = loc
		else
			track:Stop()
			GlitchLevitate.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://429730430"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local SpinDanceACTIVE = false
	SpinDance.MouseButton1Click:connect(function()
		SpinDanceACTIVE = not SpinDanceACTIVE
		if SpinDanceACTIVE then
			SpinDance.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if SpinDanceACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			SpinDance.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://45834924"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local MoonDanceACTIVE = false
	MoonDance.MouseButton1Click:connect(function()
		MoonDanceACTIVE = not MoonDanceACTIVE
		if MoonDanceACTIVE then
			MoonDance.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if MoonDanceACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			MoonDance.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://204062532"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local FullPunchACTIVE = false
	FullPunch.MouseButton1Click:connect(function()
		FullPunchACTIVE = not FullPunchACTIVE
		if FullPunchACTIVE then
			FullPunch.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if FullPunchACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			FullPunch.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://186934910"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local SpinDance2ACTIVE = false
	SpinDance2.MouseButton1Click:connect(function()
		SpinDance2ACTIVE = not SpinDance2ACTIVE
		if SpinDance2ACTIVE then
			SpinDance2.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if SpinDance2ACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			SpinDance2.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://204292303"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local BowDownACTIVE = false
	BowDown.MouseButton1Click:connect(function()
		BowDownACTIVE = not BowDownACTIVE
		if BowDownACTIVE then
			BowDown.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if BowDownACTIVE then
					track:Play(.1, 1, 3)
				end
			 end
			end
		else
			track:Stop()
			BowDown.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://204295235"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local SwordSlamACTIVE = false
	SwordSlam.MouseButton1Click:connect(function()
		SwordSlamACTIVE = not SwordSlamACTIVE
		if SwordSlamACTIVE then
			SwordSlam.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if SwordSlamACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			SwordSlam.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://204295235"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local LoopSlamACTIVE = false
	LoopSlam.MouseButton1Click:connect(function()
		LoopSlamACTIVE = not LoopSlamACTIVE
		if LoopSlamACTIVE then
			LoopSlam.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if LoopSlamACTIVE then
					track:Play(.1, 1, 1e4)
				end
			 end
			end
		else
			track:Stop()
			LoopSlam.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://184574340"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local MegaInsaneACTIVE = false
	MegaInsane.MouseButton1Click:connect(function()
		MegaInsaneACTIVE = not MegaInsaneACTIVE
		if MegaInsaneACTIVE then
			MegaInsane.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if MegaInsaneACTIVE then
					track:Play(.1, 0.5, 40)
				end
			 end
			end
		else
			track:Stop()
			MegaInsane.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://126753849"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local SuperPunchACTIVE = false
	SuperPunch.MouseButton1Click:connect(function()
		SuperPunchACTIVE = not SuperPunchACTIVE
		if SuperPunchACTIVE then
			SuperPunch.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if SuperPunchACTIVE then
					track:Play(.1, 1, 3)
				end
			 end
			end
		else
			track:Stop()
			SuperPunch.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://218504594"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local FullSwingACTIVE = false
	FullSwing.MouseButton1Click:connect(function()
		FullSwingACTIVE = not FullSwingACTIVE
		if FullSwingACTIVE then
			FullSwing.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if FullSwingACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			FullSwing.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://259438880"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local ArmTurbineACTIVE = false
	ArmTurbine.MouseButton1Click:connect(function()
		ArmTurbineACTIVE = not ArmTurbineACTIVE
		if ArmTurbineACTIVE then
			track:Play(.1, 1, 1e3)
			ArmTurbine.BackgroundColor3 = loc
		else
			track:Stop()
			ArmTurbine.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://136801964"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local BarrelRollACTIVE = false
	BarrelRoll.MouseButton1Click:connect(function()
		BarrelRollACTIVE = not BarrelRollACTIVE
		if BarrelRollACTIVE then
			BarrelRoll.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if BarrelRollACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			BarrelRoll.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://180612465"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local ScaredACTIVE = false
	Scared.MouseButton1Click:connect(function()
		ScaredACTIVE = not ScaredACTIVE
		if ScaredACTIVE then
			Scared.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if ScaredACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			Scared.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://33796059"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local InsaneACTIVE = false
	Insane.MouseButton1Click:connect(function()
		InsaneACTIVE = not InsaneACTIVE
		if InsaneACTIVE then
			track:Play(.1, 1, 1e8)
			Insane.BackgroundColor3 = loc
		else
			track:Stop()
			Insane.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://33169583"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local ArmDetachACTIVE = false
	ArmDetach.MouseButton1Click:connect(function()
		ArmDetachACTIVE = not ArmDetachACTIVE
		if ArmDetachACTIVE then
			ArmDetach.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if ArmDetachACTIVE then
					track:Play(.1, 1, 1e6)
				end
			 end
			end
		else
			track:Stop()
			ArmDetach.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://35978879"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local SwordSliceACTIVE = false
	SwordSlice.MouseButton1Click:connect(function()
		SwordSliceACTIVE = not SwordSliceACTIVE
		if SwordSliceACTIVE then
			track:Play(.1, 1, 1)
			SwordSlice.BackgroundColor3 = loc
		else
			track:Stop()
			SwordSlice.BackgroundColor3 = col
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://27432691"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local InsaneArmsACTIVE = false
	InsaneArms.MouseButton1Click:connect(function()
		InsaneArmsACTIVE = not InsaneArmsACTIVE
		if InsaneArmsACTIVE then
			InsaneArms.BackgroundColor3 = loc
			while wait() do
			 if track.IsPlaying == false then
				if InsaneArmsACTIVE then
					track:Play(.1, 1, 1e4)
				end
			 end
			end
		else
			track:Stop()
			InsaneArms.BackgroundColor3 = col
		end
	end)
	-- R15
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://674871189"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local CrazySlashACTIVE = false
	CrazySlash.MouseButton1Click:connect(function()
		CrazySlashACTIVE = not CrazySlashACTIVE
		if CrazySlashACTIVE then
			CrazySlash.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if CrazySlashACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			CrazySlash.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://582855105"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local OpenACTIVE = false
	Open.MouseButton1Click:connect(function()
		OpenACTIVE = not OpenACTIVE
		if OpenACTIVE then
			Open.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if OpenACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			Open.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://754658275"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local R15SpinnerACTIVE = false
	R15Spinner.MouseButton1Click:connect(function()
		R15SpinnerACTIVE = not R15SpinnerACTIVE
		if R15SpinnerACTIVE then
			R15Spinner.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if R15SpinnerACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			R15Spinner.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://582384156"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local ArmsOutACTIVE = false
	ArmsOut.MouseButton1Click:connect(function()
		ArmsOutACTIVE = not ArmsOutACTIVE
		if ArmsOutACTIVE then
			ArmsOut.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if ArmsOutACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			ArmsOut.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://717879555"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	local FloatSlashACTIVE = false
	FloatSlash.MouseButton1Click:connect(function()
		FloatSlashACTIVE = not FloatSlashACTIVE
		if FloatSlashACTIVE then
			FloatSlash.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if FloatSlashACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			FloatSlash.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://708553116"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	WeirdZombieACTIVE = false
	WeirdZombie.MouseButton1Click:connect(function()
		WeirdZombieACTIVE = not WeirdZombieACTIVE
		if WeirdZombieACTIVE then
			WeirdZombie.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if WeirdZombieACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			WeirdZombie.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://746398327"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	DownSlashACTIVE = false
	DownSlash.MouseButton1Click:connect(function()
		DownSlashACTIVE = not DownSlashACTIVE
		if DownSlashACTIVE then
			DownSlash.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if DownSlashACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			DownSlash.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://675025795"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	PullACTIVE = false
	Pull.MouseButton1Click:connect(function()
		PullACTIVE = not PullACTIVE
		if PullACTIVE then
			Pull.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if PullACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			Pull.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://698251653"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	CircleArmACTIVE = false
	CircleArm.MouseButton1Click:connect(function()
		CircleArmACTIVE = not CircleArmACTIVE
		if CircleArmACTIVE then
			CircleArm.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if CircleArmACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			CircleArm.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://696096087"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	BendACTIVE = false
	Bend.MouseButton1Click:connect(function()
		BendACTIVE = not BendACTIVE
		if BendACTIVE then
			Bend.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if BendACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			Bend.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://675025570"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	RotateSlashACTIVE = false
	RotateSlash.MouseButton1Click:connect(function()
		RotateSlashACTIVE = not RotateSlashACTIVE
		if RotateSlashACTIVE then
			RotateSlash.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if RotateSlashACTIVE then
					track:Play(.1, 1, 1)
				end
			 end
			end
		else
			track:Stop()
			RotateSlash.BackgroundColor3 = rcol
		end
	end)
	
	local Anim = Instance.new("Animation")
	Anim.AnimationId = "rbxassetid://754656200"
	local track = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	FlingArmsACTIVE = false
	FlingArms.MouseButton1Click:connect(function()
		FlingArmsACTIVE = not FlingArmsACTIVE
		if FlingArmsACTIVE then
			FlingArms.BackgroundColor3 = rloc
			while wait() do
			 if track.IsPlaying == false then
				if FlingArmsACTIVE then
					track:Play(.1, 1, 10)
				end
			 end
			end
		else
			track:Stop()
			FlingArms.BackgroundColor3 = rcol
		end
	end)
end)()

	else
		load(TextBox.ContentText, getfenv())()
	end
end)

effect:click(clear, function()
	game:GetService('TweenService'):Create(
	clear,
	TweenInfo.new(
		0.2,
		Enum.EasingStyle.Quint,
		Enum.EasingDirection.Out,
		0, true
	),
	{
		['ImageTransparency'] = 1
	}
	):Play()
	TextBox.Text = "cleared"
	task.wait(0.5)
	TextBox.Text = ""
end)

local txt = game:GetService("TextService")
TextBox:GetPropertyChangedSignal("Text"):Connect(function()
	local size = txt:GetTextSize(TextBox.Text, TextBox.TextSize, TextBox.Font, Vector2.new(TextBox.AbsoluteSize.X, math.huge))
	ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, size.Y + 1)
end)

local uis = game:GetService("UserInputService")
local alt = false
uis.InputBegan:Connect(function(i : InputObject, gp : boolean)
	if gp then return end
	if (uis:IsKeyDown(Enum.KeyCode.LeftAlt) or uis:IsKeyDown(Enum.KeyCode.RightAlt)) then
		alt = true
	end
	if uis:IsKeyDown(Enum.KeyCode.Q) and alt then
		RC2Ui.Enabled = not RC2Ui.Enabled
		alt = false
	end
end)
